com.google.gdata.util.common.base.Escaper -> com.google.gdata.util.common.base.DIh:
    java.lang.String escape(java.lang.String) -> DIh
    java.lang.Appendable escape(java.lang.Appendable) -> DIh
com.google.gdata.util.common.base.PercentEscaper -> com.google.gdata.util.common.base.jqA:
    java.lang.String SAFECHARS_URLENCODER -> DIh
    java.lang.String SAFEPATHCHARS_URLENCODER -> jqA
    java.lang.String SAFEQUERYSTRINGCHARS_URLENCODER -> AmB
    char[] URI_ESCAPED_SPACE -> JZD
    char[] UPPER_HEX_DIGITS -> AMb
    boolean plusForSpace -> jLa
    boolean[] safeOctets -> diH
    boolean[] createSafeOctets(java.lang.String) -> jqA
    int nextEscapeIndex(java.lang.CharSequence,int,int) -> DIh
    java.lang.String escape(java.lang.String) -> DIh
    char[] escape(int) -> DIh
com.google.gdata.util.common.base.UnicodeEscaper -> com.google.gdata.util.common.base.AmB:
    int DEST_PAD -> DIh
    java.lang.ThreadLocal DEST_TL -> jqA
    boolean $assertionsDisabled -> AmB
    char[] escape(int) -> DIh
    int nextEscapeIndex(java.lang.CharSequence,int,int) -> DIh
    java.lang.String escape(java.lang.String) -> DIh
    java.lang.String escapeSlow(java.lang.String,int) -> DIh
    java.lang.Appendable escape(java.lang.Appendable) -> DIh
    int codePointAt(java.lang.CharSequence,int,int) -> jqA
    char[] growBuffer(char[],int,int) -> DIh
com.google.gdata.util.common.base.UnicodeEscaper$1 -> com.google.gdata.util.common.base.JZD:
    int pendingHighSurrogate -> DIh
    char[] decodedChars -> jqA
    java.lang.Appendable val$out -> AmB
    com.google.gdata.util.common.base.UnicodeEscaper this$0 -> JZD
    java.lang.Appendable append(java.lang.CharSequence) -> append
    java.lang.Appendable append(java.lang.CharSequence,int,int) -> append
    java.lang.Appendable append(char) -> append
    void outputChars(char[],int) -> DIh
com.google.gdata.util.common.base.UnicodeEscaper$2 -> com.google.gdata.util.common.base.AMb:
    char[] initialValue() -> DIh
    java.lang.Object initialValue() -> initialValue
org.apache.commons.codec.BinaryDecoder -> org.apache.commons.codec.BinaryDecoder:
    byte[] decode(byte[]) -> decode
org.apache.commons.codec.BinaryEncoder -> org.apache.commons.codec.BinaryEncoder:
    byte[] encode(byte[]) -> encode
org.apache.commons.codec.CharEncoding -> org.apache.commons.codec.CharEncoding:
    java.lang.String ISO_8859_1 -> ISO_8859_1
    java.lang.String US_ASCII -> US_ASCII
    java.lang.String UTF_16 -> UTF_16
    java.lang.String UTF_16BE -> UTF_16BE
    java.lang.String UTF_16LE -> UTF_16LE
    java.lang.String UTF_8 -> UTF_8
org.apache.commons.codec.Charsets -> org.apache.commons.codec.Charsets:
    java.nio.charset.Charset ISO_8859_1 -> ISO_8859_1
    java.nio.charset.Charset US_ASCII -> US_ASCII
    java.nio.charset.Charset UTF_16 -> UTF_16
    java.nio.charset.Charset UTF_16BE -> UTF_16BE
    java.nio.charset.Charset UTF_16LE -> UTF_16LE
    java.nio.charset.Charset UTF_8 -> UTF_8
    java.nio.charset.Charset toCharset(java.nio.charset.Charset) -> toCharset
    java.nio.charset.Charset toCharset(java.lang.String) -> toCharset
org.apache.commons.codec.Decoder -> org.apache.commons.codec.Decoder:
    java.lang.Object decode(java.lang.Object) -> decode
org.apache.commons.codec.DecoderException -> org.apache.commons.codec.DecoderException:
    long serialVersionUID -> serialVersionUID
org.apache.commons.codec.Encoder -> org.apache.commons.codec.Encoder:
    java.lang.Object encode(java.lang.Object) -> encode
org.apache.commons.codec.EncoderException -> org.apache.commons.codec.EncoderException:
    long serialVersionUID -> serialVersionUID
org.apache.commons.codec.StringDecoder -> org.apache.commons.codec.StringDecoder:
    java.lang.String decode(java.lang.String) -> decode
org.apache.commons.codec.StringEncoder -> org.apache.commons.codec.StringEncoder:
    java.lang.String encode(java.lang.String) -> encode
org.apache.commons.codec.StringEncoderComparator -> org.apache.commons.codec.StringEncoderComparator:
    org.apache.commons.codec.StringEncoder stringEncoder -> stringEncoder
    int compare(java.lang.Object,java.lang.Object) -> compare
org.apache.commons.codec.binary.Base32 -> org.apache.commons.codec.binary.Base32:
    int BITS_PER_ENCODED_BYTE -> BITS_PER_ENCODED_BYTE
    int BYTES_PER_ENCODED_BLOCK -> BYTES_PER_ENCODED_BLOCK
    int BYTES_PER_UNENCODED_BLOCK -> BYTES_PER_UNENCODED_BLOCK
    byte[] CHUNK_SEPARATOR -> CHUNK_SEPARATOR
    byte[] DECODE_TABLE -> DECODE_TABLE
    byte[] ENCODE_TABLE -> ENCODE_TABLE
    byte[] HEX_DECODE_TABLE -> HEX_DECODE_TABLE
    byte[] HEX_ENCODE_TABLE -> HEX_ENCODE_TABLE
    int MASK_5BITS -> MASK_5BITS
    int decodeSize -> decodeSize
    byte[] decodeTable -> decodeTable
    int encodeSize -> encodeSize
    byte[] encodeTable -> encodeTable
    byte[] lineSeparator -> lineSeparator
    void decode(byte[],int,int,org.apache.commons.codec.binary.BaseNCodec$Context) -> decode
    void encode(byte[],int,int,org.apache.commons.codec.binary.BaseNCodec$Context) -> encode
    boolean isInAlphabet(byte) -> isInAlphabet
org.apache.commons.codec.binary.Base32InputStream -> org.apache.commons.codec.binary.Base32InputStream:
org.apache.commons.codec.binary.Base32OutputStream -> org.apache.commons.codec.binary.Base32OutputStream:
org.apache.commons.codec.binary.Base64 -> org.apache.commons.codec.binary.Base64:
    int BITS_PER_ENCODED_BYTE -> BITS_PER_ENCODED_BYTE
    int BYTES_PER_UNENCODED_BLOCK -> BYTES_PER_UNENCODED_BLOCK
    int BYTES_PER_ENCODED_BLOCK -> BYTES_PER_ENCODED_BLOCK
    byte[] CHUNK_SEPARATOR -> CHUNK_SEPARATOR
    byte[] STANDARD_ENCODE_TABLE -> STANDARD_ENCODE_TABLE
    byte[] URL_SAFE_ENCODE_TABLE -> URL_SAFE_ENCODE_TABLE
    byte[] DECODE_TABLE -> DECODE_TABLE
    int MASK_6BITS -> MASK_6BITS
    byte[] encodeTable -> encodeTable
    byte[] decodeTable -> decodeTable
    byte[] lineSeparator -> lineSeparator
    int decodeSize -> decodeSize
    int encodeSize -> encodeSize
    boolean isUrlSafe() -> isUrlSafe
    void encode(byte[],int,int,org.apache.commons.codec.binary.BaseNCodec$Context) -> encode
    void decode(byte[],int,int,org.apache.commons.codec.binary.BaseNCodec$Context) -> decode
    boolean isArrayByteBase64(byte[]) -> isArrayByteBase64
    boolean isBase64(byte) -> isBase64
    boolean isBase64(java.lang.String) -> isBase64
    boolean isBase64(byte[]) -> isBase64
    byte[] encodeBase64(byte[]) -> encodeBase64
    java.lang.String encodeBase64String(byte[]) -> encodeBase64String
    byte[] encodeBase64URLSafe(byte[]) -> encodeBase64URLSafe
    java.lang.String encodeBase64URLSafeString(byte[]) -> encodeBase64URLSafeString
    byte[] encodeBase64Chunked(byte[]) -> encodeBase64Chunked
    byte[] encodeBase64(byte[],boolean) -> encodeBase64
    byte[] encodeBase64(byte[],boolean,boolean) -> encodeBase64
    byte[] encodeBase64(byte[],boolean,boolean,int) -> encodeBase64
    byte[] decodeBase64(java.lang.String) -> decodeBase64
    byte[] decodeBase64(byte[]) -> decodeBase64
    java.math.BigInteger decodeInteger(byte[]) -> decodeInteger
    byte[] encodeInteger(java.math.BigInteger) -> encodeInteger
    byte[] toIntegerBytes(java.math.BigInteger) -> toIntegerBytes
    boolean isInAlphabet(byte) -> isInAlphabet
org.apache.commons.codec.binary.Base64InputStream -> org.apache.commons.codec.binary.Base64InputStream:
org.apache.commons.codec.binary.Base64OutputStream -> org.apache.commons.codec.binary.Base64OutputStream:
org.apache.commons.codec.binary.BaseNCodec -> org.apache.commons.codec.binary.BaseNCodec:
    int EOF -> EOF
    int MIME_CHUNK_SIZE -> MIME_CHUNK_SIZE
    int PEM_CHUNK_SIZE -> PEM_CHUNK_SIZE
    int DEFAULT_BUFFER_RESIZE_FACTOR -> DEFAULT_BUFFER_RESIZE_FACTOR
    int DEFAULT_BUFFER_SIZE -> DEFAULT_BUFFER_SIZE
    int MASK_8BITS -> MASK_8BITS
    byte PAD_DEFAULT -> PAD_DEFAULT
    byte PAD -> PAD
    byte pad -> pad
    int unencodedBlockSize -> unencodedBlockSize
    int encodedBlockSize -> encodedBlockSize
    int lineLength -> lineLength
    int chunkSeparatorLength -> chunkSeparatorLength
    boolean hasData(org.apache.commons.codec.binary.BaseNCodec$Context) -> hasData
    int available(org.apache.commons.codec.binary.BaseNCodec$Context) -> available
    int getDefaultBufferSize() -> getDefaultBufferSize
    byte[] resizeBuffer(org.apache.commons.codec.binary.BaseNCodec$Context) -> resizeBuffer
    byte[] ensureBufferSize(int,org.apache.commons.codec.binary.BaseNCodec$Context) -> ensureBufferSize
    int readResults(byte[],int,int,org.apache.commons.codec.binary.BaseNCodec$Context) -> readResults
    boolean isWhiteSpace(byte) -> isWhiteSpace
    java.lang.Object encode(java.lang.Object) -> encode
    java.lang.String encodeToString(byte[]) -> encodeToString
    java.lang.String encodeAsString(byte[]) -> encodeAsString
    java.lang.Object decode(java.lang.Object) -> decode
    byte[] decode(java.lang.String) -> decode
    byte[] decode(byte[]) -> decode
    byte[] encode(byte[]) -> encode
    void encode(byte[],int,int,org.apache.commons.codec.binary.BaseNCodec$Context) -> encode
    void decode(byte[],int,int,org.apache.commons.codec.binary.BaseNCodec$Context) -> decode
    boolean isInAlphabet(byte) -> isInAlphabet
    boolean isInAlphabet(byte[],boolean) -> isInAlphabet
    boolean isInAlphabet(java.lang.String) -> isInAlphabet
    boolean containsAlphabetOrPad(byte[]) -> containsAlphabetOrPad
    long getEncodedLength(byte[]) -> getEncodedLength
org.apache.commons.codec.binary.BaseNCodec$Context -> org.apache.commons.codec.binary.BaseNCodec$Context:
    int ibitWorkArea -> ibitWorkArea
    long lbitWorkArea -> lbitWorkArea
    byte[] buffer -> buffer
    int pos -> pos
    int readPos -> readPos
    boolean eof -> eof
    int currentLinePos -> currentLinePos
    int modulus -> modulus
    java.lang.String toString() -> toString
org.apache.commons.codec.binary.BaseNCodecInputStream -> org.apache.commons.codec.binary.BaseNCodecInputStream:
    org.apache.commons.codec.binary.BaseNCodec baseNCodec -> baseNCodec
    boolean doEncode -> doEncode
    byte[] singleByte -> singleByte
    org.apache.commons.codec.binary.BaseNCodec$Context context -> context
    int available() -> available
    void mark(int) -> mark
    boolean markSupported() -> markSupported
    int read() -> read
    int read(byte[],int,int) -> read
    void reset() -> reset
    long skip(long) -> skip
org.apache.commons.codec.binary.BaseNCodecOutputStream -> org.apache.commons.codec.binary.BaseNCodecOutputStream:
    boolean doEncode -> doEncode
    org.apache.commons.codec.binary.BaseNCodec baseNCodec -> baseNCodec
    byte[] singleByte -> singleByte
    org.apache.commons.codec.binary.BaseNCodec$Context context -> context
    void write(int) -> write
    void write(byte[],int,int) -> write
    void flush(boolean) -> flush
    void flush() -> flush
    void close() -> close
org.apache.commons.codec.binary.BinaryCodec -> org.apache.commons.codec.binary.BinaryCodec:
    char[] EMPTY_CHAR_ARRAY -> EMPTY_CHAR_ARRAY
    byte[] EMPTY_BYTE_ARRAY -> EMPTY_BYTE_ARRAY
    int BIT_0 -> BIT_0
    int BIT_1 -> BIT_1
    int BIT_2 -> BIT_2
    int BIT_3 -> BIT_3
    int BIT_4 -> BIT_4
    int BIT_5 -> BIT_5
    int BIT_6 -> BIT_6
    int BIT_7 -> BIT_7
    int[] BITS -> BITS
    byte[] encode(byte[]) -> encode
    java.lang.Object encode(java.lang.Object) -> encode
    java.lang.Object decode(java.lang.Object) -> decode
    byte[] decode(byte[]) -> decode
    byte[] toByteArray(java.lang.String) -> toByteArray
    byte[] fromAscii(char[]) -> fromAscii
    byte[] fromAscii(byte[]) -> fromAscii
    boolean isEmpty(byte[]) -> isEmpty
    byte[] toAsciiBytes(byte[]) -> toAsciiBytes
    char[] toAsciiChars(byte[]) -> toAsciiChars
    java.lang.String toAsciiString(byte[]) -> toAsciiString
org.apache.commons.codec.binary.CharSequenceUtils -> org.apache.commons.codec.binary.CharSequenceUtils:
    boolean regionMatches(java.lang.CharSequence,boolean,int,java.lang.CharSequence,int,int) -> regionMatches
org.apache.commons.codec.binary.Hex -> org.apache.commons.codec.binary.Hex:
    java.nio.charset.Charset DEFAULT_CHARSET -> DEFAULT_CHARSET
    java.lang.String DEFAULT_CHARSET_NAME -> DEFAULT_CHARSET_NAME
    char[] DIGITS_LOWER -> DIGITS_LOWER
    char[] DIGITS_UPPER -> DIGITS_UPPER
    java.nio.charset.Charset charset -> charset
    byte[] decodeHex(char[]) -> decodeHex
    char[] encodeHex(byte[]) -> encodeHex
    char[] encodeHex(byte[],boolean) -> encodeHex
    char[] encodeHex(byte[],char[]) -> encodeHex
    java.lang.String encodeHexString(byte[]) -> encodeHexString
    int toDigit(char,int) -> toDigit
    byte[] decode(byte[]) -> decode
    java.lang.Object decode(java.lang.Object) -> decode
    byte[] encode(byte[]) -> encode
    java.lang.Object encode(java.lang.Object) -> encode
    java.nio.charset.Charset getCharset() -> getCharset
    java.lang.String getCharsetName() -> getCharsetName
    java.lang.String toString() -> toString
org.apache.commons.codec.binary.StringUtils -> org.apache.commons.codec.binary.StringUtils:
    boolean equals(java.lang.CharSequence,java.lang.CharSequence) -> equals
    byte[] getBytes(java.lang.String,java.nio.charset.Charset) -> getBytes
    byte[] getBytesIso8859_1(java.lang.String) -> getBytesIso8859_1
    byte[] getBytesUnchecked(java.lang.String,java.lang.String) -> getBytesUnchecked
    byte[] getBytesUsAscii(java.lang.String) -> getBytesUsAscii
    byte[] getBytesUtf16(java.lang.String) -> getBytesUtf16
    byte[] getBytesUtf16Be(java.lang.String) -> getBytesUtf16Be
    byte[] getBytesUtf16Le(java.lang.String) -> getBytesUtf16Le
    byte[] getBytesUtf8(java.lang.String) -> getBytesUtf8
    java.lang.IllegalStateException newIllegalStateException(java.lang.String,java.io.UnsupportedEncodingException) -> newIllegalStateException
    java.lang.String newString(byte[],java.nio.charset.Charset) -> newString
    java.lang.String newString(byte[],java.lang.String) -> newString
    java.lang.String newStringIso8859_1(byte[]) -> newStringIso8859_1
    java.lang.String newStringUsAscii(byte[]) -> newStringUsAscii
    java.lang.String newStringUtf16(byte[]) -> newStringUtf16
    java.lang.String newStringUtf16Be(byte[]) -> newStringUtf16Be
    java.lang.String newStringUtf16Le(byte[]) -> newStringUtf16Le
    java.lang.String newStringUtf8(byte[]) -> newStringUtf8
org.apache.commons.codec.digest.B64 -> org.apache.commons.codec.digest.B64:
    java.lang.String B64T -> B64T
    void b64from24bit(byte,byte,byte,int,java.lang.StringBuilder) -> b64from24bit
    java.lang.String getRandomSalt(int) -> getRandomSalt
org.apache.commons.codec.digest.Crypt -> org.apache.commons.codec.digest.Crypt:
    java.lang.String crypt(byte[]) -> crypt
    java.lang.String crypt(byte[],java.lang.String) -> crypt
    java.lang.String crypt(java.lang.String) -> crypt
    java.lang.String crypt(java.lang.String,java.lang.String) -> crypt
org.apache.commons.codec.digest.DigestUtils -> org.apache.commons.codec.digest.DigestUtils:
    int STREAM_BUFFER_LENGTH -> STREAM_BUFFER_LENGTH
    byte[] digest(java.security.MessageDigest,java.io.InputStream) -> digest
    java.security.MessageDigest getDigest(java.lang.String) -> getDigest
    java.security.MessageDigest getMd2Digest() -> getMd2Digest
    java.security.MessageDigest getMd5Digest() -> getMd5Digest
    java.security.MessageDigest getSha1Digest() -> getSha1Digest
    java.security.MessageDigest getSha256Digest() -> getSha256Digest
    java.security.MessageDigest getSha384Digest() -> getSha384Digest
    java.security.MessageDigest getSha512Digest() -> getSha512Digest
    java.security.MessageDigest getShaDigest() -> getShaDigest
    byte[] md2(byte[]) -> md2
    byte[] md2(java.io.InputStream) -> md2
    byte[] md2(java.lang.String) -> md2
    java.lang.String md2Hex(byte[]) -> md2Hex
    java.lang.String md2Hex(java.io.InputStream) -> md2Hex
    java.lang.String md2Hex(java.lang.String) -> md2Hex
    byte[] md5(byte[]) -> md5
    byte[] md5(java.io.InputStream) -> md5
    byte[] md5(java.lang.String) -> md5
    java.lang.String md5Hex(byte[]) -> md5Hex
    java.lang.String md5Hex(java.io.InputStream) -> md5Hex
    java.lang.String md5Hex(java.lang.String) -> md5Hex
    byte[] sha(byte[]) -> sha
    byte[] sha(java.io.InputStream) -> sha
    byte[] sha(java.lang.String) -> sha
    byte[] sha1(byte[]) -> sha1
    byte[] sha1(java.io.InputStream) -> sha1
    byte[] sha1(java.lang.String) -> sha1
    java.lang.String sha1Hex(byte[]) -> sha1Hex
    java.lang.String sha1Hex(java.io.InputStream) -> sha1Hex
    java.lang.String sha1Hex(java.lang.String) -> sha1Hex
    byte[] sha256(byte[]) -> sha256
    byte[] sha256(java.io.InputStream) -> sha256
    byte[] sha256(java.lang.String) -> sha256
    java.lang.String sha256Hex(byte[]) -> sha256Hex
    java.lang.String sha256Hex(java.io.InputStream) -> sha256Hex
    java.lang.String sha256Hex(java.lang.String) -> sha256Hex
    byte[] sha384(byte[]) -> sha384
    byte[] sha384(java.io.InputStream) -> sha384
    byte[] sha384(java.lang.String) -> sha384
    java.lang.String sha384Hex(byte[]) -> sha384Hex
    java.lang.String sha384Hex(java.io.InputStream) -> sha384Hex
    java.lang.String sha384Hex(java.lang.String) -> sha384Hex
    byte[] sha512(byte[]) -> sha512
    byte[] sha512(java.io.InputStream) -> sha512
    byte[] sha512(java.lang.String) -> sha512
    java.lang.String sha512Hex(byte[]) -> sha512Hex
    java.lang.String sha512Hex(java.io.InputStream) -> sha512Hex
    java.lang.String sha512Hex(java.lang.String) -> sha512Hex
    java.lang.String shaHex(byte[]) -> shaHex
    java.lang.String shaHex(java.io.InputStream) -> shaHex
    java.lang.String shaHex(java.lang.String) -> shaHex
    java.security.MessageDigest updateDigest(java.security.MessageDigest,byte[]) -> updateDigest
    java.security.MessageDigest updateDigest(java.security.MessageDigest,java.io.InputStream) -> updateDigest
    java.security.MessageDigest updateDigest(java.security.MessageDigest,java.lang.String) -> updateDigest
org.apache.commons.codec.digest.HmacAlgorithms -> org.apache.commons.codec.digest.HmacAlgorithms:
    org.apache.commons.codec.digest.HmacAlgorithms HMAC_MD5 -> HMAC_MD5
    org.apache.commons.codec.digest.HmacAlgorithms HMAC_SHA_1 -> HMAC_SHA_1
    org.apache.commons.codec.digest.HmacAlgorithms HMAC_SHA_256 -> HMAC_SHA_256
    org.apache.commons.codec.digest.HmacAlgorithms HMAC_SHA_384 -> HMAC_SHA_384
    org.apache.commons.codec.digest.HmacAlgorithms HMAC_SHA_512 -> HMAC_SHA_512
    java.lang.String algorithm -> algorithm
    org.apache.commons.codec.digest.HmacAlgorithms[] $VALUES -> $VALUES
    org.apache.commons.codec.digest.HmacAlgorithms[] values() -> values
    org.apache.commons.codec.digest.HmacAlgorithms valueOf(java.lang.String) -> valueOf
    java.lang.String toString() -> toString
org.apache.commons.codec.digest.HmacUtils -> org.apache.commons.codec.digest.HmacUtils:
    int STREAM_BUFFER_LENGTH -> STREAM_BUFFER_LENGTH
    javax.crypto.Mac getHmacMd5(byte[]) -> getHmacMd5
    javax.crypto.Mac getHmacSha1(byte[]) -> getHmacSha1
    javax.crypto.Mac getHmacSha256(byte[]) -> getHmacSha256
    javax.crypto.Mac getHmacSha384(byte[]) -> getHmacSha384
    javax.crypto.Mac getHmacSha512(byte[]) -> getHmacSha512
    javax.crypto.Mac getInitializedMac(org.apache.commons.codec.digest.HmacAlgorithms,byte[]) -> getInitializedMac
    javax.crypto.Mac getInitializedMac(java.lang.String,byte[]) -> getInitializedMac
    byte[] hmacMd5(byte[],byte[]) -> hmacMd5
    byte[] hmacMd5(byte[],java.io.InputStream) -> hmacMd5
    byte[] hmacMd5(java.lang.String,java.lang.String) -> hmacMd5
    java.lang.String hmacMd5Hex(byte[],byte[]) -> hmacMd5Hex
    java.lang.String hmacMd5Hex(byte[],java.io.InputStream) -> hmacMd5Hex
    java.lang.String hmacMd5Hex(java.lang.String,java.lang.String) -> hmacMd5Hex
    byte[] hmacSha1(byte[],byte[]) -> hmacSha1
    byte[] hmacSha1(byte[],java.io.InputStream) -> hmacSha1
    byte[] hmacSha1(java.lang.String,java.lang.String) -> hmacSha1
    java.lang.String hmacSha1Hex(byte[],byte[]) -> hmacSha1Hex
    java.lang.String hmacSha1Hex(byte[],java.io.InputStream) -> hmacSha1Hex
    java.lang.String hmacSha1Hex(java.lang.String,java.lang.String) -> hmacSha1Hex
    byte[] hmacSha256(byte[],byte[]) -> hmacSha256
    byte[] hmacSha256(byte[],java.io.InputStream) -> hmacSha256
    byte[] hmacSha256(java.lang.String,java.lang.String) -> hmacSha256
    java.lang.String hmacSha256Hex(byte[],byte[]) -> hmacSha256Hex
    java.lang.String hmacSha256Hex(byte[],java.io.InputStream) -> hmacSha256Hex
    java.lang.String hmacSha256Hex(java.lang.String,java.lang.String) -> hmacSha256Hex
    byte[] hmacSha384(byte[],byte[]) -> hmacSha384
    byte[] hmacSha384(byte[],java.io.InputStream) -> hmacSha384
    byte[] hmacSha384(java.lang.String,java.lang.String) -> hmacSha384
    java.lang.String hmacSha384Hex(byte[],byte[]) -> hmacSha384Hex
    java.lang.String hmacSha384Hex(byte[],java.io.InputStream) -> hmacSha384Hex
    java.lang.String hmacSha384Hex(java.lang.String,java.lang.String) -> hmacSha384Hex
    byte[] hmacSha512(byte[],byte[]) -> hmacSha512
    byte[] hmacSha512(byte[],java.io.InputStream) -> hmacSha512
    byte[] hmacSha512(java.lang.String,java.lang.String) -> hmacSha512
    java.lang.String hmacSha512Hex(byte[],byte[]) -> hmacSha512Hex
    java.lang.String hmacSha512Hex(byte[],java.io.InputStream) -> hmacSha512Hex
    java.lang.String hmacSha512Hex(java.lang.String,java.lang.String) -> hmacSha512Hex
    javax.crypto.Mac updateHmac(javax.crypto.Mac,byte[]) -> updateHmac
    javax.crypto.Mac updateHmac(javax.crypto.Mac,java.io.InputStream) -> updateHmac
    javax.crypto.Mac updateHmac(javax.crypto.Mac,java.lang.String) -> updateHmac
org.apache.commons.codec.digest.Md5Crypt -> org.apache.commons.codec.digest.Md5Crypt:
    java.lang.String APR1_PREFIX -> APR1_PREFIX
    int BLOCKSIZE -> BLOCKSIZE
    java.lang.String MD5_PREFIX -> MD5_PREFIX
    int ROUNDS -> ROUNDS
    java.lang.String apr1Crypt(byte[]) -> apr1Crypt
    java.lang.String apr1Crypt(byte[],java.lang.String) -> apr1Crypt
    java.lang.String apr1Crypt(java.lang.String) -> apr1Crypt
    java.lang.String apr1Crypt(java.lang.String,java.lang.String) -> apr1Crypt
    java.lang.String md5Crypt(byte[]) -> md5Crypt
    java.lang.String md5Crypt(byte[],java.lang.String) -> md5Crypt
    java.lang.String md5Crypt(byte[],java.lang.String,java.lang.String) -> md5Crypt
org.apache.commons.codec.digest.MessageDigestAlgorithms -> org.apache.commons.codec.digest.MessageDigestAlgorithms:
    java.lang.String MD2 -> MD2
    java.lang.String MD5 -> MD5
    java.lang.String SHA_1 -> SHA_1
    java.lang.String SHA_256 -> SHA_256
    java.lang.String SHA_384 -> SHA_384
    java.lang.String SHA_512 -> SHA_512
org.apache.commons.codec.digest.Sha2Crypt -> org.apache.commons.codec.digest.Sha2Crypt:
    int ROUNDS_DEFAULT -> ROUNDS_DEFAULT
    int ROUNDS_MAX -> ROUNDS_MAX
    int ROUNDS_MIN -> ROUNDS_MIN
    java.lang.String ROUNDS_PREFIX -> ROUNDS_PREFIX
    int SHA256_BLOCKSIZE -> SHA256_BLOCKSIZE
    java.lang.String SHA256_PREFIX -> SHA256_PREFIX
    int SHA512_BLOCKSIZE -> SHA512_BLOCKSIZE
    java.lang.String SHA512_PREFIX -> SHA512_PREFIX
    java.util.regex.Pattern SALT_PATTERN -> SALT_PATTERN
    java.lang.String sha256Crypt(byte[]) -> sha256Crypt
    java.lang.String sha256Crypt(byte[],java.lang.String) -> sha256Crypt
    java.lang.String sha2Crypt(byte[],java.lang.String,java.lang.String,int,java.lang.String) -> sha2Crypt
    java.lang.String sha512Crypt(byte[]) -> sha512Crypt
    java.lang.String sha512Crypt(byte[],java.lang.String) -> sha512Crypt
org.apache.commons.codec.digest.UnixCrypt -> org.apache.commons.codec.digest.UnixCrypt:
    int[] CON_SALT -> CON_SALT
    int[] COV2CHAR -> COV2CHAR
    char[] SALT_CHARS -> SALT_CHARS
    boolean[] SHIFT2 -> SHIFT2
    int[][] SKB -> SKB
    int[][] SPTRANS -> SPTRANS
    java.lang.String crypt(byte[]) -> crypt
    java.lang.String crypt(byte[],java.lang.String) -> crypt
    java.lang.String crypt(java.lang.String) -> crypt
    java.lang.String crypt(java.lang.String,java.lang.String) -> crypt
    int[] body(int[],int,int) -> body
    int byteToUnsigned(byte) -> byteToUnsigned
    int dEncrypt(int,int,int,int,int,int[]) -> dEncrypt
    int[] desSetKey(byte[]) -> desSetKey
    int fourBytesToInt(byte[],int) -> fourBytesToInt
    int hPermOp(int,int,int) -> hPermOp
    void intToFourBytes(int,byte[],int) -> intToFourBytes
    void permOp(int,int,int,int,int[]) -> permOp
org.apache.commons.codec.language.AbstractCaverphone -> org.apache.commons.codec.language.AbstractCaverphone:
    java.lang.Object encode(java.lang.Object) -> encode
    boolean isEncodeEqual(java.lang.String,java.lang.String) -> isEncodeEqual
org.apache.commons.codec.language.Caverphone -> org.apache.commons.codec.language.Caverphone:
    org.apache.commons.codec.language.Caverphone2 encoder -> encoder
    java.lang.String caverphone(java.lang.String) -> caverphone
    java.lang.Object encode(java.lang.Object) -> encode
    java.lang.String encode(java.lang.String) -> encode
    boolean isCaverphoneEqual(java.lang.String,java.lang.String) -> isCaverphoneEqual
org.apache.commons.codec.language.Caverphone1 -> org.apache.commons.codec.language.Caverphone1:
    java.lang.String SIX_1 -> SIX_1
    java.lang.String encode(java.lang.String) -> encode
org.apache.commons.codec.language.Caverphone2 -> org.apache.commons.codec.language.Caverphone2:
    java.lang.String TEN_1 -> TEN_1
    java.lang.String encode(java.lang.String) -> encode
org.apache.commons.codec.language.ColognePhonetic -> org.apache.commons.codec.language.ColognePhonetic:
    char[] AEIJOUY -> AEIJOUY
    char[] SCZ -> SCZ
    char[] WFPV -> WFPV
    char[] GKQ -> GKQ
    char[] CKQ -> CKQ
    char[] AHKLOQRUX -> AHKLOQRUX
    char[] SZ -> SZ
    char[] AHOUKQX -> AHOUKQX
    char[] TDX -> TDX
    char[][] PREPROCESS_MAP -> PREPROCESS_MAP
    boolean arrayContains(char[],char) -> arrayContains
    java.lang.String colognePhonetic(java.lang.String) -> colognePhonetic
    java.lang.Object encode(java.lang.Object) -> encode
    java.lang.String encode(java.lang.String) -> encode
    boolean isEncodeEqual(java.lang.String,java.lang.String) -> isEncodeEqual
    java.lang.String preprocess(java.lang.String) -> preprocess
org.apache.commons.codec.language.ColognePhonetic$CologneBuffer -> org.apache.commons.codec.language.ColognePhonetic$CologneBuffer:
    char[] data -> data
    int length -> length
    org.apache.commons.codec.language.ColognePhonetic this$0 -> this$0
    char[] copyData(int,int) -> copyData
    int length() -> length
    java.lang.String toString() -> toString
org.apache.commons.codec.language.ColognePhonetic$CologneInputBuffer -> org.apache.commons.codec.language.ColognePhonetic$CologneInputBuffer:
    org.apache.commons.codec.language.ColognePhonetic this$0 -> this$0
    void addLeft(char) -> addLeft
    char[] copyData(int,int) -> copyData
    char getNextChar() -> getNextChar
    int getNextPos() -> getNextPos
    char removeNext() -> removeNext
org.apache.commons.codec.language.ColognePhonetic$CologneOutputBuffer -> org.apache.commons.codec.language.ColognePhonetic$CologneOutputBuffer:
    org.apache.commons.codec.language.ColognePhonetic this$0 -> this$0
    void addRight(char) -> addRight
    char[] copyData(int,int) -> copyData
org.apache.commons.codec.language.DaitchMokotoffSoundex -> org.apache.commons.codec.language.DaitchMokotoffSoundex:
    java.lang.String COMMENT -> COMMENT
    java.lang.String DOUBLE_QUOTE -> DOUBLE_QUOTE
    java.lang.String MULTILINE_COMMENT_END -> MULTILINE_COMMENT_END
    java.lang.String MULTILINE_COMMENT_START -> MULTILINE_COMMENT_START
    java.lang.String RESOURCE_FILE -> RESOURCE_FILE
    int MAX_LENGTH -> MAX_LENGTH
    java.util.Map RULES -> RULES
    java.util.Map FOLDINGS -> FOLDINGS
    boolean folding -> folding
    void parseRules(java.util.Scanner,java.lang.String,java.util.Map,java.util.Map) -> parseRules
    java.lang.String stripQuotes(java.lang.String) -> stripQuotes
    java.lang.String cleanup(java.lang.String) -> cleanup
    java.lang.Object encode(java.lang.Object) -> encode
    java.lang.String encode(java.lang.String) -> encode
    java.lang.String soundex(java.lang.String) -> soundex
    java.lang.String[] soundex(java.lang.String,boolean) -> soundex
org.apache.commons.codec.language.DaitchMokotoffSoundex$1 -> org.apache.commons.codec.language.DaitchMokotoffSoundex$1:
    int compare(org.apache.commons.codec.language.DaitchMokotoffSoundex$Rule,org.apache.commons.codec.language.DaitchMokotoffSoundex$Rule) -> compare
    int compare(java.lang.Object,java.lang.Object) -> compare
org.apache.commons.codec.language.DaitchMokotoffSoundex$Branch -> org.apache.commons.codec.language.DaitchMokotoffSoundex$Branch:
    java.lang.StringBuilder builder -> builder
    java.lang.String cachedString -> cachedString
    java.lang.String lastReplacement -> lastReplacement
    org.apache.commons.codec.language.DaitchMokotoffSoundex$Branch createBranch() -> createBranch
    boolean equals(java.lang.Object) -> equals
    void finish() -> finish
    int hashCode() -> hashCode
    void processNextReplacement(java.lang.String,boolean) -> processNextReplacement
    java.lang.String toString() -> toString
org.apache.commons.codec.language.DaitchMokotoffSoundex$Rule -> org.apache.commons.codec.language.DaitchMokotoffSoundex$Rule:
    java.lang.String pattern -> pattern
    java.lang.String[] replacementAtStart -> replacementAtStart
    java.lang.String[] replacementBeforeVowel -> replacementBeforeVowel
    java.lang.String[] replacementDefault -> replacementDefault
    int getPatternLength() -> getPatternLength
    java.lang.String[] getReplacements(java.lang.String,boolean) -> getReplacements
    boolean isVowel(char) -> isVowel
    boolean matches(java.lang.String) -> matches
    java.lang.String toString() -> toString
    java.lang.String access$000(org.apache.commons.codec.language.DaitchMokotoffSoundex$Rule) -> access$000
org.apache.commons.codec.language.DoubleMetaphone -> org.apache.commons.codec.language.DoubleMetaphone:
    java.lang.String VOWELS -> VOWELS
    java.lang.String[] SILENT_START -> SILENT_START
    java.lang.String[] L_R_N_M_B_H_F_V_W_SPACE -> L_R_N_M_B_H_F_V_W_SPACE
    java.lang.String[] ES_EP_EB_EL_EY_IB_IL_IN_IE_EI_ER -> ES_EP_EB_EL_EY_IB_IL_IN_IE_EI_ER
    java.lang.String[] L_T_K_S_N_M_B_Z -> L_T_K_S_N_M_B_Z
    int maxCodeLen -> maxCodeLen
    java.lang.String doubleMetaphone(java.lang.String) -> doubleMetaphone
    java.lang.String doubleMetaphone(java.lang.String,boolean) -> doubleMetaphone
    java.lang.Object encode(java.lang.Object) -> encode
    java.lang.String encode(java.lang.String) -> encode
    boolean isDoubleMetaphoneEqual(java.lang.String,java.lang.String) -> isDoubleMetaphoneEqual
    boolean isDoubleMetaphoneEqual(java.lang.String,java.lang.String,boolean) -> isDoubleMetaphoneEqual
    int getMaxCodeLen() -> getMaxCodeLen
    void setMaxCodeLen(int) -> setMaxCodeLen
    int handleAEIOUY(org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult,int) -> handleAEIOUY
    int handleC(java.lang.String,org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult,int) -> handleC
    int handleCC(java.lang.String,org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult,int) -> handleCC
    int handleCH(java.lang.String,org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult,int) -> handleCH
    int handleD(java.lang.String,org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult,int) -> handleD
    int handleG(java.lang.String,org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult,int,boolean) -> handleG
    int handleGH(java.lang.String,org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult,int) -> handleGH
    int handleH(java.lang.String,org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult,int) -> handleH
    int handleJ(java.lang.String,org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult,int,boolean) -> handleJ
    int handleL(java.lang.String,org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult,int) -> handleL
    int handleP(java.lang.String,org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult,int) -> handleP
    int handleR(java.lang.String,org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult,int,boolean) -> handleR
    int handleS(java.lang.String,org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult,int,boolean) -> handleS
    int handleSC(java.lang.String,org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult,int) -> handleSC
    int handleT(java.lang.String,org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult,int) -> handleT
    int handleW(java.lang.String,org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult,int) -> handleW
    int handleX(java.lang.String,org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult,int) -> handleX
    int handleZ(java.lang.String,org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult,int,boolean) -> handleZ
    boolean conditionC0(java.lang.String,int) -> conditionC0
    boolean conditionCH0(java.lang.String,int) -> conditionCH0
    boolean conditionCH1(java.lang.String,int) -> conditionCH1
    boolean conditionL0(java.lang.String,int) -> conditionL0
    boolean conditionM0(java.lang.String,int) -> conditionM0
    boolean isSlavoGermanic(java.lang.String) -> isSlavoGermanic
    boolean isVowel(char) -> isVowel
    boolean isSilentStart(java.lang.String) -> isSilentStart
    java.lang.String cleanInput(java.lang.String) -> cleanInput
    char charAt(java.lang.String,int) -> charAt
    boolean contains(java.lang.String,int,int,java.lang.String[]) -> contains
org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult -> org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult:
    java.lang.StringBuilder primary -> primary
    java.lang.StringBuilder alternate -> alternate
    int maxLength -> maxLength
    org.apache.commons.codec.language.DoubleMetaphone this$0 -> this$0
    void append(char) -> append
    void append(char,char) -> append
    void appendPrimary(char) -> appendPrimary
    void appendAlternate(char) -> appendAlternate
    void append(java.lang.String) -> append
    void append(java.lang.String,java.lang.String) -> append
    void appendPrimary(java.lang.String) -> appendPrimary
    void appendAlternate(java.lang.String) -> appendAlternate
    java.lang.String getPrimary() -> getPrimary
    java.lang.String getAlternate() -> getAlternate
    boolean isComplete() -> isComplete
org.apache.commons.codec.language.MatchRatingApproachEncoder -> org.apache.commons.codec.language.MatchRatingApproachEncoder:
    java.lang.String SPACE -> SPACE
    java.lang.String EMPTY -> EMPTY
    int ONE -> ONE
    int TWO -> TWO
    int THREE -> THREE
    int FOUR -> FOUR
    int FIVE -> FIVE
    int SIX -> SIX
    int SEVEN -> SEVEN
    int EIGHT -> EIGHT
    int ELEVEN -> ELEVEN
    int TWELVE -> TWELVE
    java.lang.String PLAIN_ASCII -> PLAIN_ASCII
    java.lang.String UNICODE -> UNICODE
    java.lang.String[] DOUBLE_CONSONANT -> DOUBLE_CONSONANT
    java.lang.String cleanName(java.lang.String) -> cleanName
    java.lang.Object encode(java.lang.Object) -> encode
    java.lang.String encode(java.lang.String) -> encode
    java.lang.String getFirst3Last3(java.lang.String) -> getFirst3Last3
    int getMinRating(int) -> getMinRating
    boolean isEncodeEquals(java.lang.String,java.lang.String) -> isEncodeEquals
    boolean isVowel(java.lang.String) -> isVowel
    int leftToRightThenRightToLeftProcessing(java.lang.String,java.lang.String) -> leftToRightThenRightToLeftProcessing
    java.lang.String removeAccents(java.lang.String) -> removeAccents
    java.lang.String removeDoubleConsonants(java.lang.String) -> removeDoubleConsonants
    java.lang.String removeVowels(java.lang.String) -> removeVowels
org.apache.commons.codec.language.Metaphone -> org.apache.commons.codec.language.Metaphone:
    java.lang.String VOWELS -> VOWELS
    java.lang.String FRONTV -> FRONTV
    java.lang.String VARSON -> VARSON
    int maxCodeLen -> maxCodeLen
    java.lang.String metaphone(java.lang.String) -> metaphone
    boolean isVowel(java.lang.StringBuilder,int) -> isVowel
    boolean isPreviousChar(java.lang.StringBuilder,int,char) -> isPreviousChar
    boolean isNextChar(java.lang.StringBuilder,int,char) -> isNextChar
    boolean regionMatch(java.lang.StringBuilder,int,java.lang.String) -> regionMatch
    boolean isLastChar(int,int) -> isLastChar
    java.lang.Object encode(java.lang.Object) -> encode
    java.lang.String encode(java.lang.String) -> encode
    boolean isMetaphoneEqual(java.lang.String,java.lang.String) -> isMetaphoneEqual
    int getMaxCodeLen() -> getMaxCodeLen
    void setMaxCodeLen(int) -> setMaxCodeLen
org.apache.commons.codec.language.Nysiis -> org.apache.commons.codec.language.Nysiis:
    char[] CHARS_A -> CHARS_A
    char[] CHARS_AF -> CHARS_AF
    char[] CHARS_C -> CHARS_C
    char[] CHARS_FF -> CHARS_FF
    char[] CHARS_G -> CHARS_G
    char[] CHARS_N -> CHARS_N
    char[] CHARS_NN -> CHARS_NN
    char[] CHARS_S -> CHARS_S
    char[] CHARS_SSS -> CHARS_SSS
    java.util.regex.Pattern PAT_MAC -> PAT_MAC
    java.util.regex.Pattern PAT_KN -> PAT_KN
    java.util.regex.Pattern PAT_K -> PAT_K
    java.util.regex.Pattern PAT_PH_PF -> PAT_PH_PF
    java.util.regex.Pattern PAT_SCH -> PAT_SCH
    java.util.regex.Pattern PAT_EE_IE -> PAT_EE_IE
    java.util.regex.Pattern PAT_DT_ETC -> PAT_DT_ETC
    char SPACE -> SPACE
    int TRUE_LENGTH -> TRUE_LENGTH
    boolean strict -> strict
    boolean isVowel(char) -> isVowel
    char[] transcodeRemaining(char,char,char,char) -> transcodeRemaining
    java.lang.Object encode(java.lang.Object) -> encode
    java.lang.String encode(java.lang.String) -> encode
    boolean isStrict() -> isStrict
    java.lang.String nysiis(java.lang.String) -> nysiis
org.apache.commons.codec.language.RefinedSoundex -> org.apache.commons.codec.language.RefinedSoundex:
    java.lang.String US_ENGLISH_MAPPING_STRING -> US_ENGLISH_MAPPING_STRING
    char[] US_ENGLISH_MAPPING -> US_ENGLISH_MAPPING
    char[] soundexMapping -> soundexMapping
    org.apache.commons.codec.language.RefinedSoundex US_ENGLISH -> US_ENGLISH
    int difference(java.lang.String,java.lang.String) -> difference
    java.lang.Object encode(java.lang.Object) -> encode
    java.lang.String encode(java.lang.String) -> encode
    char getMappingCode(char) -> getMappingCode
    java.lang.String soundex(java.lang.String) -> soundex
org.apache.commons.codec.language.Soundex -> org.apache.commons.codec.language.Soundex:
    java.lang.String US_ENGLISH_MAPPING_STRING -> US_ENGLISH_MAPPING_STRING
    char[] US_ENGLISH_MAPPING -> US_ENGLISH_MAPPING
    org.apache.commons.codec.language.Soundex US_ENGLISH -> US_ENGLISH
    int maxLength -> maxLength
    char[] soundexMapping -> soundexMapping
    int difference(java.lang.String,java.lang.String) -> difference
    java.lang.Object encode(java.lang.Object) -> encode
    java.lang.String encode(java.lang.String) -> encode
    char getMappingCode(java.lang.String,int) -> getMappingCode
    int getMaxLength() -> getMaxLength
    char[] getSoundexMapping() -> getSoundexMapping
    char map(char) -> map
    void setMaxLength(int) -> setMaxLength
    java.lang.String soundex(java.lang.String) -> soundex
org.apache.commons.codec.language.SoundexUtils -> org.apache.commons.codec.language.SoundexUtils:
    java.lang.String clean(java.lang.String) -> clean
    int difference(org.apache.commons.codec.StringEncoder,java.lang.String,java.lang.String) -> difference
    int differenceEncoded(java.lang.String,java.lang.String) -> differenceEncoded
org.apache.commons.codec.language.bm.BeiderMorseEncoder -> org.apache.commons.codec.language.bm.BeiderMorseEncoder:
    org.apache.commons.codec.language.bm.PhoneticEngine engine -> engine
    java.lang.Object encode(java.lang.Object) -> encode
    java.lang.String encode(java.lang.String) -> encode
    org.apache.commons.codec.language.bm.NameType getNameType() -> getNameType
    org.apache.commons.codec.language.bm.RuleType getRuleType() -> getRuleType
    boolean isConcat() -> isConcat
    void setConcat(boolean) -> setConcat
    void setNameType(org.apache.commons.codec.language.bm.NameType) -> setNameType
    void setRuleType(org.apache.commons.codec.language.bm.RuleType) -> setRuleType
    void setMaxPhonemes(int) -> setMaxPhonemes
org.apache.commons.codec.language.bm.Lang -> org.apache.commons.codec.language.bm.Lang:
    java.util.Map Langs -> Langs
    java.lang.String LANGUAGE_RULES_RN -> LANGUAGE_RULES_RN
    org.apache.commons.codec.language.bm.Languages languages -> languages
    java.util.List rules -> rules
    org.apache.commons.codec.language.bm.Lang instance(org.apache.commons.codec.language.bm.NameType) -> instance
    org.apache.commons.codec.language.bm.Lang loadFromResource(java.lang.String,org.apache.commons.codec.language.bm.Languages) -> loadFromResource
    java.lang.String guessLanguage(java.lang.String) -> guessLanguage
    org.apache.commons.codec.language.bm.Languages$LanguageSet guessLanguages(java.lang.String) -> guessLanguages
org.apache.commons.codec.language.bm.Lang$1 -> org.apache.commons.codec.language.bm.Lang$1:
org.apache.commons.codec.language.bm.Lang$LangRule -> org.apache.commons.codec.language.bm.Lang$LangRule:
    boolean acceptOnMatch -> acceptOnMatch
    java.util.Set languages -> languages
    java.util.regex.Pattern pattern -> pattern
    boolean matches(java.lang.String) -> matches
    boolean access$100(org.apache.commons.codec.language.bm.Lang$LangRule) -> access$100
    java.util.Set access$200(org.apache.commons.codec.language.bm.Lang$LangRule) -> access$200
org.apache.commons.codec.language.bm.Languages -> org.apache.commons.codec.language.bm.Languages:
    java.lang.String ANY -> ANY
    java.util.Map LANGUAGES -> LANGUAGES
    java.util.Set languages -> languages
    org.apache.commons.codec.language.bm.Languages$LanguageSet NO_LANGUAGES -> NO_LANGUAGES
    org.apache.commons.codec.language.bm.Languages$LanguageSet ANY_LANGUAGE -> ANY_LANGUAGE
    org.apache.commons.codec.language.bm.Languages getInstance(org.apache.commons.codec.language.bm.NameType) -> getInstance
    org.apache.commons.codec.language.bm.Languages getInstance(java.lang.String) -> getInstance
    java.lang.String langResourceName(org.apache.commons.codec.language.bm.NameType) -> langResourceName
    java.util.Set getLanguages() -> getLanguages
org.apache.commons.codec.language.bm.Languages$1 -> org.apache.commons.codec.language.bm.Languages$1:
    boolean contains(java.lang.String) -> contains
    java.lang.String getAny() -> getAny
    boolean isEmpty() -> isEmpty
    boolean isSingleton() -> isSingleton
    org.apache.commons.codec.language.bm.Languages$LanguageSet restrictTo(org.apache.commons.codec.language.bm.Languages$LanguageSet) -> restrictTo
    org.apache.commons.codec.language.bm.Languages$LanguageSet merge(org.apache.commons.codec.language.bm.Languages$LanguageSet) -> merge
    java.lang.String toString() -> toString
org.apache.commons.codec.language.bm.Languages$2 -> org.apache.commons.codec.language.bm.Languages$2:
    boolean contains(java.lang.String) -> contains
    java.lang.String getAny() -> getAny
    boolean isEmpty() -> isEmpty
    boolean isSingleton() -> isSingleton
    org.apache.commons.codec.language.bm.Languages$LanguageSet restrictTo(org.apache.commons.codec.language.bm.Languages$LanguageSet) -> restrictTo
    org.apache.commons.codec.language.bm.Languages$LanguageSet merge(org.apache.commons.codec.language.bm.Languages$LanguageSet) -> merge
    java.lang.String toString() -> toString
org.apache.commons.codec.language.bm.Languages$LanguageSet -> org.apache.commons.codec.language.bm.Languages$LanguageSet:
    org.apache.commons.codec.language.bm.Languages$LanguageSet from(java.util.Set) -> from
    boolean contains(java.lang.String) -> contains
    java.lang.String getAny() -> getAny
    boolean isEmpty() -> isEmpty
    boolean isSingleton() -> isSingleton
    org.apache.commons.codec.language.bm.Languages$LanguageSet restrictTo(org.apache.commons.codec.language.bm.Languages$LanguageSet) -> restrictTo
    org.apache.commons.codec.language.bm.Languages$LanguageSet merge(org.apache.commons.codec.language.bm.Languages$LanguageSet) -> merge
org.apache.commons.codec.language.bm.Languages$SomeLanguages -> org.apache.commons.codec.language.bm.Languages$SomeLanguages:
    java.util.Set languages -> languages
    boolean contains(java.lang.String) -> contains
    java.lang.String getAny() -> getAny
    java.util.Set getLanguages() -> getLanguages
    boolean isEmpty() -> isEmpty
    boolean isSingleton() -> isSingleton
    org.apache.commons.codec.language.bm.Languages$LanguageSet restrictTo(org.apache.commons.codec.language.bm.Languages$LanguageSet) -> restrictTo
    org.apache.commons.codec.language.bm.Languages$LanguageSet merge(org.apache.commons.codec.language.bm.Languages$LanguageSet) -> merge
    java.lang.String toString() -> toString
org.apache.commons.codec.language.bm.NameType -> org.apache.commons.codec.language.bm.NameType:
    org.apache.commons.codec.language.bm.NameType ASHKENAZI -> ASHKENAZI
    org.apache.commons.codec.language.bm.NameType GENERIC -> GENERIC
    org.apache.commons.codec.language.bm.NameType SEPHARDIC -> SEPHARDIC
    java.lang.String name -> name
    org.apache.commons.codec.language.bm.NameType[] $VALUES -> $VALUES
    org.apache.commons.codec.language.bm.NameType[] values() -> values
    org.apache.commons.codec.language.bm.NameType valueOf(java.lang.String) -> valueOf
    java.lang.String getName() -> getName
org.apache.commons.codec.language.bm.PhoneticEngine -> org.apache.commons.codec.language.bm.PhoneticEngine:
    java.util.Map NAME_PREFIXES -> NAME_PREFIXES
    int DEFAULT_MAX_PHONEMES -> DEFAULT_MAX_PHONEMES
    org.apache.commons.codec.language.bm.Lang lang -> lang
    org.apache.commons.codec.language.bm.NameType nameType -> nameType
    org.apache.commons.codec.language.bm.RuleType ruleType -> ruleType
    boolean concat -> concat
    int maxPhonemes -> maxPhonemes
    java.lang.String join(java.lang.Iterable,java.lang.String) -> join
    org.apache.commons.codec.language.bm.PhoneticEngine$PhonemeBuilder applyFinalRules(org.apache.commons.codec.language.bm.PhoneticEngine$PhonemeBuilder,java.util.Map) -> applyFinalRules
    java.lang.String encode(java.lang.String) -> encode
    java.lang.String encode(java.lang.String,org.apache.commons.codec.language.bm.Languages$LanguageSet) -> encode
    org.apache.commons.codec.language.bm.Lang getLang() -> getLang
    org.apache.commons.codec.language.bm.NameType getNameType() -> getNameType
    org.apache.commons.codec.language.bm.RuleType getRuleType() -> getRuleType
    boolean isConcat() -> isConcat
    int getMaxPhonemes() -> getMaxPhonemes
org.apache.commons.codec.language.bm.PhoneticEngine$1 -> org.apache.commons.codec.language.bm.PhoneticEngine$1:
    int[] $SwitchMap$org$apache$commons$codec$language$bm$NameType -> $SwitchMap$org$apache$commons$codec$language$bm$NameType
org.apache.commons.codec.language.bm.PhoneticEngine$PhonemeBuilder -> org.apache.commons.codec.language.bm.PhoneticEngine$PhonemeBuilder:
    java.util.Set phonemes -> phonemes
    org.apache.commons.codec.language.bm.PhoneticEngine$PhonemeBuilder empty(org.apache.commons.codec.language.bm.Languages$LanguageSet) -> empty
    void append(java.lang.CharSequence) -> append
    void apply(org.apache.commons.codec.language.bm.Rule$PhonemeExpr,int) -> apply
    java.util.Set getPhonemes() -> getPhonemes
    java.lang.String makeString() -> makeString
org.apache.commons.codec.language.bm.PhoneticEngine$RulesApplication -> org.apache.commons.codec.language.bm.PhoneticEngine$RulesApplication:
    java.util.Map finalRules -> finalRules
    java.lang.CharSequence input -> input
    org.apache.commons.codec.language.bm.PhoneticEngine$PhonemeBuilder phonemeBuilder -> phonemeBuilder
    int i -> i
    int maxPhonemes -> maxPhonemes
    boolean found -> found
    int getI() -> getI
    org.apache.commons.codec.language.bm.PhoneticEngine$PhonemeBuilder getPhonemeBuilder() -> getPhonemeBuilder
    org.apache.commons.codec.language.bm.PhoneticEngine$RulesApplication invoke() -> invoke
    boolean isFound() -> isFound
org.apache.commons.codec.language.bm.ResourceConstants -> org.apache.commons.codec.language.bm.ResourceConstants:
    java.lang.String CMT -> CMT
    java.lang.String ENCODING -> ENCODING
    java.lang.String EXT_CMT_END -> EXT_CMT_END
    java.lang.String EXT_CMT_START -> EXT_CMT_START
org.apache.commons.codec.language.bm.Rule -> org.apache.commons.codec.language.bm.Rule:
    org.apache.commons.codec.language.bm.Rule$RPattern ALL_STRINGS_RMATCHER -> ALL_STRINGS_RMATCHER
    java.lang.String ALL -> ALL
    java.lang.String DOUBLE_QUOTE -> DOUBLE_QUOTE
    java.lang.String HASH_INCLUDE -> HASH_INCLUDE
    java.util.Map RULES -> RULES
    org.apache.commons.codec.language.bm.Rule$RPattern lContext -> lContext
    java.lang.String pattern -> pattern
    org.apache.commons.codec.language.bm.Rule$PhonemeExpr phoneme -> phoneme
    org.apache.commons.codec.language.bm.Rule$RPattern rContext -> rContext
    boolean contains(java.lang.CharSequence,char) -> contains
    java.lang.String createResourceName(org.apache.commons.codec.language.bm.NameType,org.apache.commons.codec.language.bm.RuleType,java.lang.String) -> createResourceName
    java.util.Scanner createScanner(org.apache.commons.codec.language.bm.NameType,org.apache.commons.codec.language.bm.RuleType,java.lang.String) -> createScanner
    java.util.Scanner createScanner(java.lang.String) -> createScanner
    boolean endsWith(java.lang.CharSequence,java.lang.CharSequence) -> endsWith
    java.util.List getInstance(org.apache.commons.codec.language.bm.NameType,org.apache.commons.codec.language.bm.RuleType,org.apache.commons.codec.language.bm.Languages$LanguageSet) -> getInstance
    java.util.List getInstance(org.apache.commons.codec.language.bm.NameType,org.apache.commons.codec.language.bm.RuleType,java.lang.String) -> getInstance
    java.util.Map getInstanceMap(org.apache.commons.codec.language.bm.NameType,org.apache.commons.codec.language.bm.RuleType,org.apache.commons.codec.language.bm.Languages$LanguageSet) -> getInstanceMap
    java.util.Map getInstanceMap(org.apache.commons.codec.language.bm.NameType,org.apache.commons.codec.language.bm.RuleType,java.lang.String) -> getInstanceMap
    org.apache.commons.codec.language.bm.Rule$Phoneme parsePhoneme(java.lang.String) -> parsePhoneme
    org.apache.commons.codec.language.bm.Rule$PhonemeExpr parsePhonemeExpr(java.lang.String) -> parsePhonemeExpr
    java.util.Map parseRules(java.util.Scanner,java.lang.String) -> parseRules
    org.apache.commons.codec.language.bm.Rule$RPattern pattern(java.lang.String) -> pattern
    boolean startsWith(java.lang.CharSequence,java.lang.CharSequence) -> startsWith
    java.lang.String stripQuotes(java.lang.String) -> stripQuotes
    org.apache.commons.codec.language.bm.Rule$RPattern getLContext() -> getLContext
    java.lang.String getPattern() -> getPattern
    org.apache.commons.codec.language.bm.Rule$PhonemeExpr getPhoneme() -> getPhoneme
    org.apache.commons.codec.language.bm.Rule$RPattern getRContext() -> getRContext
    boolean patternAndContextMatches(java.lang.CharSequence,int) -> patternAndContextMatches
    boolean access$100(java.lang.CharSequence,java.lang.CharSequence) -> access$100
    boolean access$200(java.lang.CharSequence,java.lang.CharSequence) -> access$200
    boolean access$300(java.lang.CharSequence,char) -> access$300
org.apache.commons.codec.language.bm.Rule$1 -> org.apache.commons.codec.language.bm.Rule$1:
    boolean isMatch(java.lang.CharSequence) -> isMatch
org.apache.commons.codec.language.bm.Rule$10 -> org.apache.commons.codec.language.bm.Rule$10:
    java.util.regex.Pattern pattern -> pattern
    java.lang.String val$regex -> val$regex
    boolean isMatch(java.lang.CharSequence) -> isMatch
org.apache.commons.codec.language.bm.Rule$2 -> org.apache.commons.codec.language.bm.Rule$2:
    int myLine -> myLine
    java.lang.String loc -> loc
    int val$cLine -> val$cLine
    java.lang.String val$location -> val$location
    java.lang.String val$pat -> val$pat
    java.lang.String val$lCon -> val$lCon
    java.lang.String val$rCon -> val$rCon
    java.lang.String toString() -> toString
org.apache.commons.codec.language.bm.Rule$3 -> org.apache.commons.codec.language.bm.Rule$3:
    boolean isMatch(java.lang.CharSequence) -> isMatch
org.apache.commons.codec.language.bm.Rule$4 -> org.apache.commons.codec.language.bm.Rule$4:
    java.lang.String val$content -> val$content
    boolean isMatch(java.lang.CharSequence) -> isMatch
org.apache.commons.codec.language.bm.Rule$5 -> org.apache.commons.codec.language.bm.Rule$5:
    java.lang.String val$content -> val$content
    boolean isMatch(java.lang.CharSequence) -> isMatch
org.apache.commons.codec.language.bm.Rule$6 -> org.apache.commons.codec.language.bm.Rule$6:
    java.lang.String val$content -> val$content
    boolean isMatch(java.lang.CharSequence) -> isMatch
org.apache.commons.codec.language.bm.Rule$7 -> org.apache.commons.codec.language.bm.Rule$7:
    java.lang.String val$bContent -> val$bContent
    boolean val$shouldMatch -> val$shouldMatch
    boolean isMatch(java.lang.CharSequence) -> isMatch
org.apache.commons.codec.language.bm.Rule$8 -> org.apache.commons.codec.language.bm.Rule$8:
    java.lang.String val$bContent -> val$bContent
    boolean val$shouldMatch -> val$shouldMatch
    boolean isMatch(java.lang.CharSequence) -> isMatch
org.apache.commons.codec.language.bm.Rule$9 -> org.apache.commons.codec.language.bm.Rule$9:
    java.lang.String val$bContent -> val$bContent
    boolean val$shouldMatch -> val$shouldMatch
    boolean isMatch(java.lang.CharSequence) -> isMatch
org.apache.commons.codec.language.bm.Rule$Phoneme -> org.apache.commons.codec.language.bm.Rule$Phoneme:
    java.util.Comparator COMPARATOR -> COMPARATOR
    java.lang.StringBuilder phonemeText -> phonemeText
    org.apache.commons.codec.language.bm.Languages$LanguageSet languages -> languages
    org.apache.commons.codec.language.bm.Rule$Phoneme append(java.lang.CharSequence) -> append
    org.apache.commons.codec.language.bm.Languages$LanguageSet getLanguages() -> getLanguages
    java.lang.Iterable getPhonemes() -> getPhonemes
    java.lang.CharSequence getPhonemeText() -> getPhonemeText
    org.apache.commons.codec.language.bm.Rule$Phoneme join(org.apache.commons.codec.language.bm.Rule$Phoneme) -> join
    org.apache.commons.codec.language.bm.Rule$Phoneme mergeWithLanguage(org.apache.commons.codec.language.bm.Languages$LanguageSet) -> mergeWithLanguage
    java.lang.String toString() -> toString
    java.lang.StringBuilder access$000(org.apache.commons.codec.language.bm.Rule$Phoneme) -> access$000
org.apache.commons.codec.language.bm.Rule$Phoneme$1 -> org.apache.commons.codec.language.bm.Rule$Phoneme$1:
    int compare(org.apache.commons.codec.language.bm.Rule$Phoneme,org.apache.commons.codec.language.bm.Rule$Phoneme) -> compare
    int compare(java.lang.Object,java.lang.Object) -> compare
org.apache.commons.codec.language.bm.Rule$PhonemeExpr -> org.apache.commons.codec.language.bm.Rule$PhonemeExpr:
    java.lang.Iterable getPhonemes() -> getPhonemes
org.apache.commons.codec.language.bm.Rule$PhonemeList -> org.apache.commons.codec.language.bm.Rule$PhonemeList:
    java.util.List phonemes -> phonemes
    java.util.List getPhonemes() -> getPhonemes
    java.lang.Iterable getPhonemes() -> getPhonemes
org.apache.commons.codec.language.bm.Rule$RPattern -> org.apache.commons.codec.language.bm.Rule$RPattern:
    boolean isMatch(java.lang.CharSequence) -> isMatch
org.apache.commons.codec.language.bm.RuleType -> org.apache.commons.codec.language.bm.RuleType:
    org.apache.commons.codec.language.bm.RuleType APPROX -> APPROX
    org.apache.commons.codec.language.bm.RuleType EXACT -> EXACT
    org.apache.commons.codec.language.bm.RuleType RULES -> RULES
    java.lang.String name -> name
    org.apache.commons.codec.language.bm.RuleType[] $VALUES -> $VALUES
    org.apache.commons.codec.language.bm.RuleType[] values() -> values
    org.apache.commons.codec.language.bm.RuleType valueOf(java.lang.String) -> valueOf
    java.lang.String getName() -> getName
org.apache.commons.codec.net.BCodec -> org.apache.commons.codec.net.BCodec:
    java.nio.charset.Charset charset -> charset
    java.lang.String getEncoding() -> getEncoding
    byte[] doEncoding(byte[]) -> doEncoding
    byte[] doDecoding(byte[]) -> doDecoding
    java.lang.String encode(java.lang.String,java.nio.charset.Charset) -> encode
    java.lang.String encode(java.lang.String,java.lang.String) -> encode
    java.lang.String encode(java.lang.String) -> encode
    java.lang.String decode(java.lang.String) -> decode
    java.lang.Object encode(java.lang.Object) -> encode
    java.lang.Object decode(java.lang.Object) -> decode
    java.nio.charset.Charset getCharset() -> getCharset
    java.lang.String getDefaultCharset() -> getDefaultCharset
org.apache.commons.codec.net.QCodec -> org.apache.commons.codec.net.QCodec:
    java.nio.charset.Charset charset -> charset
    java.util.BitSet PRINTABLE_CHARS -> PRINTABLE_CHARS
    byte BLANK -> BLANK
    byte UNDERSCORE -> UNDERSCORE
    boolean encodeBlanks -> encodeBlanks
    java.lang.String getEncoding() -> getEncoding
    byte[] doEncoding(byte[]) -> doEncoding
    byte[] doDecoding(byte[]) -> doDecoding
    java.lang.String encode(java.lang.String,java.nio.charset.Charset) -> encode
    java.lang.String encode(java.lang.String,java.lang.String) -> encode
    java.lang.String encode(java.lang.String) -> encode
    java.lang.String decode(java.lang.String) -> decode
    java.lang.Object encode(java.lang.Object) -> encode
    java.lang.Object decode(java.lang.Object) -> decode
    java.nio.charset.Charset getCharset() -> getCharset
    java.lang.String getDefaultCharset() -> getDefaultCharset
    boolean isEncodeBlanks() -> isEncodeBlanks
    void setEncodeBlanks(boolean) -> setEncodeBlanks
org.apache.commons.codec.net.QuotedPrintableCodec -> org.apache.commons.codec.net.QuotedPrintableCodec:
    java.nio.charset.Charset charset -> charset
    boolean strict -> strict
    java.util.BitSet PRINTABLE_CHARS -> PRINTABLE_CHARS
    byte ESCAPE_CHAR -> ESCAPE_CHAR
    byte TAB -> TAB
    byte SPACE -> SPACE
    byte CR -> CR
    byte LF -> LF
    int SAFE_LENGTH -> SAFE_LENGTH
    int encodeQuotedPrintable(int,java.io.ByteArrayOutputStream) -> encodeQuotedPrintable
    int getUnsignedOctet(int,byte[]) -> getUnsignedOctet
    int encodeByte(int,boolean,java.io.ByteArrayOutputStream) -> encodeByte
    boolean isWhitespace(int) -> isWhitespace
    byte[] encodeQuotedPrintable(java.util.BitSet,byte[]) -> encodeQuotedPrintable
    byte[] encodeQuotedPrintable(java.util.BitSet,byte[],boolean) -> encodeQuotedPrintable
    byte[] decodeQuotedPrintable(byte[]) -> decodeQuotedPrintable
    byte[] encode(byte[]) -> encode
    byte[] decode(byte[]) -> decode
    java.lang.String encode(java.lang.String) -> encode
    java.lang.String decode(java.lang.String,java.nio.charset.Charset) -> decode
    java.lang.String decode(java.lang.String,java.lang.String) -> decode
    java.lang.String decode(java.lang.String) -> decode
    java.lang.Object encode(java.lang.Object) -> encode
    java.lang.Object decode(java.lang.Object) -> decode
    java.nio.charset.Charset getCharset() -> getCharset
    java.lang.String getDefaultCharset() -> getDefaultCharset
    java.lang.String encode(java.lang.String,java.nio.charset.Charset) -> encode
    java.lang.String encode(java.lang.String,java.lang.String) -> encode
org.apache.commons.codec.net.RFC1522Codec -> org.apache.commons.codec.net.RFC1522Codec:
    char SEP -> SEP
    java.lang.String POSTFIX -> POSTFIX
    java.lang.String PREFIX -> PREFIX
    java.lang.String encodeText(java.lang.String,java.nio.charset.Charset) -> encodeText
    java.lang.String encodeText(java.lang.String,java.lang.String) -> encodeText
    java.lang.String decodeText(java.lang.String) -> decodeText
    java.lang.String getEncoding() -> getEncoding
    byte[] doEncoding(byte[]) -> doEncoding
    byte[] doDecoding(byte[]) -> doDecoding
org.apache.commons.codec.net.URLCodec -> org.apache.commons.codec.net.URLCodec:
    int RADIX -> RADIX
    java.lang.String charset -> charset
    byte ESCAPE_CHAR -> ESCAPE_CHAR
    java.util.BitSet WWW_FORM_URL -> WWW_FORM_URL
    byte[] encodeUrl(java.util.BitSet,byte[]) -> encodeUrl
    byte[] decodeUrl(byte[]) -> decodeUrl
    byte[] encode(byte[]) -> encode
    byte[] decode(byte[]) -> decode
    java.lang.String encode(java.lang.String,java.lang.String) -> encode
    java.lang.String encode(java.lang.String) -> encode
    java.lang.String decode(java.lang.String,java.lang.String) -> decode
    java.lang.String decode(java.lang.String) -> decode
    java.lang.Object encode(java.lang.Object) -> encode
    java.lang.Object decode(java.lang.Object) -> decode
    java.lang.String getDefaultCharset() -> getDefaultCharset
    java.lang.String getEncoding() -> getEncoding
org.apache.commons.codec.net.Utils -> org.apache.commons.codec.net.Utils:
    int digit16(byte) -> digit16
org.apache.commons.logging.Log -> org.apache.commons.logging.Log:
    boolean isDebugEnabled() -> isDebugEnabled
    boolean isErrorEnabled() -> isErrorEnabled
    boolean isFatalEnabled() -> isFatalEnabled
    boolean isInfoEnabled() -> isInfoEnabled
    boolean isTraceEnabled() -> isTraceEnabled
    boolean isWarnEnabled() -> isWarnEnabled
    void trace(java.lang.Object) -> trace
    void trace(java.lang.Object,java.lang.Throwable) -> trace
    void debug(java.lang.Object) -> debug
    void debug(java.lang.Object,java.lang.Throwable) -> debug
    void info(java.lang.Object) -> info
    void info(java.lang.Object,java.lang.Throwable) -> info
    void warn(java.lang.Object) -> warn
    void warn(java.lang.Object,java.lang.Throwable) -> warn
    void error(java.lang.Object) -> error
    void error(java.lang.Object,java.lang.Throwable) -> error
    void fatal(java.lang.Object) -> fatal
    void fatal(java.lang.Object,java.lang.Throwable) -> fatal
org.apache.commons.logging.LogConfigurationException -> org.apache.commons.logging.LogConfigurationException:
    long serialVersionUID -> serialVersionUID
    java.lang.Throwable cause -> cause
    java.lang.Throwable getCause() -> getCause
org.apache.commons.logging.LogFactory -> org.apache.commons.logging.LogFactory:
    java.lang.String PRIORITY_KEY -> PRIORITY_KEY
    java.lang.String TCCL_KEY -> TCCL_KEY
    java.lang.String FACTORY_PROPERTY -> FACTORY_PROPERTY
    java.lang.String FACTORY_DEFAULT -> FACTORY_DEFAULT
    java.lang.String FACTORY_PROPERTIES -> FACTORY_PROPERTIES
    java.lang.String SERVICE_ID -> SERVICE_ID
    java.lang.String DIAGNOSTICS_DEST_PROPERTY -> DIAGNOSTICS_DEST_PROPERTY
    java.io.PrintStream diagnosticsStream -> diagnosticsStream
    java.lang.String diagnosticPrefix -> diagnosticPrefix
    java.lang.String HASHTABLE_IMPLEMENTATION_PROPERTY -> HASHTABLE_IMPLEMENTATION_PROPERTY
    java.lang.String WEAK_HASHTABLE_CLASSNAME -> WEAK_HASHTABLE_CLASSNAME
    java.lang.ClassLoader thisClassLoader -> thisClassLoader
    java.util.Hashtable factories -> factories
    org.apache.commons.logging.LogFactory nullClassLoaderFactory -> nullClassLoaderFactory
    java.lang.Class class$java$lang$Thread -> class$java$lang$Thread
    java.lang.Class class$org$apache$commons$logging$LogFactory -> class$org$apache$commons$logging$LogFactory
    java.lang.Object getAttribute(java.lang.String) -> getAttribute
    java.lang.String[] getAttributeNames() -> getAttributeNames
    org.apache.commons.logging.Log getInstance(java.lang.Class) -> getInstance
    org.apache.commons.logging.Log getInstance(java.lang.String) -> getInstance
    void release() -> release
    void removeAttribute(java.lang.String) -> removeAttribute
    void setAttribute(java.lang.String,java.lang.Object) -> setAttribute
    java.util.Hashtable createFactoryStore() -> createFactoryStore
    java.lang.String trim(java.lang.String) -> trim
    void handleThrowable(java.lang.Throwable) -> handleThrowable
    org.apache.commons.logging.LogFactory getFactory() -> getFactory
    org.apache.commons.logging.Log getLog(java.lang.Class) -> getLog
    org.apache.commons.logging.Log getLog(java.lang.String) -> getLog
    void release(java.lang.ClassLoader) -> release
    void releaseAll() -> releaseAll
    java.lang.ClassLoader getClassLoader(java.lang.Class) -> getClassLoader
    java.lang.ClassLoader getContextClassLoader() -> getContextClassLoader
    java.lang.ClassLoader getContextClassLoaderInternal() -> getContextClassLoaderInternal
    java.lang.ClassLoader directGetContextClassLoader() -> directGetContextClassLoader
    org.apache.commons.logging.LogFactory getCachedFactory(java.lang.ClassLoader) -> getCachedFactory
    void cacheFactory(java.lang.ClassLoader,org.apache.commons.logging.LogFactory) -> cacheFactory
    org.apache.commons.logging.LogFactory newFactory(java.lang.String,java.lang.ClassLoader,java.lang.ClassLoader) -> newFactory
    org.apache.commons.logging.LogFactory newFactory(java.lang.String,java.lang.ClassLoader) -> newFactory
    java.lang.Object createFactory(java.lang.String,java.lang.ClassLoader) -> createFactory
    boolean implementsLogFactory(java.lang.Class) -> implementsLogFactory
    java.io.InputStream getResourceAsStream(java.lang.ClassLoader,java.lang.String) -> getResourceAsStream
    java.util.Enumeration getResources(java.lang.ClassLoader,java.lang.String) -> getResources
    java.util.Properties getProperties(java.net.URL) -> getProperties
    java.util.Properties getConfigurationFile(java.lang.ClassLoader,java.lang.String) -> getConfigurationFile
    java.lang.String getSystemProperty(java.lang.String,java.lang.String) -> getSystemProperty
    java.io.PrintStream initDiagnostics() -> initDiagnostics
    boolean isDiagnosticsEnabled() -> isDiagnosticsEnabled
    void logDiagnostic(java.lang.String) -> logDiagnostic
    void logRawDiagnostic(java.lang.String) -> logRawDiagnostic
    void logClassLoaderEnvironment(java.lang.Class) -> logClassLoaderEnvironment
    void logHierarchy(java.lang.String,java.lang.ClassLoader) -> logHierarchy
    java.lang.String objectId(java.lang.Object) -> objectId
    java.lang.Class class$(java.lang.String) -> class$
    void access$000(java.lang.String) -> access$000
org.apache.commons.logging.LogFactory$1 -> org.apache.commons.logging.LogFactory$1:
    java.lang.Object run() -> run
org.apache.commons.logging.LogFactory$2 -> org.apache.commons.logging.LogFactory$2:
    java.lang.String val$factoryClass -> val$factoryClass
    java.lang.ClassLoader val$classLoader -> val$classLoader
    java.lang.Object run() -> run
org.apache.commons.logging.LogFactory$3 -> org.apache.commons.logging.LogFactory$3:
    java.lang.ClassLoader val$loader -> val$loader
    java.lang.String val$name -> val$name
    java.lang.Object run() -> run
org.apache.commons.logging.LogFactory$4 -> org.apache.commons.logging.LogFactory$4:
    java.lang.ClassLoader val$loader -> val$loader
    java.lang.String val$name -> val$name
    java.lang.Object run() -> run
org.apache.commons.logging.LogFactory$5 -> org.apache.commons.logging.LogFactory$5:
    java.net.URL val$url -> val$url
    java.lang.Object run() -> run
org.apache.commons.logging.LogFactory$6 -> org.apache.commons.logging.LogFactory$6:
    java.lang.String val$key -> val$key
    java.lang.String val$def -> val$def
    java.lang.Object run() -> run
org.apache.commons.logging.LogSource -> org.apache.commons.logging.LogSource:
    java.util.Hashtable logs -> logs
    boolean log4jIsAvailable -> log4jIsAvailable
    boolean jdk14IsAvailable -> jdk14IsAvailable
    java.lang.reflect.Constructor logImplctor -> logImplctor
    void setLogImplementation(java.lang.String) -> setLogImplementation
    void setLogImplementation(java.lang.Class) -> setLogImplementation
    org.apache.commons.logging.Log getInstance(java.lang.String) -> getInstance
    org.apache.commons.logging.Log getInstance(java.lang.Class) -> getInstance
    org.apache.commons.logging.Log makeNewLogInstance(java.lang.String) -> makeNewLogInstance
    java.lang.String[] getLogNames() -> getLogNames
org.apache.commons.logging.impl.AvalonLogger -> org.apache.commons.logging.impl.AvalonLogger:
    org.apache.avalon.framework.logger.Logger defaultLogger -> defaultLogger
    org.apache.avalon.framework.logger.Logger logger -> logger
    org.apache.avalon.framework.logger.Logger getLogger() -> getLogger
    void setDefaultLogger(org.apache.avalon.framework.logger.Logger) -> setDefaultLogger
    void debug(java.lang.Object,java.lang.Throwable) -> debug
    void debug(java.lang.Object) -> debug
    void error(java.lang.Object,java.lang.Throwable) -> error
    void error(java.lang.Object) -> error
    void fatal(java.lang.Object,java.lang.Throwable) -> fatal
    void fatal(java.lang.Object) -> fatal
    void info(java.lang.Object,java.lang.Throwable) -> info
    void info(java.lang.Object) -> info
    boolean isDebugEnabled() -> isDebugEnabled
    boolean isErrorEnabled() -> isErrorEnabled
    boolean isFatalEnabled() -> isFatalEnabled
    boolean isInfoEnabled() -> isInfoEnabled
    boolean isTraceEnabled() -> isTraceEnabled
    boolean isWarnEnabled() -> isWarnEnabled
    void trace(java.lang.Object,java.lang.Throwable) -> trace
    void trace(java.lang.Object) -> trace
    void warn(java.lang.Object,java.lang.Throwable) -> warn
    void warn(java.lang.Object) -> warn
org.apache.commons.logging.impl.Jdk13LumberjackLogger -> org.apache.commons.logging.impl.Jdk13LumberjackLogger:
    long serialVersionUID -> serialVersionUID
    java.util.logging.Logger logger -> logger
    java.lang.String name -> name
    java.lang.String sourceClassName -> sourceClassName
    java.lang.String sourceMethodName -> sourceMethodName
    boolean classAndMethodFound -> classAndMethodFound
    java.util.logging.Level dummyLevel -> dummyLevel
    void log(java.util.logging.Level,java.lang.String,java.lang.Throwable) -> log
    void getClassAndMethod() -> getClassAndMethod
    void debug(java.lang.Object) -> debug
    void debug(java.lang.Object,java.lang.Throwable) -> debug
    void error(java.lang.Object) -> error
    void error(java.lang.Object,java.lang.Throwable) -> error
    void fatal(java.lang.Object) -> fatal
    void fatal(java.lang.Object,java.lang.Throwable) -> fatal
    java.util.logging.Logger getLogger() -> getLogger
    void info(java.lang.Object) -> info
    void info(java.lang.Object,java.lang.Throwable) -> info
    boolean isDebugEnabled() -> isDebugEnabled
    boolean isErrorEnabled() -> isErrorEnabled
    boolean isFatalEnabled() -> isFatalEnabled
    boolean isInfoEnabled() -> isInfoEnabled
    boolean isTraceEnabled() -> isTraceEnabled
    boolean isWarnEnabled() -> isWarnEnabled
    void trace(java.lang.Object) -> trace
    void trace(java.lang.Object,java.lang.Throwable) -> trace
    void warn(java.lang.Object) -> warn
    void warn(java.lang.Object,java.lang.Throwable) -> warn
org.apache.commons.logging.impl.Jdk14Logger -> org.apache.commons.logging.impl.Jdk14Logger:
    long serialVersionUID -> serialVersionUID
    java.util.logging.Level dummyLevel -> dummyLevel
    java.util.logging.Logger logger -> logger
    java.lang.String name -> name
    void log(java.util.logging.Level,java.lang.String,java.lang.Throwable) -> log
    void debug(java.lang.Object) -> debug
    void debug(java.lang.Object,java.lang.Throwable) -> debug
    void error(java.lang.Object) -> error
    void error(java.lang.Object,java.lang.Throwable) -> error
    void fatal(java.lang.Object) -> fatal
    void fatal(java.lang.Object,java.lang.Throwable) -> fatal
    java.util.logging.Logger getLogger() -> getLogger
    void info(java.lang.Object) -> info
    void info(java.lang.Object,java.lang.Throwable) -> info
    boolean isDebugEnabled() -> isDebugEnabled
    boolean isErrorEnabled() -> isErrorEnabled
    boolean isFatalEnabled() -> isFatalEnabled
    boolean isInfoEnabled() -> isInfoEnabled
    boolean isTraceEnabled() -> isTraceEnabled
    boolean isWarnEnabled() -> isWarnEnabled
    void trace(java.lang.Object) -> trace
    void trace(java.lang.Object,java.lang.Throwable) -> trace
    void warn(java.lang.Object) -> warn
    void warn(java.lang.Object,java.lang.Throwable) -> warn
org.apache.commons.logging.impl.Log4JLogger -> org.apache.commons.logging.impl.Log4JLogger:
    long serialVersionUID -> serialVersionUID
    java.lang.String FQCN -> FQCN
    org.apache.log4j.Logger logger -> logger
    java.lang.String name -> name
    org.apache.log4j.Priority traceLevel -> traceLevel
    java.lang.Class class$org$apache$commons$logging$impl$Log4JLogger -> class$org$apache$commons$logging$impl$Log4JLogger
    java.lang.Class class$org$apache$log4j$Level -> class$org$apache$log4j$Level
    java.lang.Class class$org$apache$log4j$Priority -> class$org$apache$log4j$Priority
    void trace(java.lang.Object) -> trace
    void trace(java.lang.Object,java.lang.Throwable) -> trace
    void debug(java.lang.Object) -> debug
    void debug(java.lang.Object,java.lang.Throwable) -> debug
    void info(java.lang.Object) -> info
    void info(java.lang.Object,java.lang.Throwable) -> info
    void warn(java.lang.Object) -> warn
    void warn(java.lang.Object,java.lang.Throwable) -> warn
    void error(java.lang.Object) -> error
    void error(java.lang.Object,java.lang.Throwable) -> error
    void fatal(java.lang.Object) -> fatal
    void fatal(java.lang.Object,java.lang.Throwable) -> fatal
    org.apache.log4j.Logger getLogger() -> getLogger
    boolean isDebugEnabled() -> isDebugEnabled
    boolean isErrorEnabled() -> isErrorEnabled
    boolean isFatalEnabled() -> isFatalEnabled
    boolean isInfoEnabled() -> isInfoEnabled
    boolean isTraceEnabled() -> isTraceEnabled
    boolean isWarnEnabled() -> isWarnEnabled
    java.lang.Class class$(java.lang.String) -> class$
org.apache.commons.logging.impl.LogFactoryImpl -> org.apache.commons.logging.impl.LogFactoryImpl:
    java.lang.String LOGGING_IMPL_LOG4J_LOGGER -> LOGGING_IMPL_LOG4J_LOGGER
    java.lang.String LOGGING_IMPL_JDK14_LOGGER -> LOGGING_IMPL_JDK14_LOGGER
    java.lang.String LOGGING_IMPL_LUMBERJACK_LOGGER -> LOGGING_IMPL_LUMBERJACK_LOGGER
    java.lang.String LOGGING_IMPL_SIMPLE_LOGGER -> LOGGING_IMPL_SIMPLE_LOGGER
    java.lang.String PKG_IMPL -> PKG_IMPL
    int PKG_LEN -> PKG_LEN
    java.lang.String LOG_PROPERTY -> LOG_PROPERTY
    java.lang.String LOG_PROPERTY_OLD -> LOG_PROPERTY_OLD
    java.lang.String ALLOW_FLAWED_CONTEXT_PROPERTY -> ALLOW_FLAWED_CONTEXT_PROPERTY
    java.lang.String ALLOW_FLAWED_DISCOVERY_PROPERTY -> ALLOW_FLAWED_DISCOVERY_PROPERTY
    java.lang.String ALLOW_FLAWED_HIERARCHY_PROPERTY -> ALLOW_FLAWED_HIERARCHY_PROPERTY
    java.lang.String[] classesToDiscover -> classesToDiscover
    boolean useTCCL -> useTCCL
    java.lang.String diagnosticPrefix -> diagnosticPrefix
    java.util.Hashtable attributes -> attributes
    java.util.Hashtable instances -> instances
    java.lang.String logClassName -> logClassName
    java.lang.reflect.Constructor logConstructor -> logConstructor
    java.lang.Class[] logConstructorSignature -> logConstructorSignature
    java.lang.reflect.Method logMethod -> logMethod
    java.lang.Class[] logMethodSignature -> logMethodSignature
    boolean allowFlawedContext -> allowFlawedContext
    boolean allowFlawedDiscovery -> allowFlawedDiscovery
    boolean allowFlawedHierarchy -> allowFlawedHierarchy
    java.lang.Class class$java$lang$String -> class$java$lang$String
    java.lang.Class class$org$apache$commons$logging$LogFactory -> class$org$apache$commons$logging$LogFactory
    java.lang.Class class$org$apache$commons$logging$impl$LogFactoryImpl -> class$org$apache$commons$logging$impl$LogFactoryImpl
    java.lang.Class class$org$apache$commons$logging$Log -> class$org$apache$commons$logging$Log
    java.lang.Object getAttribute(java.lang.String) -> getAttribute
    java.lang.String[] getAttributeNames() -> getAttributeNames
    org.apache.commons.logging.Log getInstance(java.lang.Class) -> getInstance
    org.apache.commons.logging.Log getInstance(java.lang.String) -> getInstance
    void release() -> release
    void removeAttribute(java.lang.String) -> removeAttribute
    void setAttribute(java.lang.String,java.lang.Object) -> setAttribute
    java.lang.ClassLoader getContextClassLoader() -> getContextClassLoader
    boolean isDiagnosticsEnabled() -> isDiagnosticsEnabled
    java.lang.ClassLoader getClassLoader(java.lang.Class) -> getClassLoader
    void initDiagnostics() -> initDiagnostics
    void logDiagnostic(java.lang.String) -> logDiagnostic
    java.lang.String getLogClassName() -> getLogClassName
    java.lang.reflect.Constructor getLogConstructor() -> getLogConstructor
    boolean isJdk13LumberjackAvailable() -> isJdk13LumberjackAvailable
    boolean isJdk14Available() -> isJdk14Available
    boolean isLog4JAvailable() -> isLog4JAvailable
    org.apache.commons.logging.Log newInstance(java.lang.String) -> newInstance
    java.lang.ClassLoader getContextClassLoaderInternal() -> getContextClassLoaderInternal
    java.lang.String getSystemProperty(java.lang.String,java.lang.String) -> getSystemProperty
    java.lang.ClassLoader getParentClassLoader(java.lang.ClassLoader) -> getParentClassLoader
    boolean isLogLibraryAvailable(java.lang.String,java.lang.String) -> isLogLibraryAvailable
    java.lang.String getConfigurationValue(java.lang.String) -> getConfigurationValue
    boolean getBooleanConfiguration(java.lang.String,boolean) -> getBooleanConfiguration
    void initConfiguration() -> initConfiguration
    org.apache.commons.logging.Log discoverLogImplementation(java.lang.String) -> discoverLogImplementation
    void informUponSimilarName(java.lang.StringBuffer,java.lang.String,java.lang.String) -> informUponSimilarName
    java.lang.String findUserSpecifiedLogClassName() -> findUserSpecifiedLogClassName
    org.apache.commons.logging.Log createLogFromClass(java.lang.String,java.lang.String,boolean) -> createLogFromClass
    java.lang.ClassLoader getBaseClassLoader() -> getBaseClassLoader
    java.lang.ClassLoader getLowestClassLoader(java.lang.ClassLoader,java.lang.ClassLoader) -> getLowestClassLoader
    void handleFlawedDiscovery(java.lang.String,java.lang.ClassLoader,java.lang.Throwable) -> handleFlawedDiscovery
    void handleFlawedHierarchy(java.lang.ClassLoader,java.lang.Class) -> handleFlawedHierarchy
    java.lang.Class class$(java.lang.String) -> class$
    java.lang.ClassLoader access$000() -> access$000
org.apache.commons.logging.impl.LogFactoryImpl$1 -> org.apache.commons.logging.impl.LogFactoryImpl$1:
    java.lang.Object run() -> run
org.apache.commons.logging.impl.LogFactoryImpl$2 -> org.apache.commons.logging.impl.LogFactoryImpl$2:
    java.lang.String val$key -> val$key
    java.lang.String val$def -> val$def
    java.lang.Object run() -> run
org.apache.commons.logging.impl.LogFactoryImpl$3 -> org.apache.commons.logging.impl.LogFactoryImpl$3:
    java.lang.ClassLoader val$cl -> val$cl
    org.apache.commons.logging.impl.LogFactoryImpl this$0 -> this$0
    java.lang.Object run() -> run
org.apache.commons.logging.impl.LogKitLogger -> org.apache.commons.logging.impl.LogKitLogger:
    long serialVersionUID -> serialVersionUID
    org.apache.log.Logger logger -> logger
    java.lang.String name -> name
    org.apache.log.Logger getLogger() -> getLogger
    void trace(java.lang.Object) -> trace
    void trace(java.lang.Object,java.lang.Throwable) -> trace
    void debug(java.lang.Object) -> debug
    void debug(java.lang.Object,java.lang.Throwable) -> debug
    void info(java.lang.Object) -> info
    void info(java.lang.Object,java.lang.Throwable) -> info
    void warn(java.lang.Object) -> warn
    void warn(java.lang.Object,java.lang.Throwable) -> warn
    void error(java.lang.Object) -> error
    void error(java.lang.Object,java.lang.Throwable) -> error
    void fatal(java.lang.Object) -> fatal
    void fatal(java.lang.Object,java.lang.Throwable) -> fatal
    boolean isDebugEnabled() -> isDebugEnabled
    boolean isErrorEnabled() -> isErrorEnabled
    boolean isFatalEnabled() -> isFatalEnabled
    boolean isInfoEnabled() -> isInfoEnabled
    boolean isTraceEnabled() -> isTraceEnabled
    boolean isWarnEnabled() -> isWarnEnabled
org.apache.commons.logging.impl.NoOpLog -> org.apache.commons.logging.impl.NoOpLog:
    long serialVersionUID -> serialVersionUID
    void trace(java.lang.Object) -> trace
    void trace(java.lang.Object,java.lang.Throwable) -> trace
    void debug(java.lang.Object) -> debug
    void debug(java.lang.Object,java.lang.Throwable) -> debug
    void info(java.lang.Object) -> info
    void info(java.lang.Object,java.lang.Throwable) -> info
    void warn(java.lang.Object) -> warn
    void warn(java.lang.Object,java.lang.Throwable) -> warn
    void error(java.lang.Object) -> error
    void error(java.lang.Object,java.lang.Throwable) -> error
    void fatal(java.lang.Object) -> fatal
    void fatal(java.lang.Object,java.lang.Throwable) -> fatal
    boolean isDebugEnabled() -> isDebugEnabled
    boolean isErrorEnabled() -> isErrorEnabled
    boolean isFatalEnabled() -> isFatalEnabled
    boolean isInfoEnabled() -> isInfoEnabled
    boolean isTraceEnabled() -> isTraceEnabled
    boolean isWarnEnabled() -> isWarnEnabled
org.apache.commons.logging.impl.ServletContextCleaner -> org.apache.commons.logging.impl.ServletContextCleaner:
    java.lang.Class[] RELEASE_SIGNATURE -> RELEASE_SIGNATURE
    java.lang.Class class$java$lang$ClassLoader -> class$java$lang$ClassLoader
    void contextDestroyed(javax.servlet.ServletContextEvent) -> contextDestroyed
    void contextInitialized(javax.servlet.ServletContextEvent) -> contextInitialized
    java.lang.Class class$(java.lang.String) -> class$
org.apache.commons.logging.impl.SimpleLog -> org.apache.commons.logging.impl.SimpleLog:
    long serialVersionUID -> serialVersionUID
    java.lang.String systemPrefix -> systemPrefix
    java.util.Properties simpleLogProps -> simpleLogProps
    java.lang.String DEFAULT_DATE_TIME_FORMAT -> DEFAULT_DATE_TIME_FORMAT
    boolean showLogName -> showLogName
    boolean showShortName -> showShortName
    boolean showDateTime -> showDateTime
    java.lang.String dateTimeFormat -> dateTimeFormat
    java.text.DateFormat dateFormatter -> dateFormatter
    int LOG_LEVEL_TRACE -> LOG_LEVEL_TRACE
    int LOG_LEVEL_DEBUG -> LOG_LEVEL_DEBUG
    int LOG_LEVEL_INFO -> LOG_LEVEL_INFO
    int LOG_LEVEL_WARN -> LOG_LEVEL_WARN
    int LOG_LEVEL_ERROR -> LOG_LEVEL_ERROR
    int LOG_LEVEL_FATAL -> LOG_LEVEL_FATAL
    int LOG_LEVEL_ALL -> LOG_LEVEL_ALL
    int LOG_LEVEL_OFF -> LOG_LEVEL_OFF
    java.lang.String logName -> logName
    int currentLogLevel -> currentLogLevel
    java.lang.String shortLogName -> shortLogName
    java.lang.Class class$java$lang$Thread -> class$java$lang$Thread
    java.lang.Class class$org$apache$commons$logging$impl$SimpleLog -> class$org$apache$commons$logging$impl$SimpleLog
    java.lang.String getStringProperty(java.lang.String) -> getStringProperty
    java.lang.String getStringProperty(java.lang.String,java.lang.String) -> getStringProperty
    boolean getBooleanProperty(java.lang.String,boolean) -> getBooleanProperty
    void setLevel(int) -> setLevel
    int getLevel() -> getLevel
    void log(int,java.lang.Object,java.lang.Throwable) -> log
    void write(java.lang.StringBuffer) -> write
    boolean isLevelEnabled(int) -> isLevelEnabled
    void debug(java.lang.Object) -> debug
    void debug(java.lang.Object,java.lang.Throwable) -> debug
    void trace(java.lang.Object) -> trace
    void trace(java.lang.Object,java.lang.Throwable) -> trace
    void info(java.lang.Object) -> info
    void info(java.lang.Object,java.lang.Throwable) -> info
    void warn(java.lang.Object) -> warn
    void warn(java.lang.Object,java.lang.Throwable) -> warn
    void error(java.lang.Object) -> error
    void error(java.lang.Object,java.lang.Throwable) -> error
    void fatal(java.lang.Object) -> fatal
    void fatal(java.lang.Object,java.lang.Throwable) -> fatal
    boolean isDebugEnabled() -> isDebugEnabled
    boolean isErrorEnabled() -> isErrorEnabled
    boolean isFatalEnabled() -> isFatalEnabled
    boolean isInfoEnabled() -> isInfoEnabled
    boolean isTraceEnabled() -> isTraceEnabled
    boolean isWarnEnabled() -> isWarnEnabled
    java.lang.ClassLoader getContextClassLoader() -> getContextClassLoader
    java.io.InputStream getResourceAsStream(java.lang.String) -> getResourceAsStream
    java.lang.Class class$(java.lang.String) -> class$
    java.lang.ClassLoader access$000() -> access$000
org.apache.commons.logging.impl.SimpleLog$1 -> org.apache.commons.logging.impl.SimpleLog$1:
    java.lang.String val$name -> val$name
    java.lang.Object run() -> run
org.apache.commons.logging.impl.WeakHashtable -> org.apache.commons.logging.impl.WeakHashtable:
    long serialVersionUID -> serialVersionUID
    int MAX_CHANGES_BEFORE_PURGE -> MAX_CHANGES_BEFORE_PURGE
    int PARTIAL_PURGE_COUNT -> PARTIAL_PURGE_COUNT
    java.lang.ref.ReferenceQueue queue -> queue
    int changeCount -> changeCount
    boolean containsKey(java.lang.Object) -> containsKey
    java.util.Enumeration elements() -> elements
    java.util.Set entrySet() -> entrySet
    java.lang.Object get(java.lang.Object) -> get
    java.util.Enumeration keys() -> keys
    java.util.Set keySet() -> keySet
    java.lang.Object put(java.lang.Object,java.lang.Object) -> put
    void putAll(java.util.Map) -> putAll
    java.util.Collection values() -> values
    java.lang.Object remove(java.lang.Object) -> remove
    boolean isEmpty() -> isEmpty
    int size() -> size
    java.lang.String toString() -> toString
    void rehash() -> rehash
    void purge() -> purge
    void purgeOne() -> purgeOne
org.apache.commons.logging.impl.WeakHashtable$1 -> org.apache.commons.logging.impl.WeakHashtable$1:
    java.util.Enumeration val$enumer -> val$enumer
    org.apache.commons.logging.impl.WeakHashtable this$0 -> this$0
    boolean hasMoreElements() -> hasMoreElements
    java.lang.Object nextElement() -> nextElement
org.apache.commons.logging.impl.WeakHashtable$Entry -> org.apache.commons.logging.impl.WeakHashtable$Entry:
    java.lang.Object key -> key
    java.lang.Object value -> value
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.Object setValue(java.lang.Object) -> setValue
    java.lang.Object getValue() -> getValue
    java.lang.Object getKey() -> getKey
org.apache.commons.logging.impl.WeakHashtable$Referenced -> org.apache.commons.logging.impl.WeakHashtable$Referenced:
    java.lang.ref.WeakReference reference -> reference
    int hashCode -> hashCode
    int hashCode() -> hashCode
    java.lang.Object getValue() -> getValue
    boolean equals(java.lang.Object) -> equals
    java.lang.Object access$100(org.apache.commons.logging.impl.WeakHashtable$Referenced) -> access$100
org.apache.commons.logging.impl.WeakHashtable$WeakKey -> org.apache.commons.logging.impl.WeakHashtable$WeakKey:
    org.apache.commons.logging.impl.WeakHashtable$Referenced referenced -> referenced
    org.apache.commons.logging.impl.WeakHashtable$Referenced getReferenced() -> getReferenced
    org.apache.commons.logging.impl.WeakHashtable$Referenced access$400(org.apache.commons.logging.impl.WeakHashtable$WeakKey) -> access$400
org.apache.http.ConnectionClosedException -> org.apache.http.ConnectionClosedException:
    long serialVersionUID -> serialVersionUID
org.apache.http.ConnectionReuseStrategy -> org.apache.http.ConnectionReuseStrategy:
    boolean keepAlive(org.apache.http.HttpResponse,org.apache.http.protocol.HttpContext) -> keepAlive
org.apache.http.Consts -> org.apache.http.Consts:
    int CR -> CR
    int LF -> LF
    int SP -> SP
    int HT -> HT
    java.nio.charset.Charset UTF_8 -> UTF_8
    java.nio.charset.Charset ASCII -> ASCII
    java.nio.charset.Charset ISO_8859_1 -> ISO_8859_1
org.apache.http.ContentTooLongException -> org.apache.http.ContentTooLongException:
    long serialVersionUID -> serialVersionUID
org.apache.http.FormattedHeader -> org.apache.http.FormattedHeader:
    org.apache.http.util.CharArrayBuffer getBuffer() -> getBuffer
    int getValuePos() -> getValuePos
org.apache.http.Header -> org.apache.http.Header:
    java.lang.String getName() -> getName
    java.lang.String getValue() -> getValue
    org.apache.http.HeaderElement[] getElements() -> getElements
org.apache.http.HeaderElement -> org.apache.http.HeaderElement:
    java.lang.String getName() -> getName
    java.lang.String getValue() -> getValue
    org.apache.http.NameValuePair[] getParameters() -> getParameters
    org.apache.http.NameValuePair getParameterByName(java.lang.String) -> getParameterByName
    int getParameterCount() -> getParameterCount
    org.apache.http.NameValuePair getParameter(int) -> getParameter
org.apache.http.HeaderElementIterator -> org.apache.http.HeaderElementIterator:
    boolean hasNext() -> hasNext
    org.apache.http.HeaderElement nextElement() -> nextElement
org.apache.http.HeaderIterator -> org.apache.http.HeaderIterator:
    boolean hasNext() -> hasNext
    org.apache.http.Header nextHeader() -> nextHeader
org.apache.http.HttpClientConnection -> org.apache.http.HttpClientConnection:
    boolean isResponseAvailable(int) -> isResponseAvailable
    void sendRequestHeader(org.apache.http.HttpRequest) -> sendRequestHeader
    void sendRequestEntity(org.apache.http.HttpEntityEnclosingRequest) -> sendRequestEntity
    org.apache.http.HttpResponse receiveResponseHeader() -> receiveResponseHeader
    void receiveResponseEntity(org.apache.http.HttpResponse) -> receiveResponseEntity
    void flush() -> flush
org.apache.http.HttpConnection -> org.apache.http.HttpConnection:
    void close() -> close
    boolean isOpen() -> isOpen
    boolean isStale() -> isStale
    void setSocketTimeout(int) -> setSocketTimeout
    int getSocketTimeout() -> getSocketTimeout
    void shutdown() -> shutdown
    org.apache.http.HttpConnectionMetrics getMetrics() -> getMetrics
org.apache.http.HttpConnectionFactory -> org.apache.http.HttpConnectionFactory:
    org.apache.http.HttpConnection createConnection(java.net.Socket) -> createConnection
org.apache.http.HttpConnectionMetrics -> org.apache.http.HttpConnectionMetrics:
    long getRequestCount() -> getRequestCount
    long getResponseCount() -> getResponseCount
    long getSentBytesCount() -> getSentBytesCount
    long getReceivedBytesCount() -> getReceivedBytesCount
    java.lang.Object getMetric(java.lang.String) -> getMetric
    void reset() -> reset
org.apache.http.HttpEntity -> org.apache.http.HttpEntity:
    boolean isRepeatable() -> isRepeatable
    boolean isChunked() -> isChunked
    long getContentLength() -> getContentLength
    org.apache.http.Header getContentType() -> getContentType
    org.apache.http.Header getContentEncoding() -> getContentEncoding
    java.io.InputStream getContent() -> getContent
    void writeTo(java.io.OutputStream) -> writeTo
    boolean isStreaming() -> isStreaming
    void consumeContent() -> consumeContent
org.apache.http.HttpEntityEnclosingRequest -> org.apache.http.HttpEntityEnclosingRequest:
    boolean expectContinue() -> expectContinue
    void setEntity(org.apache.http.HttpEntity) -> setEntity
    org.apache.http.HttpEntity getEntity() -> getEntity
org.apache.http.HttpException -> org.apache.http.HttpException:
    long serialVersionUID -> serialVersionUID
org.apache.http.HttpHeaders -> org.apache.http.HttpHeaders:
    java.lang.String ACCEPT -> ACCEPT
    java.lang.String ACCEPT_CHARSET -> ACCEPT_CHARSET
    java.lang.String ACCEPT_ENCODING -> ACCEPT_ENCODING
    java.lang.String ACCEPT_LANGUAGE -> ACCEPT_LANGUAGE
    java.lang.String ACCEPT_RANGES -> ACCEPT_RANGES
    java.lang.String AGE -> AGE
    java.lang.String ALLOW -> ALLOW
    java.lang.String AUTHORIZATION -> AUTHORIZATION
    java.lang.String CACHE_CONTROL -> CACHE_CONTROL
    java.lang.String CONNECTION -> CONNECTION
    java.lang.String CONTENT_ENCODING -> CONTENT_ENCODING
    java.lang.String CONTENT_LANGUAGE -> CONTENT_LANGUAGE
    java.lang.String CONTENT_LENGTH -> CONTENT_LENGTH
    java.lang.String CONTENT_LOCATION -> CONTENT_LOCATION
    java.lang.String CONTENT_MD5 -> CONTENT_MD5
    java.lang.String CONTENT_RANGE -> CONTENT_RANGE
    java.lang.String CONTENT_TYPE -> CONTENT_TYPE
    java.lang.String DATE -> DATE
    java.lang.String DAV -> DAV
    java.lang.String DEPTH -> DEPTH
    java.lang.String DESTINATION -> DESTINATION
    java.lang.String ETAG -> ETAG
    java.lang.String EXPECT -> EXPECT
    java.lang.String EXPIRES -> EXPIRES
    java.lang.String FROM -> FROM
    java.lang.String HOST -> HOST
    java.lang.String IF -> IF
    java.lang.String IF_MATCH -> IF_MATCH
    java.lang.String IF_MODIFIED_SINCE -> IF_MODIFIED_SINCE
    java.lang.String IF_NONE_MATCH -> IF_NONE_MATCH
    java.lang.String IF_RANGE -> IF_RANGE
    java.lang.String IF_UNMODIFIED_SINCE -> IF_UNMODIFIED_SINCE
    java.lang.String LAST_MODIFIED -> LAST_MODIFIED
    java.lang.String LOCATION -> LOCATION
    java.lang.String LOCK_TOKEN -> LOCK_TOKEN
    java.lang.String MAX_FORWARDS -> MAX_FORWARDS
    java.lang.String OVERWRITE -> OVERWRITE
    java.lang.String PRAGMA -> PRAGMA
    java.lang.String PROXY_AUTHENTICATE -> PROXY_AUTHENTICATE
    java.lang.String PROXY_AUTHORIZATION -> PROXY_AUTHORIZATION
    java.lang.String RANGE -> RANGE
    java.lang.String REFERER -> REFERER
    java.lang.String RETRY_AFTER -> RETRY_AFTER
    java.lang.String SERVER -> SERVER
    java.lang.String STATUS_URI -> STATUS_URI
    java.lang.String TE -> TE
    java.lang.String TIMEOUT -> TIMEOUT
    java.lang.String TRAILER -> TRAILER
    java.lang.String TRANSFER_ENCODING -> TRANSFER_ENCODING
    java.lang.String UPGRADE -> UPGRADE
    java.lang.String USER_AGENT -> USER_AGENT
    java.lang.String VARY -> VARY
    java.lang.String VIA -> VIA
    java.lang.String WARNING -> WARNING
    java.lang.String WWW_AUTHENTICATE -> WWW_AUTHENTICATE
org.apache.http.HttpHost -> org.apache.http.HttpHost:
    long serialVersionUID -> serialVersionUID
    java.lang.String DEFAULT_SCHEME_NAME -> DEFAULT_SCHEME_NAME
    java.lang.String hostname -> hostname
    java.lang.String lcHostname -> lcHostname
    int port -> port
    java.lang.String schemeName -> schemeName
    java.net.InetAddress address -> address
    java.lang.String getHostName() -> getHostName
    int getPort() -> getPort
    java.lang.String getSchemeName() -> getSchemeName
    java.net.InetAddress getAddress() -> getAddress
    java.lang.String toURI() -> toURI
    java.lang.String toHostString() -> toHostString
    java.lang.String toString() -> toString
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.Object clone() -> clone
org.apache.http.HttpInetConnection -> org.apache.http.HttpInetConnection:
    java.net.InetAddress getLocalAddress() -> getLocalAddress
    int getLocalPort() -> getLocalPort
    java.net.InetAddress getRemoteAddress() -> getRemoteAddress
    int getRemotePort() -> getRemotePort
org.apache.http.HttpMessage -> org.apache.http.HttpMessage:
    org.apache.http.ProtocolVersion getProtocolVersion() -> getProtocolVersion
    boolean containsHeader(java.lang.String) -> containsHeader
    org.apache.http.Header[] getHeaders(java.lang.String) -> getHeaders
    org.apache.http.Header getFirstHeader(java.lang.String) -> getFirstHeader
    org.apache.http.Header getLastHeader(java.lang.String) -> getLastHeader
    org.apache.http.Header[] getAllHeaders() -> getAllHeaders
    void addHeader(org.apache.http.Header) -> addHeader
    void addHeader(java.lang.String,java.lang.String) -> addHeader
    void setHeader(org.apache.http.Header) -> setHeader
    void setHeader(java.lang.String,java.lang.String) -> setHeader
    void setHeaders(org.apache.http.Header[]) -> setHeaders
    void removeHeader(org.apache.http.Header) -> removeHeader
    void removeHeaders(java.lang.String) -> removeHeaders
    org.apache.http.HeaderIterator headerIterator() -> headerIterator
    org.apache.http.HeaderIterator headerIterator(java.lang.String) -> headerIterator
    org.apache.http.params.HttpParams getParams() -> getParams
    void setParams(org.apache.http.params.HttpParams) -> setParams
org.apache.http.HttpRequest -> org.apache.http.HttpRequest:
    org.apache.http.RequestLine getRequestLine() -> getRequestLine
org.apache.http.HttpRequestFactory -> org.apache.http.HttpRequestFactory:
    org.apache.http.HttpRequest newHttpRequest(org.apache.http.RequestLine) -> newHttpRequest
    org.apache.http.HttpRequest newHttpRequest(java.lang.String,java.lang.String) -> newHttpRequest
org.apache.http.HttpRequestInterceptor -> org.apache.http.HttpRequestInterceptor:
    void process(org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext) -> process
org.apache.http.HttpResponse -> org.apache.http.HttpResponse:
    org.apache.http.StatusLine getStatusLine() -> getStatusLine
    void setStatusLine(org.apache.http.StatusLine) -> setStatusLine
    void setStatusLine(org.apache.http.ProtocolVersion,int) -> setStatusLine
    void setStatusLine(org.apache.http.ProtocolVersion,int,java.lang.String) -> setStatusLine
    void setStatusCode(int) -> setStatusCode
    void setReasonPhrase(java.lang.String) -> setReasonPhrase
    org.apache.http.HttpEntity getEntity() -> getEntity
    void setEntity(org.apache.http.HttpEntity) -> setEntity
    java.util.Locale getLocale() -> getLocale
    void setLocale(java.util.Locale) -> setLocale
org.apache.http.HttpResponseFactory -> org.apache.http.HttpResponseFactory:
    org.apache.http.HttpResponse newHttpResponse(org.apache.http.ProtocolVersion,int,org.apache.http.protocol.HttpContext) -> newHttpResponse
    org.apache.http.HttpResponse newHttpResponse(org.apache.http.StatusLine,org.apache.http.protocol.HttpContext) -> newHttpResponse
org.apache.http.HttpResponseInterceptor -> org.apache.http.HttpResponseInterceptor:
    void process(org.apache.http.HttpResponse,org.apache.http.protocol.HttpContext) -> process
org.apache.http.HttpServerConnection -> org.apache.http.HttpServerConnection:
    org.apache.http.HttpRequest receiveRequestHeader() -> receiveRequestHeader
    void receiveRequestEntity(org.apache.http.HttpEntityEnclosingRequest) -> receiveRequestEntity
    void sendResponseHeader(org.apache.http.HttpResponse) -> sendResponseHeader
    void sendResponseEntity(org.apache.http.HttpResponse) -> sendResponseEntity
    void flush() -> flush
org.apache.http.HttpStatus -> org.apache.http.HttpStatus:
    int SC_CONTINUE -> SC_CONTINUE
    int SC_SWITCHING_PROTOCOLS -> SC_SWITCHING_PROTOCOLS
    int SC_PROCESSING -> SC_PROCESSING
    int SC_OK -> SC_OK
    int SC_CREATED -> SC_CREATED
    int SC_ACCEPTED -> SC_ACCEPTED
    int SC_NON_AUTHORITATIVE_INFORMATION -> SC_NON_AUTHORITATIVE_INFORMATION
    int SC_NO_CONTENT -> SC_NO_CONTENT
    int SC_RESET_CONTENT -> SC_RESET_CONTENT
    int SC_PARTIAL_CONTENT -> SC_PARTIAL_CONTENT
    int SC_MULTI_STATUS -> SC_MULTI_STATUS
    int SC_MULTIPLE_CHOICES -> SC_MULTIPLE_CHOICES
    int SC_MOVED_PERMANENTLY -> SC_MOVED_PERMANENTLY
    int SC_MOVED_TEMPORARILY -> SC_MOVED_TEMPORARILY
    int SC_SEE_OTHER -> SC_SEE_OTHER
    int SC_NOT_MODIFIED -> SC_NOT_MODIFIED
    int SC_USE_PROXY -> SC_USE_PROXY
    int SC_TEMPORARY_REDIRECT -> SC_TEMPORARY_REDIRECT
    int SC_BAD_REQUEST -> SC_BAD_REQUEST
    int SC_UNAUTHORIZED -> SC_UNAUTHORIZED
    int SC_PAYMENT_REQUIRED -> SC_PAYMENT_REQUIRED
    int SC_FORBIDDEN -> SC_FORBIDDEN
    int SC_NOT_FOUND -> SC_NOT_FOUND
    int SC_METHOD_NOT_ALLOWED -> SC_METHOD_NOT_ALLOWED
    int SC_NOT_ACCEPTABLE -> SC_NOT_ACCEPTABLE
    int SC_PROXY_AUTHENTICATION_REQUIRED -> SC_PROXY_AUTHENTICATION_REQUIRED
    int SC_REQUEST_TIMEOUT -> SC_REQUEST_TIMEOUT
    int SC_CONFLICT -> SC_CONFLICT
    int SC_GONE -> SC_GONE
    int SC_LENGTH_REQUIRED -> SC_LENGTH_REQUIRED
    int SC_PRECONDITION_FAILED -> SC_PRECONDITION_FAILED
    int SC_REQUEST_TOO_LONG -> SC_REQUEST_TOO_LONG
    int SC_REQUEST_URI_TOO_LONG -> SC_REQUEST_URI_TOO_LONG
    int SC_UNSUPPORTED_MEDIA_TYPE -> SC_UNSUPPORTED_MEDIA_TYPE
    int SC_REQUESTED_RANGE_NOT_SATISFIABLE -> SC_REQUESTED_RANGE_NOT_SATISFIABLE
    int SC_EXPECTATION_FAILED -> SC_EXPECTATION_FAILED
    int SC_INSUFFICIENT_SPACE_ON_RESOURCE -> SC_INSUFFICIENT_SPACE_ON_RESOURCE
    int SC_METHOD_FAILURE -> SC_METHOD_FAILURE
    int SC_UNPROCESSABLE_ENTITY -> SC_UNPROCESSABLE_ENTITY
    int SC_LOCKED -> SC_LOCKED
    int SC_FAILED_DEPENDENCY -> SC_FAILED_DEPENDENCY
    int SC_INTERNAL_SERVER_ERROR -> SC_INTERNAL_SERVER_ERROR
    int SC_NOT_IMPLEMENTED -> SC_NOT_IMPLEMENTED
    int SC_BAD_GATEWAY -> SC_BAD_GATEWAY
    int SC_SERVICE_UNAVAILABLE -> SC_SERVICE_UNAVAILABLE
    int SC_GATEWAY_TIMEOUT -> SC_GATEWAY_TIMEOUT
    int SC_HTTP_VERSION_NOT_SUPPORTED -> SC_HTTP_VERSION_NOT_SUPPORTED
    int SC_INSUFFICIENT_STORAGE -> SC_INSUFFICIENT_STORAGE
org.apache.http.HttpVersion -> org.apache.http.HttpVersion:
    long serialVersionUID -> serialVersionUID
    java.lang.String HTTP -> HTTP
    org.apache.http.HttpVersion HTTP_0_9 -> HTTP_0_9
    org.apache.http.HttpVersion HTTP_1_0 -> HTTP_1_0
    org.apache.http.HttpVersion HTTP_1_1 -> HTTP_1_1
    org.apache.http.ProtocolVersion forVersion(int,int) -> forVersion
org.apache.http.MalformedChunkCodingException -> org.apache.http.MalformedChunkCodingException:
    long serialVersionUID -> serialVersionUID
org.apache.http.MessageConstraintException -> org.apache.http.MessageConstraintException:
    long serialVersionUID -> serialVersionUID
org.apache.http.MethodNotSupportedException -> org.apache.http.MethodNotSupportedException:
    long serialVersionUID -> serialVersionUID
org.apache.http.NameValuePair -> org.apache.http.NameValuePair:
    java.lang.String getName() -> getName
    java.lang.String getValue() -> getValue
org.apache.http.NoHttpResponseException -> org.apache.http.NoHttpResponseException:
    long serialVersionUID -> serialVersionUID
org.apache.http.ParseException -> org.apache.http.ParseException:
    long serialVersionUID -> serialVersionUID
org.apache.http.ProtocolException -> org.apache.http.ProtocolException:
    long serialVersionUID -> serialVersionUID
org.apache.http.ProtocolVersion -> org.apache.http.ProtocolVersion:
    long serialVersionUID -> serialVersionUID
    java.lang.String protocol -> protocol
    int major -> major
    int minor -> minor
    java.lang.String getProtocol() -> getProtocol
    int getMajor() -> getMajor
    int getMinor() -> getMinor
    org.apache.http.ProtocolVersion forVersion(int,int) -> forVersion
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    boolean isComparable(org.apache.http.ProtocolVersion) -> isComparable
    int compareToVersion(org.apache.http.ProtocolVersion) -> compareToVersion
    boolean greaterEquals(org.apache.http.ProtocolVersion) -> greaterEquals
    boolean lessEquals(org.apache.http.ProtocolVersion) -> lessEquals
    java.lang.String toString() -> toString
    java.lang.Object clone() -> clone
org.apache.http.ReasonPhraseCatalog -> org.apache.http.ReasonPhraseCatalog:
    java.lang.String getReason(int,java.util.Locale) -> getReason
org.apache.http.RequestLine -> org.apache.http.RequestLine:
    java.lang.String getMethod() -> getMethod
    org.apache.http.ProtocolVersion getProtocolVersion() -> getProtocolVersion
    java.lang.String getUri() -> getUri
org.apache.http.StatusLine -> org.apache.http.StatusLine:
    org.apache.http.ProtocolVersion getProtocolVersion() -> getProtocolVersion
    int getStatusCode() -> getStatusCode
    java.lang.String getReasonPhrase() -> getReasonPhrase
org.apache.http.TokenIterator -> org.apache.http.TokenIterator:
    boolean hasNext() -> hasNext
    java.lang.String nextToken() -> nextToken
org.apache.http.TruncatedChunkException -> org.apache.http.TruncatedChunkException:
    long serialVersionUID -> serialVersionUID
org.apache.http.UnsupportedHttpVersionException -> org.apache.http.UnsupportedHttpVersionException:
    long serialVersionUID -> serialVersionUID
org.apache.http.annotation.GuardedBy -> org.apache.http.annotation.GuardedBy:
    java.lang.String value() -> value
org.apache.http.annotation.Immutable -> org.apache.http.annotation.Immutable:
org.apache.http.annotation.NotThreadSafe -> org.apache.http.annotation.NotThreadSafe:
org.apache.http.annotation.ThreadSafe -> org.apache.http.annotation.ThreadSafe:
org.apache.http.auth.AUTH -> org.apache.http.auth.AUTH:
    java.lang.String WWW_AUTH -> WWW_AUTH
    java.lang.String WWW_AUTH_RESP -> WWW_AUTH_RESP
    java.lang.String PROXY_AUTH -> PROXY_AUTH
    java.lang.String PROXY_AUTH_RESP -> PROXY_AUTH_RESP
org.apache.http.auth.AuthOption -> org.apache.http.auth.AuthOption:
    org.apache.http.auth.AuthScheme authScheme -> authScheme
    org.apache.http.auth.Credentials creds -> creds
    org.apache.http.auth.AuthScheme getAuthScheme() -> getAuthScheme
    org.apache.http.auth.Credentials getCredentials() -> getCredentials
    java.lang.String toString() -> toString
org.apache.http.auth.AuthProtocolState -> org.apache.http.auth.AuthProtocolState:
    org.apache.http.auth.AuthProtocolState UNCHALLENGED -> UNCHALLENGED
    org.apache.http.auth.AuthProtocolState CHALLENGED -> CHALLENGED
    org.apache.http.auth.AuthProtocolState HANDSHAKE -> HANDSHAKE
    org.apache.http.auth.AuthProtocolState FAILURE -> FAILURE
    org.apache.http.auth.AuthProtocolState SUCCESS -> SUCCESS
    org.apache.http.auth.AuthProtocolState[] $VALUES -> $VALUES
    org.apache.http.auth.AuthProtocolState[] values() -> values
    org.apache.http.auth.AuthProtocolState valueOf(java.lang.String) -> valueOf
org.apache.http.auth.AuthScheme -> org.apache.http.auth.AuthScheme:
    void processChallenge(org.apache.http.Header) -> processChallenge
    java.lang.String getSchemeName() -> getSchemeName
    java.lang.String getParameter(java.lang.String) -> getParameter
    java.lang.String getRealm() -> getRealm
    boolean isConnectionBased() -> isConnectionBased
    boolean isComplete() -> isComplete
    org.apache.http.Header authenticate(org.apache.http.auth.Credentials,org.apache.http.HttpRequest) -> authenticate
org.apache.http.auth.AuthSchemeFactory -> org.apache.http.auth.AuthSchemeFactory:
    org.apache.http.auth.AuthScheme newInstance(org.apache.http.params.HttpParams) -> newInstance
org.apache.http.auth.AuthSchemeProvider -> org.apache.http.auth.AuthSchemeProvider:
    org.apache.http.auth.AuthScheme create(org.apache.http.protocol.HttpContext) -> create
org.apache.http.auth.AuthSchemeRegistry -> org.apache.http.auth.AuthSchemeRegistry:
    java.util.concurrent.ConcurrentHashMap registeredSchemes -> registeredSchemes
    void register(java.lang.String,org.apache.http.auth.AuthSchemeFactory) -> register
    void unregister(java.lang.String) -> unregister
    org.apache.http.auth.AuthScheme getAuthScheme(java.lang.String,org.apache.http.params.HttpParams) -> getAuthScheme
    java.util.List getSchemeNames() -> getSchemeNames
    void setItems(java.util.Map) -> setItems
    org.apache.http.auth.AuthSchemeProvider lookup(java.lang.String) -> lookup
    java.lang.Object lookup(java.lang.String) -> lookup
org.apache.http.auth.AuthSchemeRegistry$1 -> org.apache.http.auth.AuthSchemeRegistry$1:
    java.lang.String val$name -> val$name
    org.apache.http.auth.AuthSchemeRegistry this$0 -> this$0
    org.apache.http.auth.AuthScheme create(org.apache.http.protocol.HttpContext) -> create
org.apache.http.auth.AuthScope -> org.apache.http.auth.AuthScope:
    java.lang.String ANY_HOST -> ANY_HOST
    int ANY_PORT -> ANY_PORT
    java.lang.String ANY_REALM -> ANY_REALM
    java.lang.String ANY_SCHEME -> ANY_SCHEME
    org.apache.http.auth.AuthScope ANY -> ANY
    java.lang.String scheme -> scheme
    java.lang.String realm -> realm
    java.lang.String host -> host
    int port -> port
    java.lang.String getHost() -> getHost
    int getPort() -> getPort
    java.lang.String getRealm() -> getRealm
    java.lang.String getScheme() -> getScheme
    int match(org.apache.http.auth.AuthScope) -> match
    boolean equals(java.lang.Object) -> equals
    java.lang.String toString() -> toString
    int hashCode() -> hashCode
org.apache.http.auth.AuthState -> org.apache.http.auth.AuthState:
    org.apache.http.auth.AuthProtocolState state -> state
    org.apache.http.auth.AuthScheme authScheme -> authScheme
    org.apache.http.auth.AuthScope authScope -> authScope
    org.apache.http.auth.Credentials credentials -> credentials
    java.util.Queue authOptions -> authOptions
    void reset() -> reset
    org.apache.http.auth.AuthProtocolState getState() -> getState
    void setState(org.apache.http.auth.AuthProtocolState) -> setState
    org.apache.http.auth.AuthScheme getAuthScheme() -> getAuthScheme
    org.apache.http.auth.Credentials getCredentials() -> getCredentials
    void update(org.apache.http.auth.AuthScheme,org.apache.http.auth.Credentials) -> update
    java.util.Queue getAuthOptions() -> getAuthOptions
    boolean hasAuthOptions() -> hasAuthOptions
    void update(java.util.Queue) -> update
    void invalidate() -> invalidate
    boolean isValid() -> isValid
    void setAuthScheme(org.apache.http.auth.AuthScheme) -> setAuthScheme
    void setCredentials(org.apache.http.auth.Credentials) -> setCredentials
    org.apache.http.auth.AuthScope getAuthScope() -> getAuthScope
    void setAuthScope(org.apache.http.auth.AuthScope) -> setAuthScope
    java.lang.String toString() -> toString
org.apache.http.auth.AuthenticationException -> org.apache.http.auth.AuthenticationException:
    long serialVersionUID -> serialVersionUID
org.apache.http.auth.BasicUserPrincipal -> org.apache.http.auth.BasicUserPrincipal:
    long serialVersionUID -> serialVersionUID
    java.lang.String username -> username
    java.lang.String getName() -> getName
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    java.lang.String toString() -> toString
org.apache.http.auth.ChallengeState -> org.apache.http.auth.ChallengeState:
    org.apache.http.auth.ChallengeState TARGET -> TARGET
    org.apache.http.auth.ChallengeState PROXY -> PROXY
    org.apache.http.auth.ChallengeState[] $VALUES -> $VALUES
    org.apache.http.auth.ChallengeState[] values() -> values
    org.apache.http.auth.ChallengeState valueOf(java.lang.String) -> valueOf
org.apache.http.auth.ContextAwareAuthScheme -> org.apache.http.auth.ContextAwareAuthScheme:
    org.apache.http.Header authenticate(org.apache.http.auth.Credentials,org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext) -> authenticate
org.apache.http.auth.Credentials -> org.apache.http.auth.Credentials:
    java.security.Principal getUserPrincipal() -> getUserPrincipal
    java.lang.String getPassword() -> getPassword
org.apache.http.auth.InvalidCredentialsException -> org.apache.http.auth.InvalidCredentialsException:
    long serialVersionUID -> serialVersionUID
org.apache.http.auth.MalformedChallengeException -> org.apache.http.auth.MalformedChallengeException:
    long serialVersionUID -> serialVersionUID
org.apache.http.auth.NTCredentials -> org.apache.http.auth.NTCredentials:
    long serialVersionUID -> serialVersionUID
    org.apache.http.auth.NTUserPrincipal principal -> principal
    java.lang.String password -> password
    java.lang.String workstation -> workstation
    java.security.Principal getUserPrincipal() -> getUserPrincipal
    java.lang.String getUserName() -> getUserName
    java.lang.String getPassword() -> getPassword
    java.lang.String getDomain() -> getDomain
    java.lang.String getWorkstation() -> getWorkstation
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    java.lang.String toString() -> toString
org.apache.http.auth.NTUserPrincipal -> org.apache.http.auth.NTUserPrincipal:
    long serialVersionUID -> serialVersionUID
    java.lang.String username -> username
    java.lang.String domain -> domain
    java.lang.String ntname -> ntname
    java.lang.String getName() -> getName
    java.lang.String getDomain() -> getDomain
    java.lang.String getUsername() -> getUsername
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    java.lang.String toString() -> toString
org.apache.http.auth.UsernamePasswordCredentials -> org.apache.http.auth.UsernamePasswordCredentials:
    long serialVersionUID -> serialVersionUID
    org.apache.http.auth.BasicUserPrincipal principal -> principal
    java.lang.String password -> password
    java.security.Principal getUserPrincipal() -> getUserPrincipal
    java.lang.String getUserName() -> getUserName
    java.lang.String getPassword() -> getPassword
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    java.lang.String toString() -> toString
org.apache.http.auth.params.AuthPNames -> org.apache.http.auth.params.AuthPNames:
    java.lang.String CREDENTIAL_CHARSET -> CREDENTIAL_CHARSET
    java.lang.String TARGET_AUTH_PREF -> TARGET_AUTH_PREF
    java.lang.String PROXY_AUTH_PREF -> PROXY_AUTH_PREF
org.apache.http.auth.params.AuthParamBean -> org.apache.http.auth.params.AuthParamBean:
    void setCredentialCharset(java.lang.String) -> setCredentialCharset
org.apache.http.auth.params.AuthParams -> org.apache.http.auth.params.AuthParams:
    java.lang.String getCredentialCharset(org.apache.http.params.HttpParams) -> getCredentialCharset
    void setCredentialCharset(org.apache.http.params.HttpParams,java.lang.String) -> setCredentialCharset
org.apache.http.client.AuthCache -> org.apache.http.client.AuthCache:
    void put(org.apache.http.HttpHost,org.apache.http.auth.AuthScheme) -> put
    org.apache.http.auth.AuthScheme get(org.apache.http.HttpHost) -> get
    void remove(org.apache.http.HttpHost) -> remove
    void clear() -> clear
org.apache.http.client.AuthenticationHandler -> org.apache.http.client.AuthenticationHandler:
    boolean isAuthenticationRequested(org.apache.http.HttpResponse,org.apache.http.protocol.HttpContext) -> isAuthenticationRequested
    java.util.Map getChallenges(org.apache.http.HttpResponse,org.apache.http.protocol.HttpContext) -> getChallenges
    org.apache.http.auth.AuthScheme selectScheme(java.util.Map,org.apache.http.HttpResponse,org.apache.http.protocol.HttpContext) -> selectScheme
org.apache.http.client.AuthenticationStrategy -> org.apache.http.client.AuthenticationStrategy:
    boolean isAuthenticationRequested(org.apache.http.HttpHost,org.apache.http.HttpResponse,org.apache.http.protocol.HttpContext) -> isAuthenticationRequested
    java.util.Map getChallenges(org.apache.http.HttpHost,org.apache.http.HttpResponse,org.apache.http.protocol.HttpContext) -> getChallenges
    java.util.Queue select(java.util.Map,org.apache.http.HttpHost,org.apache.http.HttpResponse,org.apache.http.protocol.HttpContext) -> select
    void authSucceeded(org.apache.http.HttpHost,org.apache.http.auth.AuthScheme,org.apache.http.protocol.HttpContext) -> authSucceeded
    void authFailed(org.apache.http.HttpHost,org.apache.http.auth.AuthScheme,org.apache.http.protocol.HttpContext) -> authFailed
org.apache.http.client.BackoffManager -> org.apache.http.client.BackoffManager:
    void backOff(org.apache.http.conn.routing.HttpRoute) -> backOff
    void probe(org.apache.http.conn.routing.HttpRoute) -> probe
org.apache.http.client.CircularRedirectException -> org.apache.http.client.CircularRedirectException:
    long serialVersionUID -> serialVersionUID
org.apache.http.client.ClientProtocolException -> org.apache.http.client.ClientProtocolException:
    long serialVersionUID -> serialVersionUID
org.apache.http.client.ConnectionBackoffStrategy -> org.apache.http.client.ConnectionBackoffStrategy:
    boolean shouldBackoff(java.lang.Throwable) -> shouldBackoff
    boolean shouldBackoff(org.apache.http.HttpResponse) -> shouldBackoff
org.apache.http.client.CookieStore -> org.apache.http.client.CookieStore:
    void addCookie(org.apache.http.cookie.Cookie) -> addCookie
    java.util.List getCookies() -> getCookies
    boolean clearExpired(java.util.Date) -> clearExpired
    void clear() -> clear
org.apache.http.client.CredentialsProvider -> org.apache.http.client.CredentialsProvider:
    void setCredentials(org.apache.http.auth.AuthScope,org.apache.http.auth.Credentials) -> setCredentials
    org.apache.http.auth.Credentials getCredentials(org.apache.http.auth.AuthScope) -> getCredentials
    void clear() -> clear
org.apache.http.client.HttpClient -> org.apache.http.client.HttpClient:
    org.apache.http.params.HttpParams getParams() -> getParams
    org.apache.http.conn.ClientConnectionManager getConnectionManager() -> getConnectionManager
    org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest) -> execute
    org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest,org.apache.http.protocol.HttpContext) -> execute
    org.apache.http.HttpResponse execute(org.apache.http.HttpHost,org.apache.http.HttpRequest) -> execute
    org.apache.http.HttpResponse execute(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext) -> execute
    java.lang.Object execute(org.apache.http.client.methods.HttpUriRequest,org.apache.http.client.ResponseHandler) -> execute
    java.lang.Object execute(org.apache.http.client.methods.HttpUriRequest,org.apache.http.client.ResponseHandler,org.apache.http.protocol.HttpContext) -> execute
    java.lang.Object execute(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.client.ResponseHandler) -> execute
    java.lang.Object execute(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.client.ResponseHandler,org.apache.http.protocol.HttpContext) -> execute
org.apache.http.client.HttpRequestRetryHandler -> org.apache.http.client.HttpRequestRetryHandler:
    boolean retryRequest(java.io.IOException,int,org.apache.http.protocol.HttpContext) -> retryRequest
org.apache.http.client.HttpResponseException -> org.apache.http.client.HttpResponseException:
    long serialVersionUID -> serialVersionUID
    int statusCode -> statusCode
    int getStatusCode() -> getStatusCode
org.apache.http.client.NonRepeatableRequestException -> org.apache.http.client.NonRepeatableRequestException:
    long serialVersionUID -> serialVersionUID
org.apache.http.client.RedirectException -> org.apache.http.client.RedirectException:
    long serialVersionUID -> serialVersionUID
org.apache.http.client.RedirectHandler -> org.apache.http.client.RedirectHandler:
    boolean isRedirectRequested(org.apache.http.HttpResponse,org.apache.http.protocol.HttpContext) -> isRedirectRequested
    java.net.URI getLocationURI(org.apache.http.HttpResponse,org.apache.http.protocol.HttpContext) -> getLocationURI
org.apache.http.client.RedirectStrategy -> org.apache.http.client.RedirectStrategy:
    boolean isRedirected(org.apache.http.HttpRequest,org.apache.http.HttpResponse,org.apache.http.protocol.HttpContext) -> isRedirected
    org.apache.http.client.methods.HttpUriRequest getRedirect(org.apache.http.HttpRequest,org.apache.http.HttpResponse,org.apache.http.protocol.HttpContext) -> getRedirect
org.apache.http.client.RequestDirector -> org.apache.http.client.RequestDirector:
    org.apache.http.HttpResponse execute(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext) -> execute
org.apache.http.client.ResponseHandler -> org.apache.http.client.ResponseHandler:
    java.lang.Object handleResponse(org.apache.http.HttpResponse) -> handleResponse
org.apache.http.client.ServiceUnavailableRetryStrategy -> org.apache.http.client.ServiceUnavailableRetryStrategy:
    boolean retryRequest(org.apache.http.HttpResponse,int,org.apache.http.protocol.HttpContext) -> retryRequest
    long getRetryInterval() -> getRetryInterval
org.apache.http.client.UserTokenHandler -> org.apache.http.client.UserTokenHandler:
    java.lang.Object getUserToken(org.apache.http.protocol.HttpContext) -> getUserToken
org.apache.http.client.config.AuthSchemes -> org.apache.http.client.config.AuthSchemes:
    java.lang.String BASIC -> BASIC
    java.lang.String DIGEST -> DIGEST
    java.lang.String NTLM -> NTLM
    java.lang.String SPNEGO -> SPNEGO
    java.lang.String KERBEROS -> KERBEROS
org.apache.http.client.config.CookieSpecs -> org.apache.http.client.config.CookieSpecs:
    java.lang.String BROWSER_COMPATIBILITY -> BROWSER_COMPATIBILITY
    java.lang.String NETSCAPE -> NETSCAPE
    java.lang.String STANDARD -> STANDARD
    java.lang.String BEST_MATCH -> BEST_MATCH
    java.lang.String IGNORE_COOKIES -> IGNORE_COOKIES
org.apache.http.client.config.RequestConfig -> org.apache.http.client.config.RequestConfig:
    org.apache.http.client.config.RequestConfig DEFAULT -> DEFAULT
    boolean expectContinueEnabled -> expectContinueEnabled
    org.apache.http.HttpHost proxy -> proxy
    java.net.InetAddress localAddress -> localAddress
    boolean staleConnectionCheckEnabled -> staleConnectionCheckEnabled
    java.lang.String cookieSpec -> cookieSpec
    boolean redirectsEnabled -> redirectsEnabled
    boolean relativeRedirectsAllowed -> relativeRedirectsAllowed
    boolean circularRedirectsAllowed -> circularRedirectsAllowed
    int maxRedirects -> maxRedirects
    boolean authenticationEnabled -> authenticationEnabled
    java.util.Collection targetPreferredAuthSchemes -> targetPreferredAuthSchemes
    java.util.Collection proxyPreferredAuthSchemes -> proxyPreferredAuthSchemes
    int connectionRequestTimeout -> connectionRequestTimeout
    int connectTimeout -> connectTimeout
    int socketTimeout -> socketTimeout
    boolean isExpectContinueEnabled() -> isExpectContinueEnabled
    org.apache.http.HttpHost getProxy() -> getProxy
    java.net.InetAddress getLocalAddress() -> getLocalAddress
    boolean isStaleConnectionCheckEnabled() -> isStaleConnectionCheckEnabled
    java.lang.String getCookieSpec() -> getCookieSpec
    boolean isRedirectsEnabled() -> isRedirectsEnabled
    boolean isRelativeRedirectsAllowed() -> isRelativeRedirectsAllowed
    boolean isCircularRedirectsAllowed() -> isCircularRedirectsAllowed
    int getMaxRedirects() -> getMaxRedirects
    boolean isAuthenticationEnabled() -> isAuthenticationEnabled
    java.util.Collection getTargetPreferredAuthSchemes() -> getTargetPreferredAuthSchemes
    java.util.Collection getProxyPreferredAuthSchemes() -> getProxyPreferredAuthSchemes
    int getConnectionRequestTimeout() -> getConnectionRequestTimeout
    int getConnectTimeout() -> getConnectTimeout
    int getSocketTimeout() -> getSocketTimeout
    org.apache.http.client.config.RequestConfig clone() -> clone
    java.lang.String toString() -> toString
    org.apache.http.client.config.RequestConfig$Builder custom() -> custom
    org.apache.http.client.config.RequestConfig$Builder copy(org.apache.http.client.config.RequestConfig) -> copy
    java.lang.Object clone() -> clone
org.apache.http.client.config.RequestConfig$Builder -> org.apache.http.client.config.RequestConfig$Builder:
    boolean expectContinueEnabled -> expectContinueEnabled
    org.apache.http.HttpHost proxy -> proxy
    java.net.InetAddress localAddress -> localAddress
    boolean staleConnectionCheckEnabled -> staleConnectionCheckEnabled
    java.lang.String cookieSpec -> cookieSpec
    boolean redirectsEnabled -> redirectsEnabled
    boolean relativeRedirectsAllowed -> relativeRedirectsAllowed
    boolean circularRedirectsAllowed -> circularRedirectsAllowed
    int maxRedirects -> maxRedirects
    boolean authenticationEnabled -> authenticationEnabled
    java.util.Collection targetPreferredAuthSchemes -> targetPreferredAuthSchemes
    java.util.Collection proxyPreferredAuthSchemes -> proxyPreferredAuthSchemes
    int connectionRequestTimeout -> connectionRequestTimeout
    int connectTimeout -> connectTimeout
    int socketTimeout -> socketTimeout
    org.apache.http.client.config.RequestConfig$Builder setExpectContinueEnabled(boolean) -> setExpectContinueEnabled
    org.apache.http.client.config.RequestConfig$Builder setProxy(org.apache.http.HttpHost) -> setProxy
    org.apache.http.client.config.RequestConfig$Builder setLocalAddress(java.net.InetAddress) -> setLocalAddress
    org.apache.http.client.config.RequestConfig$Builder setStaleConnectionCheckEnabled(boolean) -> setStaleConnectionCheckEnabled
    org.apache.http.client.config.RequestConfig$Builder setCookieSpec(java.lang.String) -> setCookieSpec
    org.apache.http.client.config.RequestConfig$Builder setRedirectsEnabled(boolean) -> setRedirectsEnabled
    org.apache.http.client.config.RequestConfig$Builder setRelativeRedirectsAllowed(boolean) -> setRelativeRedirectsAllowed
    org.apache.http.client.config.RequestConfig$Builder setCircularRedirectsAllowed(boolean) -> setCircularRedirectsAllowed
    org.apache.http.client.config.RequestConfig$Builder setMaxRedirects(int) -> setMaxRedirects
    org.apache.http.client.config.RequestConfig$Builder setAuthenticationEnabled(boolean) -> setAuthenticationEnabled
    org.apache.http.client.config.RequestConfig$Builder setTargetPreferredAuthSchemes(java.util.Collection) -> setTargetPreferredAuthSchemes
    org.apache.http.client.config.RequestConfig$Builder setProxyPreferredAuthSchemes(java.util.Collection) -> setProxyPreferredAuthSchemes
    org.apache.http.client.config.RequestConfig$Builder setConnectionRequestTimeout(int) -> setConnectionRequestTimeout
    org.apache.http.client.config.RequestConfig$Builder setConnectTimeout(int) -> setConnectTimeout
    org.apache.http.client.config.RequestConfig$Builder setSocketTimeout(int) -> setSocketTimeout
    org.apache.http.client.config.RequestConfig build() -> build
org.apache.http.client.entity.DecompressingEntity -> org.apache.http.client.entity.DecompressingEntity:
    int BUFFER_SIZE -> BUFFER_SIZE
    java.io.InputStream content -> content
    java.io.InputStream decorate(java.io.InputStream) -> decorate
    java.io.InputStream getDecompressingStream() -> getDecompressingStream
    java.io.InputStream getContent() -> getContent
    void writeTo(java.io.OutputStream) -> writeTo
org.apache.http.client.entity.DeflateDecompressingEntity -> org.apache.http.client.entity.DeflateDecompressingEntity:
    java.io.InputStream decorate(java.io.InputStream) -> decorate
    org.apache.http.Header getContentEncoding() -> getContentEncoding
    long getContentLength() -> getContentLength
    void writeTo(java.io.OutputStream) -> writeTo
    java.io.InputStream getContent() -> getContent
org.apache.http.client.entity.DeflateInputStream -> org.apache.http.client.entity.DeflateInputStream:
    java.io.InputStream sourceStream -> sourceStream
    int read() -> read
    int read(byte[]) -> read
    int read(byte[],int,int) -> read
    long skip(long) -> skip
    int available() -> available
    void mark(int) -> mark
    void reset() -> reset
    boolean markSupported() -> markSupported
    void close() -> close
org.apache.http.client.entity.DeflateInputStream$DeflateStream -> org.apache.http.client.entity.DeflateInputStream$DeflateStream:
    boolean closed -> closed
    void close() -> close
org.apache.http.client.entity.EntityBuilder -> org.apache.http.client.entity.EntityBuilder:
    java.lang.String text -> text
    byte[] binary -> binary
    java.io.InputStream stream -> stream
    java.util.List parameters -> parameters
    java.io.Serializable serializable -> serializable
    java.io.File file -> file
    org.apache.http.entity.ContentType contentType -> contentType
    java.lang.String contentEncoding -> contentEncoding
    boolean chunked -> chunked
    boolean gzipCompress -> gzipCompress
    org.apache.http.client.entity.EntityBuilder create() -> create
    void clearContent() -> clearContent
    java.lang.String getText() -> getText
    org.apache.http.client.entity.EntityBuilder setText(java.lang.String) -> setText
    byte[] getBinary() -> getBinary
    org.apache.http.client.entity.EntityBuilder setBinary(byte[]) -> setBinary
    java.io.InputStream getStream() -> getStream
    org.apache.http.client.entity.EntityBuilder setStream(java.io.InputStream) -> setStream
    java.util.List getParameters() -> getParameters
    org.apache.http.client.entity.EntityBuilder setParameters(java.util.List) -> setParameters
    org.apache.http.client.entity.EntityBuilder setParameters(org.apache.http.NameValuePair[]) -> setParameters
    java.io.Serializable getSerializable() -> getSerializable
    org.apache.http.client.entity.EntityBuilder setSerializable(java.io.Serializable) -> setSerializable
    java.io.File getFile() -> getFile
    org.apache.http.client.entity.EntityBuilder setFile(java.io.File) -> setFile
    org.apache.http.entity.ContentType getContentType() -> getContentType
    org.apache.http.client.entity.EntityBuilder setContentType(org.apache.http.entity.ContentType) -> setContentType
    java.lang.String getContentEncoding() -> getContentEncoding
    org.apache.http.client.entity.EntityBuilder setContentEncoding(java.lang.String) -> setContentEncoding
    boolean isChunked() -> isChunked
    org.apache.http.client.entity.EntityBuilder chunked() -> chunked
    boolean isGzipCompress() -> isGzipCompress
    org.apache.http.client.entity.EntityBuilder gzipCompress() -> gzipCompress
    org.apache.http.entity.ContentType getContentOrDefault(org.apache.http.entity.ContentType) -> getContentOrDefault
    org.apache.http.HttpEntity build() -> build
org.apache.http.client.entity.GzipCompressingEntity -> org.apache.http.client.entity.GzipCompressingEntity:
    java.lang.String GZIP_CODEC -> GZIP_CODEC
    org.apache.http.Header getContentEncoding() -> getContentEncoding
    long getContentLength() -> getContentLength
    boolean isChunked() -> isChunked
    java.io.InputStream getContent() -> getContent
    void writeTo(java.io.OutputStream) -> writeTo
org.apache.http.client.entity.GzipDecompressingEntity -> org.apache.http.client.entity.GzipDecompressingEntity:
    java.io.InputStream decorate(java.io.InputStream) -> decorate
    org.apache.http.Header getContentEncoding() -> getContentEncoding
    long getContentLength() -> getContentLength
    void writeTo(java.io.OutputStream) -> writeTo
    java.io.InputStream getContent() -> getContent
org.apache.http.client.entity.LazyDecompressingInputStream -> org.apache.http.client.entity.LazyDecompressingInputStream:
    java.io.InputStream wrappedStream -> wrappedStream
    org.apache.http.client.entity.DecompressingEntity decompressingEntity -> decompressingEntity
    java.io.InputStream wrapperStream -> wrapperStream
    void initWrapper() -> initWrapper
    int read() -> read
    int read(byte[]) -> read
    int read(byte[],int,int) -> read
    long skip(long) -> skip
    boolean markSupported() -> markSupported
    int available() -> available
    void close() -> close
org.apache.http.client.entity.UrlEncodedFormEntity -> org.apache.http.client.entity.UrlEncodedFormEntity:
org.apache.http.client.methods.AbortableHttpRequest -> org.apache.http.client.methods.AbortableHttpRequest:
    void setConnectionRequest(org.apache.http.conn.ClientConnectionRequest) -> setConnectionRequest
    void setReleaseTrigger(org.apache.http.conn.ConnectionReleaseTrigger) -> setReleaseTrigger
    void abort() -> abort
org.apache.http.client.methods.AbstractExecutionAwareRequest -> org.apache.http.client.methods.AbstractExecutionAwareRequest:
    java.util.concurrent.atomic.AtomicBoolean aborted -> aborted
    java.util.concurrent.atomic.AtomicReference cancellableRef -> cancellableRef
    void setConnectionRequest(org.apache.http.conn.ClientConnectionRequest) -> setConnectionRequest
    void setReleaseTrigger(org.apache.http.conn.ConnectionReleaseTrigger) -> setReleaseTrigger
    void abort() -> abort
    boolean isAborted() -> isAborted
    void setCancellable(org.apache.http.concurrent.Cancellable) -> setCancellable
    java.lang.Object clone() -> clone
    void completed() -> completed
    void reset() -> reset
org.apache.http.client.methods.AbstractExecutionAwareRequest$1 -> org.apache.http.client.methods.AbstractExecutionAwareRequest$1:
    org.apache.http.conn.ClientConnectionRequest val$connRequest -> val$connRequest
    org.apache.http.client.methods.AbstractExecutionAwareRequest this$0 -> this$0
    boolean cancel() -> cancel
org.apache.http.client.methods.AbstractExecutionAwareRequest$2 -> org.apache.http.client.methods.AbstractExecutionAwareRequest$2:
    org.apache.http.conn.ConnectionReleaseTrigger val$releaseTrigger -> val$releaseTrigger
    org.apache.http.client.methods.AbstractExecutionAwareRequest this$0 -> this$0
    boolean cancel() -> cancel
org.apache.http.client.methods.CloseableHttpResponse -> org.apache.http.client.methods.CloseableHttpResponse:
org.apache.http.client.methods.Configurable -> org.apache.http.client.methods.Configurable:
    org.apache.http.client.config.RequestConfig getConfig() -> getConfig
org.apache.http.client.methods.HttpDelete -> org.apache.http.client.methods.HttpDelete:
    java.lang.String METHOD_NAME -> METHOD_NAME
    java.lang.String getMethod() -> getMethod
org.apache.http.client.methods.HttpEntityEnclosingRequestBase -> org.apache.http.client.methods.HttpEntityEnclosingRequestBase:
    org.apache.http.HttpEntity entity -> entity
    org.apache.http.HttpEntity getEntity() -> getEntity
    void setEntity(org.apache.http.HttpEntity) -> setEntity
    boolean expectContinue() -> expectContinue
    java.lang.Object clone() -> clone
org.apache.http.client.methods.HttpExecutionAware -> org.apache.http.client.methods.HttpExecutionAware:
    boolean isAborted() -> isAborted
    void setCancellable(org.apache.http.concurrent.Cancellable) -> setCancellable
org.apache.http.client.methods.HttpGet -> org.apache.http.client.methods.HttpGet:
    java.lang.String METHOD_NAME -> METHOD_NAME
    java.lang.String getMethod() -> getMethod
org.apache.http.client.methods.HttpHead -> org.apache.http.client.methods.HttpHead:
    java.lang.String METHOD_NAME -> METHOD_NAME
    java.lang.String getMethod() -> getMethod
org.apache.http.client.methods.HttpOptions -> org.apache.http.client.methods.HttpOptions:
    java.lang.String METHOD_NAME -> METHOD_NAME
    java.lang.String getMethod() -> getMethod
    java.util.Set getAllowedMethods(org.apache.http.HttpResponse) -> getAllowedMethods
org.apache.http.client.methods.HttpPatch -> org.apache.http.client.methods.HttpPatch:
    java.lang.String METHOD_NAME -> METHOD_NAME
    java.lang.String getMethod() -> getMethod
org.apache.http.client.methods.HttpPost -> org.apache.http.client.methods.HttpPost:
    java.lang.String METHOD_NAME -> METHOD_NAME
    java.lang.String getMethod() -> getMethod
org.apache.http.client.methods.HttpPut -> org.apache.http.client.methods.HttpPut:
    java.lang.String METHOD_NAME -> METHOD_NAME
    java.lang.String getMethod() -> getMethod
org.apache.http.client.methods.HttpRequestBase -> org.apache.http.client.methods.HttpRequestBase:
    org.apache.http.ProtocolVersion version -> version
    java.net.URI uri -> uri
    org.apache.http.client.config.RequestConfig config -> config
    java.lang.String getMethod() -> getMethod
    void setProtocolVersion(org.apache.http.ProtocolVersion) -> setProtocolVersion
    org.apache.http.ProtocolVersion getProtocolVersion() -> getProtocolVersion
    java.net.URI getURI() -> getURI
    org.apache.http.RequestLine getRequestLine() -> getRequestLine
    org.apache.http.client.config.RequestConfig getConfig() -> getConfig
    void setConfig(org.apache.http.client.config.RequestConfig) -> setConfig
    void setURI(java.net.URI) -> setURI
    void started() -> started
    void releaseConnection() -> releaseConnection
    java.lang.String toString() -> toString
org.apache.http.client.methods.HttpRequestWrapper -> org.apache.http.client.methods.HttpRequestWrapper:
    org.apache.http.HttpRequest original -> original
    java.lang.String method -> method
    org.apache.http.ProtocolVersion version -> version
    java.net.URI uri -> uri
    org.apache.http.ProtocolVersion getProtocolVersion() -> getProtocolVersion
    void setProtocolVersion(org.apache.http.ProtocolVersion) -> setProtocolVersion
    java.net.URI getURI() -> getURI
    void setURI(java.net.URI) -> setURI
    java.lang.String getMethod() -> getMethod
    void abort() -> abort
    boolean isAborted() -> isAborted
    org.apache.http.RequestLine getRequestLine() -> getRequestLine
    org.apache.http.HttpRequest getOriginal() -> getOriginal
    java.lang.String toString() -> toString
    org.apache.http.client.methods.HttpRequestWrapper wrap(org.apache.http.HttpRequest) -> wrap
    org.apache.http.params.HttpParams getParams() -> getParams
org.apache.http.client.methods.HttpRequestWrapper$1 -> org.apache.http.client.methods.HttpRequestWrapper$1:
org.apache.http.client.methods.HttpRequestWrapper$HttpEntityEnclosingRequestWrapper -> org.apache.http.client.methods.HttpRequestWrapper$HttpEntityEnclosingRequestWrapper:
    org.apache.http.HttpEntity entity -> entity
    org.apache.http.HttpEntity getEntity() -> getEntity
    void setEntity(org.apache.http.HttpEntity) -> setEntity
    boolean expectContinue() -> expectContinue
org.apache.http.client.methods.HttpTrace -> org.apache.http.client.methods.HttpTrace:
    java.lang.String METHOD_NAME -> METHOD_NAME
    java.lang.String getMethod() -> getMethod
org.apache.http.client.methods.HttpUriRequest -> org.apache.http.client.methods.HttpUriRequest:
    java.lang.String getMethod() -> getMethod
    java.net.URI getURI() -> getURI
    void abort() -> abort
    boolean isAborted() -> isAborted
org.apache.http.client.methods.RequestBuilder -> org.apache.http.client.methods.RequestBuilder:
    java.lang.String method -> method
    org.apache.http.ProtocolVersion version -> version
    java.net.URI uri -> uri
    org.apache.http.message.HeaderGroup headergroup -> headergroup
    org.apache.http.HttpEntity entity -> entity
    java.util.LinkedList parameters -> parameters
    org.apache.http.client.config.RequestConfig config -> config
    org.apache.http.client.methods.RequestBuilder create(java.lang.String) -> create
    org.apache.http.client.methods.RequestBuilder get() -> get
    org.apache.http.client.methods.RequestBuilder head() -> head
    org.apache.http.client.methods.RequestBuilder post() -> post
    org.apache.http.client.methods.RequestBuilder put() -> put
    org.apache.http.client.methods.RequestBuilder delete() -> delete
    org.apache.http.client.methods.RequestBuilder trace() -> trace
    org.apache.http.client.methods.RequestBuilder options() -> options
    org.apache.http.client.methods.RequestBuilder copy(org.apache.http.HttpRequest) -> copy
    org.apache.http.client.methods.RequestBuilder doCopy(org.apache.http.HttpRequest) -> doCopy
    java.lang.String getMethod() -> getMethod
    org.apache.http.ProtocolVersion getVersion() -> getVersion
    org.apache.http.client.methods.RequestBuilder setVersion(org.apache.http.ProtocolVersion) -> setVersion
    java.net.URI getUri() -> getUri
    org.apache.http.client.methods.RequestBuilder setUri(java.net.URI) -> setUri
    org.apache.http.client.methods.RequestBuilder setUri(java.lang.String) -> setUri
    org.apache.http.Header getFirstHeader(java.lang.String) -> getFirstHeader
    org.apache.http.Header getLastHeader(java.lang.String) -> getLastHeader
    org.apache.http.Header[] getHeaders(java.lang.String) -> getHeaders
    org.apache.http.client.methods.RequestBuilder addHeader(org.apache.http.Header) -> addHeader
    org.apache.http.client.methods.RequestBuilder addHeader(java.lang.String,java.lang.String) -> addHeader
    org.apache.http.client.methods.RequestBuilder removeHeader(org.apache.http.Header) -> removeHeader
    org.apache.http.client.methods.RequestBuilder removeHeaders(java.lang.String) -> removeHeaders
    org.apache.http.client.methods.RequestBuilder setHeader(org.apache.http.Header) -> setHeader
    org.apache.http.client.methods.RequestBuilder setHeader(java.lang.String,java.lang.String) -> setHeader
    org.apache.http.HttpEntity getEntity() -> getEntity
    org.apache.http.client.methods.RequestBuilder setEntity(org.apache.http.HttpEntity) -> setEntity
    java.util.List getParameters() -> getParameters
    org.apache.http.client.methods.RequestBuilder addParameter(org.apache.http.NameValuePair) -> addParameter
    org.apache.http.client.methods.RequestBuilder addParameter(java.lang.String,java.lang.String) -> addParameter
    org.apache.http.client.methods.RequestBuilder addParameters(org.apache.http.NameValuePair[]) -> addParameters
    org.apache.http.client.config.RequestConfig getConfig() -> getConfig
    org.apache.http.client.methods.RequestBuilder setConfig(org.apache.http.client.config.RequestConfig) -> setConfig
    org.apache.http.client.methods.HttpUriRequest build() -> build
org.apache.http.client.methods.RequestBuilder$InternalEntityEclosingRequest -> org.apache.http.client.methods.RequestBuilder$InternalEntityEclosingRequest:
    java.lang.String method -> method
    java.lang.String getMethod() -> getMethod
org.apache.http.client.methods.RequestBuilder$InternalRequest -> org.apache.http.client.methods.RequestBuilder$InternalRequest:
    java.lang.String method -> method
    java.lang.String getMethod() -> getMethod
org.apache.http.client.params.AllClientPNames -> org.apache.http.client.params.AllClientPNames:
org.apache.http.client.params.AuthPolicy -> org.apache.http.client.params.AuthPolicy:
    java.lang.String NTLM -> NTLM
    java.lang.String DIGEST -> DIGEST
    java.lang.String BASIC -> BASIC
    java.lang.String SPNEGO -> SPNEGO
    java.lang.String KERBEROS -> KERBEROS
org.apache.http.client.params.ClientPNames -> org.apache.http.client.params.ClientPNames:
    java.lang.String CONNECTION_MANAGER_FACTORY_CLASS_NAME -> CONNECTION_MANAGER_FACTORY_CLASS_NAME
    java.lang.String HANDLE_REDIRECTS -> HANDLE_REDIRECTS
    java.lang.String REJECT_RELATIVE_REDIRECT -> REJECT_RELATIVE_REDIRECT
    java.lang.String MAX_REDIRECTS -> MAX_REDIRECTS
    java.lang.String ALLOW_CIRCULAR_REDIRECTS -> ALLOW_CIRCULAR_REDIRECTS
    java.lang.String HANDLE_AUTHENTICATION -> HANDLE_AUTHENTICATION
    java.lang.String COOKIE_POLICY -> COOKIE_POLICY
    java.lang.String VIRTUAL_HOST -> VIRTUAL_HOST
    java.lang.String DEFAULT_HEADERS -> DEFAULT_HEADERS
    java.lang.String DEFAULT_HOST -> DEFAULT_HOST
    java.lang.String CONN_MANAGER_TIMEOUT -> CONN_MANAGER_TIMEOUT
org.apache.http.client.params.ClientParamBean -> org.apache.http.client.params.ClientParamBean:
    void setConnectionManagerFactoryClassName(java.lang.String) -> setConnectionManagerFactoryClassName
    void setHandleRedirects(boolean) -> setHandleRedirects
    void setRejectRelativeRedirect(boolean) -> setRejectRelativeRedirect
    void setMaxRedirects(int) -> setMaxRedirects
    void setAllowCircularRedirects(boolean) -> setAllowCircularRedirects
    void setHandleAuthentication(boolean) -> setHandleAuthentication
    void setCookiePolicy(java.lang.String) -> setCookiePolicy
    void setVirtualHost(org.apache.http.HttpHost) -> setVirtualHost
    void setDefaultHeaders(java.util.Collection) -> setDefaultHeaders
    void setDefaultHost(org.apache.http.HttpHost) -> setDefaultHost
    void setConnectionManagerTimeout(long) -> setConnectionManagerTimeout
org.apache.http.client.params.CookiePolicy -> org.apache.http.client.params.CookiePolicy:
    java.lang.String BROWSER_COMPATIBILITY -> BROWSER_COMPATIBILITY
    java.lang.String NETSCAPE -> NETSCAPE
    java.lang.String RFC_2109 -> RFC_2109
    java.lang.String RFC_2965 -> RFC_2965
    java.lang.String BEST_MATCH -> BEST_MATCH
    java.lang.String IGNORE_COOKIES -> IGNORE_COOKIES
org.apache.http.client.params.HttpClientParamConfig -> org.apache.http.client.params.HttpClientParamConfig:
    org.apache.http.client.config.RequestConfig getRequestConfig(org.apache.http.params.HttpParams) -> getRequestConfig
org.apache.http.client.params.HttpClientParams -> org.apache.http.client.params.HttpClientParams:
    boolean isRedirecting(org.apache.http.params.HttpParams) -> isRedirecting
    void setRedirecting(org.apache.http.params.HttpParams,boolean) -> setRedirecting
    boolean isAuthenticating(org.apache.http.params.HttpParams) -> isAuthenticating
    void setAuthenticating(org.apache.http.params.HttpParams,boolean) -> setAuthenticating
    java.lang.String getCookiePolicy(org.apache.http.params.HttpParams) -> getCookiePolicy
    void setCookiePolicy(org.apache.http.params.HttpParams,java.lang.String) -> setCookiePolicy
    void setConnectionManagerTimeout(org.apache.http.params.HttpParams,long) -> setConnectionManagerTimeout
    long getConnectionManagerTimeout(org.apache.http.params.HttpParams) -> getConnectionManagerTimeout
org.apache.http.client.protocol.ClientContext -> org.apache.http.client.protocol.ClientContext:
    java.lang.String ROUTE -> ROUTE
    java.lang.String SCHEME_REGISTRY -> SCHEME_REGISTRY
    java.lang.String COOKIESPEC_REGISTRY -> COOKIESPEC_REGISTRY
    java.lang.String COOKIE_SPEC -> COOKIE_SPEC
    java.lang.String COOKIE_ORIGIN -> COOKIE_ORIGIN
    java.lang.String COOKIE_STORE -> COOKIE_STORE
    java.lang.String CREDS_PROVIDER -> CREDS_PROVIDER
    java.lang.String AUTH_CACHE -> AUTH_CACHE
    java.lang.String TARGET_AUTH_STATE -> TARGET_AUTH_STATE
    java.lang.String PROXY_AUTH_STATE -> PROXY_AUTH_STATE
    java.lang.String AUTH_SCHEME_PREF -> AUTH_SCHEME_PREF
    java.lang.String USER_TOKEN -> USER_TOKEN
    java.lang.String AUTHSCHEME_REGISTRY -> AUTHSCHEME_REGISTRY
    java.lang.String SOCKET_FACTORY_REGISTRY -> SOCKET_FACTORY_REGISTRY
    java.lang.String REQUEST_CONFIG -> REQUEST_CONFIG
org.apache.http.client.protocol.ClientContextConfigurer -> org.apache.http.client.protocol.ClientContextConfigurer:
    org.apache.http.protocol.HttpContext context -> context
    void setCookieSpecRegistry(org.apache.http.cookie.CookieSpecRegistry) -> setCookieSpecRegistry
    void setAuthSchemeRegistry(org.apache.http.auth.AuthSchemeRegistry) -> setAuthSchemeRegistry
    void setCookieStore(org.apache.http.client.CookieStore) -> setCookieStore
    void setCredentialsProvider(org.apache.http.client.CredentialsProvider) -> setCredentialsProvider
org.apache.http.client.protocol.HttpClientContext -> org.apache.http.client.protocol.HttpClientContext:
    java.lang.String HTTP_ROUTE -> HTTP_ROUTE
    java.lang.String REDIRECT_LOCATIONS -> REDIRECT_LOCATIONS
    java.lang.String COOKIESPEC_REGISTRY -> COOKIESPEC_REGISTRY
    java.lang.String COOKIE_SPEC -> COOKIE_SPEC
    java.lang.String COOKIE_ORIGIN -> COOKIE_ORIGIN
    java.lang.String COOKIE_STORE -> COOKIE_STORE
    java.lang.String CREDS_PROVIDER -> CREDS_PROVIDER
    java.lang.String AUTH_CACHE -> AUTH_CACHE
    java.lang.String TARGET_AUTH_STATE -> TARGET_AUTH_STATE
    java.lang.String PROXY_AUTH_STATE -> PROXY_AUTH_STATE
    java.lang.String USER_TOKEN -> USER_TOKEN
    java.lang.String AUTHSCHEME_REGISTRY -> AUTHSCHEME_REGISTRY
    java.lang.String REQUEST_CONFIG -> REQUEST_CONFIG
    org.apache.http.client.protocol.HttpClientContext adapt(org.apache.http.protocol.HttpContext) -> adapt
    org.apache.http.client.protocol.HttpClientContext create() -> create
    org.apache.http.conn.routing.RouteInfo getHttpRoute() -> getHttpRoute
    java.util.List getRedirectLocations() -> getRedirectLocations
    org.apache.http.client.CookieStore getCookieStore() -> getCookieStore
    void setCookieStore(org.apache.http.client.CookieStore) -> setCookieStore
    org.apache.http.cookie.CookieSpec getCookieSpec() -> getCookieSpec
    org.apache.http.cookie.CookieOrigin getCookieOrigin() -> getCookieOrigin
    org.apache.http.config.Lookup getLookup(java.lang.String,java.lang.Class) -> getLookup
    org.apache.http.config.Lookup getCookieSpecRegistry() -> getCookieSpecRegistry
    void setCookieSpecRegistry(org.apache.http.config.Lookup) -> setCookieSpecRegistry
    org.apache.http.config.Lookup getAuthSchemeRegistry() -> getAuthSchemeRegistry
    void setAuthSchemeRegistry(org.apache.http.config.Lookup) -> setAuthSchemeRegistry
    org.apache.http.client.CredentialsProvider getCredentialsProvider() -> getCredentialsProvider
    void setCredentialsProvider(org.apache.http.client.CredentialsProvider) -> setCredentialsProvider
    org.apache.http.client.AuthCache getAuthCache() -> getAuthCache
    void setAuthCache(org.apache.http.client.AuthCache) -> setAuthCache
    org.apache.http.auth.AuthState getTargetAuthState() -> getTargetAuthState
    org.apache.http.auth.AuthState getProxyAuthState() -> getProxyAuthState
    java.lang.Object getUserToken(java.lang.Class) -> getUserToken
    java.lang.Object getUserToken() -> getUserToken
    void setUserToken(java.lang.Object) -> setUserToken
    org.apache.http.client.config.RequestConfig getRequestConfig() -> getRequestConfig
    void setRequestConfig(org.apache.http.client.config.RequestConfig) -> setRequestConfig
org.apache.http.client.protocol.RequestAcceptEncoding -> org.apache.http.client.protocol.RequestAcceptEncoding:
    void process(org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext) -> process
org.apache.http.client.protocol.RequestAddCookies -> org.apache.http.client.protocol.RequestAddCookies:
    org.apache.commons.logging.Log log -> log
    void process(org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext) -> process
org.apache.http.client.protocol.RequestAuthCache -> org.apache.http.client.protocol.RequestAuthCache:
    org.apache.commons.logging.Log log -> log
    void process(org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext) -> process
    void doPreemptiveAuth(org.apache.http.HttpHost,org.apache.http.auth.AuthScheme,org.apache.http.auth.AuthState,org.apache.http.client.CredentialsProvider) -> doPreemptiveAuth
org.apache.http.client.protocol.RequestAuthenticationBase -> org.apache.http.client.protocol.RequestAuthenticationBase:
    org.apache.commons.logging.Log log -> log
    void process(org.apache.http.auth.AuthState,org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext) -> process
    void ensureAuthScheme(org.apache.http.auth.AuthScheme) -> ensureAuthScheme
    org.apache.http.Header authenticate(org.apache.http.auth.AuthScheme,org.apache.http.auth.Credentials,org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext) -> authenticate
org.apache.http.client.protocol.RequestAuthenticationBase$1 -> org.apache.http.client.protocol.RequestAuthenticationBase$1:
    int[] $SwitchMap$org$apache$http$auth$AuthProtocolState -> $SwitchMap$org$apache$http$auth$AuthProtocolState
org.apache.http.client.protocol.RequestClientConnControl -> org.apache.http.client.protocol.RequestClientConnControl:
    org.apache.commons.logging.Log log -> log
    java.lang.String PROXY_CONN_DIRECTIVE -> PROXY_CONN_DIRECTIVE
    void process(org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext) -> process
org.apache.http.client.protocol.RequestDefaultHeaders -> org.apache.http.client.protocol.RequestDefaultHeaders:
    java.util.Collection defaultHeaders -> defaultHeaders
    void process(org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext) -> process
org.apache.http.client.protocol.RequestExpectContinue -> org.apache.http.client.protocol.RequestExpectContinue:
    void process(org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext) -> process
org.apache.http.client.protocol.RequestProxyAuthentication -> org.apache.http.client.protocol.RequestProxyAuthentication:
    void process(org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext) -> process
org.apache.http.client.protocol.RequestTargetAuthentication -> org.apache.http.client.protocol.RequestTargetAuthentication:
    void process(org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext) -> process
org.apache.http.client.protocol.ResponseAuthCache -> org.apache.http.client.protocol.ResponseAuthCache:
    org.apache.commons.logging.Log log -> log
    void process(org.apache.http.HttpResponse,org.apache.http.protocol.HttpContext) -> process
    boolean isCachable(org.apache.http.auth.AuthState) -> isCachable
    void cache(org.apache.http.client.AuthCache,org.apache.http.HttpHost,org.apache.http.auth.AuthScheme) -> cache
    void uncache(org.apache.http.client.AuthCache,org.apache.http.HttpHost,org.apache.http.auth.AuthScheme) -> uncache
org.apache.http.client.protocol.ResponseAuthCache$1 -> org.apache.http.client.protocol.ResponseAuthCache$1:
    int[] $SwitchMap$org$apache$http$auth$AuthProtocolState -> $SwitchMap$org$apache$http$auth$AuthProtocolState
org.apache.http.client.protocol.ResponseContentEncoding -> org.apache.http.client.protocol.ResponseContentEncoding:
    java.lang.String UNCOMPRESSED -> UNCOMPRESSED
    void process(org.apache.http.HttpResponse,org.apache.http.protocol.HttpContext) -> process
org.apache.http.client.protocol.ResponseProcessCookies -> org.apache.http.client.protocol.ResponseProcessCookies:
    org.apache.commons.logging.Log log -> log
    void process(org.apache.http.HttpResponse,org.apache.http.protocol.HttpContext) -> process
    void processCookies(org.apache.http.HeaderIterator,org.apache.http.cookie.CookieSpec,org.apache.http.cookie.CookieOrigin,org.apache.http.client.CookieStore) -> processCookies
    java.lang.String formatCooke(org.apache.http.cookie.Cookie) -> formatCooke
org.apache.http.client.utils.CloneUtils -> org.apache.http.client.utils.CloneUtils:
    java.lang.Object cloneObject(java.lang.Object) -> cloneObject
    java.lang.Object clone(java.lang.Object) -> clone
org.apache.http.client.utils.DateUtils -> org.apache.http.client.utils.DateUtils:
    java.lang.String PATTERN_RFC1123 -> PATTERN_RFC1123
    java.lang.String PATTERN_RFC1036 -> PATTERN_RFC1036
    java.lang.String PATTERN_ASCTIME -> PATTERN_ASCTIME
    java.lang.String[] DEFAULT_PATTERNS -> DEFAULT_PATTERNS
    java.util.Date DEFAULT_TWO_DIGIT_YEAR_START -> DEFAULT_TWO_DIGIT_YEAR_START
    java.util.TimeZone GMT -> GMT
    java.util.Date parseDate(java.lang.String) -> parseDate
    java.util.Date parseDate(java.lang.String,java.lang.String[]) -> parseDate
    java.util.Date parseDate(java.lang.String,java.lang.String[],java.util.Date) -> parseDate
    java.lang.String formatDate(java.util.Date) -> formatDate
    java.lang.String formatDate(java.util.Date,java.lang.String) -> formatDate
    void clearThreadLocal() -> clearThreadLocal
org.apache.http.client.utils.DateUtils$DateFormatHolder -> org.apache.http.client.utils.DateUtils$DateFormatHolder:
    java.lang.ThreadLocal THREADLOCAL_FORMATS -> THREADLOCAL_FORMATS
    java.text.SimpleDateFormat formatFor(java.lang.String) -> formatFor
    void clearThreadLocal() -> clearThreadLocal
org.apache.http.client.utils.DateUtils$DateFormatHolder$1 -> org.apache.http.client.utils.DateUtils$DateFormatHolder$1:
    java.lang.ref.SoftReference initialValue() -> initialValue
    java.lang.Object initialValue() -> initialValue
org.apache.http.client.utils.HttpClientUtils -> org.apache.http.client.utils.HttpClientUtils:
    void closeQuietly(org.apache.http.HttpResponse) -> closeQuietly
    void closeQuietly(org.apache.http.client.methods.CloseableHttpResponse) -> closeQuietly
    void closeQuietly(org.apache.http.client.HttpClient) -> closeQuietly
org.apache.http.client.utils.Idn -> org.apache.http.client.utils.Idn:
    java.lang.String toUnicode(java.lang.String) -> toUnicode
org.apache.http.client.utils.JdkIdn -> org.apache.http.client.utils.JdkIdn:
    java.lang.reflect.Method toUnicode -> toUnicode
    java.lang.String toUnicode(java.lang.String) -> toUnicode
org.apache.http.client.utils.Punycode -> org.apache.http.client.utils.Punycode:
    org.apache.http.client.utils.Idn impl -> impl
    java.lang.String toUnicode(java.lang.String) -> toUnicode
org.apache.http.client.utils.Rfc3492Idn -> org.apache.http.client.utils.Rfc3492Idn:
    int base -> base
    int tmin -> tmin
    int tmax -> tmax
    int skew -> skew
    int damp -> damp
    int initial_bias -> initial_bias
    int initial_n -> initial_n
    char delimiter -> delimiter
    java.lang.String ACE_PREFIX -> ACE_PREFIX
    int adapt(int,int,boolean) -> adapt
    int digit(char) -> digit
    java.lang.String toUnicode(java.lang.String) -> toUnicode
    java.lang.String decode(java.lang.String) -> decode
org.apache.http.client.utils.URIBuilder -> org.apache.http.client.utils.URIBuilder:
    java.lang.String scheme -> scheme
    java.lang.String encodedSchemeSpecificPart -> encodedSchemeSpecificPart
    java.lang.String encodedAuthority -> encodedAuthority
    java.lang.String userInfo -> userInfo
    java.lang.String encodedUserInfo -> encodedUserInfo
    java.lang.String host -> host
    int port -> port
    java.lang.String path -> path
    java.lang.String encodedPath -> encodedPath
    java.lang.String encodedQuery -> encodedQuery
    java.util.List queryParams -> queryParams
    java.lang.String query -> query
    java.lang.String fragment -> fragment
    java.lang.String encodedFragment -> encodedFragment
    java.util.List parseQuery(java.lang.String,java.nio.charset.Charset) -> parseQuery
    java.net.URI build() -> build
    java.lang.String buildString() -> buildString
    void digestURI(java.net.URI) -> digestURI
    java.lang.String encodeUserInfo(java.lang.String) -> encodeUserInfo
    java.lang.String encodePath(java.lang.String) -> encodePath
    java.lang.String encodeUrlForm(java.util.List) -> encodeUrlForm
    java.lang.String encodeUric(java.lang.String) -> encodeUric
    org.apache.http.client.utils.URIBuilder setScheme(java.lang.String) -> setScheme
    org.apache.http.client.utils.URIBuilder setUserInfo(java.lang.String) -> setUserInfo
    org.apache.http.client.utils.URIBuilder setUserInfo(java.lang.String,java.lang.String) -> setUserInfo
    org.apache.http.client.utils.URIBuilder setHost(java.lang.String) -> setHost
    org.apache.http.client.utils.URIBuilder setPort(int) -> setPort
    org.apache.http.client.utils.URIBuilder setPath(java.lang.String) -> setPath
    org.apache.http.client.utils.URIBuilder removeQuery() -> removeQuery
    org.apache.http.client.utils.URIBuilder setQuery(java.lang.String) -> setQuery
    org.apache.http.client.utils.URIBuilder setParameters(java.util.List) -> setParameters
    org.apache.http.client.utils.URIBuilder addParameters(java.util.List) -> addParameters
    org.apache.http.client.utils.URIBuilder setParameters(org.apache.http.NameValuePair[]) -> setParameters
    org.apache.http.client.utils.URIBuilder addParameter(java.lang.String,java.lang.String) -> addParameter
    org.apache.http.client.utils.URIBuilder setParameter(java.lang.String,java.lang.String) -> setParameter
    org.apache.http.client.utils.URIBuilder clearParameters() -> clearParameters
    org.apache.http.client.utils.URIBuilder setCustomQuery(java.lang.String) -> setCustomQuery
    org.apache.http.client.utils.URIBuilder setFragment(java.lang.String) -> setFragment
    boolean isAbsolute() -> isAbsolute
    boolean isOpaque() -> isOpaque
    java.lang.String getScheme() -> getScheme
    java.lang.String getUserInfo() -> getUserInfo
    java.lang.String getHost() -> getHost
    int getPort() -> getPort
    java.lang.String getPath() -> getPath
    java.util.List getQueryParams() -> getQueryParams
    java.lang.String getFragment() -> getFragment
    java.lang.String toString() -> toString
    java.lang.String normalizePath(java.lang.String) -> normalizePath
org.apache.http.client.utils.URIUtils -> org.apache.http.client.utils.URIUtils:
    java.net.URI createURI(java.lang.String,java.lang.String,int,java.lang.String,java.lang.String,java.lang.String) -> createURI
    java.net.URI rewriteURI(java.net.URI,org.apache.http.HttpHost,boolean) -> rewriteURI
    java.net.URI rewriteURI(java.net.URI,org.apache.http.HttpHost) -> rewriteURI
    java.net.URI rewriteURI(java.net.URI) -> rewriteURI
    java.net.URI resolve(java.net.URI,java.lang.String) -> resolve
    java.net.URI resolve(java.net.URI,java.net.URI) -> resolve
    java.net.URI resolveReferenceStartingWithQueryString(java.net.URI,java.net.URI) -> resolveReferenceStartingWithQueryString
    java.net.URI normalizeSyntax(java.net.URI) -> normalizeSyntax
    org.apache.http.HttpHost extractHost(java.net.URI) -> extractHost
    java.net.URI resolve(java.net.URI,org.apache.http.HttpHost,java.util.List) -> resolve
org.apache.http.client.utils.URLEncodedUtils -> org.apache.http.client.utils.URLEncodedUtils:
    java.lang.String CONTENT_TYPE -> CONTENT_TYPE
    char QP_SEP_A -> QP_SEP_A
    char QP_SEP_S -> QP_SEP_S
    java.lang.String NAME_VALUE_SEPARATOR -> NAME_VALUE_SEPARATOR
    char[] QP_SEPS -> QP_SEPS
    java.lang.String QP_SEP_PATTERN -> QP_SEP_PATTERN
    java.util.BitSet UNRESERVED -> UNRESERVED
    java.util.BitSet PUNCT -> PUNCT
    java.util.BitSet USERINFO -> USERINFO
    java.util.BitSet PATHSAFE -> PATHSAFE
    java.util.BitSet URIC -> URIC
    java.util.BitSet RESERVED -> RESERVED
    java.util.BitSet URLENCODER -> URLENCODER
    int RADIX -> RADIX
    java.util.List parse(java.net.URI,java.lang.String) -> parse
    java.util.List parse(org.apache.http.HttpEntity) -> parse
    boolean isEncoded(org.apache.http.HttpEntity) -> isEncoded
    void parse(java.util.List,java.util.Scanner,java.lang.String) -> parse
    void parse(java.util.List,java.util.Scanner,java.lang.String,java.lang.String) -> parse
    java.util.List parse(java.lang.String,java.nio.charset.Charset) -> parse
    java.util.List parse(java.lang.String,java.nio.charset.Charset,char[]) -> parse
    java.lang.String format(java.util.List,java.lang.String) -> format
    java.lang.String format(java.util.List,char,java.lang.String) -> format
    java.lang.String format(java.lang.Iterable,java.nio.charset.Charset) -> format
    java.lang.String format(java.lang.Iterable,char,java.nio.charset.Charset) -> format
    java.lang.String urlEncode(java.lang.String,java.nio.charset.Charset,java.util.BitSet,boolean) -> urlEncode
    java.lang.String urlDecode(java.lang.String,java.nio.charset.Charset,boolean) -> urlDecode
    java.lang.String decodeFormFields(java.lang.String,java.lang.String) -> decodeFormFields
    java.lang.String decodeFormFields(java.lang.String,java.nio.charset.Charset) -> decodeFormFields
    java.lang.String encodeFormFields(java.lang.String,java.lang.String) -> encodeFormFields
    java.lang.String encodeFormFields(java.lang.String,java.nio.charset.Charset) -> encodeFormFields
    java.lang.String encUserInfo(java.lang.String,java.nio.charset.Charset) -> encUserInfo
    java.lang.String encUric(java.lang.String,java.nio.charset.Charset) -> encUric
    java.lang.String encPath(java.lang.String,java.nio.charset.Charset) -> encPath
org.apache.http.concurrent.BasicFuture -> org.apache.http.concurrent.BasicFuture:
    org.apache.http.concurrent.FutureCallback callback -> callback
    boolean completed -> completed
    boolean cancelled -> cancelled
    java.lang.Object result -> result
    java.lang.Exception ex -> ex
    boolean isCancelled() -> isCancelled
    boolean isDone() -> isDone
    java.lang.Object getResult() -> getResult
    java.lang.Object get() -> get
    java.lang.Object get(long,java.util.concurrent.TimeUnit) -> get
    boolean completed(java.lang.Object) -> completed
    boolean failed(java.lang.Exception) -> failed
    boolean cancel(boolean) -> cancel
    boolean cancel() -> cancel
org.apache.http.concurrent.Cancellable -> org.apache.http.concurrent.Cancellable:
    boolean cancel() -> cancel
org.apache.http.concurrent.FutureCallback -> org.apache.http.concurrent.FutureCallback:
    void completed(java.lang.Object) -> completed
    void failed(java.lang.Exception) -> failed
    void cancelled() -> cancelled
org.apache.http.config.ConnectionConfig -> org.apache.http.config.ConnectionConfig:
    org.apache.http.config.ConnectionConfig DEFAULT -> DEFAULT
    int bufferSize -> bufferSize
    int fragmentSizeHint -> fragmentSizeHint
    java.nio.charset.Charset charset -> charset
    java.nio.charset.CodingErrorAction malformedInputAction -> malformedInputAction
    java.nio.charset.CodingErrorAction unmappableInputAction -> unmappableInputAction
    org.apache.http.config.MessageConstraints messageConstraints -> messageConstraints
    int getBufferSize() -> getBufferSize
    int getFragmentSizeHint() -> getFragmentSizeHint
    java.nio.charset.Charset getCharset() -> getCharset
    java.nio.charset.CodingErrorAction getMalformedInputAction() -> getMalformedInputAction
    java.nio.charset.CodingErrorAction getUnmappableInputAction() -> getUnmappableInputAction
    org.apache.http.config.MessageConstraints getMessageConstraints() -> getMessageConstraints
    org.apache.http.config.ConnectionConfig clone() -> clone
    java.lang.String toString() -> toString
    org.apache.http.config.ConnectionConfig$Builder custom() -> custom
    org.apache.http.config.ConnectionConfig$Builder copy(org.apache.http.config.ConnectionConfig) -> copy
    java.lang.Object clone() -> clone
org.apache.http.config.ConnectionConfig$Builder -> org.apache.http.config.ConnectionConfig$Builder:
    int bufferSize -> bufferSize
    int fragmentSizeHint -> fragmentSizeHint
    java.nio.charset.Charset charset -> charset
    java.nio.charset.CodingErrorAction malformedInputAction -> malformedInputAction
    java.nio.charset.CodingErrorAction unmappableInputAction -> unmappableInputAction
    org.apache.http.config.MessageConstraints messageConstraints -> messageConstraints
    org.apache.http.config.ConnectionConfig$Builder setBufferSize(int) -> setBufferSize
    org.apache.http.config.ConnectionConfig$Builder setFragmentSizeHint(int) -> setFragmentSizeHint
    org.apache.http.config.ConnectionConfig$Builder setCharset(java.nio.charset.Charset) -> setCharset
    org.apache.http.config.ConnectionConfig$Builder setMalformedInputAction(java.nio.charset.CodingErrorAction) -> setMalformedInputAction
    org.apache.http.config.ConnectionConfig$Builder setUnmappableInputAction(java.nio.charset.CodingErrorAction) -> setUnmappableInputAction
    org.apache.http.config.ConnectionConfig$Builder setMessageConstraints(org.apache.http.config.MessageConstraints) -> setMessageConstraints
    org.apache.http.config.ConnectionConfig build() -> build
org.apache.http.config.Lookup -> org.apache.http.config.Lookup:
    java.lang.Object lookup(java.lang.String) -> lookup
org.apache.http.config.MessageConstraints -> org.apache.http.config.MessageConstraints:
    org.apache.http.config.MessageConstraints DEFAULT -> DEFAULT
    int maxLineLength -> maxLineLength
    int maxHeaderCount -> maxHeaderCount
    int getMaxLineLength() -> getMaxLineLength
    int getMaxHeaderCount() -> getMaxHeaderCount
    org.apache.http.config.MessageConstraints clone() -> clone
    java.lang.String toString() -> toString
    org.apache.http.config.MessageConstraints lineLen(int) -> lineLen
    org.apache.http.config.MessageConstraints$Builder custom() -> custom
    org.apache.http.config.MessageConstraints$Builder copy(org.apache.http.config.MessageConstraints) -> copy
    java.lang.Object clone() -> clone
org.apache.http.config.MessageConstraints$Builder -> org.apache.http.config.MessageConstraints$Builder:
    int maxLineLength -> maxLineLength
    int maxHeaderCount -> maxHeaderCount
    org.apache.http.config.MessageConstraints$Builder setMaxLineLength(int) -> setMaxLineLength
    org.apache.http.config.MessageConstraints$Builder setMaxHeaderCount(int) -> setMaxHeaderCount
    org.apache.http.config.MessageConstraints build() -> build
org.apache.http.config.Registry -> org.apache.http.config.Registry:
    java.util.Map map -> map
    java.lang.Object lookup(java.lang.String) -> lookup
    java.lang.String toString() -> toString
org.apache.http.config.RegistryBuilder -> org.apache.http.config.RegistryBuilder:
    java.util.Map items -> items
    org.apache.http.config.RegistryBuilder create() -> create
    org.apache.http.config.RegistryBuilder register(java.lang.String,java.lang.Object) -> register
    org.apache.http.config.Registry build() -> build
    java.lang.String toString() -> toString
org.apache.http.config.SocketConfig -> org.apache.http.config.SocketConfig:
    org.apache.http.config.SocketConfig DEFAULT -> DEFAULT
    int soTimeout -> soTimeout
    boolean soReuseAddress -> soReuseAddress
    int soLinger -> soLinger
    boolean soKeepAlive -> soKeepAlive
    boolean tcpNoDelay -> tcpNoDelay
    int getSoTimeout() -> getSoTimeout
    boolean isSoReuseAddress() -> isSoReuseAddress
    int getSoLinger() -> getSoLinger
    boolean isSoKeepAlive() -> isSoKeepAlive
    boolean isTcpNoDelay() -> isTcpNoDelay
    org.apache.http.config.SocketConfig clone() -> clone
    java.lang.String toString() -> toString
    org.apache.http.config.SocketConfig$Builder custom() -> custom
    org.apache.http.config.SocketConfig$Builder copy(org.apache.http.config.SocketConfig) -> copy
    java.lang.Object clone() -> clone
org.apache.http.config.SocketConfig$Builder -> org.apache.http.config.SocketConfig$Builder:
    int soTimeout -> soTimeout
    boolean soReuseAddress -> soReuseAddress
    int soLinger -> soLinger
    boolean soKeepAlive -> soKeepAlive
    boolean tcpNoDelay -> tcpNoDelay
    org.apache.http.config.SocketConfig$Builder setSoTimeout(int) -> setSoTimeout
    org.apache.http.config.SocketConfig$Builder setSoReuseAddress(boolean) -> setSoReuseAddress
    org.apache.http.config.SocketConfig$Builder setSoLinger(int) -> setSoLinger
    org.apache.http.config.SocketConfig$Builder setSoKeepAlive(boolean) -> setSoKeepAlive
    org.apache.http.config.SocketConfig$Builder setTcpNoDelay(boolean) -> setTcpNoDelay
    org.apache.http.config.SocketConfig build() -> build
org.apache.http.conn.BasicEofSensorWatcher -> org.apache.http.conn.BasicEofSensorWatcher:
    org.apache.http.conn.ManagedClientConnection managedConn -> managedConn
    boolean attemptReuse -> attemptReuse
    boolean eofDetected(java.io.InputStream) -> eofDetected
    boolean streamClosed(java.io.InputStream) -> streamClosed
    boolean streamAbort(java.io.InputStream) -> streamAbort
org.apache.http.conn.BasicManagedEntity -> org.apache.http.conn.BasicManagedEntity:
    org.apache.http.conn.ManagedClientConnection managedConn -> managedConn
    boolean attemptReuse -> attemptReuse
    boolean isRepeatable() -> isRepeatable
    java.io.InputStream getContent() -> getContent
    void ensureConsumed() -> ensureConsumed
    void consumeContent() -> consumeContent
    void writeTo(java.io.OutputStream) -> writeTo
    void releaseConnection() -> releaseConnection
    void abortConnection() -> abortConnection
    boolean eofDetected(java.io.InputStream) -> eofDetected
    boolean streamClosed(java.io.InputStream) -> streamClosed
    boolean streamAbort(java.io.InputStream) -> streamAbort
    void releaseManagedConnection() -> releaseManagedConnection
org.apache.http.conn.ClientConnectionManager -> org.apache.http.conn.ClientConnectionManager:
    org.apache.http.conn.scheme.SchemeRegistry getSchemeRegistry() -> getSchemeRegistry
    org.apache.http.conn.ClientConnectionRequest requestConnection(org.apache.http.conn.routing.HttpRoute,java.lang.Object) -> requestConnection
    void releaseConnection(org.apache.http.conn.ManagedClientConnection,long,java.util.concurrent.TimeUnit) -> releaseConnection
    void closeIdleConnections(long,java.util.concurrent.TimeUnit) -> closeIdleConnections
    void closeExpiredConnections() -> closeExpiredConnections
    void shutdown() -> shutdown
org.apache.http.conn.ClientConnectionManagerFactory -> org.apache.http.conn.ClientConnectionManagerFactory:
    org.apache.http.conn.ClientConnectionManager newInstance(org.apache.http.params.HttpParams,org.apache.http.conn.scheme.SchemeRegistry) -> newInstance
org.apache.http.conn.ClientConnectionOperator -> org.apache.http.conn.ClientConnectionOperator:
    org.apache.http.conn.OperatedClientConnection createConnection() -> createConnection
    void openConnection(org.apache.http.conn.OperatedClientConnection,org.apache.http.HttpHost,java.net.InetAddress,org.apache.http.protocol.HttpContext,org.apache.http.params.HttpParams) -> openConnection
    void updateSecureConnection(org.apache.http.conn.OperatedClientConnection,org.apache.http.HttpHost,org.apache.http.protocol.HttpContext,org.apache.http.params.HttpParams) -> updateSecureConnection
org.apache.http.conn.ClientConnectionRequest -> org.apache.http.conn.ClientConnectionRequest:
    org.apache.http.conn.ManagedClientConnection getConnection(long,java.util.concurrent.TimeUnit) -> getConnection
    void abortRequest() -> abortRequest
org.apache.http.conn.ConnectTimeoutException -> org.apache.http.conn.ConnectTimeoutException:
    long serialVersionUID -> serialVersionUID
    org.apache.http.HttpHost host -> host
    org.apache.http.HttpHost getHost() -> getHost
org.apache.http.conn.ConnectionKeepAliveStrategy -> org.apache.http.conn.ConnectionKeepAliveStrategy:
    long getKeepAliveDuration(org.apache.http.HttpResponse,org.apache.http.protocol.HttpContext) -> getKeepAliveDuration
org.apache.http.conn.ConnectionPoolTimeoutException -> org.apache.http.conn.ConnectionPoolTimeoutException:
    long serialVersionUID -> serialVersionUID
org.apache.http.conn.ConnectionReleaseTrigger -> org.apache.http.conn.ConnectionReleaseTrigger:
    void releaseConnection() -> releaseConnection
    void abortConnection() -> abortConnection
org.apache.http.conn.ConnectionRequest -> org.apache.http.conn.ConnectionRequest:
    org.apache.http.HttpClientConnection get(long,java.util.concurrent.TimeUnit) -> get
org.apache.http.conn.DnsResolver -> org.apache.http.conn.DnsResolver:
    java.net.InetAddress[] resolve(java.lang.String) -> resolve
org.apache.http.conn.EofSensorInputStream -> org.apache.http.conn.EofSensorInputStream:
    java.io.InputStream wrappedStream -> wrappedStream
    boolean selfClosed -> selfClosed
    org.apache.http.conn.EofSensorWatcher eofWatcher -> eofWatcher
    boolean isSelfClosed() -> isSelfClosed
    java.io.InputStream getWrappedStream() -> getWrappedStream
    boolean isReadAllowed() -> isReadAllowed
    int read() -> read
    int read(byte[],int,int) -> read
    int read(byte[]) -> read
    int available() -> available
    void close() -> close
    void checkEOF(int) -> checkEOF
    void checkClose() -> checkClose
    void checkAbort() -> checkAbort
    void releaseConnection() -> releaseConnection
    void abortConnection() -> abortConnection
org.apache.http.conn.EofSensorWatcher -> org.apache.http.conn.EofSensorWatcher:
    boolean eofDetected(java.io.InputStream) -> eofDetected
    boolean streamClosed(java.io.InputStream) -> streamClosed
    boolean streamAbort(java.io.InputStream) -> streamAbort
org.apache.http.conn.HttpClientConnectionManager -> org.apache.http.conn.HttpClientConnectionManager:
    org.apache.http.conn.ConnectionRequest requestConnection(org.apache.http.conn.routing.HttpRoute,java.lang.Object) -> requestConnection
    void releaseConnection(org.apache.http.HttpClientConnection,java.lang.Object,long,java.util.concurrent.TimeUnit) -> releaseConnection
    void connect(org.apache.http.HttpClientConnection,org.apache.http.conn.routing.HttpRoute,int,org.apache.http.protocol.HttpContext) -> connect
    void upgrade(org.apache.http.HttpClientConnection,org.apache.http.conn.routing.HttpRoute,org.apache.http.protocol.HttpContext) -> upgrade
    void routeComplete(org.apache.http.HttpClientConnection,org.apache.http.conn.routing.HttpRoute,org.apache.http.protocol.HttpContext) -> routeComplete
    void closeIdleConnections(long,java.util.concurrent.TimeUnit) -> closeIdleConnections
    void closeExpiredConnections() -> closeExpiredConnections
    void shutdown() -> shutdown
org.apache.http.conn.HttpConnectionFactory -> org.apache.http.conn.HttpConnectionFactory:
    org.apache.http.HttpConnection create(java.lang.Object,org.apache.http.config.ConnectionConfig) -> create
org.apache.http.conn.HttpHostConnectException -> org.apache.http.conn.HttpHostConnectException:
    long serialVersionUID -> serialVersionUID
    org.apache.http.HttpHost host -> host
    org.apache.http.HttpHost getHost() -> getHost
org.apache.http.conn.HttpInetSocketAddress -> org.apache.http.conn.HttpInetSocketAddress:
    long serialVersionUID -> serialVersionUID
    org.apache.http.HttpHost httphost -> httphost
    org.apache.http.HttpHost getHttpHost() -> getHttpHost
    java.lang.String toString() -> toString
org.apache.http.conn.HttpRoutedConnection -> org.apache.http.conn.HttpRoutedConnection:
    boolean isSecure() -> isSecure
    org.apache.http.conn.routing.HttpRoute getRoute() -> getRoute
    javax.net.ssl.SSLSession getSSLSession() -> getSSLSession
org.apache.http.conn.ManagedClientConnection -> org.apache.http.conn.ManagedClientConnection:
    boolean isSecure() -> isSecure
    org.apache.http.conn.routing.HttpRoute getRoute() -> getRoute
    javax.net.ssl.SSLSession getSSLSession() -> getSSLSession
    void open(org.apache.http.conn.routing.HttpRoute,org.apache.http.protocol.HttpContext,org.apache.http.params.HttpParams) -> open
    void tunnelTarget(boolean,org.apache.http.params.HttpParams) -> tunnelTarget
    void tunnelProxy(org.apache.http.HttpHost,boolean,org.apache.http.params.HttpParams) -> tunnelProxy
    void layerProtocol(org.apache.http.protocol.HttpContext,org.apache.http.params.HttpParams) -> layerProtocol
    void markReusable() -> markReusable
    void unmarkReusable() -> unmarkReusable
    boolean isMarkedReusable() -> isMarkedReusable
    void setState(java.lang.Object) -> setState
    java.lang.Object getState() -> getState
    void setIdleDuration(long,java.util.concurrent.TimeUnit) -> setIdleDuration
org.apache.http.conn.ManagedHttpClientConnection -> org.apache.http.conn.ManagedHttpClientConnection:
    java.lang.String getId() -> getId
    void bind(java.net.Socket) -> bind
    java.net.Socket getSocket() -> getSocket
    javax.net.ssl.SSLSession getSSLSession() -> getSSLSession
org.apache.http.conn.MultihomePlainSocketFactory -> org.apache.http.conn.MultihomePlainSocketFactory:
    org.apache.http.conn.MultihomePlainSocketFactory DEFAULT_FACTORY -> DEFAULT_FACTORY
    org.apache.http.conn.MultihomePlainSocketFactory getSocketFactory() -> getSocketFactory
    java.net.Socket createSocket() -> createSocket
    java.net.Socket connectSocket(java.net.Socket,java.lang.String,int,java.net.InetAddress,int,org.apache.http.params.HttpParams) -> connectSocket
    boolean isSecure(java.net.Socket) -> isSecure
org.apache.http.conn.OperatedClientConnection -> org.apache.http.conn.OperatedClientConnection:
    org.apache.http.HttpHost getTargetHost() -> getTargetHost
    boolean isSecure() -> isSecure
    java.net.Socket getSocket() -> getSocket
    void opening(java.net.Socket,org.apache.http.HttpHost) -> opening
    void openCompleted(boolean,org.apache.http.params.HttpParams) -> openCompleted
    void update(java.net.Socket,org.apache.http.HttpHost,boolean,org.apache.http.params.HttpParams) -> update
org.apache.http.conn.SchemePortResolver -> org.apache.http.conn.SchemePortResolver:
    int resolve(org.apache.http.HttpHost) -> resolve
org.apache.http.conn.UnsupportedSchemeException -> org.apache.http.conn.UnsupportedSchemeException:
    long serialVersionUID -> serialVersionUID
org.apache.http.conn.params.ConnConnectionPNames -> org.apache.http.conn.params.ConnConnectionPNames:
    java.lang.String MAX_STATUS_LINE_GARBAGE -> MAX_STATUS_LINE_GARBAGE
org.apache.http.conn.params.ConnConnectionParamBean -> org.apache.http.conn.params.ConnConnectionParamBean:
    void setMaxStatusLineGarbage(int) -> setMaxStatusLineGarbage
org.apache.http.conn.params.ConnManagerPNames -> org.apache.http.conn.params.ConnManagerPNames:
    java.lang.String TIMEOUT -> TIMEOUT
    java.lang.String MAX_CONNECTIONS_PER_ROUTE -> MAX_CONNECTIONS_PER_ROUTE
    java.lang.String MAX_TOTAL_CONNECTIONS -> MAX_TOTAL_CONNECTIONS
org.apache.http.conn.params.ConnManagerParamBean -> org.apache.http.conn.params.ConnManagerParamBean:
    void setTimeout(long) -> setTimeout
    void setMaxTotalConnections(int) -> setMaxTotalConnections
    void setConnectionsPerRoute(org.apache.http.conn.params.ConnPerRouteBean) -> setConnectionsPerRoute
org.apache.http.conn.params.ConnManagerParams -> org.apache.http.conn.params.ConnManagerParams:
    int DEFAULT_MAX_TOTAL_CONNECTIONS -> DEFAULT_MAX_TOTAL_CONNECTIONS
    org.apache.http.conn.params.ConnPerRoute DEFAULT_CONN_PER_ROUTE -> DEFAULT_CONN_PER_ROUTE
    long getTimeout(org.apache.http.params.HttpParams) -> getTimeout
    void setTimeout(org.apache.http.params.HttpParams,long) -> setTimeout
    void setMaxConnectionsPerRoute(org.apache.http.params.HttpParams,org.apache.http.conn.params.ConnPerRoute) -> setMaxConnectionsPerRoute
    org.apache.http.conn.params.ConnPerRoute getMaxConnectionsPerRoute(org.apache.http.params.HttpParams) -> getMaxConnectionsPerRoute
    void setMaxTotalConnections(org.apache.http.params.HttpParams,int) -> setMaxTotalConnections
    int getMaxTotalConnections(org.apache.http.params.HttpParams) -> getMaxTotalConnections
org.apache.http.conn.params.ConnManagerParams$1 -> org.apache.http.conn.params.ConnManagerParams$1:
    int getMaxForRoute(org.apache.http.conn.routing.HttpRoute) -> getMaxForRoute
org.apache.http.conn.params.ConnPerRoute -> org.apache.http.conn.params.ConnPerRoute:
    int getMaxForRoute(org.apache.http.conn.routing.HttpRoute) -> getMaxForRoute
org.apache.http.conn.params.ConnPerRouteBean -> org.apache.http.conn.params.ConnPerRouteBean:
    int DEFAULT_MAX_CONNECTIONS_PER_ROUTE -> DEFAULT_MAX_CONNECTIONS_PER_ROUTE
    java.util.concurrent.ConcurrentHashMap maxPerHostMap -> maxPerHostMap
    int defaultMax -> defaultMax
    int getDefaultMax() -> getDefaultMax
    int getDefaultMaxPerRoute() -> getDefaultMaxPerRoute
    void setDefaultMaxPerRoute(int) -> setDefaultMaxPerRoute
    void setMaxForRoute(org.apache.http.conn.routing.HttpRoute,int) -> setMaxForRoute
    int getMaxForRoute(org.apache.http.conn.routing.HttpRoute) -> getMaxForRoute
    void setMaxForRoutes(java.util.Map) -> setMaxForRoutes
    java.lang.String toString() -> toString
org.apache.http.conn.params.ConnRoutePNames -> org.apache.http.conn.params.ConnRoutePNames:
    java.lang.String DEFAULT_PROXY -> DEFAULT_PROXY
    java.lang.String LOCAL_ADDRESS -> LOCAL_ADDRESS
    java.lang.String FORCED_ROUTE -> FORCED_ROUTE
org.apache.http.conn.params.ConnRouteParamBean -> org.apache.http.conn.params.ConnRouteParamBean:
    void setDefaultProxy(org.apache.http.HttpHost) -> setDefaultProxy
    void setLocalAddress(java.net.InetAddress) -> setLocalAddress
    void setForcedRoute(org.apache.http.conn.routing.HttpRoute) -> setForcedRoute
org.apache.http.conn.params.ConnRouteParams -> org.apache.http.conn.params.ConnRouteParams:
    org.apache.http.HttpHost NO_HOST -> NO_HOST
    org.apache.http.conn.routing.HttpRoute NO_ROUTE -> NO_ROUTE
    org.apache.http.HttpHost getDefaultProxy(org.apache.http.params.HttpParams) -> getDefaultProxy
    void setDefaultProxy(org.apache.http.params.HttpParams,org.apache.http.HttpHost) -> setDefaultProxy
    org.apache.http.conn.routing.HttpRoute getForcedRoute(org.apache.http.params.HttpParams) -> getForcedRoute
    void setForcedRoute(org.apache.http.params.HttpParams,org.apache.http.conn.routing.HttpRoute) -> setForcedRoute
    java.net.InetAddress getLocalAddress(org.apache.http.params.HttpParams) -> getLocalAddress
    void setLocalAddress(org.apache.http.params.HttpParams,java.net.InetAddress) -> setLocalAddress
org.apache.http.conn.routing.BasicRouteDirector -> org.apache.http.conn.routing.BasicRouteDirector:
    int nextStep(org.apache.http.conn.routing.RouteInfo,org.apache.http.conn.routing.RouteInfo) -> nextStep
    int firstStep(org.apache.http.conn.routing.RouteInfo) -> firstStep
    int directStep(org.apache.http.conn.routing.RouteInfo,org.apache.http.conn.routing.RouteInfo) -> directStep
    int proxiedStep(org.apache.http.conn.routing.RouteInfo,org.apache.http.conn.routing.RouteInfo) -> proxiedStep
org.apache.http.conn.routing.HttpRoute -> org.apache.http.conn.routing.HttpRoute:
    org.apache.http.HttpHost targetHost -> targetHost
    java.net.InetAddress localAddress -> localAddress
    java.util.List proxyChain -> proxyChain
    org.apache.http.conn.routing.RouteInfo$TunnelType tunnelled -> tunnelled
    org.apache.http.conn.routing.RouteInfo$LayerType layered -> layered
    boolean secure -> secure
    org.apache.http.HttpHost getTargetHost() -> getTargetHost
    java.net.InetAddress getLocalAddress() -> getLocalAddress
    java.net.InetSocketAddress getLocalSocketAddress() -> getLocalSocketAddress
    int getHopCount() -> getHopCount
    org.apache.http.HttpHost getHopTarget(int) -> getHopTarget
    org.apache.http.HttpHost getProxyHost() -> getProxyHost
    org.apache.http.conn.routing.RouteInfo$TunnelType getTunnelType() -> getTunnelType
    boolean isTunnelled() -> isTunnelled
    org.apache.http.conn.routing.RouteInfo$LayerType getLayerType() -> getLayerType
    boolean isLayered() -> isLayered
    boolean isSecure() -> isSecure
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    java.lang.Object clone() -> clone
org.apache.http.conn.routing.HttpRouteDirector -> org.apache.http.conn.routing.HttpRouteDirector:
    int UNREACHABLE -> UNREACHABLE
    int COMPLETE -> COMPLETE
    int CONNECT_TARGET -> CONNECT_TARGET
    int CONNECT_PROXY -> CONNECT_PROXY
    int TUNNEL_TARGET -> TUNNEL_TARGET
    int TUNNEL_PROXY -> TUNNEL_PROXY
    int LAYER_PROTOCOL -> LAYER_PROTOCOL
    int nextStep(org.apache.http.conn.routing.RouteInfo,org.apache.http.conn.routing.RouteInfo) -> nextStep
org.apache.http.conn.routing.HttpRoutePlanner -> org.apache.http.conn.routing.HttpRoutePlanner:
    org.apache.http.conn.routing.HttpRoute determineRoute(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext) -> determineRoute
org.apache.http.conn.routing.RouteInfo -> org.apache.http.conn.routing.RouteInfo:
    org.apache.http.HttpHost getTargetHost() -> getTargetHost
    java.net.InetAddress getLocalAddress() -> getLocalAddress
    int getHopCount() -> getHopCount
    org.apache.http.HttpHost getHopTarget(int) -> getHopTarget
    org.apache.http.HttpHost getProxyHost() -> getProxyHost
    org.apache.http.conn.routing.RouteInfo$TunnelType getTunnelType() -> getTunnelType
    boolean isTunnelled() -> isTunnelled
    org.apache.http.conn.routing.RouteInfo$LayerType getLayerType() -> getLayerType
    boolean isLayered() -> isLayered
    boolean isSecure() -> isSecure
org.apache.http.conn.routing.RouteInfo$LayerType -> org.apache.http.conn.routing.RouteInfo$LayerType:
    org.apache.http.conn.routing.RouteInfo$LayerType PLAIN -> PLAIN
    org.apache.http.conn.routing.RouteInfo$LayerType LAYERED -> LAYERED
    org.apache.http.conn.routing.RouteInfo$LayerType[] $VALUES -> $VALUES
    org.apache.http.conn.routing.RouteInfo$LayerType[] values() -> values
    org.apache.http.conn.routing.RouteInfo$LayerType valueOf(java.lang.String) -> valueOf
org.apache.http.conn.routing.RouteInfo$TunnelType -> org.apache.http.conn.routing.RouteInfo$TunnelType:
    org.apache.http.conn.routing.RouteInfo$TunnelType PLAIN -> PLAIN
    org.apache.http.conn.routing.RouteInfo$TunnelType TUNNELLED -> TUNNELLED
    org.apache.http.conn.routing.RouteInfo$TunnelType[] $VALUES -> $VALUES
    org.apache.http.conn.routing.RouteInfo$TunnelType[] values() -> values
    org.apache.http.conn.routing.RouteInfo$TunnelType valueOf(java.lang.String) -> valueOf
org.apache.http.conn.routing.RouteTracker -> org.apache.http.conn.routing.RouteTracker:
    org.apache.http.HttpHost targetHost -> targetHost
    java.net.InetAddress localAddress -> localAddress
    boolean connected -> connected
    org.apache.http.HttpHost[] proxyChain -> proxyChain
    org.apache.http.conn.routing.RouteInfo$TunnelType tunnelled -> tunnelled
    org.apache.http.conn.routing.RouteInfo$LayerType layered -> layered
    boolean secure -> secure
    void reset() -> reset
    void connectTarget(boolean) -> connectTarget
    void connectProxy(org.apache.http.HttpHost,boolean) -> connectProxy
    void tunnelTarget(boolean) -> tunnelTarget
    void tunnelProxy(org.apache.http.HttpHost,boolean) -> tunnelProxy
    void layerProtocol(boolean) -> layerProtocol
    org.apache.http.HttpHost getTargetHost() -> getTargetHost
    java.net.InetAddress getLocalAddress() -> getLocalAddress
    int getHopCount() -> getHopCount
    org.apache.http.HttpHost getHopTarget(int) -> getHopTarget
    org.apache.http.HttpHost getProxyHost() -> getProxyHost
    boolean isConnected() -> isConnected
    org.apache.http.conn.routing.RouteInfo$TunnelType getTunnelType() -> getTunnelType
    boolean isTunnelled() -> isTunnelled
    org.apache.http.conn.routing.RouteInfo$LayerType getLayerType() -> getLayerType
    boolean isLayered() -> isLayered
    boolean isSecure() -> isSecure
    org.apache.http.conn.routing.HttpRoute toRoute() -> toRoute
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    java.lang.Object clone() -> clone
org.apache.http.conn.scheme.HostNameResolver -> org.apache.http.conn.scheme.HostNameResolver:
    java.net.InetAddress resolve(java.lang.String) -> resolve
org.apache.http.conn.scheme.LayeredSchemeSocketFactory -> org.apache.http.conn.scheme.LayeredSchemeSocketFactory:
    java.net.Socket createLayeredSocket(java.net.Socket,java.lang.String,int,boolean) -> createLayeredSocket
org.apache.http.conn.scheme.LayeredSocketFactory -> org.apache.http.conn.scheme.LayeredSocketFactory:
    java.net.Socket createSocket(java.net.Socket,java.lang.String,int,boolean) -> createSocket
org.apache.http.conn.scheme.LayeredSocketFactoryAdaptor -> org.apache.http.conn.scheme.LayeredSocketFactoryAdaptor:
    org.apache.http.conn.scheme.LayeredSchemeSocketFactory factory -> factory
    java.net.Socket createSocket(java.net.Socket,java.lang.String,int,boolean) -> createSocket
org.apache.http.conn.scheme.PlainSocketFactory -> org.apache.http.conn.scheme.PlainSocketFactory:
    org.apache.http.conn.scheme.HostNameResolver nameResolver -> nameResolver
    org.apache.http.conn.scheme.PlainSocketFactory getSocketFactory() -> getSocketFactory
    java.net.Socket createSocket(org.apache.http.params.HttpParams) -> createSocket
    java.net.Socket createSocket() -> createSocket
    java.net.Socket connectSocket(java.net.Socket,java.net.InetSocketAddress,java.net.InetSocketAddress,org.apache.http.params.HttpParams) -> connectSocket
    boolean isSecure(java.net.Socket) -> isSecure
    java.net.Socket connectSocket(java.net.Socket,java.lang.String,int,java.net.InetAddress,int,org.apache.http.params.HttpParams) -> connectSocket
org.apache.http.conn.scheme.Scheme -> org.apache.http.conn.scheme.Scheme:
    java.lang.String name -> name
    org.apache.http.conn.scheme.SchemeSocketFactory socketFactory -> socketFactory
    int defaultPort -> defaultPort
    boolean layered -> layered
    java.lang.String stringRep -> stringRep
    int getDefaultPort() -> getDefaultPort
    org.apache.http.conn.scheme.SocketFactory getSocketFactory() -> getSocketFactory
    org.apache.http.conn.scheme.SchemeSocketFactory getSchemeSocketFactory() -> getSchemeSocketFactory
    java.lang.String getName() -> getName
    boolean isLayered() -> isLayered
    int resolvePort(int) -> resolvePort
    java.lang.String toString() -> toString
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
org.apache.http.conn.scheme.SchemeLayeredSocketFactory -> org.apache.http.conn.scheme.SchemeLayeredSocketFactory:
    java.net.Socket createLayeredSocket(java.net.Socket,java.lang.String,int,org.apache.http.params.HttpParams) -> createLayeredSocket
org.apache.http.conn.scheme.SchemeLayeredSocketFactoryAdaptor -> org.apache.http.conn.scheme.SchemeLayeredSocketFactoryAdaptor:
    org.apache.http.conn.scheme.LayeredSocketFactory factory -> factory
    java.net.Socket createLayeredSocket(java.net.Socket,java.lang.String,int,org.apache.http.params.HttpParams) -> createLayeredSocket
org.apache.http.conn.scheme.SchemeLayeredSocketFactoryAdaptor2 -> org.apache.http.conn.scheme.SchemeLayeredSocketFactoryAdaptor2:
    org.apache.http.conn.scheme.LayeredSchemeSocketFactory factory -> factory
    java.net.Socket createSocket(org.apache.http.params.HttpParams) -> createSocket
    java.net.Socket connectSocket(java.net.Socket,java.net.InetSocketAddress,java.net.InetSocketAddress,org.apache.http.params.HttpParams) -> connectSocket
    boolean isSecure(java.net.Socket) -> isSecure
    java.net.Socket createLayeredSocket(java.net.Socket,java.lang.String,int,org.apache.http.params.HttpParams) -> createLayeredSocket
org.apache.http.conn.scheme.SchemeRegistry -> org.apache.http.conn.scheme.SchemeRegistry:
    java.util.concurrent.ConcurrentHashMap registeredSchemes -> registeredSchemes
    org.apache.http.conn.scheme.Scheme getScheme(java.lang.String) -> getScheme
    org.apache.http.conn.scheme.Scheme getScheme(org.apache.http.HttpHost) -> getScheme
    org.apache.http.conn.scheme.Scheme get(java.lang.String) -> get
    org.apache.http.conn.scheme.Scheme register(org.apache.http.conn.scheme.Scheme) -> register
    org.apache.http.conn.scheme.Scheme unregister(java.lang.String) -> unregister
    java.util.List getSchemeNames() -> getSchemeNames
    void setItems(java.util.Map) -> setItems
org.apache.http.conn.scheme.SchemeSocketFactory -> org.apache.http.conn.scheme.SchemeSocketFactory:
    java.net.Socket createSocket(org.apache.http.params.HttpParams) -> createSocket
    java.net.Socket connectSocket(java.net.Socket,java.net.InetSocketAddress,java.net.InetSocketAddress,org.apache.http.params.HttpParams) -> connectSocket
    boolean isSecure(java.net.Socket) -> isSecure
org.apache.http.conn.scheme.SchemeSocketFactoryAdaptor -> org.apache.http.conn.scheme.SchemeSocketFactoryAdaptor:
    org.apache.http.conn.scheme.SocketFactory factory -> factory
    java.net.Socket connectSocket(java.net.Socket,java.net.InetSocketAddress,java.net.InetSocketAddress,org.apache.http.params.HttpParams) -> connectSocket
    java.net.Socket createSocket(org.apache.http.params.HttpParams) -> createSocket
    boolean isSecure(java.net.Socket) -> isSecure
    org.apache.http.conn.scheme.SocketFactory getFactory() -> getFactory
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
org.apache.http.conn.scheme.SocketFactory -> org.apache.http.conn.scheme.SocketFactory:
    java.net.Socket createSocket() -> createSocket
    java.net.Socket connectSocket(java.net.Socket,java.lang.String,int,java.net.InetAddress,int,org.apache.http.params.HttpParams) -> connectSocket
    boolean isSecure(java.net.Socket) -> isSecure
org.apache.http.conn.scheme.SocketFactoryAdaptor -> org.apache.http.conn.scheme.SocketFactoryAdaptor:
    org.apache.http.conn.scheme.SchemeSocketFactory factory -> factory
    java.net.Socket createSocket() -> createSocket
    java.net.Socket connectSocket(java.net.Socket,java.lang.String,int,java.net.InetAddress,int,org.apache.http.params.HttpParams) -> connectSocket
    boolean isSecure(java.net.Socket) -> isSecure
    org.apache.http.conn.scheme.SchemeSocketFactory getFactory() -> getFactory
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
org.apache.http.conn.socket.ConnectionSocketFactory -> org.apache.http.conn.socket.ConnectionSocketFactory:
    java.net.Socket createSocket(org.apache.http.protocol.HttpContext) -> createSocket
    java.net.Socket connectSocket(int,java.net.Socket,org.apache.http.HttpHost,java.net.InetSocketAddress,java.net.InetSocketAddress,org.apache.http.protocol.HttpContext) -> connectSocket
org.apache.http.conn.socket.LayeredConnectionSocketFactory -> org.apache.http.conn.socket.LayeredConnectionSocketFactory:
    java.net.Socket createLayeredSocket(java.net.Socket,java.lang.String,int,org.apache.http.protocol.HttpContext) -> createLayeredSocket
org.apache.http.conn.socket.PlainConnectionSocketFactory -> org.apache.http.conn.socket.PlainConnectionSocketFactory:
    org.apache.http.conn.socket.PlainConnectionSocketFactory INSTANCE -> INSTANCE
    org.apache.http.conn.socket.PlainConnectionSocketFactory getSocketFactory() -> getSocketFactory
    java.net.Socket createSocket(org.apache.http.protocol.HttpContext) -> createSocket
    java.net.Socket connectSocket(int,java.net.Socket,org.apache.http.HttpHost,java.net.InetSocketAddress,java.net.InetSocketAddress,org.apache.http.protocol.HttpContext) -> connectSocket
org.apache.http.conn.ssl.AbstractVerifier -> org.apache.http.conn.ssl.AbstractVerifier:
    java.lang.String[] BAD_COUNTRY_2LDS -> BAD_COUNTRY_2LDS
    org.apache.commons.logging.Log log -> log
    void verify(java.lang.String,javax.net.ssl.SSLSocket) -> verify
    boolean verify(java.lang.String,javax.net.ssl.SSLSession) -> verify
    void verify(java.lang.String,java.security.cert.X509Certificate) -> verify
    void verify(java.lang.String,java.lang.String[],java.lang.String[],boolean) -> verify
    boolean acceptableCountryWildcard(java.lang.String) -> acceptableCountryWildcard
    boolean validCountryWildcard(java.lang.String) -> validCountryWildcard
    java.lang.String[] getCNs(java.security.cert.X509Certificate) -> getCNs
    java.lang.String[] extractCNs(java.lang.String) -> extractCNs
    java.lang.String[] getSubjectAlts(java.security.cert.X509Certificate,java.lang.String) -> getSubjectAlts
    java.lang.String[] getDNSSubjectAlts(java.security.cert.X509Certificate) -> getDNSSubjectAlts
    int countDots(java.lang.String) -> countDots
    boolean isIPAddress(java.lang.String) -> isIPAddress
    java.lang.String normaliseIPv6Address(java.lang.String) -> normaliseIPv6Address
org.apache.http.conn.ssl.AllowAllHostnameVerifier -> org.apache.http.conn.ssl.AllowAllHostnameVerifier:
    void verify(java.lang.String,java.lang.String[],java.lang.String[]) -> verify
    java.lang.String toString() -> toString
org.apache.http.conn.ssl.BrowserCompatHostnameVerifier -> org.apache.http.conn.ssl.BrowserCompatHostnameVerifier:
    void verify(java.lang.String,java.lang.String[],java.lang.String[]) -> verify
    boolean validCountryWildcard(java.lang.String) -> validCountryWildcard
    java.lang.String toString() -> toString
org.apache.http.conn.ssl.PrivateKeyDetails -> org.apache.http.conn.ssl.PrivateKeyDetails:
    java.lang.String type -> type
    java.security.cert.X509Certificate[] certChain -> certChain
    java.lang.String getType() -> getType
    java.security.cert.X509Certificate[] getCertChain() -> getCertChain
    java.lang.String toString() -> toString
org.apache.http.conn.ssl.PrivateKeyStrategy -> org.apache.http.conn.ssl.PrivateKeyStrategy:
    java.lang.String chooseAlias(java.util.Map,java.net.Socket) -> chooseAlias
org.apache.http.conn.ssl.SSLConnectionSocketFactory -> org.apache.http.conn.ssl.SSLConnectionSocketFactory:
    java.lang.String TLS -> TLS
    java.lang.String SSL -> SSL
    java.lang.String SSLV2 -> SSLV2
    org.apache.http.conn.ssl.X509HostnameVerifier ALLOW_ALL_HOSTNAME_VERIFIER -> ALLOW_ALL_HOSTNAME_VERIFIER
    org.apache.http.conn.ssl.X509HostnameVerifier BROWSER_COMPATIBLE_HOSTNAME_VERIFIER -> BROWSER_COMPATIBLE_HOSTNAME_VERIFIER
    org.apache.http.conn.ssl.X509HostnameVerifier STRICT_HOSTNAME_VERIFIER -> STRICT_HOSTNAME_VERIFIER
    javax.net.ssl.SSLSocketFactory socketfactory -> socketfactory
    org.apache.http.conn.ssl.X509HostnameVerifier hostnameVerifier -> hostnameVerifier
    java.lang.String[] supportedProtocols -> supportedProtocols
    java.lang.String[] supportedCipherSuites -> supportedCipherSuites
    org.apache.http.conn.ssl.SSLConnectionSocketFactory getSocketFactory() -> getSocketFactory
    java.lang.String[] split(java.lang.String) -> split
    org.apache.http.conn.ssl.SSLConnectionSocketFactory getSystemSocketFactory() -> getSystemSocketFactory
    void prepareSocket(javax.net.ssl.SSLSocket) -> prepareSocket
    java.net.Socket createSocket(org.apache.http.protocol.HttpContext) -> createSocket
    java.net.Socket connectSocket(int,java.net.Socket,org.apache.http.HttpHost,java.net.InetSocketAddress,java.net.InetSocketAddress,org.apache.http.protocol.HttpContext) -> connectSocket
    java.net.Socket createLayeredSocket(java.net.Socket,java.lang.String,int,org.apache.http.protocol.HttpContext) -> createLayeredSocket
    org.apache.http.conn.ssl.X509HostnameVerifier getHostnameVerifier() -> getHostnameVerifier
    void verifyHostname(javax.net.ssl.SSLSocket,java.lang.String) -> verifyHostname
org.apache.http.conn.ssl.SSLContextBuilder -> org.apache.http.conn.ssl.SSLContextBuilder:
    java.lang.String TLS -> TLS
    java.lang.String SSL -> SSL
    java.lang.String protocol -> protocol
    java.util.Set keymanagers -> keymanagers
    java.util.Set trustmanagers -> trustmanagers
    java.security.SecureRandom secureRandom -> secureRandom
    org.apache.http.conn.ssl.SSLContextBuilder useTLS() -> useTLS
    org.apache.http.conn.ssl.SSLContextBuilder useSSL() -> useSSL
    org.apache.http.conn.ssl.SSLContextBuilder useProtocol(java.lang.String) -> useProtocol
    org.apache.http.conn.ssl.SSLContextBuilder setSecureRandom(java.security.SecureRandom) -> setSecureRandom
    org.apache.http.conn.ssl.SSLContextBuilder loadTrustMaterial(java.security.KeyStore,org.apache.http.conn.ssl.TrustStrategy) -> loadTrustMaterial
    org.apache.http.conn.ssl.SSLContextBuilder loadTrustMaterial(java.security.KeyStore) -> loadTrustMaterial
    org.apache.http.conn.ssl.SSLContextBuilder loadKeyMaterial(java.security.KeyStore,char[]) -> loadKeyMaterial
    org.apache.http.conn.ssl.SSLContextBuilder loadKeyMaterial(java.security.KeyStore,char[],org.apache.http.conn.ssl.PrivateKeyStrategy) -> loadKeyMaterial
    javax.net.ssl.SSLContext build() -> build
org.apache.http.conn.ssl.SSLContextBuilder$KeyManagerDelegate -> org.apache.http.conn.ssl.SSLContextBuilder$KeyManagerDelegate:
    javax.net.ssl.X509KeyManager keyManager -> keyManager
    org.apache.http.conn.ssl.PrivateKeyStrategy aliasStrategy -> aliasStrategy
    java.lang.String[] getClientAliases(java.lang.String,java.security.Principal[]) -> getClientAliases
    java.lang.String chooseClientAlias(java.lang.String[],java.security.Principal[],java.net.Socket) -> chooseClientAlias
    java.lang.String[] getServerAliases(java.lang.String,java.security.Principal[]) -> getServerAliases
    java.lang.String chooseServerAlias(java.lang.String,java.security.Principal[],java.net.Socket) -> chooseServerAlias
    java.security.cert.X509Certificate[] getCertificateChain(java.lang.String) -> getCertificateChain
    java.security.PrivateKey getPrivateKey(java.lang.String) -> getPrivateKey
org.apache.http.conn.ssl.SSLContextBuilder$TrustManagerDelegate -> org.apache.http.conn.ssl.SSLContextBuilder$TrustManagerDelegate:
    javax.net.ssl.X509TrustManager trustManager -> trustManager
    org.apache.http.conn.ssl.TrustStrategy trustStrategy -> trustStrategy
    void checkClientTrusted(java.security.cert.X509Certificate[],java.lang.String) -> checkClientTrusted
    void checkServerTrusted(java.security.cert.X509Certificate[],java.lang.String) -> checkServerTrusted
    java.security.cert.X509Certificate[] getAcceptedIssuers() -> getAcceptedIssuers
org.apache.http.conn.ssl.SSLContexts -> org.apache.http.conn.ssl.SSLContexts:
    javax.net.ssl.SSLContext createDefault() -> createDefault
    javax.net.ssl.SSLContext createSystemDefault() -> createSystemDefault
    org.apache.http.conn.ssl.SSLContextBuilder custom() -> custom
org.apache.http.conn.ssl.SSLInitializationException -> org.apache.http.conn.ssl.SSLInitializationException:
    long serialVersionUID -> serialVersionUID
org.apache.http.conn.ssl.SSLSocketFactory -> org.apache.http.conn.ssl.SSLSocketFactory:
    java.lang.String TLS -> TLS
    java.lang.String SSL -> SSL
    java.lang.String SSLV2 -> SSLV2
    org.apache.http.conn.ssl.X509HostnameVerifier ALLOW_ALL_HOSTNAME_VERIFIER -> ALLOW_ALL_HOSTNAME_VERIFIER
    org.apache.http.conn.ssl.X509HostnameVerifier BROWSER_COMPATIBLE_HOSTNAME_VERIFIER -> BROWSER_COMPATIBLE_HOSTNAME_VERIFIER
    org.apache.http.conn.ssl.X509HostnameVerifier STRICT_HOSTNAME_VERIFIER -> STRICT_HOSTNAME_VERIFIER
    javax.net.ssl.SSLSocketFactory socketfactory -> socketfactory
    org.apache.http.conn.scheme.HostNameResolver nameResolver -> nameResolver
    org.apache.http.conn.ssl.X509HostnameVerifier hostnameVerifier -> hostnameVerifier
    java.lang.String[] supportedProtocols -> supportedProtocols
    java.lang.String[] supportedCipherSuites -> supportedCipherSuites
    org.apache.http.conn.ssl.SSLSocketFactory getSocketFactory() -> getSocketFactory
    java.lang.String[] split(java.lang.String) -> split
    org.apache.http.conn.ssl.SSLSocketFactory getSystemSocketFactory() -> getSystemSocketFactory
    java.net.Socket createSocket(org.apache.http.params.HttpParams) -> createSocket
    java.net.Socket createSocket() -> createSocket
    java.net.Socket connectSocket(java.net.Socket,java.net.InetSocketAddress,java.net.InetSocketAddress,org.apache.http.params.HttpParams) -> connectSocket
    boolean isSecure(java.net.Socket) -> isSecure
    java.net.Socket createLayeredSocket(java.net.Socket,java.lang.String,int,org.apache.http.params.HttpParams) -> createLayeredSocket
    java.net.Socket createLayeredSocket(java.net.Socket,java.lang.String,int,boolean) -> createLayeredSocket
    void setHostnameVerifier(org.apache.http.conn.ssl.X509HostnameVerifier) -> setHostnameVerifier
    org.apache.http.conn.ssl.X509HostnameVerifier getHostnameVerifier() -> getHostnameVerifier
    java.net.Socket connectSocket(java.net.Socket,java.lang.String,int,java.net.InetAddress,int,org.apache.http.params.HttpParams) -> connectSocket
    java.net.Socket createSocket(java.net.Socket,java.lang.String,int,boolean) -> createSocket
    void prepareSocket(javax.net.ssl.SSLSocket) -> prepareSocket
    void internalPrepareSocket(javax.net.ssl.SSLSocket) -> internalPrepareSocket
    java.net.Socket createSocket(org.apache.http.protocol.HttpContext) -> createSocket
    java.net.Socket connectSocket(int,java.net.Socket,org.apache.http.HttpHost,java.net.InetSocketAddress,java.net.InetSocketAddress,org.apache.http.protocol.HttpContext) -> connectSocket
    java.net.Socket createLayeredSocket(java.net.Socket,java.lang.String,int,org.apache.http.protocol.HttpContext) -> createLayeredSocket
    void verifyHostname(javax.net.ssl.SSLSocket,java.lang.String) -> verifyHostname
org.apache.http.conn.ssl.StrictHostnameVerifier -> org.apache.http.conn.ssl.StrictHostnameVerifier:
    void verify(java.lang.String,java.lang.String[],java.lang.String[]) -> verify
    java.lang.String toString() -> toString
org.apache.http.conn.ssl.TrustSelfSignedStrategy -> org.apache.http.conn.ssl.TrustSelfSignedStrategy:
    boolean isTrusted(java.security.cert.X509Certificate[],java.lang.String) -> isTrusted
org.apache.http.conn.ssl.TrustStrategy -> org.apache.http.conn.ssl.TrustStrategy:
    boolean isTrusted(java.security.cert.X509Certificate[],java.lang.String) -> isTrusted
org.apache.http.conn.ssl.X509HostnameVerifier -> org.apache.http.conn.ssl.X509HostnameVerifier:
    void verify(java.lang.String,javax.net.ssl.SSLSocket) -> verify
    void verify(java.lang.String,java.security.cert.X509Certificate) -> verify
    void verify(java.lang.String,java.lang.String[],java.lang.String[]) -> verify
org.apache.http.conn.util.InetAddressUtils -> org.apache.http.conn.util.InetAddressUtils:
    java.lang.String IPV4_BASIC_PATTERN_STRING -> IPV4_BASIC_PATTERN_STRING
    java.util.regex.Pattern IPV4_PATTERN -> IPV4_PATTERN
    java.util.regex.Pattern IPV4_MAPPED_IPV6_PATTERN -> IPV4_MAPPED_IPV6_PATTERN
    java.util.regex.Pattern IPV6_STD_PATTERN -> IPV6_STD_PATTERN
    java.util.regex.Pattern IPV6_HEX_COMPRESSED_PATTERN -> IPV6_HEX_COMPRESSED_PATTERN
    char COLON_CHAR -> COLON_CHAR
    int MAX_COLON_COUNT -> MAX_COLON_COUNT
    boolean isIPv4Address(java.lang.String) -> isIPv4Address
    boolean isIPv4MappedIPv64Address(java.lang.String) -> isIPv4MappedIPv64Address
    boolean isIPv6StdAddress(java.lang.String) -> isIPv6StdAddress
    boolean isIPv6HexCompressedAddress(java.lang.String) -> isIPv6HexCompressedAddress
    boolean isIPv6Address(java.lang.String) -> isIPv6Address
org.apache.http.cookie.ClientCookie -> org.apache.http.cookie.ClientCookie:
    java.lang.String VERSION_ATTR -> VERSION_ATTR
    java.lang.String PATH_ATTR -> PATH_ATTR
    java.lang.String DOMAIN_ATTR -> DOMAIN_ATTR
    java.lang.String MAX_AGE_ATTR -> MAX_AGE_ATTR
    java.lang.String SECURE_ATTR -> SECURE_ATTR
    java.lang.String COMMENT_ATTR -> COMMENT_ATTR
    java.lang.String EXPIRES_ATTR -> EXPIRES_ATTR
    java.lang.String PORT_ATTR -> PORT_ATTR
    java.lang.String COMMENTURL_ATTR -> COMMENTURL_ATTR
    java.lang.String DISCARD_ATTR -> DISCARD_ATTR
    java.lang.String getAttribute(java.lang.String) -> getAttribute
    boolean containsAttribute(java.lang.String) -> containsAttribute
org.apache.http.cookie.Cookie -> org.apache.http.cookie.Cookie:
    java.lang.String getName() -> getName
    java.lang.String getValue() -> getValue
    java.lang.String getComment() -> getComment
    java.lang.String getCommentURL() -> getCommentURL
    java.util.Date getExpiryDate() -> getExpiryDate
    boolean isPersistent() -> isPersistent
    java.lang.String getDomain() -> getDomain
    java.lang.String getPath() -> getPath
    int[] getPorts() -> getPorts
    boolean isSecure() -> isSecure
    int getVersion() -> getVersion
    boolean isExpired(java.util.Date) -> isExpired
org.apache.http.cookie.CookieAttributeHandler -> org.apache.http.cookie.CookieAttributeHandler:
    void parse(org.apache.http.cookie.SetCookie,java.lang.String) -> parse
    void validate(org.apache.http.cookie.Cookie,org.apache.http.cookie.CookieOrigin) -> validate
    boolean match(org.apache.http.cookie.Cookie,org.apache.http.cookie.CookieOrigin) -> match
org.apache.http.cookie.CookieIdentityComparator -> org.apache.http.cookie.CookieIdentityComparator:
    long serialVersionUID -> serialVersionUID
    int compare(org.apache.http.cookie.Cookie,org.apache.http.cookie.Cookie) -> compare
    int compare(java.lang.Object,java.lang.Object) -> compare
org.apache.http.cookie.CookieOrigin -> org.apache.http.cookie.CookieOrigin:
    java.lang.String host -> host
    int port -> port
    java.lang.String path -> path
    boolean secure -> secure
    java.lang.String getHost() -> getHost
    java.lang.String getPath() -> getPath
    int getPort() -> getPort
    boolean isSecure() -> isSecure
    java.lang.String toString() -> toString
org.apache.http.cookie.CookiePathComparator -> org.apache.http.cookie.CookiePathComparator:
    long serialVersionUID -> serialVersionUID
    java.lang.String normalizePath(org.apache.http.cookie.Cookie) -> normalizePath
    int compare(org.apache.http.cookie.Cookie,org.apache.http.cookie.Cookie) -> compare
    int compare(java.lang.Object,java.lang.Object) -> compare
org.apache.http.cookie.CookieRestrictionViolationException -> org.apache.http.cookie.CookieRestrictionViolationException:
    long serialVersionUID -> serialVersionUID
org.apache.http.cookie.CookieSpec -> org.apache.http.cookie.CookieSpec:
    int getVersion() -> getVersion
    java.util.List parse(org.apache.http.Header,org.apache.http.cookie.CookieOrigin) -> parse
    void validate(org.apache.http.cookie.Cookie,org.apache.http.cookie.CookieOrigin) -> validate
    boolean match(org.apache.http.cookie.Cookie,org.apache.http.cookie.CookieOrigin) -> match
    java.util.List formatCookies(java.util.List) -> formatCookies
    org.apache.http.Header getVersionHeader() -> getVersionHeader
org.apache.http.cookie.CookieSpecFactory -> org.apache.http.cookie.CookieSpecFactory:
    org.apache.http.cookie.CookieSpec newInstance(org.apache.http.params.HttpParams) -> newInstance
org.apache.http.cookie.CookieSpecProvider -> org.apache.http.cookie.CookieSpecProvider:
    org.apache.http.cookie.CookieSpec create(org.apache.http.protocol.HttpContext) -> create
org.apache.http.cookie.CookieSpecRegistry -> org.apache.http.cookie.CookieSpecRegistry:
    java.util.concurrent.ConcurrentHashMap registeredSpecs -> registeredSpecs
    void register(java.lang.String,org.apache.http.cookie.CookieSpecFactory) -> register
    void unregister(java.lang.String) -> unregister
    org.apache.http.cookie.CookieSpec getCookieSpec(java.lang.String,org.apache.http.params.HttpParams) -> getCookieSpec
    org.apache.http.cookie.CookieSpec getCookieSpec(java.lang.String) -> getCookieSpec
    java.util.List getSpecNames() -> getSpecNames
    void setItems(java.util.Map) -> setItems
    org.apache.http.cookie.CookieSpecProvider lookup(java.lang.String) -> lookup
    java.lang.Object lookup(java.lang.String) -> lookup
org.apache.http.cookie.CookieSpecRegistry$1 -> org.apache.http.cookie.CookieSpecRegistry$1:
    java.lang.String val$name -> val$name
    org.apache.http.cookie.CookieSpecRegistry this$0 -> this$0
    org.apache.http.cookie.CookieSpec create(org.apache.http.protocol.HttpContext) -> create
org.apache.http.cookie.MalformedCookieException -> org.apache.http.cookie.MalformedCookieException:
    long serialVersionUID -> serialVersionUID
org.apache.http.cookie.SM -> org.apache.http.cookie.SM:
    java.lang.String COOKIE -> COOKIE
    java.lang.String COOKIE2 -> COOKIE2
    java.lang.String SET_COOKIE -> SET_COOKIE
    java.lang.String SET_COOKIE2 -> SET_COOKIE2
org.apache.http.cookie.SetCookie -> org.apache.http.cookie.SetCookie:
    void setValue(java.lang.String) -> setValue
    void setComment(java.lang.String) -> setComment
    void setExpiryDate(java.util.Date) -> setExpiryDate
    void setDomain(java.lang.String) -> setDomain
    void setPath(java.lang.String) -> setPath
    void setSecure(boolean) -> setSecure
    void setVersion(int) -> setVersion
org.apache.http.cookie.SetCookie2 -> org.apache.http.cookie.SetCookie2:
    void setCommentURL(java.lang.String) -> setCommentURL
    void setPorts(int[]) -> setPorts
    void setDiscard(boolean) -> setDiscard
org.apache.http.cookie.params.CookieSpecPNames -> org.apache.http.cookie.params.CookieSpecPNames:
    java.lang.String DATE_PATTERNS -> DATE_PATTERNS
    java.lang.String SINGLE_COOKIE_HEADER -> SINGLE_COOKIE_HEADER
org.apache.http.cookie.params.CookieSpecParamBean -> org.apache.http.cookie.params.CookieSpecParamBean:
    void setDatePatterns(java.util.Collection) -> setDatePatterns
    void setSingleHeader(boolean) -> setSingleHeader
org.apache.http.entity.AbstractHttpEntity -> org.apache.http.entity.AbstractHttpEntity:
    int OUTPUT_BUFFER_SIZE -> OUTPUT_BUFFER_SIZE
    org.apache.http.Header contentType -> contentType
    org.apache.http.Header contentEncoding -> contentEncoding
    boolean chunked -> chunked
    org.apache.http.Header getContentType() -> getContentType
    org.apache.http.Header getContentEncoding() -> getContentEncoding
    boolean isChunked() -> isChunked
    void setContentType(org.apache.http.Header) -> setContentType
    void setContentType(java.lang.String) -> setContentType
    void setContentEncoding(org.apache.http.Header) -> setContentEncoding
    void setContentEncoding(java.lang.String) -> setContentEncoding
    void setChunked(boolean) -> setChunked
    void consumeContent() -> consumeContent
    java.lang.String toString() -> toString
org.apache.http.entity.BasicHttpEntity -> org.apache.http.entity.BasicHttpEntity:
    java.io.InputStream content -> content
    long length -> length
    long getContentLength() -> getContentLength
    java.io.InputStream getContent() -> getContent
    boolean isRepeatable() -> isRepeatable
    void setContentLength(long) -> setContentLength
    void setContent(java.io.InputStream) -> setContent
    void writeTo(java.io.OutputStream) -> writeTo
    boolean isStreaming() -> isStreaming
org.apache.http.entity.BufferedHttpEntity -> org.apache.http.entity.BufferedHttpEntity:
    byte[] buffer -> buffer
    long getContentLength() -> getContentLength
    java.io.InputStream getContent() -> getContent
    boolean isChunked() -> isChunked
    boolean isRepeatable() -> isRepeatable
    void writeTo(java.io.OutputStream) -> writeTo
    boolean isStreaming() -> isStreaming
org.apache.http.entity.ByteArrayEntity -> org.apache.http.entity.ByteArrayEntity:
    byte[] content -> content
    byte[] b -> b
    int off -> off
    int len -> len
    boolean isRepeatable() -> isRepeatable
    long getContentLength() -> getContentLength
    java.io.InputStream getContent() -> getContent
    void writeTo(java.io.OutputStream) -> writeTo
    boolean isStreaming() -> isStreaming
    java.lang.Object clone() -> clone
org.apache.http.entity.ContentLengthStrategy -> org.apache.http.entity.ContentLengthStrategy:
    int IDENTITY -> IDENTITY
    int CHUNKED -> CHUNKED
    long determineLength(org.apache.http.HttpMessage) -> determineLength
org.apache.http.entity.ContentProducer -> org.apache.http.entity.ContentProducer:
    void writeTo(java.io.OutputStream) -> writeTo
org.apache.http.entity.ContentType -> org.apache.http.entity.ContentType:
    long serialVersionUID -> serialVersionUID
    org.apache.http.entity.ContentType APPLICATION_ATOM_XML -> APPLICATION_ATOM_XML
    org.apache.http.entity.ContentType APPLICATION_FORM_URLENCODED -> APPLICATION_FORM_URLENCODED
    org.apache.http.entity.ContentType APPLICATION_JSON -> APPLICATION_JSON
    org.apache.http.entity.ContentType APPLICATION_OCTET_STREAM -> APPLICATION_OCTET_STREAM
    org.apache.http.entity.ContentType APPLICATION_SVG_XML -> APPLICATION_SVG_XML
    org.apache.http.entity.ContentType APPLICATION_XHTML_XML -> APPLICATION_XHTML_XML
    org.apache.http.entity.ContentType APPLICATION_XML -> APPLICATION_XML
    org.apache.http.entity.ContentType MULTIPART_FORM_DATA -> MULTIPART_FORM_DATA
    org.apache.http.entity.ContentType TEXT_HTML -> TEXT_HTML
    org.apache.http.entity.ContentType TEXT_PLAIN -> TEXT_PLAIN
    org.apache.http.entity.ContentType TEXT_XML -> TEXT_XML
    org.apache.http.entity.ContentType WILDCARD -> WILDCARD
    org.apache.http.entity.ContentType DEFAULT_TEXT -> DEFAULT_TEXT
    org.apache.http.entity.ContentType DEFAULT_BINARY -> DEFAULT_BINARY
    java.lang.String mimeType -> mimeType
    java.nio.charset.Charset charset -> charset
    org.apache.http.NameValuePair[] params -> params
    java.lang.String getMimeType() -> getMimeType
    java.nio.charset.Charset getCharset() -> getCharset
    java.lang.String getParameter(java.lang.String) -> getParameter
    java.lang.String toString() -> toString
    boolean valid(java.lang.String) -> valid
    org.apache.http.entity.ContentType create(java.lang.String,java.nio.charset.Charset) -> create
    org.apache.http.entity.ContentType create(java.lang.String) -> create
    org.apache.http.entity.ContentType create(java.lang.String,java.lang.String) -> create
    org.apache.http.entity.ContentType create(org.apache.http.HeaderElement) -> create
    org.apache.http.entity.ContentType parse(java.lang.String) -> parse
    org.apache.http.entity.ContentType get(org.apache.http.HttpEntity) -> get
    org.apache.http.entity.ContentType getOrDefault(org.apache.http.HttpEntity) -> getOrDefault
    org.apache.http.entity.ContentType withCharset(java.nio.charset.Charset) -> withCharset
    org.apache.http.entity.ContentType withCharset(java.lang.String) -> withCharset
org.apache.http.entity.EntityTemplate -> org.apache.http.entity.EntityTemplate:
    org.apache.http.entity.ContentProducer contentproducer -> contentproducer
    long getContentLength() -> getContentLength
    java.io.InputStream getContent() -> getContent
    boolean isRepeatable() -> isRepeatable
    void writeTo(java.io.OutputStream) -> writeTo
    boolean isStreaming() -> isStreaming
org.apache.http.entity.FileEntity -> org.apache.http.entity.FileEntity:
    java.io.File file -> file
    boolean isRepeatable() -> isRepeatable
    long getContentLength() -> getContentLength
    java.io.InputStream getContent() -> getContent
    void writeTo(java.io.OutputStream) -> writeTo
    boolean isStreaming() -> isStreaming
    java.lang.Object clone() -> clone
org.apache.http.entity.HttpEntityWrapper -> org.apache.http.entity.HttpEntityWrapper:
    org.apache.http.HttpEntity wrappedEntity -> wrappedEntity
    boolean isRepeatable() -> isRepeatable
    boolean isChunked() -> isChunked
    long getContentLength() -> getContentLength
    org.apache.http.Header getContentType() -> getContentType
    org.apache.http.Header getContentEncoding() -> getContentEncoding
    java.io.InputStream getContent() -> getContent
    void writeTo(java.io.OutputStream) -> writeTo
    boolean isStreaming() -> isStreaming
    void consumeContent() -> consumeContent
org.apache.http.entity.InputStreamEntity -> org.apache.http.entity.InputStreamEntity:
    java.io.InputStream content -> content
    long length -> length
    boolean isRepeatable() -> isRepeatable
    long getContentLength() -> getContentLength
    java.io.InputStream getContent() -> getContent
    void writeTo(java.io.OutputStream) -> writeTo
    boolean isStreaming() -> isStreaming
org.apache.http.entity.SerializableEntity -> org.apache.http.entity.SerializableEntity:
    byte[] objSer -> objSer
    java.io.Serializable objRef -> objRef
    void createBytes(java.io.Serializable) -> createBytes
    java.io.InputStream getContent() -> getContent
    long getContentLength() -> getContentLength
    boolean isRepeatable() -> isRepeatable
    boolean isStreaming() -> isStreaming
    void writeTo(java.io.OutputStream) -> writeTo
org.apache.http.entity.StringEntity -> org.apache.http.entity.StringEntity:
    byte[] content -> content
    boolean isRepeatable() -> isRepeatable
    long getContentLength() -> getContentLength
    java.io.InputStream getContent() -> getContent
    void writeTo(java.io.OutputStream) -> writeTo
    boolean isStreaming() -> isStreaming
    java.lang.Object clone() -> clone
org.apache.http.impl.AbstractHttpClientConnection -> org.apache.http.impl.AbstractHttpClientConnection:
    org.apache.http.impl.entity.EntitySerializer entityserializer -> entityserializer
    org.apache.http.impl.entity.EntityDeserializer entitydeserializer -> entitydeserializer
    org.apache.http.io.SessionInputBuffer inbuffer -> inbuffer
    org.apache.http.io.SessionOutputBuffer outbuffer -> outbuffer
    org.apache.http.io.EofSensor eofSensor -> eofSensor
    org.apache.http.io.HttpMessageParser responseParser -> responseParser
    org.apache.http.io.HttpMessageWriter requestWriter -> requestWriter
    org.apache.http.impl.HttpConnectionMetricsImpl metrics -> metrics
    void assertOpen() -> assertOpen
    org.apache.http.impl.entity.EntityDeserializer createEntityDeserializer() -> createEntityDeserializer
    org.apache.http.impl.entity.EntitySerializer createEntitySerializer() -> createEntitySerializer
    org.apache.http.HttpResponseFactory createHttpResponseFactory() -> createHttpResponseFactory
    org.apache.http.io.HttpMessageParser createResponseParser(org.apache.http.io.SessionInputBuffer,org.apache.http.HttpResponseFactory,org.apache.http.params.HttpParams) -> createResponseParser
    org.apache.http.io.HttpMessageWriter createRequestWriter(org.apache.http.io.SessionOutputBuffer,org.apache.http.params.HttpParams) -> createRequestWriter
    org.apache.http.impl.HttpConnectionMetricsImpl createConnectionMetrics(org.apache.http.io.HttpTransportMetrics,org.apache.http.io.HttpTransportMetrics) -> createConnectionMetrics
    void init(org.apache.http.io.SessionInputBuffer,org.apache.http.io.SessionOutputBuffer,org.apache.http.params.HttpParams) -> init
    boolean isResponseAvailable(int) -> isResponseAvailable
    void sendRequestHeader(org.apache.http.HttpRequest) -> sendRequestHeader
    void sendRequestEntity(org.apache.http.HttpEntityEnclosingRequest) -> sendRequestEntity
    void doFlush() -> doFlush
    void flush() -> flush
    org.apache.http.HttpResponse receiveResponseHeader() -> receiveResponseHeader
    void receiveResponseEntity(org.apache.http.HttpResponse) -> receiveResponseEntity
    boolean isEof() -> isEof
    boolean isStale() -> isStale
    org.apache.http.HttpConnectionMetrics getMetrics() -> getMetrics
org.apache.http.impl.AbstractHttpServerConnection -> org.apache.http.impl.AbstractHttpServerConnection:
    org.apache.http.impl.entity.EntitySerializer entityserializer -> entityserializer
    org.apache.http.impl.entity.EntityDeserializer entitydeserializer -> entitydeserializer
    org.apache.http.io.SessionInputBuffer inbuffer -> inbuffer
    org.apache.http.io.SessionOutputBuffer outbuffer -> outbuffer
    org.apache.http.io.EofSensor eofSensor -> eofSensor
    org.apache.http.io.HttpMessageParser requestParser -> requestParser
    org.apache.http.io.HttpMessageWriter responseWriter -> responseWriter
    org.apache.http.impl.HttpConnectionMetricsImpl metrics -> metrics
    void assertOpen() -> assertOpen
    org.apache.http.impl.entity.EntityDeserializer createEntityDeserializer() -> createEntityDeserializer
    org.apache.http.impl.entity.EntitySerializer createEntitySerializer() -> createEntitySerializer
    org.apache.http.HttpRequestFactory createHttpRequestFactory() -> createHttpRequestFactory
    org.apache.http.io.HttpMessageParser createRequestParser(org.apache.http.io.SessionInputBuffer,org.apache.http.HttpRequestFactory,org.apache.http.params.HttpParams) -> createRequestParser
    org.apache.http.io.HttpMessageWriter createResponseWriter(org.apache.http.io.SessionOutputBuffer,org.apache.http.params.HttpParams) -> createResponseWriter
    org.apache.http.impl.HttpConnectionMetricsImpl createConnectionMetrics(org.apache.http.io.HttpTransportMetrics,org.apache.http.io.HttpTransportMetrics) -> createConnectionMetrics
    void init(org.apache.http.io.SessionInputBuffer,org.apache.http.io.SessionOutputBuffer,org.apache.http.params.HttpParams) -> init
    org.apache.http.HttpRequest receiveRequestHeader() -> receiveRequestHeader
    void receiveRequestEntity(org.apache.http.HttpEntityEnclosingRequest) -> receiveRequestEntity
    void doFlush() -> doFlush
    void flush() -> flush
    void sendResponseHeader(org.apache.http.HttpResponse) -> sendResponseHeader
    void sendResponseEntity(org.apache.http.HttpResponse) -> sendResponseEntity
    boolean isEof() -> isEof
    boolean isStale() -> isStale
    org.apache.http.HttpConnectionMetrics getMetrics() -> getMetrics
org.apache.http.impl.BHttpConnectionBase -> org.apache.http.impl.BHttpConnectionBase:
    org.apache.http.impl.io.SessionInputBufferImpl inbuffer -> inbuffer
    org.apache.http.impl.io.SessionOutputBufferImpl outbuffer -> outbuffer
    org.apache.http.impl.HttpConnectionMetricsImpl connMetrics -> connMetrics
    org.apache.http.entity.ContentLengthStrategy incomingContentStrategy -> incomingContentStrategy
    org.apache.http.entity.ContentLengthStrategy outgoingContentStrategy -> outgoingContentStrategy
    java.util.concurrent.atomic.AtomicReference socketHolder -> socketHolder
    void ensureOpen() -> ensureOpen
    java.io.InputStream getSocketInputStream(java.net.Socket) -> getSocketInputStream
    java.io.OutputStream getSocketOutputStream(java.net.Socket) -> getSocketOutputStream
    void bind(java.net.Socket) -> bind
    org.apache.http.io.SessionInputBuffer getSessionInputBuffer() -> getSessionInputBuffer
    org.apache.http.io.SessionOutputBuffer getSessionOutputBuffer() -> getSessionOutputBuffer
    void doFlush() -> doFlush
    boolean isOpen() -> isOpen
    java.net.Socket getSocket() -> getSocket
    java.io.OutputStream createOutputStream(long,org.apache.http.io.SessionOutputBuffer) -> createOutputStream
    java.io.OutputStream prepareOutput(org.apache.http.HttpMessage) -> prepareOutput
    java.io.InputStream createInputStream(long,org.apache.http.io.SessionInputBuffer) -> createInputStream
    org.apache.http.HttpEntity prepareInput(org.apache.http.HttpMessage) -> prepareInput
    java.net.InetAddress getLocalAddress() -> getLocalAddress
    int getLocalPort() -> getLocalPort
    java.net.InetAddress getRemoteAddress() -> getRemoteAddress
    int getRemotePort() -> getRemotePort
    void setSocketTimeout(int) -> setSocketTimeout
    int getSocketTimeout() -> getSocketTimeout
    void shutdown() -> shutdown
    void close() -> close
    int fillInputBuffer(int) -> fillInputBuffer
    boolean awaitInput(int) -> awaitInput
    boolean isStale() -> isStale
    void incrementRequestCount() -> incrementRequestCount
    void incrementResponseCount() -> incrementResponseCount
    org.apache.http.HttpConnectionMetrics getMetrics() -> getMetrics
    java.lang.String toString() -> toString
org.apache.http.impl.ConnSupport -> org.apache.http.impl.ConnSupport:
    java.nio.charset.CharsetDecoder createDecoder(org.apache.http.config.ConnectionConfig) -> createDecoder
    java.nio.charset.CharsetEncoder createEncoder(org.apache.http.config.ConnectionConfig) -> createEncoder
org.apache.http.impl.DefaultBHttpClientConnection -> org.apache.http.impl.DefaultBHttpClientConnection:
    org.apache.http.io.HttpMessageParser responseParser -> responseParser
    org.apache.http.io.HttpMessageWriter requestWriter -> requestWriter
    void onResponseReceived(org.apache.http.HttpResponse) -> onResponseReceived
    void onRequestSubmitted(org.apache.http.HttpRequest) -> onRequestSubmitted
    void bind(java.net.Socket) -> bind
    boolean isResponseAvailable(int) -> isResponseAvailable
    void sendRequestHeader(org.apache.http.HttpRequest) -> sendRequestHeader
    void sendRequestEntity(org.apache.http.HttpEntityEnclosingRequest) -> sendRequestEntity
    org.apache.http.HttpResponse receiveResponseHeader() -> receiveResponseHeader
    void receiveResponseEntity(org.apache.http.HttpResponse) -> receiveResponseEntity
    void flush() -> flush
org.apache.http.impl.DefaultBHttpClientConnectionFactory -> org.apache.http.impl.DefaultBHttpClientConnectionFactory:
    org.apache.http.impl.DefaultBHttpClientConnectionFactory INSTANCE -> INSTANCE
    org.apache.http.config.ConnectionConfig cconfig -> cconfig
    org.apache.http.entity.ContentLengthStrategy incomingContentStrategy -> incomingContentStrategy
    org.apache.http.entity.ContentLengthStrategy outgoingContentStrategy -> outgoingContentStrategy
    org.apache.http.io.HttpMessageWriterFactory requestWriterFactory -> requestWriterFactory
    org.apache.http.io.HttpMessageParserFactory responseParserFactory -> responseParserFactory
    org.apache.http.impl.DefaultBHttpClientConnection createConnection(java.net.Socket) -> createConnection
    org.apache.http.HttpConnection createConnection(java.net.Socket) -> createConnection
org.apache.http.impl.DefaultBHttpServerConnection -> org.apache.http.impl.DefaultBHttpServerConnection:
    org.apache.http.io.HttpMessageParser requestParser -> requestParser
    org.apache.http.io.HttpMessageWriter responseWriter -> responseWriter
    void onRequestReceived(org.apache.http.HttpRequest) -> onRequestReceived
    void onResponseSubmitted(org.apache.http.HttpResponse) -> onResponseSubmitted
    void bind(java.net.Socket) -> bind
    org.apache.http.HttpRequest receiveRequestHeader() -> receiveRequestHeader
    void receiveRequestEntity(org.apache.http.HttpEntityEnclosingRequest) -> receiveRequestEntity
    void sendResponseHeader(org.apache.http.HttpResponse) -> sendResponseHeader
    void sendResponseEntity(org.apache.http.HttpResponse) -> sendResponseEntity
    void flush() -> flush
org.apache.http.impl.DefaultBHttpServerConnectionFactory -> org.apache.http.impl.DefaultBHttpServerConnectionFactory:
    org.apache.http.impl.DefaultBHttpServerConnectionFactory INSTANCE -> INSTANCE
    org.apache.http.config.ConnectionConfig cconfig -> cconfig
    org.apache.http.entity.ContentLengthStrategy incomingContentStrategy -> incomingContentStrategy
    org.apache.http.entity.ContentLengthStrategy outgoingContentStrategy -> outgoingContentStrategy
    org.apache.http.io.HttpMessageParserFactory requestParserFactory -> requestParserFactory
    org.apache.http.io.HttpMessageWriterFactory responseWriterFactory -> responseWriterFactory
    org.apache.http.impl.DefaultBHttpServerConnection createConnection(java.net.Socket) -> createConnection
    org.apache.http.HttpConnection createConnection(java.net.Socket) -> createConnection
org.apache.http.impl.DefaultConnectionReuseStrategy -> org.apache.http.impl.DefaultConnectionReuseStrategy:
    org.apache.http.impl.DefaultConnectionReuseStrategy INSTANCE -> INSTANCE
    boolean keepAlive(org.apache.http.HttpResponse,org.apache.http.protocol.HttpContext) -> keepAlive
    org.apache.http.TokenIterator createTokenIterator(org.apache.http.HeaderIterator) -> createTokenIterator
    boolean canResponseHaveBody(org.apache.http.HttpResponse) -> canResponseHaveBody
org.apache.http.impl.DefaultHttpClientConnection -> org.apache.http.impl.DefaultHttpClientConnection:
    void bind(java.net.Socket,org.apache.http.params.HttpParams) -> bind
org.apache.http.impl.DefaultHttpRequestFactory -> org.apache.http.impl.DefaultHttpRequestFactory:
    org.apache.http.impl.DefaultHttpRequestFactory INSTANCE -> INSTANCE
    java.lang.String[] RFC2616_COMMON_METHODS -> RFC2616_COMMON_METHODS
    java.lang.String[] RFC2616_ENTITY_ENC_METHODS -> RFC2616_ENTITY_ENC_METHODS
    java.lang.String[] RFC2616_SPECIAL_METHODS -> RFC2616_SPECIAL_METHODS
    boolean isOneOf(java.lang.String[],java.lang.String) -> isOneOf
    org.apache.http.HttpRequest newHttpRequest(org.apache.http.RequestLine) -> newHttpRequest
    org.apache.http.HttpRequest newHttpRequest(java.lang.String,java.lang.String) -> newHttpRequest
org.apache.http.impl.DefaultHttpResponseFactory -> org.apache.http.impl.DefaultHttpResponseFactory:
    org.apache.http.impl.DefaultHttpResponseFactory INSTANCE -> INSTANCE
    org.apache.http.ReasonPhraseCatalog reasonCatalog -> reasonCatalog
    org.apache.http.HttpResponse newHttpResponse(org.apache.http.ProtocolVersion,int,org.apache.http.protocol.HttpContext) -> newHttpResponse
    org.apache.http.HttpResponse newHttpResponse(org.apache.http.StatusLine,org.apache.http.protocol.HttpContext) -> newHttpResponse
    java.util.Locale determineLocale(org.apache.http.protocol.HttpContext) -> determineLocale
org.apache.http.impl.DefaultHttpServerConnection -> org.apache.http.impl.DefaultHttpServerConnection:
    void bind(java.net.Socket,org.apache.http.params.HttpParams) -> bind
org.apache.http.impl.EnglishReasonPhraseCatalog -> org.apache.http.impl.EnglishReasonPhraseCatalog:
    org.apache.http.impl.EnglishReasonPhraseCatalog INSTANCE -> INSTANCE
    java.lang.String[][] REASON_PHRASES -> REASON_PHRASES
    java.lang.String getReason(int,java.util.Locale) -> getReason
    void setReason(int,java.lang.String) -> setReason
org.apache.http.impl.HttpConnectionMetricsImpl -> org.apache.http.impl.HttpConnectionMetricsImpl:
    java.lang.String REQUEST_COUNT -> REQUEST_COUNT
    java.lang.String RESPONSE_COUNT -> RESPONSE_COUNT
    java.lang.String SENT_BYTES_COUNT -> SENT_BYTES_COUNT
    java.lang.String RECEIVED_BYTES_COUNT -> RECEIVED_BYTES_COUNT
    org.apache.http.io.HttpTransportMetrics inTransportMetric -> inTransportMetric
    org.apache.http.io.HttpTransportMetrics outTransportMetric -> outTransportMetric
    long requestCount -> requestCount
    long responseCount -> responseCount
    java.util.Map metricsCache -> metricsCache
    long getReceivedBytesCount() -> getReceivedBytesCount
    long getSentBytesCount() -> getSentBytesCount
    long getRequestCount() -> getRequestCount
    void incrementRequestCount() -> incrementRequestCount
    long getResponseCount() -> getResponseCount
    void incrementResponseCount() -> incrementResponseCount
    java.lang.Object getMetric(java.lang.String) -> getMetric
    void setMetric(java.lang.String,java.lang.Object) -> setMetric
    void reset() -> reset
org.apache.http.impl.NoConnectionReuseStrategy -> org.apache.http.impl.NoConnectionReuseStrategy:
    org.apache.http.impl.NoConnectionReuseStrategy INSTANCE -> INSTANCE
    boolean keepAlive(org.apache.http.HttpResponse,org.apache.http.protocol.HttpContext) -> keepAlive
org.apache.http.impl.SocketHttpClientConnection -> org.apache.http.impl.SocketHttpClientConnection:
    boolean open -> open
    java.net.Socket socket -> socket
    void assertNotOpen() -> assertNotOpen
    void assertOpen() -> assertOpen
    org.apache.http.io.SessionInputBuffer createSessionInputBuffer(java.net.Socket,int,org.apache.http.params.HttpParams) -> createSessionInputBuffer
    org.apache.http.io.SessionOutputBuffer createSessionOutputBuffer(java.net.Socket,int,org.apache.http.params.HttpParams) -> createSessionOutputBuffer
    void bind(java.net.Socket,org.apache.http.params.HttpParams) -> bind
    boolean isOpen() -> isOpen
    java.net.Socket getSocket() -> getSocket
    java.net.InetAddress getLocalAddress() -> getLocalAddress
    int getLocalPort() -> getLocalPort
    java.net.InetAddress getRemoteAddress() -> getRemoteAddress
    int getRemotePort() -> getRemotePort
    void setSocketTimeout(int) -> setSocketTimeout
    int getSocketTimeout() -> getSocketTimeout
    void shutdown() -> shutdown
    void close() -> close
    void formatAddress(java.lang.StringBuilder,java.net.SocketAddress) -> formatAddress
    java.lang.String toString() -> toString
org.apache.http.impl.SocketHttpServerConnection -> org.apache.http.impl.SocketHttpServerConnection:
    boolean open -> open
    java.net.Socket socket -> socket
    void assertNotOpen() -> assertNotOpen
    void assertOpen() -> assertOpen
    org.apache.http.io.SessionInputBuffer createSessionInputBuffer(java.net.Socket,int,org.apache.http.params.HttpParams) -> createSessionInputBuffer
    org.apache.http.io.SessionOutputBuffer createSessionOutputBuffer(java.net.Socket,int,org.apache.http.params.HttpParams) -> createSessionOutputBuffer
    void bind(java.net.Socket,org.apache.http.params.HttpParams) -> bind
    java.net.Socket getSocket() -> getSocket
    boolean isOpen() -> isOpen
    java.net.InetAddress getLocalAddress() -> getLocalAddress
    int getLocalPort() -> getLocalPort
    java.net.InetAddress getRemoteAddress() -> getRemoteAddress
    int getRemotePort() -> getRemotePort
    void setSocketTimeout(int) -> setSocketTimeout
    int getSocketTimeout() -> getSocketTimeout
    void shutdown() -> shutdown
    void close() -> close
    void formatAddress(java.lang.StringBuilder,java.net.SocketAddress) -> formatAddress
    java.lang.String toString() -> toString
org.apache.http.impl.auth.AuthSchemeBase -> org.apache.http.impl.auth.AuthSchemeBase:
    org.apache.http.auth.ChallengeState challengeState -> challengeState
    void processChallenge(org.apache.http.Header) -> processChallenge
    org.apache.http.Header authenticate(org.apache.http.auth.Credentials,org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext) -> authenticate
    void parseChallenge(org.apache.http.util.CharArrayBuffer,int,int) -> parseChallenge
    boolean isProxy() -> isProxy
    org.apache.http.auth.ChallengeState getChallengeState() -> getChallengeState
    java.lang.String toString() -> toString
org.apache.http.impl.auth.BasicScheme -> org.apache.http.impl.auth.BasicScheme:
    org.apache.commons.codec.binary.Base64 base64codec -> base64codec
    boolean complete -> complete
    java.lang.String getSchemeName() -> getSchemeName
    void processChallenge(org.apache.http.Header) -> processChallenge
    boolean isComplete() -> isComplete
    boolean isConnectionBased() -> isConnectionBased
    org.apache.http.Header authenticate(org.apache.http.auth.Credentials,org.apache.http.HttpRequest) -> authenticate
    org.apache.http.Header authenticate(org.apache.http.auth.Credentials,org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext) -> authenticate
    org.apache.http.Header authenticate(org.apache.http.auth.Credentials,java.lang.String,boolean) -> authenticate
org.apache.http.impl.auth.BasicSchemeFactory -> org.apache.http.impl.auth.BasicSchemeFactory:
    java.nio.charset.Charset charset -> charset
    org.apache.http.auth.AuthScheme newInstance(org.apache.http.params.HttpParams) -> newInstance
    org.apache.http.auth.AuthScheme create(org.apache.http.protocol.HttpContext) -> create
org.apache.http.impl.auth.DigestScheme -> org.apache.http.impl.auth.DigestScheme:
    char[] HEXADECIMAL -> HEXADECIMAL
    boolean complete -> complete
    int QOP_UNKNOWN -> QOP_UNKNOWN
    int QOP_MISSING -> QOP_MISSING
    int QOP_AUTH_INT -> QOP_AUTH_INT
    int QOP_AUTH -> QOP_AUTH
    java.lang.String lastNonce -> lastNonce
    long nounceCount -> nounceCount
    java.lang.String cnonce -> cnonce
    java.lang.String a1 -> a1
    java.lang.String a2 -> a2
    void processChallenge(org.apache.http.Header) -> processChallenge
    boolean isComplete() -> isComplete
    java.lang.String getSchemeName() -> getSchemeName
    boolean isConnectionBased() -> isConnectionBased
    void overrideParamter(java.lang.String,java.lang.String) -> overrideParamter
    org.apache.http.Header authenticate(org.apache.http.auth.Credentials,org.apache.http.HttpRequest) -> authenticate
    org.apache.http.Header authenticate(org.apache.http.auth.Credentials,org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext) -> authenticate
    java.security.MessageDigest createMessageDigest(java.lang.String) -> createMessageDigest
    org.apache.http.Header createDigestHeader(org.apache.http.auth.Credentials,org.apache.http.HttpRequest) -> createDigestHeader
    java.lang.String getCnonce() -> getCnonce
    java.lang.String getA1() -> getA1
    java.lang.String getA2() -> getA2
    java.lang.String encode(byte[]) -> encode
    java.lang.String createCnonce() -> createCnonce
    java.lang.String toString() -> toString
org.apache.http.impl.auth.DigestSchemeFactory -> org.apache.http.impl.auth.DigestSchemeFactory:
    java.nio.charset.Charset charset -> charset
    org.apache.http.auth.AuthScheme newInstance(org.apache.http.params.HttpParams) -> newInstance
    org.apache.http.auth.AuthScheme create(org.apache.http.protocol.HttpContext) -> create
org.apache.http.impl.auth.GGSSchemeBase -> org.apache.http.impl.auth.GGSSchemeBase:
    org.apache.commons.logging.Log log -> log
    org.apache.commons.codec.binary.Base64 base64codec -> base64codec
    boolean stripPort -> stripPort
    org.apache.http.impl.auth.GGSSchemeBase$State state -> state
    byte[] token -> token
    org.ietf.jgss.GSSManager getManager() -> getManager
    byte[] generateGSSToken(byte[],org.ietf.jgss.Oid,java.lang.String) -> generateGSSToken
    byte[] generateToken(byte[],java.lang.String) -> generateToken
    boolean isComplete() -> isComplete
    org.apache.http.Header authenticate(org.apache.http.auth.Credentials,org.apache.http.HttpRequest) -> authenticate
    org.apache.http.Header authenticate(org.apache.http.auth.Credentials,org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext) -> authenticate
    void parseChallenge(org.apache.http.util.CharArrayBuffer,int,int) -> parseChallenge
org.apache.http.impl.auth.GGSSchemeBase$1 -> org.apache.http.impl.auth.GGSSchemeBase$1:
    int[] $SwitchMap$org$apache$http$impl$auth$GGSSchemeBase$State -> $SwitchMap$org$apache$http$impl$auth$GGSSchemeBase$State
org.apache.http.impl.auth.GGSSchemeBase$State -> org.apache.http.impl.auth.GGSSchemeBase$State:
    org.apache.http.impl.auth.GGSSchemeBase$State UNINITIATED -> UNINITIATED
    org.apache.http.impl.auth.GGSSchemeBase$State CHALLENGE_RECEIVED -> CHALLENGE_RECEIVED
    org.apache.http.impl.auth.GGSSchemeBase$State TOKEN_GENERATED -> TOKEN_GENERATED
    org.apache.http.impl.auth.GGSSchemeBase$State FAILED -> FAILED
    org.apache.http.impl.auth.GGSSchemeBase$State[] $VALUES -> $VALUES
    org.apache.http.impl.auth.GGSSchemeBase$State[] values() -> values
    org.apache.http.impl.auth.GGSSchemeBase$State valueOf(java.lang.String) -> valueOf
org.apache.http.impl.auth.HttpAuthenticator -> org.apache.http.impl.auth.HttpAuthenticator:
    org.apache.commons.logging.Log log -> log
    boolean isAuthenticationRequested(org.apache.http.HttpHost,org.apache.http.HttpResponse,org.apache.http.client.AuthenticationStrategy,org.apache.http.auth.AuthState,org.apache.http.protocol.HttpContext) -> isAuthenticationRequested
    boolean handleAuthChallenge(org.apache.http.HttpHost,org.apache.http.HttpResponse,org.apache.http.client.AuthenticationStrategy,org.apache.http.auth.AuthState,org.apache.http.protocol.HttpContext) -> handleAuthChallenge
    void generateAuthResponse(org.apache.http.HttpRequest,org.apache.http.auth.AuthState,org.apache.http.protocol.HttpContext) -> generateAuthResponse
    void ensureAuthScheme(org.apache.http.auth.AuthScheme) -> ensureAuthScheme
    org.apache.http.Header doAuth(org.apache.http.auth.AuthScheme,org.apache.http.auth.Credentials,org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext) -> doAuth
org.apache.http.impl.auth.HttpAuthenticator$1 -> org.apache.http.impl.auth.HttpAuthenticator$1:
    int[] $SwitchMap$org$apache$http$auth$AuthProtocolState -> $SwitchMap$org$apache$http$auth$AuthProtocolState
org.apache.http.impl.auth.HttpEntityDigester -> org.apache.http.impl.auth.HttpEntityDigester:
    java.security.MessageDigest digester -> digester
    boolean closed -> closed
    byte[] digest -> digest
    void write(int) -> write
    void write(byte[],int,int) -> write
    void close() -> close
    byte[] getDigest() -> getDigest
org.apache.http.impl.auth.KerberosScheme -> org.apache.http.impl.auth.KerberosScheme:
    java.lang.String KERBEROS_OID -> KERBEROS_OID
    java.lang.String getSchemeName() -> getSchemeName
    org.apache.http.Header authenticate(org.apache.http.auth.Credentials,org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext) -> authenticate
    byte[] generateToken(byte[],java.lang.String) -> generateToken
    java.lang.String getParameter(java.lang.String) -> getParameter
    java.lang.String getRealm() -> getRealm
    boolean isConnectionBased() -> isConnectionBased
org.apache.http.impl.auth.KerberosSchemeFactory -> org.apache.http.impl.auth.KerberosSchemeFactory:
    boolean stripPort -> stripPort
    boolean isStripPort() -> isStripPort
    org.apache.http.auth.AuthScheme newInstance(org.apache.http.params.HttpParams) -> newInstance
    org.apache.http.auth.AuthScheme create(org.apache.http.protocol.HttpContext) -> create
org.apache.http.impl.auth.NTLMEngine -> org.apache.http.impl.auth.NTLMEngine:
    java.lang.String generateType1Msg(java.lang.String,java.lang.String) -> generateType1Msg
    java.lang.String generateType3Msg(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String) -> generateType3Msg
org.apache.http.impl.auth.NTLMEngineException -> org.apache.http.impl.auth.NTLMEngineException:
    long serialVersionUID -> serialVersionUID
org.apache.http.impl.auth.NTLMEngineImpl -> org.apache.http.impl.auth.NTLMEngineImpl:
    int FLAG_REQUEST_UNICODE_ENCODING -> FLAG_REQUEST_UNICODE_ENCODING
    int FLAG_REQUEST_TARGET -> FLAG_REQUEST_TARGET
    int FLAG_REQUEST_SIGN -> FLAG_REQUEST_SIGN
    int FLAG_REQUEST_SEAL -> FLAG_REQUEST_SEAL
    int FLAG_REQUEST_LAN_MANAGER_KEY -> FLAG_REQUEST_LAN_MANAGER_KEY
    int FLAG_REQUEST_NTLMv1 -> FLAG_REQUEST_NTLMv1
    int FLAG_DOMAIN_PRESENT -> FLAG_DOMAIN_PRESENT
    int FLAG_WORKSTATION_PRESENT -> FLAG_WORKSTATION_PRESENT
    int FLAG_REQUEST_ALWAYS_SIGN -> FLAG_REQUEST_ALWAYS_SIGN
    int FLAG_REQUEST_NTLM2_SESSION -> FLAG_REQUEST_NTLM2_SESSION
    int FLAG_REQUEST_VERSION -> FLAG_REQUEST_VERSION
    int FLAG_TARGETINFO_PRESENT -> FLAG_TARGETINFO_PRESENT
    int FLAG_REQUEST_128BIT_KEY_EXCH -> FLAG_REQUEST_128BIT_KEY_EXCH
    int FLAG_REQUEST_EXPLICIT_KEY_EXCH -> FLAG_REQUEST_EXPLICIT_KEY_EXCH
    int FLAG_REQUEST_56BIT_ENCRYPTION -> FLAG_REQUEST_56BIT_ENCRYPTION
    java.security.SecureRandom RND_GEN -> RND_GEN
    java.lang.String DEFAULT_CHARSET -> DEFAULT_CHARSET
    java.lang.String credentialCharset -> credentialCharset
    byte[] SIGNATURE -> SIGNATURE
    java.lang.String getResponseFor(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String) -> getResponseFor
    java.lang.String getType1Message(java.lang.String,java.lang.String) -> getType1Message
    java.lang.String getType3Message(java.lang.String,java.lang.String,java.lang.String,java.lang.String,byte[],int,java.lang.String,byte[]) -> getType3Message
    java.lang.String getCredentialCharset() -> getCredentialCharset
    void setCredentialCharset(java.lang.String) -> setCredentialCharset
    java.lang.String stripDotSuffix(java.lang.String) -> stripDotSuffix
    java.lang.String convertHost(java.lang.String) -> convertHost
    java.lang.String convertDomain(java.lang.String) -> convertDomain
    int readULong(byte[],int) -> readULong
    int readUShort(byte[],int) -> readUShort
    byte[] readSecurityBuffer(byte[],int) -> readSecurityBuffer
    byte[] makeRandomChallenge() -> makeRandomChallenge
    byte[] makeSecondaryKey() -> makeSecondaryKey
    byte[] hmacMD5(byte[],byte[]) -> hmacMD5
    byte[] RC4(byte[],byte[]) -> RC4
    byte[] ntlm2SessionResponse(byte[],byte[],byte[]) -> ntlm2SessionResponse
    byte[] lmHash(java.lang.String) -> lmHash
    byte[] ntlmHash(java.lang.String) -> ntlmHash
    byte[] lmv2Hash(java.lang.String,java.lang.String,byte[]) -> lmv2Hash
    byte[] ntlmv2Hash(java.lang.String,java.lang.String,byte[]) -> ntlmv2Hash
    byte[] lmResponse(byte[],byte[]) -> lmResponse
    byte[] lmv2Response(byte[],byte[],byte[]) -> lmv2Response
    byte[] createBlob(byte[],byte[],byte[]) -> createBlob
    java.security.Key createDESKey(byte[],int) -> createDESKey
    void oddParity(byte[]) -> oddParity
    void writeULong(byte[],int,int) -> writeULong
    int F(int,int,int) -> F
    int G(int,int,int) -> G
    int H(int,int,int) -> H
    int rotintlft(int,int) -> rotintlft
    java.lang.String generateType1Msg(java.lang.String,java.lang.String) -> generateType1Msg
    java.lang.String generateType3Msg(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String) -> generateType3Msg
    byte[] access$000() -> access$000
    byte[] access$100() -> access$100
    byte[] access$200(java.lang.String) -> access$200
    byte[] access$300(byte[],byte[]) -> access$300
    byte[] access$400(java.lang.String) -> access$400
    byte[] access$500(java.lang.String,java.lang.String,byte[]) -> access$500
    byte[] access$600(java.lang.String,java.lang.String,byte[]) -> access$600
    byte[] access$700(byte[],byte[],byte[]) -> access$700
    byte[] access$800(byte[],byte[],byte[]) -> access$800
    java.security.Key access$900(byte[],int) -> access$900
    byte[] access$1000() -> access$1000
    int access$1100(byte[],int) -> access$1100
    int access$1200(byte[],int) -> access$1200
    byte[] access$1300(byte[],int) -> access$1300
    java.lang.String access$1400(java.lang.String) -> access$1400
    java.lang.String access$1500(java.lang.String) -> access$1500
org.apache.http.impl.auth.NTLMEngineImpl$CipherGen -> org.apache.http.impl.auth.NTLMEngineImpl$CipherGen:
    java.lang.String domain -> domain
    java.lang.String user -> user
    java.lang.String password -> password
    byte[] challenge -> challenge
    java.lang.String target -> target
    byte[] targetInformation -> targetInformation
    byte[] clientChallenge -> clientChallenge
    byte[] clientChallenge2 -> clientChallenge2
    byte[] secondaryKey -> secondaryKey
    byte[] timestamp -> timestamp
    byte[] lmHash -> lmHash
    byte[] lmResponse -> lmResponse
    byte[] ntlmHash -> ntlmHash
    byte[] ntlmResponse -> ntlmResponse
    byte[] ntlmv2Hash -> ntlmv2Hash
    byte[] lmv2Hash -> lmv2Hash
    byte[] lmv2Response -> lmv2Response
    byte[] ntlmv2Blob -> ntlmv2Blob
    byte[] ntlmv2Response -> ntlmv2Response
    byte[] ntlm2SessionResponse -> ntlm2SessionResponse
    byte[] lm2SessionResponse -> lm2SessionResponse
    byte[] lmUserSessionKey -> lmUserSessionKey
    byte[] ntlmUserSessionKey -> ntlmUserSessionKey
    byte[] ntlmv2UserSessionKey -> ntlmv2UserSessionKey
    byte[] ntlm2SessionResponseUserSessionKey -> ntlm2SessionResponseUserSessionKey
    byte[] lanManagerSessionKey -> lanManagerSessionKey
    byte[] getClientChallenge() -> getClientChallenge
    byte[] getClientChallenge2() -> getClientChallenge2
    byte[] getSecondaryKey() -> getSecondaryKey
    byte[] getLMHash() -> getLMHash
    byte[] getLMResponse() -> getLMResponse
    byte[] getNTLMHash() -> getNTLMHash
    byte[] getNTLMResponse() -> getNTLMResponse
    byte[] getLMv2Hash() -> getLMv2Hash
    byte[] getNTLMv2Hash() -> getNTLMv2Hash
    byte[] getTimestamp() -> getTimestamp
    byte[] getNTLMv2Blob() -> getNTLMv2Blob
    byte[] getNTLMv2Response() -> getNTLMv2Response
    byte[] getLMv2Response() -> getLMv2Response
    byte[] getNTLM2SessionResponse() -> getNTLM2SessionResponse
    byte[] getLM2SessionResponse() -> getLM2SessionResponse
    byte[] getLMUserSessionKey() -> getLMUserSessionKey
    byte[] getNTLMUserSessionKey() -> getNTLMUserSessionKey
    byte[] getNTLMv2UserSessionKey() -> getNTLMv2UserSessionKey
    byte[] getNTLM2SessionResponseUserSessionKey() -> getNTLM2SessionResponseUserSessionKey
    byte[] getLanManagerSessionKey() -> getLanManagerSessionKey
org.apache.http.impl.auth.NTLMEngineImpl$HMACMD5 -> org.apache.http.impl.auth.NTLMEngineImpl$HMACMD5:
    byte[] ipad -> ipad
    byte[] opad -> opad
    java.security.MessageDigest md5 -> md5
    byte[] getOutput() -> getOutput
    void update(byte[]) -> update
    void update(byte[],int,int) -> update
org.apache.http.impl.auth.NTLMEngineImpl$MD4 -> org.apache.http.impl.auth.NTLMEngineImpl$MD4:
    int A -> A
    int B -> B
    int C -> C
    int D -> D
    long count -> count
    byte[] dataBuffer -> dataBuffer
    void update(byte[]) -> update
    byte[] getOutput() -> getOutput
    void processBuffer() -> processBuffer
    void round1(int[]) -> round1
    void round2(int[]) -> round2
    void round3(int[]) -> round3
org.apache.http.impl.auth.NTLMEngineImpl$NTLMMessage -> org.apache.http.impl.auth.NTLMEngineImpl$NTLMMessage:
    byte[] messageContents -> messageContents
    int currentOutputPosition -> currentOutputPosition
    int getPreambleLength() -> getPreambleLength
    int getMessageLength() -> getMessageLength
    byte readByte(int) -> readByte
    void readBytes(byte[],int) -> readBytes
    int readUShort(int) -> readUShort
    int readULong(int) -> readULong
    byte[] readSecurityBuffer(int) -> readSecurityBuffer
    void prepareResponse(int,int) -> prepareResponse
    void addByte(byte) -> addByte
    void addBytes(byte[]) -> addBytes
    void addUShort(int) -> addUShort
    void addULong(int) -> addULong
    java.lang.String getResponse() -> getResponse
org.apache.http.impl.auth.NTLMEngineImpl$Type1Message -> org.apache.http.impl.auth.NTLMEngineImpl$Type1Message:
    byte[] hostBytes -> hostBytes
    byte[] domainBytes -> domainBytes
    java.lang.String getResponse() -> getResponse
org.apache.http.impl.auth.NTLMEngineImpl$Type2Message -> org.apache.http.impl.auth.NTLMEngineImpl$Type2Message:
    byte[] challenge -> challenge
    java.lang.String target -> target
    byte[] targetInfo -> targetInfo
    int flags -> flags
    byte[] getChallenge() -> getChallenge
    java.lang.String getTarget() -> getTarget
    byte[] getTargetInfo() -> getTargetInfo
    int getFlags() -> getFlags
org.apache.http.impl.auth.NTLMEngineImpl$Type3Message -> org.apache.http.impl.auth.NTLMEngineImpl$Type3Message:
    int type2Flags -> type2Flags
    byte[] domainBytes -> domainBytes
    byte[] hostBytes -> hostBytes
    byte[] userBytes -> userBytes
    byte[] lmResp -> lmResp
    byte[] ntResp -> ntResp
    byte[] sessionKey -> sessionKey
    java.lang.String getResponse() -> getResponse
org.apache.http.impl.auth.NTLMScheme -> org.apache.http.impl.auth.NTLMScheme:
    org.apache.http.impl.auth.NTLMEngine engine -> engine
    org.apache.http.impl.auth.NTLMScheme$State state -> state
    java.lang.String challenge -> challenge
    java.lang.String getSchemeName() -> getSchemeName
    java.lang.String getParameter(java.lang.String) -> getParameter
    java.lang.String getRealm() -> getRealm
    boolean isConnectionBased() -> isConnectionBased
    void parseChallenge(org.apache.http.util.CharArrayBuffer,int,int) -> parseChallenge
    org.apache.http.Header authenticate(org.apache.http.auth.Credentials,org.apache.http.HttpRequest) -> authenticate
    boolean isComplete() -> isComplete
org.apache.http.impl.auth.NTLMScheme$State -> org.apache.http.impl.auth.NTLMScheme$State:
    org.apache.http.impl.auth.NTLMScheme$State UNINITIATED -> UNINITIATED
    org.apache.http.impl.auth.NTLMScheme$State CHALLENGE_RECEIVED -> CHALLENGE_RECEIVED
    org.apache.http.impl.auth.NTLMScheme$State MSG_TYPE1_GENERATED -> MSG_TYPE1_GENERATED
    org.apache.http.impl.auth.NTLMScheme$State MSG_TYPE2_RECEVIED -> MSG_TYPE2_RECEVIED
    org.apache.http.impl.auth.NTLMScheme$State MSG_TYPE3_GENERATED -> MSG_TYPE3_GENERATED
    org.apache.http.impl.auth.NTLMScheme$State FAILED -> FAILED
    org.apache.http.impl.auth.NTLMScheme$State[] $VALUES -> $VALUES
    org.apache.http.impl.auth.NTLMScheme$State[] values() -> values
    org.apache.http.impl.auth.NTLMScheme$State valueOf(java.lang.String) -> valueOf
org.apache.http.impl.auth.NTLMSchemeFactory -> org.apache.http.impl.auth.NTLMSchemeFactory:
    org.apache.http.auth.AuthScheme newInstance(org.apache.http.params.HttpParams) -> newInstance
    org.apache.http.auth.AuthScheme create(org.apache.http.protocol.HttpContext) -> create
org.apache.http.impl.auth.NegotiateScheme -> org.apache.http.impl.auth.NegotiateScheme:
    org.apache.commons.logging.Log log -> log
    java.lang.String SPNEGO_OID -> SPNEGO_OID
    java.lang.String KERBEROS_OID -> KERBEROS_OID
    org.apache.http.impl.auth.SpnegoTokenGenerator spengoGenerator -> spengoGenerator
    java.lang.String getSchemeName() -> getSchemeName
    org.apache.http.Header authenticate(org.apache.http.auth.Credentials,org.apache.http.HttpRequest) -> authenticate
    org.apache.http.Header authenticate(org.apache.http.auth.Credentials,org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext) -> authenticate
    byte[] generateToken(byte[],java.lang.String) -> generateToken
    java.lang.String getParameter(java.lang.String) -> getParameter
    java.lang.String getRealm() -> getRealm
    boolean isConnectionBased() -> isConnectionBased
org.apache.http.impl.auth.NegotiateSchemeFactory -> org.apache.http.impl.auth.NegotiateSchemeFactory:
    org.apache.http.impl.auth.SpnegoTokenGenerator spengoGenerator -> spengoGenerator
    boolean stripPort -> stripPort
    org.apache.http.auth.AuthScheme newInstance(org.apache.http.params.HttpParams) -> newInstance
    boolean isStripPort() -> isStripPort
    org.apache.http.impl.auth.SpnegoTokenGenerator getSpengoGenerator() -> getSpengoGenerator
org.apache.http.impl.auth.RFC2617Scheme -> org.apache.http.impl.auth.RFC2617Scheme:
    java.util.Map params -> params
    java.nio.charset.Charset credentialsCharset -> credentialsCharset
    java.nio.charset.Charset getCredentialsCharset() -> getCredentialsCharset
    java.lang.String getCredentialsCharset(org.apache.http.HttpRequest) -> getCredentialsCharset
    void parseChallenge(org.apache.http.util.CharArrayBuffer,int,int) -> parseChallenge
    java.util.Map getParameters() -> getParameters
    java.lang.String getParameter(java.lang.String) -> getParameter
    java.lang.String getRealm() -> getRealm
org.apache.http.impl.auth.SPNegoScheme -> org.apache.http.impl.auth.SPNegoScheme:
    java.lang.String SPNEGO_OID -> SPNEGO_OID
    java.lang.String getSchemeName() -> getSchemeName
    org.apache.http.Header authenticate(org.apache.http.auth.Credentials,org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext) -> authenticate
    byte[] generateToken(byte[],java.lang.String) -> generateToken
    java.lang.String getParameter(java.lang.String) -> getParameter
    java.lang.String getRealm() -> getRealm
    boolean isConnectionBased() -> isConnectionBased
org.apache.http.impl.auth.SPNegoSchemeFactory -> org.apache.http.impl.auth.SPNegoSchemeFactory:
    boolean stripPort -> stripPort
    boolean isStripPort() -> isStripPort
    org.apache.http.auth.AuthScheme newInstance(org.apache.http.params.HttpParams) -> newInstance
    org.apache.http.auth.AuthScheme create(org.apache.http.protocol.HttpContext) -> create
org.apache.http.impl.auth.SpnegoTokenGenerator -> org.apache.http.impl.auth.SpnegoTokenGenerator:
    byte[] generateSpnegoDERObject(byte[]) -> generateSpnegoDERObject
org.apache.http.impl.auth.UnsupportedDigestAlgorithmException -> org.apache.http.impl.auth.UnsupportedDigestAlgorithmException:
    long serialVersionUID -> serialVersionUID
org.apache.http.impl.client.AIMDBackoffManager -> org.apache.http.impl.client.AIMDBackoffManager:
    org.apache.http.pool.ConnPoolControl connPerRoute -> connPerRoute
    org.apache.http.impl.client.Clock clock -> clock
    java.util.Map lastRouteProbes -> lastRouteProbes
    java.util.Map lastRouteBackoffs -> lastRouteBackoffs
    long coolDown -> coolDown
    double backoffFactor -> backoffFactor
    int cap -> cap
    void backOff(org.apache.http.conn.routing.HttpRoute) -> backOff
    int getBackedOffPoolSize(int) -> getBackedOffPoolSize
    void probe(org.apache.http.conn.routing.HttpRoute) -> probe
    java.lang.Long getLastUpdate(java.util.Map,org.apache.http.conn.routing.HttpRoute) -> getLastUpdate
    void setBackoffFactor(double) -> setBackoffFactor
    void setCooldownMillis(long) -> setCooldownMillis
    void setPerHostConnectionCap(int) -> setPerHostConnectionCap
org.apache.http.impl.client.AbstractAuthenticationHandler -> org.apache.http.impl.client.AbstractAuthenticationHandler:
    org.apache.commons.logging.Log log -> log
    java.util.List DEFAULT_SCHEME_PRIORITY -> DEFAULT_SCHEME_PRIORITY
    java.util.Map parseChallenges(org.apache.http.Header[]) -> parseChallenges
    java.util.List getAuthPreferences() -> getAuthPreferences
    java.util.List getAuthPreferences(org.apache.http.HttpResponse,org.apache.http.protocol.HttpContext) -> getAuthPreferences
    org.apache.http.auth.AuthScheme selectScheme(java.util.Map,org.apache.http.HttpResponse,org.apache.http.protocol.HttpContext) -> selectScheme
org.apache.http.impl.client.AbstractHttpClient -> org.apache.http.impl.client.AbstractHttpClient:
    org.apache.commons.logging.Log log -> log
    org.apache.http.params.HttpParams defaultParams -> defaultParams
    org.apache.http.protocol.HttpRequestExecutor requestExec -> requestExec
    org.apache.http.conn.ClientConnectionManager connManager -> connManager
    org.apache.http.ConnectionReuseStrategy reuseStrategy -> reuseStrategy
    org.apache.http.conn.ConnectionKeepAliveStrategy keepAliveStrategy -> keepAliveStrategy
    org.apache.http.cookie.CookieSpecRegistry supportedCookieSpecs -> supportedCookieSpecs
    org.apache.http.auth.AuthSchemeRegistry supportedAuthSchemes -> supportedAuthSchemes
    org.apache.http.protocol.BasicHttpProcessor mutableProcessor -> mutableProcessor
    org.apache.http.protocol.ImmutableHttpProcessor protocolProcessor -> protocolProcessor
    org.apache.http.client.HttpRequestRetryHandler retryHandler -> retryHandler
    org.apache.http.client.RedirectStrategy redirectStrategy -> redirectStrategy
    org.apache.http.client.AuthenticationStrategy targetAuthStrategy -> targetAuthStrategy
    org.apache.http.client.AuthenticationStrategy proxyAuthStrategy -> proxyAuthStrategy
    org.apache.http.client.CookieStore cookieStore -> cookieStore
    org.apache.http.client.CredentialsProvider credsProvider -> credsProvider
    org.apache.http.conn.routing.HttpRoutePlanner routePlanner -> routePlanner
    org.apache.http.client.UserTokenHandler userTokenHandler -> userTokenHandler
    org.apache.http.client.ConnectionBackoffStrategy connectionBackoffStrategy -> connectionBackoffStrategy
    org.apache.http.client.BackoffManager backoffManager -> backoffManager
    org.apache.http.params.HttpParams createHttpParams() -> createHttpParams
    org.apache.http.protocol.BasicHttpProcessor createHttpProcessor() -> createHttpProcessor
    org.apache.http.protocol.HttpContext createHttpContext() -> createHttpContext
    org.apache.http.conn.ClientConnectionManager createClientConnectionManager() -> createClientConnectionManager
    org.apache.http.auth.AuthSchemeRegistry createAuthSchemeRegistry() -> createAuthSchemeRegistry
    org.apache.http.cookie.CookieSpecRegistry createCookieSpecRegistry() -> createCookieSpecRegistry
    org.apache.http.protocol.HttpRequestExecutor createRequestExecutor() -> createRequestExecutor
    org.apache.http.ConnectionReuseStrategy createConnectionReuseStrategy() -> createConnectionReuseStrategy
    org.apache.http.conn.ConnectionKeepAliveStrategy createConnectionKeepAliveStrategy() -> createConnectionKeepAliveStrategy
    org.apache.http.client.HttpRequestRetryHandler createHttpRequestRetryHandler() -> createHttpRequestRetryHandler
    org.apache.http.client.RedirectHandler createRedirectHandler() -> createRedirectHandler
    org.apache.http.client.AuthenticationStrategy createTargetAuthenticationStrategy() -> createTargetAuthenticationStrategy
    org.apache.http.client.AuthenticationHandler createTargetAuthenticationHandler() -> createTargetAuthenticationHandler
    org.apache.http.client.AuthenticationStrategy createProxyAuthenticationStrategy() -> createProxyAuthenticationStrategy
    org.apache.http.client.AuthenticationHandler createProxyAuthenticationHandler() -> createProxyAuthenticationHandler
    org.apache.http.client.CookieStore createCookieStore() -> createCookieStore
    org.apache.http.client.CredentialsProvider createCredentialsProvider() -> createCredentialsProvider
    org.apache.http.conn.routing.HttpRoutePlanner createHttpRoutePlanner() -> createHttpRoutePlanner
    org.apache.http.client.UserTokenHandler createUserTokenHandler() -> createUserTokenHandler
    org.apache.http.params.HttpParams getParams() -> getParams
    void setParams(org.apache.http.params.HttpParams) -> setParams
    org.apache.http.conn.ClientConnectionManager getConnectionManager() -> getConnectionManager
    org.apache.http.protocol.HttpRequestExecutor getRequestExecutor() -> getRequestExecutor
    org.apache.http.auth.AuthSchemeRegistry getAuthSchemes() -> getAuthSchemes
    void setAuthSchemes(org.apache.http.auth.AuthSchemeRegistry) -> setAuthSchemes
    org.apache.http.client.ConnectionBackoffStrategy getConnectionBackoffStrategy() -> getConnectionBackoffStrategy
    void setConnectionBackoffStrategy(org.apache.http.client.ConnectionBackoffStrategy) -> setConnectionBackoffStrategy
    org.apache.http.cookie.CookieSpecRegistry getCookieSpecs() -> getCookieSpecs
    org.apache.http.client.BackoffManager getBackoffManager() -> getBackoffManager
    void setBackoffManager(org.apache.http.client.BackoffManager) -> setBackoffManager
    void setCookieSpecs(org.apache.http.cookie.CookieSpecRegistry) -> setCookieSpecs
    org.apache.http.ConnectionReuseStrategy getConnectionReuseStrategy() -> getConnectionReuseStrategy
    void setReuseStrategy(org.apache.http.ConnectionReuseStrategy) -> setReuseStrategy
    org.apache.http.conn.ConnectionKeepAliveStrategy getConnectionKeepAliveStrategy() -> getConnectionKeepAliveStrategy
    void setKeepAliveStrategy(org.apache.http.conn.ConnectionKeepAliveStrategy) -> setKeepAliveStrategy
    org.apache.http.client.HttpRequestRetryHandler getHttpRequestRetryHandler() -> getHttpRequestRetryHandler
    void setHttpRequestRetryHandler(org.apache.http.client.HttpRequestRetryHandler) -> setHttpRequestRetryHandler
    org.apache.http.client.RedirectHandler getRedirectHandler() -> getRedirectHandler
    void setRedirectHandler(org.apache.http.client.RedirectHandler) -> setRedirectHandler
    org.apache.http.client.RedirectStrategy getRedirectStrategy() -> getRedirectStrategy
    void setRedirectStrategy(org.apache.http.client.RedirectStrategy) -> setRedirectStrategy
    org.apache.http.client.AuthenticationHandler getTargetAuthenticationHandler() -> getTargetAuthenticationHandler
    void setTargetAuthenticationHandler(org.apache.http.client.AuthenticationHandler) -> setTargetAuthenticationHandler
    org.apache.http.client.AuthenticationStrategy getTargetAuthenticationStrategy() -> getTargetAuthenticationStrategy
    void setTargetAuthenticationStrategy(org.apache.http.client.AuthenticationStrategy) -> setTargetAuthenticationStrategy
    org.apache.http.client.AuthenticationHandler getProxyAuthenticationHandler() -> getProxyAuthenticationHandler
    void setProxyAuthenticationHandler(org.apache.http.client.AuthenticationHandler) -> setProxyAuthenticationHandler
    org.apache.http.client.AuthenticationStrategy getProxyAuthenticationStrategy() -> getProxyAuthenticationStrategy
    void setProxyAuthenticationStrategy(org.apache.http.client.AuthenticationStrategy) -> setProxyAuthenticationStrategy
    org.apache.http.client.CookieStore getCookieStore() -> getCookieStore
    void setCookieStore(org.apache.http.client.CookieStore) -> setCookieStore
    org.apache.http.client.CredentialsProvider getCredentialsProvider() -> getCredentialsProvider
    void setCredentialsProvider(org.apache.http.client.CredentialsProvider) -> setCredentialsProvider
    org.apache.http.conn.routing.HttpRoutePlanner getRoutePlanner() -> getRoutePlanner
    void setRoutePlanner(org.apache.http.conn.routing.HttpRoutePlanner) -> setRoutePlanner
    org.apache.http.client.UserTokenHandler getUserTokenHandler() -> getUserTokenHandler
    void setUserTokenHandler(org.apache.http.client.UserTokenHandler) -> setUserTokenHandler
    org.apache.http.protocol.BasicHttpProcessor getHttpProcessor() -> getHttpProcessor
    org.apache.http.protocol.HttpProcessor getProtocolProcessor() -> getProtocolProcessor
    int getResponseInterceptorCount() -> getResponseInterceptorCount
    org.apache.http.HttpResponseInterceptor getResponseInterceptor(int) -> getResponseInterceptor
    org.apache.http.HttpRequestInterceptor getRequestInterceptor(int) -> getRequestInterceptor
    int getRequestInterceptorCount() -> getRequestInterceptorCount
    void addResponseInterceptor(org.apache.http.HttpResponseInterceptor) -> addResponseInterceptor
    void addResponseInterceptor(org.apache.http.HttpResponseInterceptor,int) -> addResponseInterceptor
    void clearResponseInterceptors() -> clearResponseInterceptors
    void removeResponseInterceptorByClass(java.lang.Class) -> removeResponseInterceptorByClass
    void addRequestInterceptor(org.apache.http.HttpRequestInterceptor) -> addRequestInterceptor
    void addRequestInterceptor(org.apache.http.HttpRequestInterceptor,int) -> addRequestInterceptor
    void clearRequestInterceptors() -> clearRequestInterceptors
    void removeRequestInterceptorByClass(java.lang.Class) -> removeRequestInterceptorByClass
    org.apache.http.client.methods.CloseableHttpResponse doExecute(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext) -> doExecute
    org.apache.http.client.RequestDirector createClientRequestDirector(org.apache.http.protocol.HttpRequestExecutor,org.apache.http.conn.ClientConnectionManager,org.apache.http.ConnectionReuseStrategy,org.apache.http.conn.ConnectionKeepAliveStrategy,org.apache.http.conn.routing.HttpRoutePlanner,org.apache.http.protocol.HttpProcessor,org.apache.http.client.HttpRequestRetryHandler,org.apache.http.client.RedirectHandler,org.apache.http.client.AuthenticationHandler,org.apache.http.client.AuthenticationHandler,org.apache.http.client.UserTokenHandler,org.apache.http.params.HttpParams) -> createClientRequestDirector
    org.apache.http.client.RequestDirector createClientRequestDirector(org.apache.http.protocol.HttpRequestExecutor,org.apache.http.conn.ClientConnectionManager,org.apache.http.ConnectionReuseStrategy,org.apache.http.conn.ConnectionKeepAliveStrategy,org.apache.http.conn.routing.HttpRoutePlanner,org.apache.http.protocol.HttpProcessor,org.apache.http.client.HttpRequestRetryHandler,org.apache.http.client.RedirectStrategy,org.apache.http.client.AuthenticationHandler,org.apache.http.client.AuthenticationHandler,org.apache.http.client.UserTokenHandler,org.apache.http.params.HttpParams) -> createClientRequestDirector
    org.apache.http.client.RequestDirector createClientRequestDirector(org.apache.http.protocol.HttpRequestExecutor,org.apache.http.conn.ClientConnectionManager,org.apache.http.ConnectionReuseStrategy,org.apache.http.conn.ConnectionKeepAliveStrategy,org.apache.http.conn.routing.HttpRoutePlanner,org.apache.http.protocol.HttpProcessor,org.apache.http.client.HttpRequestRetryHandler,org.apache.http.client.RedirectStrategy,org.apache.http.client.AuthenticationStrategy,org.apache.http.client.AuthenticationStrategy,org.apache.http.client.UserTokenHandler,org.apache.http.params.HttpParams) -> createClientRequestDirector
    org.apache.http.params.HttpParams determineParams(org.apache.http.HttpRequest) -> determineParams
    void close() -> close
org.apache.http.impl.client.AuthenticationStrategyAdaptor -> org.apache.http.impl.client.AuthenticationStrategyAdaptor:
    org.apache.commons.logging.Log log -> log
    org.apache.http.client.AuthenticationHandler handler -> handler
    boolean isAuthenticationRequested(org.apache.http.HttpHost,org.apache.http.HttpResponse,org.apache.http.protocol.HttpContext) -> isAuthenticationRequested
    java.util.Map getChallenges(org.apache.http.HttpHost,org.apache.http.HttpResponse,org.apache.http.protocol.HttpContext) -> getChallenges
    java.util.Queue select(java.util.Map,org.apache.http.HttpHost,org.apache.http.HttpResponse,org.apache.http.protocol.HttpContext) -> select
    void authSucceeded(org.apache.http.HttpHost,org.apache.http.auth.AuthScheme,org.apache.http.protocol.HttpContext) -> authSucceeded
    void authFailed(org.apache.http.HttpHost,org.apache.http.auth.AuthScheme,org.apache.http.protocol.HttpContext) -> authFailed
    boolean isCachable(org.apache.http.auth.AuthScheme) -> isCachable
    org.apache.http.client.AuthenticationHandler getHandler() -> getHandler
org.apache.http.impl.client.AuthenticationStrategyImpl -> org.apache.http.impl.client.AuthenticationStrategyImpl:
    org.apache.commons.logging.Log log -> log
    java.util.List DEFAULT_SCHEME_PRIORITY -> DEFAULT_SCHEME_PRIORITY
    int challengeCode -> challengeCode
    java.lang.String headerName -> headerName
    boolean isAuthenticationRequested(org.apache.http.HttpHost,org.apache.http.HttpResponse,org.apache.http.protocol.HttpContext) -> isAuthenticationRequested
    java.util.Map getChallenges(org.apache.http.HttpHost,org.apache.http.HttpResponse,org.apache.http.protocol.HttpContext) -> getChallenges
    java.util.Collection getPreferredAuthSchemes(org.apache.http.client.config.RequestConfig) -> getPreferredAuthSchemes
    java.util.Queue select(java.util.Map,org.apache.http.HttpHost,org.apache.http.HttpResponse,org.apache.http.protocol.HttpContext) -> select
    void authSucceeded(org.apache.http.HttpHost,org.apache.http.auth.AuthScheme,org.apache.http.protocol.HttpContext) -> authSucceeded
    boolean isCachable(org.apache.http.auth.AuthScheme) -> isCachable
    void authFailed(org.apache.http.HttpHost,org.apache.http.auth.AuthScheme,org.apache.http.protocol.HttpContext) -> authFailed
org.apache.http.impl.client.AutoRetryHttpClient -> org.apache.http.impl.client.AutoRetryHttpClient:
    org.apache.http.client.HttpClient backend -> backend
    org.apache.http.client.ServiceUnavailableRetryStrategy retryStrategy -> retryStrategy
    org.apache.commons.logging.Log log -> log
    org.apache.http.HttpResponse execute(org.apache.http.HttpHost,org.apache.http.HttpRequest) -> execute
    java.lang.Object execute(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.client.ResponseHandler) -> execute
    java.lang.Object execute(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.client.ResponseHandler,org.apache.http.protocol.HttpContext) -> execute
    org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest) -> execute
    org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest,org.apache.http.protocol.HttpContext) -> execute
    java.lang.Object execute(org.apache.http.client.methods.HttpUriRequest,org.apache.http.client.ResponseHandler) -> execute
    java.lang.Object execute(org.apache.http.client.methods.HttpUriRequest,org.apache.http.client.ResponseHandler,org.apache.http.protocol.HttpContext) -> execute
    org.apache.http.HttpResponse execute(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext) -> execute
    org.apache.http.conn.ClientConnectionManager getConnectionManager() -> getConnectionManager
    org.apache.http.params.HttpParams getParams() -> getParams
org.apache.http.impl.client.BasicAuthCache -> org.apache.http.impl.client.BasicAuthCache:
    java.util.HashMap map -> map
    org.apache.http.conn.SchemePortResolver schemePortResolver -> schemePortResolver
    org.apache.http.HttpHost getKey(org.apache.http.HttpHost) -> getKey
    void put(org.apache.http.HttpHost,org.apache.http.auth.AuthScheme) -> put
    org.apache.http.auth.AuthScheme get(org.apache.http.HttpHost) -> get
    void remove(org.apache.http.HttpHost) -> remove
    void clear() -> clear
    java.lang.String toString() -> toString
org.apache.http.impl.client.BasicCookieStore -> org.apache.http.impl.client.BasicCookieStore:
    long serialVersionUID -> serialVersionUID
    java.util.TreeSet cookies -> cookies
    void addCookie(org.apache.http.cookie.Cookie) -> addCookie
    void addCookies(org.apache.http.cookie.Cookie[]) -> addCookies
    java.util.List getCookies() -> getCookies
    boolean clearExpired(java.util.Date) -> clearExpired
    void clear() -> clear
    java.lang.String toString() -> toString
org.apache.http.impl.client.BasicCredentialsProvider -> org.apache.http.impl.client.BasicCredentialsProvider:
    java.util.concurrent.ConcurrentHashMap credMap -> credMap
    void setCredentials(org.apache.http.auth.AuthScope,org.apache.http.auth.Credentials) -> setCredentials
    org.apache.http.auth.Credentials matchCredentials(java.util.Map,org.apache.http.auth.AuthScope) -> matchCredentials
    org.apache.http.auth.Credentials getCredentials(org.apache.http.auth.AuthScope) -> getCredentials
    void clear() -> clear
    java.lang.String toString() -> toString
org.apache.http.impl.client.BasicResponseHandler -> org.apache.http.impl.client.BasicResponseHandler:
    java.lang.String handleResponse(org.apache.http.HttpResponse) -> handleResponse
    java.lang.Object handleResponse(org.apache.http.HttpResponse) -> handleResponse
org.apache.http.impl.client.ClientParamsStack -> org.apache.http.impl.client.ClientParamsStack:
    org.apache.http.params.HttpParams applicationParams -> applicationParams
    org.apache.http.params.HttpParams clientParams -> clientParams
    org.apache.http.params.HttpParams requestParams -> requestParams
    org.apache.http.params.HttpParams overrideParams -> overrideParams
    org.apache.http.params.HttpParams getApplicationParams() -> getApplicationParams
    org.apache.http.params.HttpParams getClientParams() -> getClientParams
    org.apache.http.params.HttpParams getRequestParams() -> getRequestParams
    org.apache.http.params.HttpParams getOverrideParams() -> getOverrideParams
    java.lang.Object getParameter(java.lang.String) -> getParameter
    org.apache.http.params.HttpParams setParameter(java.lang.String,java.lang.Object) -> setParameter
    boolean removeParameter(java.lang.String) -> removeParameter
    org.apache.http.params.HttpParams copy() -> copy
org.apache.http.impl.client.Clock -> org.apache.http.impl.client.Clock:
    long getCurrentTime() -> getCurrentTime
org.apache.http.impl.client.CloseableHttpClient -> org.apache.http.impl.client.CloseableHttpClient:
    org.apache.commons.logging.Log log -> log
    org.apache.http.client.methods.CloseableHttpResponse doExecute(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext) -> doExecute
    org.apache.http.client.methods.CloseableHttpResponse execute(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext) -> execute
    org.apache.http.client.methods.CloseableHttpResponse execute(org.apache.http.client.methods.HttpUriRequest,org.apache.http.protocol.HttpContext) -> execute
    org.apache.http.HttpHost determineTarget(org.apache.http.client.methods.HttpUriRequest) -> determineTarget
    org.apache.http.client.methods.CloseableHttpResponse execute(org.apache.http.client.methods.HttpUriRequest) -> execute
    org.apache.http.client.methods.CloseableHttpResponse execute(org.apache.http.HttpHost,org.apache.http.HttpRequest) -> execute
    java.lang.Object execute(org.apache.http.client.methods.HttpUriRequest,org.apache.http.client.ResponseHandler) -> execute
    java.lang.Object execute(org.apache.http.client.methods.HttpUriRequest,org.apache.http.client.ResponseHandler,org.apache.http.protocol.HttpContext) -> execute
    java.lang.Object execute(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.client.ResponseHandler) -> execute
    java.lang.Object execute(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.client.ResponseHandler,org.apache.http.protocol.HttpContext) -> execute
    org.apache.http.HttpResponse execute(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext) -> execute
    org.apache.http.HttpResponse execute(org.apache.http.HttpHost,org.apache.http.HttpRequest) -> execute
    org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest,org.apache.http.protocol.HttpContext) -> execute
    org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest) -> execute
org.apache.http.impl.client.CloseableHttpResponseProxy -> org.apache.http.impl.client.CloseableHttpResponseProxy:
    java.lang.reflect.Constructor CONSTRUCTOR -> CONSTRUCTOR
    org.apache.http.HttpResponse original -> original
    void close() -> close
    java.lang.Object invoke(java.lang.Object,java.lang.reflect.Method,java.lang.Object[]) -> invoke
    org.apache.http.client.methods.CloseableHttpResponse newProxy(org.apache.http.HttpResponse) -> newProxy
org.apache.http.impl.client.ContentEncodingHttpClient -> org.apache.http.impl.client.ContentEncodingHttpClient:
    org.apache.http.protocol.BasicHttpProcessor createHttpProcessor() -> createHttpProcessor
org.apache.http.impl.client.DecompressingHttpClient -> org.apache.http.impl.client.DecompressingHttpClient:
    org.apache.http.client.HttpClient backend -> backend
    org.apache.http.HttpRequestInterceptor acceptEncodingInterceptor -> acceptEncodingInterceptor
    org.apache.http.HttpResponseInterceptor contentEncodingInterceptor -> contentEncodingInterceptor
    org.apache.http.params.HttpParams getParams() -> getParams
    org.apache.http.conn.ClientConnectionManager getConnectionManager() -> getConnectionManager
    org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest) -> execute
    org.apache.http.client.HttpClient getHttpClient() -> getHttpClient
    org.apache.http.HttpHost getHttpHost(org.apache.http.client.methods.HttpUriRequest) -> getHttpHost
    org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest,org.apache.http.protocol.HttpContext) -> execute
    org.apache.http.HttpResponse execute(org.apache.http.HttpHost,org.apache.http.HttpRequest) -> execute
    org.apache.http.HttpResponse execute(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext) -> execute
    java.lang.Object execute(org.apache.http.client.methods.HttpUriRequest,org.apache.http.client.ResponseHandler) -> execute
    java.lang.Object execute(org.apache.http.client.methods.HttpUriRequest,org.apache.http.client.ResponseHandler,org.apache.http.protocol.HttpContext) -> execute
    java.lang.Object execute(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.client.ResponseHandler) -> execute
    java.lang.Object execute(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.client.ResponseHandler,org.apache.http.protocol.HttpContext) -> execute
org.apache.http.impl.client.DefaultBackoffStrategy -> org.apache.http.impl.client.DefaultBackoffStrategy:
    boolean shouldBackoff(java.lang.Throwable) -> shouldBackoff
    boolean shouldBackoff(org.apache.http.HttpResponse) -> shouldBackoff
org.apache.http.impl.client.DefaultConnectionKeepAliveStrategy -> org.apache.http.impl.client.DefaultConnectionKeepAliveStrategy:
    org.apache.http.impl.client.DefaultConnectionKeepAliveStrategy INSTANCE -> INSTANCE
    long getKeepAliveDuration(org.apache.http.HttpResponse,org.apache.http.protocol.HttpContext) -> getKeepAliveDuration
org.apache.http.impl.client.DefaultHttpClient -> org.apache.http.impl.client.DefaultHttpClient:
    org.apache.http.params.HttpParams createHttpParams() -> createHttpParams
    void setDefaultHttpParams(org.apache.http.params.HttpParams) -> setDefaultHttpParams
    org.apache.http.protocol.BasicHttpProcessor createHttpProcessor() -> createHttpProcessor
org.apache.http.impl.client.DefaultHttpRequestRetryHandler -> org.apache.http.impl.client.DefaultHttpRequestRetryHandler:
    org.apache.http.impl.client.DefaultHttpRequestRetryHandler INSTANCE -> INSTANCE
    int retryCount -> retryCount
    boolean requestSentRetryEnabled -> requestSentRetryEnabled
    java.util.Set nonRetriableClasses -> nonRetriableClasses
    boolean retryRequest(java.io.IOException,int,org.apache.http.protocol.HttpContext) -> retryRequest
    boolean isRequestSentRetryEnabled() -> isRequestSentRetryEnabled
    int getRetryCount() -> getRetryCount
    boolean handleAsIdempotent(org.apache.http.HttpRequest) -> handleAsIdempotent
    boolean requestIsAborted(org.apache.http.HttpRequest) -> requestIsAborted
org.apache.http.impl.client.DefaultProxyAuthenticationHandler -> org.apache.http.impl.client.DefaultProxyAuthenticationHandler:
    boolean isAuthenticationRequested(org.apache.http.HttpResponse,org.apache.http.protocol.HttpContext) -> isAuthenticationRequested
    java.util.Map getChallenges(org.apache.http.HttpResponse,org.apache.http.protocol.HttpContext) -> getChallenges
    java.util.List getAuthPreferences(org.apache.http.HttpResponse,org.apache.http.protocol.HttpContext) -> getAuthPreferences
org.apache.http.impl.client.DefaultRedirectHandler -> org.apache.http.impl.client.DefaultRedirectHandler:
    org.apache.commons.logging.Log log -> log
    java.lang.String REDIRECT_LOCATIONS -> REDIRECT_LOCATIONS
    boolean isRedirectRequested(org.apache.http.HttpResponse,org.apache.http.protocol.HttpContext) -> isRedirectRequested
    java.net.URI getLocationURI(org.apache.http.HttpResponse,org.apache.http.protocol.HttpContext) -> getLocationURI
org.apache.http.impl.client.DefaultRedirectStrategy -> org.apache.http.impl.client.DefaultRedirectStrategy:
    org.apache.commons.logging.Log log -> log
    java.lang.String REDIRECT_LOCATIONS -> REDIRECT_LOCATIONS
    org.apache.http.impl.client.DefaultRedirectStrategy INSTANCE -> INSTANCE
    java.lang.String[] REDIRECT_METHODS -> REDIRECT_METHODS
    boolean isRedirected(org.apache.http.HttpRequest,org.apache.http.HttpResponse,org.apache.http.protocol.HttpContext) -> isRedirected
    java.net.URI getLocationURI(org.apache.http.HttpRequest,org.apache.http.HttpResponse,org.apache.http.protocol.HttpContext) -> getLocationURI
    java.net.URI createLocationURI(java.lang.String) -> createLocationURI
    boolean isRedirectable(java.lang.String) -> isRedirectable
    org.apache.http.client.methods.HttpUriRequest getRedirect(org.apache.http.HttpRequest,org.apache.http.HttpResponse,org.apache.http.protocol.HttpContext) -> getRedirect
org.apache.http.impl.client.DefaultRedirectStrategyAdaptor -> org.apache.http.impl.client.DefaultRedirectStrategyAdaptor:
    org.apache.http.client.RedirectHandler handler -> handler
    boolean isRedirected(org.apache.http.HttpRequest,org.apache.http.HttpResponse,org.apache.http.protocol.HttpContext) -> isRedirected
    org.apache.http.client.methods.HttpUriRequest getRedirect(org.apache.http.HttpRequest,org.apache.http.HttpResponse,org.apache.http.protocol.HttpContext) -> getRedirect
    org.apache.http.client.RedirectHandler getHandler() -> getHandler
org.apache.http.impl.client.DefaultRequestDirector -> org.apache.http.impl.client.DefaultRequestDirector:
    org.apache.commons.logging.Log log -> log
    org.apache.http.conn.ClientConnectionManager connManager -> connManager
    org.apache.http.conn.routing.HttpRoutePlanner routePlanner -> routePlanner
    org.apache.http.ConnectionReuseStrategy reuseStrategy -> reuseStrategy
    org.apache.http.conn.ConnectionKeepAliveStrategy keepAliveStrategy -> keepAliveStrategy
    org.apache.http.protocol.HttpRequestExecutor requestExec -> requestExec
    org.apache.http.protocol.HttpProcessor httpProcessor -> httpProcessor
    org.apache.http.client.HttpRequestRetryHandler retryHandler -> retryHandler
    org.apache.http.client.RedirectHandler redirectHandler -> redirectHandler
    org.apache.http.client.RedirectStrategy redirectStrategy -> redirectStrategy
    org.apache.http.client.AuthenticationHandler targetAuthHandler -> targetAuthHandler
    org.apache.http.client.AuthenticationStrategy targetAuthStrategy -> targetAuthStrategy
    org.apache.http.client.AuthenticationHandler proxyAuthHandler -> proxyAuthHandler
    org.apache.http.client.AuthenticationStrategy proxyAuthStrategy -> proxyAuthStrategy
    org.apache.http.client.UserTokenHandler userTokenHandler -> userTokenHandler
    org.apache.http.params.HttpParams params -> params
    org.apache.http.conn.ManagedClientConnection managedConn -> managedConn
    org.apache.http.auth.AuthState targetAuthState -> targetAuthState
    org.apache.http.auth.AuthState proxyAuthState -> proxyAuthState
    org.apache.http.impl.client.HttpAuthenticator authenticator -> authenticator
    int execCount -> execCount
    int redirectCount -> redirectCount
    int maxRedirects -> maxRedirects
    org.apache.http.HttpHost virtualHost -> virtualHost
    org.apache.http.impl.client.RequestWrapper wrapRequest(org.apache.http.HttpRequest) -> wrapRequest
    void rewriteRequestURI(org.apache.http.impl.client.RequestWrapper,org.apache.http.conn.routing.HttpRoute) -> rewriteRequestURI
    org.apache.http.HttpResponse execute(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext) -> execute
    void tryConnect(org.apache.http.impl.client.RoutedRequest,org.apache.http.protocol.HttpContext) -> tryConnect
    org.apache.http.HttpResponse tryExecute(org.apache.http.impl.client.RoutedRequest,org.apache.http.protocol.HttpContext) -> tryExecute
    void releaseConnection() -> releaseConnection
    org.apache.http.conn.routing.HttpRoute determineRoute(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext) -> determineRoute
    void establishRoute(org.apache.http.conn.routing.HttpRoute,org.apache.http.protocol.HttpContext) -> establishRoute
    boolean createTunnelToTarget(org.apache.http.conn.routing.HttpRoute,org.apache.http.protocol.HttpContext) -> createTunnelToTarget
    boolean createTunnelToProxy(org.apache.http.conn.routing.HttpRoute,int,org.apache.http.protocol.HttpContext) -> createTunnelToProxy
    org.apache.http.HttpRequest createConnectRequest(org.apache.http.conn.routing.HttpRoute,org.apache.http.protocol.HttpContext) -> createConnectRequest
    org.apache.http.impl.client.RoutedRequest handleResponse(org.apache.http.impl.client.RoutedRequest,org.apache.http.HttpResponse,org.apache.http.protocol.HttpContext) -> handleResponse
    void abortConnection() -> abortConnection
org.apache.http.impl.client.DefaultServiceUnavailableRetryStrategy -> org.apache.http.impl.client.DefaultServiceUnavailableRetryStrategy:
    int maxRetries -> maxRetries
    long retryInterval -> retryInterval
    boolean retryRequest(org.apache.http.HttpResponse,int,org.apache.http.protocol.HttpContext) -> retryRequest
    long getRetryInterval() -> getRetryInterval
org.apache.http.impl.client.DefaultTargetAuthenticationHandler -> org.apache.http.impl.client.DefaultTargetAuthenticationHandler:
    boolean isAuthenticationRequested(org.apache.http.HttpResponse,org.apache.http.protocol.HttpContext) -> isAuthenticationRequested
    java.util.Map getChallenges(org.apache.http.HttpResponse,org.apache.http.protocol.HttpContext) -> getChallenges
    java.util.List getAuthPreferences(org.apache.http.HttpResponse,org.apache.http.protocol.HttpContext) -> getAuthPreferences
org.apache.http.impl.client.DefaultUserTokenHandler -> org.apache.http.impl.client.DefaultUserTokenHandler:
    org.apache.http.impl.client.DefaultUserTokenHandler INSTANCE -> INSTANCE
    java.lang.Object getUserToken(org.apache.http.protocol.HttpContext) -> getUserToken
    java.security.Principal getAuthPrincipal(org.apache.http.auth.AuthState) -> getAuthPrincipal
org.apache.http.impl.client.EntityEnclosingRequestWrapper -> org.apache.http.impl.client.EntityEnclosingRequestWrapper:
    org.apache.http.HttpEntity entity -> entity
    boolean consumed -> consumed
    org.apache.http.HttpEntity getEntity() -> getEntity
    void setEntity(org.apache.http.HttpEntity) -> setEntity
    boolean expectContinue() -> expectContinue
    boolean isRepeatable() -> isRepeatable
    boolean access$002(org.apache.http.impl.client.EntityEnclosingRequestWrapper,boolean) -> access$002
org.apache.http.impl.client.EntityEnclosingRequestWrapper$EntityWrapper -> org.apache.http.impl.client.EntityEnclosingRequestWrapper$EntityWrapper:
    org.apache.http.impl.client.EntityEnclosingRequestWrapper this$0 -> this$0
    void consumeContent() -> consumeContent
    java.io.InputStream getContent() -> getContent
    void writeTo(java.io.OutputStream) -> writeTo
org.apache.http.impl.client.FutureRequestExecutionMetrics -> org.apache.http.impl.client.FutureRequestExecutionMetrics:
    java.util.concurrent.atomic.AtomicLong activeConnections -> activeConnections
    java.util.concurrent.atomic.AtomicLong scheduledConnections -> scheduledConnections
    org.apache.http.impl.client.FutureRequestExecutionMetrics$DurationCounter successfulConnections -> successfulConnections
    org.apache.http.impl.client.FutureRequestExecutionMetrics$DurationCounter failedConnections -> failedConnections
    org.apache.http.impl.client.FutureRequestExecutionMetrics$DurationCounter requests -> requests
    org.apache.http.impl.client.FutureRequestExecutionMetrics$DurationCounter tasks -> tasks
    java.util.concurrent.atomic.AtomicLong getActiveConnections() -> getActiveConnections
    java.util.concurrent.atomic.AtomicLong getScheduledConnections() -> getScheduledConnections
    org.apache.http.impl.client.FutureRequestExecutionMetrics$DurationCounter getSuccessfulConnections() -> getSuccessfulConnections
    org.apache.http.impl.client.FutureRequestExecutionMetrics$DurationCounter getFailedConnections() -> getFailedConnections
    org.apache.http.impl.client.FutureRequestExecutionMetrics$DurationCounter getRequests() -> getRequests
    org.apache.http.impl.client.FutureRequestExecutionMetrics$DurationCounter getTasks() -> getTasks
    long getActiveConnectionCount() -> getActiveConnectionCount
    long getScheduledConnectionCount() -> getScheduledConnectionCount
    long getSuccessfulConnectionCount() -> getSuccessfulConnectionCount
    long getSuccessfulConnectionAverageDuration() -> getSuccessfulConnectionAverageDuration
    long getFailedConnectionCount() -> getFailedConnectionCount
    long getFailedConnectionAverageDuration() -> getFailedConnectionAverageDuration
    long getRequestCount() -> getRequestCount
    long getRequestAverageDuration() -> getRequestAverageDuration
    long getTaskCount() -> getTaskCount
    long getTaskAverageDuration() -> getTaskAverageDuration
    java.lang.String toString() -> toString
org.apache.http.impl.client.FutureRequestExecutionMetrics$DurationCounter -> org.apache.http.impl.client.FutureRequestExecutionMetrics$DurationCounter:
    java.util.concurrent.atomic.AtomicLong count -> count
    java.util.concurrent.atomic.AtomicLong cumulativeDuration -> cumulativeDuration
    void increment(long) -> increment
    long count() -> count
    long averageDuration() -> averageDuration
    java.lang.String toString() -> toString
org.apache.http.impl.client.FutureRequestExecutionService -> org.apache.http.impl.client.FutureRequestExecutionService:
    org.apache.http.client.HttpClient httpclient -> httpclient
    java.util.concurrent.ExecutorService executorService -> executorService
    org.apache.http.impl.client.FutureRequestExecutionMetrics metrics -> metrics
    java.util.concurrent.atomic.AtomicBoolean closed -> closed
    org.apache.http.impl.client.HttpRequestFutureTask execute(org.apache.http.client.methods.HttpUriRequest,org.apache.http.protocol.HttpContext,org.apache.http.client.ResponseHandler) -> execute
    org.apache.http.impl.client.HttpRequestFutureTask execute(org.apache.http.client.methods.HttpUriRequest,org.apache.http.protocol.HttpContext,org.apache.http.client.ResponseHandler,org.apache.http.concurrent.FutureCallback) -> execute
    org.apache.http.impl.client.FutureRequestExecutionMetrics metrics() -> metrics
    void close() -> close
org.apache.http.impl.client.HttpAuthenticator -> org.apache.http.impl.client.HttpAuthenticator:
    boolean authenticate(org.apache.http.HttpHost,org.apache.http.HttpResponse,org.apache.http.client.AuthenticationStrategy,org.apache.http.auth.AuthState,org.apache.http.protocol.HttpContext) -> authenticate
org.apache.http.impl.client.HttpClientBuilder -> org.apache.http.impl.client.HttpClientBuilder:
    org.apache.http.protocol.HttpRequestExecutor requestExec -> requestExec
    org.apache.http.conn.ssl.X509HostnameVerifier hostnameVerifier -> hostnameVerifier
    org.apache.http.conn.socket.LayeredConnectionSocketFactory sslSocketFactory -> sslSocketFactory
    javax.net.ssl.SSLContext sslcontext -> sslcontext
    org.apache.http.conn.HttpClientConnectionManager connManager -> connManager
    org.apache.http.conn.SchemePortResolver schemePortResolver -> schemePortResolver
    org.apache.http.ConnectionReuseStrategy reuseStrategy -> reuseStrategy
    org.apache.http.conn.ConnectionKeepAliveStrategy keepAliveStrategy -> keepAliveStrategy
    org.apache.http.client.AuthenticationStrategy targetAuthStrategy -> targetAuthStrategy
    org.apache.http.client.AuthenticationStrategy proxyAuthStrategy -> proxyAuthStrategy
    org.apache.http.client.UserTokenHandler userTokenHandler -> userTokenHandler
    org.apache.http.protocol.HttpProcessor httpprocessor -> httpprocessor
    java.util.LinkedList requestFirst -> requestFirst
    java.util.LinkedList requestLast -> requestLast
    java.util.LinkedList responseFirst -> responseFirst
    java.util.LinkedList responseLast -> responseLast
    org.apache.http.client.HttpRequestRetryHandler retryHandler -> retryHandler
    org.apache.http.conn.routing.HttpRoutePlanner routePlanner -> routePlanner
    org.apache.http.client.RedirectStrategy redirectStrategy -> redirectStrategy
    org.apache.http.client.ConnectionBackoffStrategy connectionBackoffStrategy -> connectionBackoffStrategy
    org.apache.http.client.BackoffManager backoffManager -> backoffManager
    org.apache.http.client.ServiceUnavailableRetryStrategy serviceUnavailStrategy -> serviceUnavailStrategy
    org.apache.http.config.Lookup authSchemeRegistry -> authSchemeRegistry
    org.apache.http.config.Lookup cookieSpecRegistry -> cookieSpecRegistry
    org.apache.http.client.CookieStore cookieStore -> cookieStore
    org.apache.http.client.CredentialsProvider credentialsProvider -> credentialsProvider
    java.lang.String userAgent -> userAgent
    org.apache.http.HttpHost proxy -> proxy
    java.util.Collection defaultHeaders -> defaultHeaders
    org.apache.http.config.SocketConfig defaultSocketConfig -> defaultSocketConfig
    org.apache.http.config.ConnectionConfig defaultConnectionConfig -> defaultConnectionConfig
    org.apache.http.client.config.RequestConfig defaultRequestConfig -> defaultRequestConfig
    boolean systemProperties -> systemProperties
    boolean redirectHandlingDisabled -> redirectHandlingDisabled
    boolean automaticRetriesDisabled -> automaticRetriesDisabled
    boolean contentCompressionDisabled -> contentCompressionDisabled
    boolean cookieManagementDisabled -> cookieManagementDisabled
    boolean authCachingDisabled -> authCachingDisabled
    boolean connectionStateDisabled -> connectionStateDisabled
    int maxConnTotal -> maxConnTotal
    int maxConnPerRoute -> maxConnPerRoute
    java.util.List closeables -> closeables
    java.lang.String DEFAULT_USER_AGENT -> DEFAULT_USER_AGENT
    org.apache.http.impl.client.HttpClientBuilder create() -> create
    org.apache.http.impl.client.HttpClientBuilder setRequestExecutor(org.apache.http.protocol.HttpRequestExecutor) -> setRequestExecutor
    org.apache.http.impl.client.HttpClientBuilder setHostnameVerifier(org.apache.http.conn.ssl.X509HostnameVerifier) -> setHostnameVerifier
    org.apache.http.impl.client.HttpClientBuilder setSslcontext(javax.net.ssl.SSLContext) -> setSslcontext
    org.apache.http.impl.client.HttpClientBuilder setSSLSocketFactory(org.apache.http.conn.socket.LayeredConnectionSocketFactory) -> setSSLSocketFactory
    org.apache.http.impl.client.HttpClientBuilder setMaxConnTotal(int) -> setMaxConnTotal
    org.apache.http.impl.client.HttpClientBuilder setMaxConnPerRoute(int) -> setMaxConnPerRoute
    org.apache.http.impl.client.HttpClientBuilder setDefaultSocketConfig(org.apache.http.config.SocketConfig) -> setDefaultSocketConfig
    org.apache.http.impl.client.HttpClientBuilder setDefaultConnectionConfig(org.apache.http.config.ConnectionConfig) -> setDefaultConnectionConfig
    org.apache.http.impl.client.HttpClientBuilder setConnectionManager(org.apache.http.conn.HttpClientConnectionManager) -> setConnectionManager
    org.apache.http.impl.client.HttpClientBuilder setConnectionReuseStrategy(org.apache.http.ConnectionReuseStrategy) -> setConnectionReuseStrategy
    org.apache.http.impl.client.HttpClientBuilder setKeepAliveStrategy(org.apache.http.conn.ConnectionKeepAliveStrategy) -> setKeepAliveStrategy
    org.apache.http.impl.client.HttpClientBuilder setTargetAuthenticationStrategy(org.apache.http.client.AuthenticationStrategy) -> setTargetAuthenticationStrategy
    org.apache.http.impl.client.HttpClientBuilder setProxyAuthenticationStrategy(org.apache.http.client.AuthenticationStrategy) -> setProxyAuthenticationStrategy
    org.apache.http.impl.client.HttpClientBuilder setUserTokenHandler(org.apache.http.client.UserTokenHandler) -> setUserTokenHandler
    org.apache.http.impl.client.HttpClientBuilder disableConnectionState() -> disableConnectionState
    org.apache.http.impl.client.HttpClientBuilder setSchemePortResolver(org.apache.http.conn.SchemePortResolver) -> setSchemePortResolver
    org.apache.http.impl.client.HttpClientBuilder setUserAgent(java.lang.String) -> setUserAgent
    org.apache.http.impl.client.HttpClientBuilder setDefaultHeaders(java.util.Collection) -> setDefaultHeaders
    org.apache.http.impl.client.HttpClientBuilder addInterceptorFirst(org.apache.http.HttpResponseInterceptor) -> addInterceptorFirst
    org.apache.http.impl.client.HttpClientBuilder addInterceptorLast(org.apache.http.HttpResponseInterceptor) -> addInterceptorLast
    org.apache.http.impl.client.HttpClientBuilder addInterceptorFirst(org.apache.http.HttpRequestInterceptor) -> addInterceptorFirst
    org.apache.http.impl.client.HttpClientBuilder addInterceptorLast(org.apache.http.HttpRequestInterceptor) -> addInterceptorLast
    org.apache.http.impl.client.HttpClientBuilder disableCookieManagement() -> disableCookieManagement
    org.apache.http.impl.client.HttpClientBuilder disableContentCompression() -> disableContentCompression
    org.apache.http.impl.client.HttpClientBuilder disableAuthCaching() -> disableAuthCaching
    org.apache.http.impl.client.HttpClientBuilder setHttpProcessor(org.apache.http.protocol.HttpProcessor) -> setHttpProcessor
    org.apache.http.impl.client.HttpClientBuilder setRetryHandler(org.apache.http.client.HttpRequestRetryHandler) -> setRetryHandler
    org.apache.http.impl.client.HttpClientBuilder disableAutomaticRetries() -> disableAutomaticRetries
    org.apache.http.impl.client.HttpClientBuilder setProxy(org.apache.http.HttpHost) -> setProxy
    org.apache.http.impl.client.HttpClientBuilder setRoutePlanner(org.apache.http.conn.routing.HttpRoutePlanner) -> setRoutePlanner
    org.apache.http.impl.client.HttpClientBuilder setRedirectStrategy(org.apache.http.client.RedirectStrategy) -> setRedirectStrategy
    org.apache.http.impl.client.HttpClientBuilder disableRedirectHandling() -> disableRedirectHandling
    org.apache.http.impl.client.HttpClientBuilder setConnectionBackoffStrategy(org.apache.http.client.ConnectionBackoffStrategy) -> setConnectionBackoffStrategy
    org.apache.http.impl.client.HttpClientBuilder setBackoffManager(org.apache.http.client.BackoffManager) -> setBackoffManager
    org.apache.http.impl.client.HttpClientBuilder setServiceUnavailableRetryStrategy(org.apache.http.client.ServiceUnavailableRetryStrategy) -> setServiceUnavailableRetryStrategy
    org.apache.http.impl.client.HttpClientBuilder setDefaultCookieStore(org.apache.http.client.CookieStore) -> setDefaultCookieStore
    org.apache.http.impl.client.HttpClientBuilder setDefaultCredentialsProvider(org.apache.http.client.CredentialsProvider) -> setDefaultCredentialsProvider
    org.apache.http.impl.client.HttpClientBuilder setDefaultAuthSchemeRegistry(org.apache.http.config.Lookup) -> setDefaultAuthSchemeRegistry
    org.apache.http.impl.client.HttpClientBuilder setDefaultCookieSpecRegistry(org.apache.http.config.Lookup) -> setDefaultCookieSpecRegistry
    org.apache.http.impl.client.HttpClientBuilder setDefaultRequestConfig(org.apache.http.client.config.RequestConfig) -> setDefaultRequestConfig
    org.apache.http.impl.client.HttpClientBuilder useSystemProperties() -> useSystemProperties
    org.apache.http.impl.execchain.ClientExecChain decorateMainExec(org.apache.http.impl.execchain.ClientExecChain) -> decorateMainExec
    org.apache.http.impl.execchain.ClientExecChain decorateProtocolExec(org.apache.http.impl.execchain.ClientExecChain) -> decorateProtocolExec
    void addCloseable(java.io.Closeable) -> addCloseable
    java.lang.String[] split(java.lang.String) -> split
    org.apache.http.impl.client.CloseableHttpClient build() -> build
org.apache.http.impl.client.HttpClients -> org.apache.http.impl.client.HttpClients:
    org.apache.http.impl.client.HttpClientBuilder custom() -> custom
    org.apache.http.impl.client.CloseableHttpClient createDefault() -> createDefault
    org.apache.http.impl.client.CloseableHttpClient createSystem() -> createSystem
    org.apache.http.impl.client.CloseableHttpClient createMinimal() -> createMinimal
    org.apache.http.impl.client.CloseableHttpClient createMinimal(org.apache.http.conn.HttpClientConnectionManager) -> createMinimal
org.apache.http.impl.client.HttpRequestFutureTask -> org.apache.http.impl.client.HttpRequestFutureTask:
    org.apache.http.client.methods.HttpUriRequest request -> request
    org.apache.http.impl.client.HttpRequestTaskCallable callable -> callable
    boolean cancel(boolean) -> cancel
    long scheduledTime() -> scheduledTime
    long startedTime() -> startedTime
    long endedTime() -> endedTime
    long requestDuration() -> requestDuration
    long taskDuration() -> taskDuration
    java.lang.String toString() -> toString
org.apache.http.impl.client.HttpRequestTaskCallable -> org.apache.http.impl.client.HttpRequestTaskCallable:
    org.apache.http.client.methods.HttpUriRequest request -> request
    org.apache.http.client.HttpClient httpclient -> httpclient
    java.util.concurrent.atomic.AtomicBoolean cancelled -> cancelled
    long scheduled -> scheduled
    long started -> started
    long ended -> ended
    org.apache.http.protocol.HttpContext context -> context
    org.apache.http.client.ResponseHandler responseHandler -> responseHandler
    org.apache.http.concurrent.FutureCallback callback -> callback
    org.apache.http.impl.client.FutureRequestExecutionMetrics metrics -> metrics
    long getScheduled() -> getScheduled
    long getStarted() -> getStarted
    long getEnded() -> getEnded
    java.lang.Object call() -> call
    void cancel() -> cancel
org.apache.http.impl.client.InternalHttpClient -> org.apache.http.impl.client.InternalHttpClient:
    org.apache.commons.logging.Log log -> log
    org.apache.http.impl.execchain.ClientExecChain execChain -> execChain
    org.apache.http.conn.HttpClientConnectionManager connManager -> connManager
    org.apache.http.conn.routing.HttpRoutePlanner routePlanner -> routePlanner
    org.apache.http.config.Lookup cookieSpecRegistry -> cookieSpecRegistry
    org.apache.http.config.Lookup authSchemeRegistry -> authSchemeRegistry
    org.apache.http.client.CookieStore cookieStore -> cookieStore
    org.apache.http.client.CredentialsProvider credentialsProvider -> credentialsProvider
    org.apache.http.client.config.RequestConfig defaultConfig -> defaultConfig
    java.util.List closeables -> closeables
    org.apache.http.conn.routing.HttpRoute determineRoute(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext) -> determineRoute
    void setupContext(org.apache.http.client.protocol.HttpClientContext) -> setupContext
    org.apache.http.client.methods.CloseableHttpResponse doExecute(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext) -> doExecute
    void close() -> close
    org.apache.http.params.HttpParams getParams() -> getParams
    org.apache.http.conn.ClientConnectionManager getConnectionManager() -> getConnectionManager
    org.apache.http.conn.HttpClientConnectionManager access$000(org.apache.http.impl.client.InternalHttpClient) -> access$000
org.apache.http.impl.client.InternalHttpClient$1 -> org.apache.http.impl.client.InternalHttpClient$1:
    org.apache.http.impl.client.InternalHttpClient this$0 -> this$0
    void shutdown() -> shutdown
    org.apache.http.conn.ClientConnectionRequest requestConnection(org.apache.http.conn.routing.HttpRoute,java.lang.Object) -> requestConnection
    void releaseConnection(org.apache.http.conn.ManagedClientConnection,long,java.util.concurrent.TimeUnit) -> releaseConnection
    org.apache.http.conn.scheme.SchemeRegistry getSchemeRegistry() -> getSchemeRegistry
    void closeIdleConnections(long,java.util.concurrent.TimeUnit) -> closeIdleConnections
    void closeExpiredConnections() -> closeExpiredConnections
org.apache.http.impl.client.LaxRedirectStrategy -> org.apache.http.impl.client.LaxRedirectStrategy:
    java.lang.String[] REDIRECT_METHODS -> REDIRECT_METHODS
    boolean isRedirectable(java.lang.String) -> isRedirectable
org.apache.http.impl.client.MinimalHttpClient -> org.apache.http.impl.client.MinimalHttpClient:
    org.apache.http.conn.HttpClientConnectionManager connManager -> connManager
    org.apache.http.impl.execchain.MinimalClientExec requestExecutor -> requestExecutor
    org.apache.http.params.HttpParams params -> params
    org.apache.http.client.methods.CloseableHttpResponse doExecute(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext) -> doExecute
    org.apache.http.params.HttpParams getParams() -> getParams
    void close() -> close
    org.apache.http.conn.ClientConnectionManager getConnectionManager() -> getConnectionManager
    org.apache.http.conn.HttpClientConnectionManager access$000(org.apache.http.impl.client.MinimalHttpClient) -> access$000
org.apache.http.impl.client.MinimalHttpClient$1 -> org.apache.http.impl.client.MinimalHttpClient$1:
    org.apache.http.impl.client.MinimalHttpClient this$0 -> this$0
    void shutdown() -> shutdown
    org.apache.http.conn.ClientConnectionRequest requestConnection(org.apache.http.conn.routing.HttpRoute,java.lang.Object) -> requestConnection
    void releaseConnection(org.apache.http.conn.ManagedClientConnection,long,java.util.concurrent.TimeUnit) -> releaseConnection
    org.apache.http.conn.scheme.SchemeRegistry getSchemeRegistry() -> getSchemeRegistry
    void closeIdleConnections(long,java.util.concurrent.TimeUnit) -> closeIdleConnections
    void closeExpiredConnections() -> closeExpiredConnections
org.apache.http.impl.client.NoopUserTokenHandler -> org.apache.http.impl.client.NoopUserTokenHandler:
    org.apache.http.impl.client.NoopUserTokenHandler INSTANCE -> INSTANCE
    java.lang.Object getUserToken(org.apache.http.protocol.HttpContext) -> getUserToken
org.apache.http.impl.client.NullBackoffStrategy -> org.apache.http.impl.client.NullBackoffStrategy:
    boolean shouldBackoff(java.lang.Throwable) -> shouldBackoff
    boolean shouldBackoff(org.apache.http.HttpResponse) -> shouldBackoff
org.apache.http.impl.client.ProxyAuthenticationStrategy -> org.apache.http.impl.client.ProxyAuthenticationStrategy:
    org.apache.http.impl.client.ProxyAuthenticationStrategy INSTANCE -> INSTANCE
    java.util.Collection getPreferredAuthSchemes(org.apache.http.client.config.RequestConfig) -> getPreferredAuthSchemes
    void authFailed(org.apache.http.HttpHost,org.apache.http.auth.AuthScheme,org.apache.http.protocol.HttpContext) -> authFailed
    void authSucceeded(org.apache.http.HttpHost,org.apache.http.auth.AuthScheme,org.apache.http.protocol.HttpContext) -> authSucceeded
    java.util.Queue select(java.util.Map,org.apache.http.HttpHost,org.apache.http.HttpResponse,org.apache.http.protocol.HttpContext) -> select
    java.util.Map getChallenges(org.apache.http.HttpHost,org.apache.http.HttpResponse,org.apache.http.protocol.HttpContext) -> getChallenges
    boolean isAuthenticationRequested(org.apache.http.HttpHost,org.apache.http.HttpResponse,org.apache.http.protocol.HttpContext) -> isAuthenticationRequested
org.apache.http.impl.client.ProxyClient -> org.apache.http.impl.client.ProxyClient:
    org.apache.http.conn.HttpConnectionFactory connFactory -> connFactory
    org.apache.http.config.ConnectionConfig connectionConfig -> connectionConfig
    org.apache.http.client.config.RequestConfig requestConfig -> requestConfig
    org.apache.http.protocol.HttpProcessor httpProcessor -> httpProcessor
    org.apache.http.protocol.HttpRequestExecutor requestExec -> requestExec
    org.apache.http.impl.client.ProxyAuthenticationStrategy proxyAuthStrategy -> proxyAuthStrategy
    org.apache.http.impl.auth.HttpAuthenticator authenticator -> authenticator
    org.apache.http.auth.AuthState proxyAuthState -> proxyAuthState
    org.apache.http.auth.AuthSchemeRegistry authSchemeRegistry -> authSchemeRegistry
    org.apache.http.ConnectionReuseStrategy reuseStrategy -> reuseStrategy
    org.apache.http.params.HttpParams getParams() -> getParams
    org.apache.http.auth.AuthSchemeRegistry getAuthSchemeRegistry() -> getAuthSchemeRegistry
    java.net.Socket tunnel(org.apache.http.HttpHost,org.apache.http.HttpHost,org.apache.http.auth.Credentials) -> tunnel
org.apache.http.impl.client.RedirectLocations -> org.apache.http.impl.client.RedirectLocations:
    java.util.Set unique -> unique
    java.util.List all -> all
    boolean contains(java.net.URI) -> contains
    void add(java.net.URI) -> add
    boolean remove(java.net.URI) -> remove
    java.util.List getAll() -> getAll
    java.net.URI get(int) -> get
    int size() -> size
    java.lang.Object set(int,java.lang.Object) -> set
    void add(int,java.lang.Object) -> add
    java.net.URI remove(int) -> remove
    boolean contains(java.lang.Object) -> contains
    java.lang.Object remove(int) -> remove
    java.lang.Object get(int) -> get
org.apache.http.impl.client.RequestWrapper -> org.apache.http.impl.client.RequestWrapper:
    org.apache.http.HttpRequest original -> original
    java.net.URI uri -> uri
    java.lang.String method -> method
    org.apache.http.ProtocolVersion version -> version
    int execCount -> execCount
    void resetHeaders() -> resetHeaders
    java.lang.String getMethod() -> getMethod
    void setMethod(java.lang.String) -> setMethod
    org.apache.http.ProtocolVersion getProtocolVersion() -> getProtocolVersion
    void setProtocolVersion(org.apache.http.ProtocolVersion) -> setProtocolVersion
    java.net.URI getURI() -> getURI
    void setURI(java.net.URI) -> setURI
    org.apache.http.RequestLine getRequestLine() -> getRequestLine
    void abort() -> abort
    boolean isAborted() -> isAborted
    org.apache.http.HttpRequest getOriginal() -> getOriginal
    boolean isRepeatable() -> isRepeatable
    int getExecCount() -> getExecCount
    void incrementExecCount() -> incrementExecCount
org.apache.http.impl.client.RoutedRequest -> org.apache.http.impl.client.RoutedRequest:
    org.apache.http.impl.client.RequestWrapper request -> request
    org.apache.http.conn.routing.HttpRoute route -> route
    org.apache.http.impl.client.RequestWrapper getRequest() -> getRequest
    org.apache.http.conn.routing.HttpRoute getRoute() -> getRoute
org.apache.http.impl.client.StandardHttpRequestRetryHandler -> org.apache.http.impl.client.StandardHttpRequestRetryHandler:
    java.util.Map idempotentMethods -> idempotentMethods
    boolean handleAsIdempotent(org.apache.http.HttpRequest) -> handleAsIdempotent
org.apache.http.impl.client.SystemClock -> org.apache.http.impl.client.SystemClock:
    long getCurrentTime() -> getCurrentTime
org.apache.http.impl.client.SystemDefaultCredentialsProvider -> org.apache.http.impl.client.SystemDefaultCredentialsProvider:
    java.util.Map SCHEME_MAP -> SCHEME_MAP
    org.apache.http.impl.client.BasicCredentialsProvider internal -> internal
    java.lang.String translateScheme(java.lang.String) -> translateScheme
    void setCredentials(org.apache.http.auth.AuthScope,org.apache.http.auth.Credentials) -> setCredentials
    java.net.PasswordAuthentication getSystemCreds(org.apache.http.auth.AuthScope,java.net.Authenticator$RequestorType) -> getSystemCreds
    org.apache.http.auth.Credentials getCredentials(org.apache.http.auth.AuthScope) -> getCredentials
    void clear() -> clear
org.apache.http.impl.client.SystemDefaultHttpClient -> org.apache.http.impl.client.SystemDefaultHttpClient:
    org.apache.http.conn.ClientConnectionManager createClientConnectionManager() -> createClientConnectionManager
    org.apache.http.conn.routing.HttpRoutePlanner createHttpRoutePlanner() -> createHttpRoutePlanner
    org.apache.http.ConnectionReuseStrategy createConnectionReuseStrategy() -> createConnectionReuseStrategy
org.apache.http.impl.client.TargetAuthenticationStrategy -> org.apache.http.impl.client.TargetAuthenticationStrategy:
    org.apache.http.impl.client.TargetAuthenticationStrategy INSTANCE -> INSTANCE
    java.util.Collection getPreferredAuthSchemes(org.apache.http.client.config.RequestConfig) -> getPreferredAuthSchemes
    void authFailed(org.apache.http.HttpHost,org.apache.http.auth.AuthScheme,org.apache.http.protocol.HttpContext) -> authFailed
    void authSucceeded(org.apache.http.HttpHost,org.apache.http.auth.AuthScheme,org.apache.http.protocol.HttpContext) -> authSucceeded
    java.util.Queue select(java.util.Map,org.apache.http.HttpHost,org.apache.http.HttpResponse,org.apache.http.protocol.HttpContext) -> select
    java.util.Map getChallenges(org.apache.http.HttpHost,org.apache.http.HttpResponse,org.apache.http.protocol.HttpContext) -> getChallenges
    boolean isAuthenticationRequested(org.apache.http.HttpHost,org.apache.http.HttpResponse,org.apache.http.protocol.HttpContext) -> isAuthenticationRequested
org.apache.http.impl.client.TunnelRefusedException -> org.apache.http.impl.client.TunnelRefusedException:
    long serialVersionUID -> serialVersionUID
    org.apache.http.HttpResponse response -> response
    org.apache.http.HttpResponse getResponse() -> getResponse
org.apache.http.impl.conn.AbstractClientConnAdapter -> org.apache.http.impl.conn.AbstractClientConnAdapter:
    org.apache.http.conn.ClientConnectionManager connManager -> connManager
    org.apache.http.conn.OperatedClientConnection wrappedConnection -> wrappedConnection
    boolean markedReusable -> markedReusable
    boolean released -> released
    long duration -> duration
    void detach() -> detach
    org.apache.http.conn.OperatedClientConnection getWrappedConnection() -> getWrappedConnection
    org.apache.http.conn.ClientConnectionManager getManager() -> getManager
    void assertNotAborted() -> assertNotAborted
    boolean isReleased() -> isReleased
    void assertValid(org.apache.http.conn.OperatedClientConnection) -> assertValid
    boolean isOpen() -> isOpen
    boolean isStale() -> isStale
    void setSocketTimeout(int) -> setSocketTimeout
    int getSocketTimeout() -> getSocketTimeout
    org.apache.http.HttpConnectionMetrics getMetrics() -> getMetrics
    void flush() -> flush
    boolean isResponseAvailable(int) -> isResponseAvailable
    void receiveResponseEntity(org.apache.http.HttpResponse) -> receiveResponseEntity
    org.apache.http.HttpResponse receiveResponseHeader() -> receiveResponseHeader
    void sendRequestEntity(org.apache.http.HttpEntityEnclosingRequest) -> sendRequestEntity
    void sendRequestHeader(org.apache.http.HttpRequest) -> sendRequestHeader
    java.net.InetAddress getLocalAddress() -> getLocalAddress
    int getLocalPort() -> getLocalPort
    java.net.InetAddress getRemoteAddress() -> getRemoteAddress
    int getRemotePort() -> getRemotePort
    boolean isSecure() -> isSecure
    void bind(java.net.Socket) -> bind
    java.net.Socket getSocket() -> getSocket
    javax.net.ssl.SSLSession getSSLSession() -> getSSLSession
    void markReusable() -> markReusable
    void unmarkReusable() -> unmarkReusable
    boolean isMarkedReusable() -> isMarkedReusable
    void setIdleDuration(long,java.util.concurrent.TimeUnit) -> setIdleDuration
    void releaseConnection() -> releaseConnection
    void abortConnection() -> abortConnection
    java.lang.Object getAttribute(java.lang.String) -> getAttribute
    java.lang.Object removeAttribute(java.lang.String) -> removeAttribute
    void setAttribute(java.lang.String,java.lang.Object) -> setAttribute
org.apache.http.impl.conn.AbstractPoolEntry -> org.apache.http.impl.conn.AbstractPoolEntry:
    org.apache.http.conn.ClientConnectionOperator connOperator -> connOperator
    org.apache.http.conn.OperatedClientConnection connection -> connection
    org.apache.http.conn.routing.HttpRoute route -> route
    java.lang.Object state -> state
    org.apache.http.conn.routing.RouteTracker tracker -> tracker
    java.lang.Object getState() -> getState
    void setState(java.lang.Object) -> setState
    void open(org.apache.http.conn.routing.HttpRoute,org.apache.http.protocol.HttpContext,org.apache.http.params.HttpParams) -> open
    void tunnelTarget(boolean,org.apache.http.params.HttpParams) -> tunnelTarget
    void tunnelProxy(org.apache.http.HttpHost,boolean,org.apache.http.params.HttpParams) -> tunnelProxy
    void layerProtocol(org.apache.http.protocol.HttpContext,org.apache.http.params.HttpParams) -> layerProtocol
    void shutdownEntry() -> shutdownEntry
org.apache.http.impl.conn.AbstractPooledConnAdapter -> org.apache.http.impl.conn.AbstractPooledConnAdapter:
    org.apache.http.impl.conn.AbstractPoolEntry poolEntry -> poolEntry
    java.lang.String getId() -> getId
    org.apache.http.impl.conn.AbstractPoolEntry getPoolEntry() -> getPoolEntry
    void assertValid(org.apache.http.impl.conn.AbstractPoolEntry) -> assertValid
    void assertAttached() -> assertAttached
    void detach() -> detach
    org.apache.http.conn.routing.HttpRoute getRoute() -> getRoute
    void open(org.apache.http.conn.routing.HttpRoute,org.apache.http.protocol.HttpContext,org.apache.http.params.HttpParams) -> open
    void tunnelTarget(boolean,org.apache.http.params.HttpParams) -> tunnelTarget
    void tunnelProxy(org.apache.http.HttpHost,boolean,org.apache.http.params.HttpParams) -> tunnelProxy
    void layerProtocol(org.apache.http.protocol.HttpContext,org.apache.http.params.HttpParams) -> layerProtocol
    void close() -> close
    void shutdown() -> shutdown
    java.lang.Object getState() -> getState
    void setState(java.lang.Object) -> setState
org.apache.http.impl.conn.BasicClientConnectionManager -> org.apache.http.impl.conn.BasicClientConnectionManager:
    org.apache.commons.logging.Log log -> log
    java.util.concurrent.atomic.AtomicLong COUNTER -> COUNTER
    java.lang.String MISUSE_MESSAGE -> MISUSE_MESSAGE
    org.apache.http.conn.scheme.SchemeRegistry schemeRegistry -> schemeRegistry
    org.apache.http.conn.ClientConnectionOperator connOperator -> connOperator
    org.apache.http.impl.conn.HttpPoolEntry poolEntry -> poolEntry
    org.apache.http.impl.conn.ManagedClientConnectionImpl conn -> conn
    boolean shutdown -> shutdown
    void finalize() -> finalize
    org.apache.http.conn.scheme.SchemeRegistry getSchemeRegistry() -> getSchemeRegistry
    org.apache.http.conn.ClientConnectionOperator createConnectionOperator(org.apache.http.conn.scheme.SchemeRegistry) -> createConnectionOperator
    org.apache.http.conn.ClientConnectionRequest requestConnection(org.apache.http.conn.routing.HttpRoute,java.lang.Object) -> requestConnection
    void assertNotShutdown() -> assertNotShutdown
    org.apache.http.conn.ManagedClientConnection getConnection(org.apache.http.conn.routing.HttpRoute,java.lang.Object) -> getConnection
    void shutdownConnection(org.apache.http.HttpClientConnection) -> shutdownConnection
    void releaseConnection(org.apache.http.conn.ManagedClientConnection,long,java.util.concurrent.TimeUnit) -> releaseConnection
    void closeExpiredConnections() -> closeExpiredConnections
    void closeIdleConnections(long,java.util.concurrent.TimeUnit) -> closeIdleConnections
    void shutdown() -> shutdown
org.apache.http.impl.conn.BasicClientConnectionManager$1 -> org.apache.http.impl.conn.BasicClientConnectionManager$1:
    org.apache.http.conn.routing.HttpRoute val$route -> val$route
    java.lang.Object val$state -> val$state
    org.apache.http.impl.conn.BasicClientConnectionManager this$0 -> this$0
    void abortRequest() -> abortRequest
    org.apache.http.conn.ManagedClientConnection getConnection(long,java.util.concurrent.TimeUnit) -> getConnection
org.apache.http.impl.conn.BasicHttpClientConnectionManager -> org.apache.http.impl.conn.BasicHttpClientConnectionManager:
    org.apache.commons.logging.Log log -> log
    org.apache.http.impl.conn.HttpClientConnectionOperator connectionOperator -> connectionOperator
    org.apache.http.conn.HttpConnectionFactory connFactory -> connFactory
    org.apache.http.conn.ManagedHttpClientConnection conn -> conn
    org.apache.http.conn.routing.HttpRoute route -> route
    java.lang.Object state -> state
    long updated -> updated
    long expiry -> expiry
    boolean leased -> leased
    org.apache.http.config.SocketConfig socketConfig -> socketConfig
    org.apache.http.config.ConnectionConfig connConfig -> connConfig
    java.util.concurrent.atomic.AtomicBoolean isShutdown -> isShutdown
    org.apache.http.config.Registry getDefaultRegistry() -> getDefaultRegistry
    void finalize() -> finalize
    void close() -> close
    org.apache.http.conn.routing.HttpRoute getRoute() -> getRoute
    java.lang.Object getState() -> getState
    org.apache.http.config.SocketConfig getSocketConfig() -> getSocketConfig
    void setSocketConfig(org.apache.http.config.SocketConfig) -> setSocketConfig
    org.apache.http.config.ConnectionConfig getConnectionConfig() -> getConnectionConfig
    void setConnectionConfig(org.apache.http.config.ConnectionConfig) -> setConnectionConfig
    org.apache.http.conn.ConnectionRequest requestConnection(org.apache.http.conn.routing.HttpRoute,java.lang.Object) -> requestConnection
    void closeConnection() -> closeConnection
    void shutdownConnection() -> shutdownConnection
    void checkExpiry() -> checkExpiry
    org.apache.http.HttpClientConnection getConnection(org.apache.http.conn.routing.HttpRoute,java.lang.Object) -> getConnection
    void releaseConnection(org.apache.http.HttpClientConnection,java.lang.Object,long,java.util.concurrent.TimeUnit) -> releaseConnection
    void connect(org.apache.http.HttpClientConnection,org.apache.http.conn.routing.HttpRoute,int,org.apache.http.protocol.HttpContext) -> connect
    void upgrade(org.apache.http.HttpClientConnection,org.apache.http.conn.routing.HttpRoute,org.apache.http.protocol.HttpContext) -> upgrade
    void routeComplete(org.apache.http.HttpClientConnection,org.apache.http.conn.routing.HttpRoute,org.apache.http.protocol.HttpContext) -> routeComplete
    void closeExpiredConnections() -> closeExpiredConnections
    void closeIdleConnections(long,java.util.concurrent.TimeUnit) -> closeIdleConnections
    void shutdown() -> shutdown
org.apache.http.impl.conn.BasicHttpClientConnectionManager$1 -> org.apache.http.impl.conn.BasicHttpClientConnectionManager$1:
    org.apache.http.conn.routing.HttpRoute val$route -> val$route
    java.lang.Object val$state -> val$state
    org.apache.http.impl.conn.BasicHttpClientConnectionManager this$0 -> this$0
    boolean cancel() -> cancel
    org.apache.http.HttpClientConnection get(long,java.util.concurrent.TimeUnit) -> get
org.apache.http.impl.conn.CPool -> org.apache.http.impl.conn.CPool:
    java.util.concurrent.atomic.AtomicLong COUNTER -> COUNTER
    org.apache.commons.logging.Log log -> log
    long timeToLive -> timeToLive
    java.util.concurrent.TimeUnit tunit -> tunit
    org.apache.http.impl.conn.CPoolEntry createEntry(org.apache.http.conn.routing.HttpRoute,org.apache.http.conn.ManagedHttpClientConnection) -> createEntry
    org.apache.http.pool.PoolEntry createEntry(java.lang.Object,java.lang.Object) -> createEntry
org.apache.http.impl.conn.CPoolEntry -> org.apache.http.impl.conn.CPoolEntry:
    org.apache.commons.logging.Log log -> log
    boolean routeComplete -> routeComplete
    void markRouteComplete() -> markRouteComplete
    boolean isRouteComplete() -> isRouteComplete
    void closeConnection() -> closeConnection
    void shutdownConnection() -> shutdownConnection
    boolean isExpired(long) -> isExpired
    boolean isClosed() -> isClosed
    void close() -> close
org.apache.http.impl.conn.CPoolProxy -> org.apache.http.impl.conn.CPoolProxy:
    org.apache.http.impl.conn.CPoolEntry poolEntry -> poolEntry
    org.apache.http.impl.conn.CPoolEntry getPoolEntry() -> getPoolEntry
    org.apache.http.impl.conn.CPoolEntry detach() -> detach
    org.apache.http.conn.ManagedHttpClientConnection getConnection() -> getConnection
    org.apache.http.conn.ManagedHttpClientConnection getValidConnection() -> getValidConnection
    void close() -> close
    void shutdown() -> shutdown
    boolean isOpen() -> isOpen
    boolean isStale() -> isStale
    void setSocketTimeout(int) -> setSocketTimeout
    int getSocketTimeout() -> getSocketTimeout
    java.lang.String getId() -> getId
    void bind(java.net.Socket) -> bind
    java.net.Socket getSocket() -> getSocket
    javax.net.ssl.SSLSession getSSLSession() -> getSSLSession
    boolean isResponseAvailable(int) -> isResponseAvailable
    void sendRequestHeader(org.apache.http.HttpRequest) -> sendRequestHeader
    void sendRequestEntity(org.apache.http.HttpEntityEnclosingRequest) -> sendRequestEntity
    org.apache.http.HttpResponse receiveResponseHeader() -> receiveResponseHeader
    void receiveResponseEntity(org.apache.http.HttpResponse) -> receiveResponseEntity
    void flush() -> flush
    org.apache.http.HttpConnectionMetrics getMetrics() -> getMetrics
    java.net.InetAddress getLocalAddress() -> getLocalAddress
    int getLocalPort() -> getLocalPort
    java.net.InetAddress getRemoteAddress() -> getRemoteAddress
    int getRemotePort() -> getRemotePort
    java.lang.Object getAttribute(java.lang.String) -> getAttribute
    void setAttribute(java.lang.String,java.lang.Object) -> setAttribute
    java.lang.Object removeAttribute(java.lang.String) -> removeAttribute
    java.lang.String toString() -> toString
    org.apache.http.HttpClientConnection newProxy(org.apache.http.impl.conn.CPoolEntry) -> newProxy
    org.apache.http.impl.conn.CPoolProxy getProxy(org.apache.http.HttpClientConnection) -> getProxy
    org.apache.http.impl.conn.CPoolEntry getPoolEntry(org.apache.http.HttpClientConnection) -> getPoolEntry
    org.apache.http.impl.conn.CPoolEntry detach(org.apache.http.HttpClientConnection) -> detach
org.apache.http.impl.conn.ConnectionShutdownException -> org.apache.http.impl.conn.ConnectionShutdownException:
    long serialVersionUID -> serialVersionUID
org.apache.http.impl.conn.DefaultClientConnection -> org.apache.http.impl.conn.DefaultClientConnection:
    org.apache.commons.logging.Log log -> log
    org.apache.commons.logging.Log headerLog -> headerLog
    org.apache.commons.logging.Log wireLog -> wireLog
    java.net.Socket socket -> socket
    org.apache.http.HttpHost targetHost -> targetHost
    boolean connSecure -> connSecure
    boolean shutdown -> shutdown
    java.util.Map attributes -> attributes
    java.lang.String getId() -> getId
    org.apache.http.HttpHost getTargetHost() -> getTargetHost
    boolean isSecure() -> isSecure
    java.net.Socket getSocket() -> getSocket
    javax.net.ssl.SSLSession getSSLSession() -> getSSLSession
    void opening(java.net.Socket,org.apache.http.HttpHost) -> opening
    void openCompleted(boolean,org.apache.http.params.HttpParams) -> openCompleted
    void shutdown() -> shutdown
    void close() -> close
    org.apache.http.io.SessionInputBuffer createSessionInputBuffer(java.net.Socket,int,org.apache.http.params.HttpParams) -> createSessionInputBuffer
    org.apache.http.io.SessionOutputBuffer createSessionOutputBuffer(java.net.Socket,int,org.apache.http.params.HttpParams) -> createSessionOutputBuffer
    org.apache.http.io.HttpMessageParser createResponseParser(org.apache.http.io.SessionInputBuffer,org.apache.http.HttpResponseFactory,org.apache.http.params.HttpParams) -> createResponseParser
    void bind(java.net.Socket) -> bind
    void update(java.net.Socket,org.apache.http.HttpHost,boolean,org.apache.http.params.HttpParams) -> update
    org.apache.http.HttpResponse receiveResponseHeader() -> receiveResponseHeader
    void sendRequestHeader(org.apache.http.HttpRequest) -> sendRequestHeader
    java.lang.Object getAttribute(java.lang.String) -> getAttribute
    java.lang.Object removeAttribute(java.lang.String) -> removeAttribute
    void setAttribute(java.lang.String,java.lang.Object) -> setAttribute
org.apache.http.impl.conn.DefaultClientConnectionOperator -> org.apache.http.impl.conn.DefaultClientConnectionOperator:
    org.apache.commons.logging.Log log -> log
    org.apache.http.conn.scheme.SchemeRegistry schemeRegistry -> schemeRegistry
    org.apache.http.conn.DnsResolver dnsResolver -> dnsResolver
    org.apache.http.conn.OperatedClientConnection createConnection() -> createConnection
    org.apache.http.conn.scheme.SchemeRegistry getSchemeRegistry(org.apache.http.protocol.HttpContext) -> getSchemeRegistry
    void openConnection(org.apache.http.conn.OperatedClientConnection,org.apache.http.HttpHost,java.net.InetAddress,org.apache.http.protocol.HttpContext,org.apache.http.params.HttpParams) -> openConnection
    void updateSecureConnection(org.apache.http.conn.OperatedClientConnection,org.apache.http.HttpHost,org.apache.http.protocol.HttpContext,org.apache.http.params.HttpParams) -> updateSecureConnection
    void prepareSocket(java.net.Socket,org.apache.http.protocol.HttpContext,org.apache.http.params.HttpParams) -> prepareSocket
    java.net.InetAddress[] resolveHostname(java.lang.String) -> resolveHostname
org.apache.http.impl.conn.DefaultHttpResponseParser -> org.apache.http.impl.conn.DefaultHttpResponseParser:
    org.apache.commons.logging.Log log -> log
    org.apache.http.HttpResponseFactory responseFactory -> responseFactory
    org.apache.http.util.CharArrayBuffer lineBuf -> lineBuf
    org.apache.http.HttpResponse parseHead(org.apache.http.io.SessionInputBuffer) -> parseHead
    boolean reject(org.apache.http.util.CharArrayBuffer,int) -> reject
    org.apache.http.HttpMessage parseHead(org.apache.http.io.SessionInputBuffer) -> parseHead
org.apache.http.impl.conn.DefaultHttpResponseParserFactory -> org.apache.http.impl.conn.DefaultHttpResponseParserFactory:
    org.apache.http.impl.conn.DefaultHttpResponseParserFactory INSTANCE -> INSTANCE
    org.apache.http.message.LineParser lineParser -> lineParser
    org.apache.http.HttpResponseFactory responseFactory -> responseFactory
    org.apache.http.io.HttpMessageParser create(org.apache.http.io.SessionInputBuffer,org.apache.http.config.MessageConstraints) -> create
org.apache.http.impl.conn.DefaultHttpRoutePlanner -> org.apache.http.impl.conn.DefaultHttpRoutePlanner:
    org.apache.http.conn.scheme.SchemeRegistry schemeRegistry -> schemeRegistry
    org.apache.http.conn.routing.HttpRoute determineRoute(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext) -> determineRoute
org.apache.http.impl.conn.DefaultManagedHttpClientConnection -> org.apache.http.impl.conn.DefaultManagedHttpClientConnection:
    java.lang.String id -> id
    java.util.Map attributes -> attributes
    boolean shutdown -> shutdown
    java.lang.String getId() -> getId
    void shutdown() -> shutdown
    java.lang.Object getAttribute(java.lang.String) -> getAttribute
    java.lang.Object removeAttribute(java.lang.String) -> removeAttribute
    void setAttribute(java.lang.String,java.lang.Object) -> setAttribute
    void bind(java.net.Socket) -> bind
    java.net.Socket getSocket() -> getSocket
    javax.net.ssl.SSLSession getSSLSession() -> getSSLSession
org.apache.http.impl.conn.DefaultProxyRoutePlanner -> org.apache.http.impl.conn.DefaultProxyRoutePlanner:
    org.apache.http.HttpHost proxy -> proxy
    org.apache.http.HttpHost determineProxy(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext) -> determineProxy
org.apache.http.impl.conn.DefaultResponseParser -> org.apache.http.impl.conn.DefaultResponseParser:
    org.apache.commons.logging.Log log -> log
    org.apache.http.HttpResponseFactory responseFactory -> responseFactory
    org.apache.http.util.CharArrayBuffer lineBuf -> lineBuf
    int maxGarbageLines -> maxGarbageLines
    int getMaxGarbageLines(org.apache.http.params.HttpParams) -> getMaxGarbageLines
    org.apache.http.HttpMessage parseHead(org.apache.http.io.SessionInputBuffer) -> parseHead
org.apache.http.impl.conn.DefaultRoutePlanner -> org.apache.http.impl.conn.DefaultRoutePlanner:
    org.apache.http.conn.SchemePortResolver schemePortResolver -> schemePortResolver
    org.apache.http.conn.routing.HttpRoute determineRoute(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext) -> determineRoute
    org.apache.http.HttpHost determineProxy(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext) -> determineProxy
org.apache.http.impl.conn.DefaultSchemePortResolver -> org.apache.http.impl.conn.DefaultSchemePortResolver:
    org.apache.http.impl.conn.DefaultSchemePortResolver INSTANCE -> INSTANCE
    int resolve(org.apache.http.HttpHost) -> resolve
org.apache.http.impl.conn.HttpClientConnectionOperator -> org.apache.http.impl.conn.HttpClientConnectionOperator:
    java.lang.String SOCKET_FACTORY_REGISTRY -> SOCKET_FACTORY_REGISTRY
    org.apache.commons.logging.Log log -> log
    org.apache.http.config.Lookup socketFactoryRegistry -> socketFactoryRegistry
    org.apache.http.conn.SchemePortResolver schemePortResolver -> schemePortResolver
    org.apache.http.conn.DnsResolver dnsResolver -> dnsResolver
    org.apache.http.config.Lookup getSocketFactoryRegistry(org.apache.http.protocol.HttpContext) -> getSocketFactoryRegistry
    void connect(org.apache.http.conn.ManagedHttpClientConnection,org.apache.http.HttpHost,java.net.InetSocketAddress,int,org.apache.http.config.SocketConfig,org.apache.http.protocol.HttpContext) -> connect
    void upgrade(org.apache.http.conn.ManagedHttpClientConnection,org.apache.http.HttpHost,org.apache.http.protocol.HttpContext) -> upgrade
org.apache.http.impl.conn.HttpConnPool -> org.apache.http.impl.conn.HttpConnPool:
    java.util.concurrent.atomic.AtomicLong COUNTER -> COUNTER
    org.apache.commons.logging.Log log -> log
    long timeToLive -> timeToLive
    java.util.concurrent.TimeUnit tunit -> tunit
    org.apache.http.impl.conn.HttpPoolEntry createEntry(org.apache.http.conn.routing.HttpRoute,org.apache.http.conn.OperatedClientConnection) -> createEntry
    org.apache.http.pool.PoolEntry createEntry(java.lang.Object,java.lang.Object) -> createEntry
org.apache.http.impl.conn.HttpConnPool$InternalConnFactory -> org.apache.http.impl.conn.HttpConnPool$InternalConnFactory:
    org.apache.http.conn.ClientConnectionOperator connOperator -> connOperator
    org.apache.http.conn.OperatedClientConnection create(org.apache.http.conn.routing.HttpRoute) -> create
    java.lang.Object create(java.lang.Object) -> create
org.apache.http.impl.conn.HttpPoolEntry -> org.apache.http.impl.conn.HttpPoolEntry:
    org.apache.commons.logging.Log log -> log
    org.apache.http.conn.routing.RouteTracker tracker -> tracker
    boolean isExpired(long) -> isExpired
    org.apache.http.conn.routing.RouteTracker getTracker() -> getTracker
    org.apache.http.conn.routing.HttpRoute getPlannedRoute() -> getPlannedRoute
    org.apache.http.conn.routing.HttpRoute getEffectiveRoute() -> getEffectiveRoute
    boolean isClosed() -> isClosed
    void close() -> close
org.apache.http.impl.conn.IdleConnectionHandler -> org.apache.http.impl.conn.IdleConnectionHandler:
    org.apache.commons.logging.Log log -> log
    java.util.Map connectionToTimes -> connectionToTimes
    void add(org.apache.http.HttpConnection,long,java.util.concurrent.TimeUnit) -> add
    boolean remove(org.apache.http.HttpConnection) -> remove
    void removeAll() -> removeAll
    void closeIdleConnections(long) -> closeIdleConnections
    void closeExpiredConnections() -> closeExpiredConnections
org.apache.http.impl.conn.IdleConnectionHandler$TimeValues -> org.apache.http.impl.conn.IdleConnectionHandler$TimeValues:
    long timeAdded -> timeAdded
    long timeExpires -> timeExpires
    long access$000(org.apache.http.impl.conn.IdleConnectionHandler$TimeValues) -> access$000
    long access$100(org.apache.http.impl.conn.IdleConnectionHandler$TimeValues) -> access$100
org.apache.http.impl.conn.InMemoryDnsResolver -> org.apache.http.impl.conn.InMemoryDnsResolver:
    org.apache.commons.logging.Log log -> log
    java.util.Map dnsMap -> dnsMap
    void add(java.lang.String,java.net.InetAddress[]) -> add
    java.net.InetAddress[] resolve(java.lang.String) -> resolve
org.apache.http.impl.conn.LoggingInputStream -> org.apache.http.impl.conn.LoggingInputStream:
    java.io.InputStream in -> in
    org.apache.http.impl.conn.Wire wire -> wire
    int read() -> read
    int read(byte[]) -> read
    int read(byte[],int,int) -> read
    long skip(long) -> skip
    int available() -> available
    void mark(int) -> mark
    void reset() -> reset
    boolean markSupported() -> markSupported
    void close() -> close
org.apache.http.impl.conn.LoggingManagedHttpClientConnection -> org.apache.http.impl.conn.LoggingManagedHttpClientConnection:
    org.apache.commons.logging.Log log -> log
    org.apache.commons.logging.Log headerlog -> headerlog
    org.apache.http.impl.conn.Wire wire -> wire
    void close() -> close
    void shutdown() -> shutdown
    java.io.InputStream getSocketInputStream(java.net.Socket) -> getSocketInputStream
    java.io.OutputStream getSocketOutputStream(java.net.Socket) -> getSocketOutputStream
    void onResponseReceived(org.apache.http.HttpResponse) -> onResponseReceived
    void onRequestSubmitted(org.apache.http.HttpRequest) -> onRequestSubmitted
org.apache.http.impl.conn.LoggingOutputStream -> org.apache.http.impl.conn.LoggingOutputStream:
    java.io.OutputStream out -> out
    org.apache.http.impl.conn.Wire wire -> wire
    void write(int) -> write
    void write(byte[]) -> write
    void write(byte[],int,int) -> write
    void flush() -> flush
    void close() -> close
org.apache.http.impl.conn.LoggingSessionInputBuffer -> org.apache.http.impl.conn.LoggingSessionInputBuffer:
    org.apache.http.io.SessionInputBuffer in -> in
    org.apache.http.io.EofSensor eofSensor -> eofSensor
    org.apache.http.impl.conn.Wire wire -> wire
    java.lang.String charset -> charset
    boolean isDataAvailable(int) -> isDataAvailable
    int read(byte[],int,int) -> read
    int read() -> read
    int read(byte[]) -> read
    java.lang.String readLine() -> readLine
    int readLine(org.apache.http.util.CharArrayBuffer) -> readLine
    org.apache.http.io.HttpTransportMetrics getMetrics() -> getMetrics
    boolean isEof() -> isEof
org.apache.http.impl.conn.LoggingSessionOutputBuffer -> org.apache.http.impl.conn.LoggingSessionOutputBuffer:
    org.apache.http.io.SessionOutputBuffer out -> out
    org.apache.http.impl.conn.Wire wire -> wire
    java.lang.String charset -> charset
    void write(byte[],int,int) -> write
    void write(int) -> write
    void write(byte[]) -> write
    void flush() -> flush
    void writeLine(org.apache.http.util.CharArrayBuffer) -> writeLine
    void writeLine(java.lang.String) -> writeLine
    org.apache.http.io.HttpTransportMetrics getMetrics() -> getMetrics
org.apache.http.impl.conn.ManagedClientConnectionImpl -> org.apache.http.impl.conn.ManagedClientConnectionImpl:
    org.apache.http.conn.ClientConnectionManager manager -> manager
    org.apache.http.conn.ClientConnectionOperator operator -> operator
    org.apache.http.impl.conn.HttpPoolEntry poolEntry -> poolEntry
    boolean reusable -> reusable
    long duration -> duration
    java.lang.String getId() -> getId
    org.apache.http.impl.conn.HttpPoolEntry getPoolEntry() -> getPoolEntry
    org.apache.http.impl.conn.HttpPoolEntry detach() -> detach
    org.apache.http.conn.ClientConnectionManager getManager() -> getManager
    org.apache.http.conn.OperatedClientConnection getConnection() -> getConnection
    org.apache.http.conn.OperatedClientConnection ensureConnection() -> ensureConnection
    org.apache.http.impl.conn.HttpPoolEntry ensurePoolEntry() -> ensurePoolEntry
    void close() -> close
    void shutdown() -> shutdown
    boolean isOpen() -> isOpen
    boolean isStale() -> isStale
    void setSocketTimeout(int) -> setSocketTimeout
    int getSocketTimeout() -> getSocketTimeout
    org.apache.http.HttpConnectionMetrics getMetrics() -> getMetrics
    void flush() -> flush
    boolean isResponseAvailable(int) -> isResponseAvailable
    void receiveResponseEntity(org.apache.http.HttpResponse) -> receiveResponseEntity
    org.apache.http.HttpResponse receiveResponseHeader() -> receiveResponseHeader
    void sendRequestEntity(org.apache.http.HttpEntityEnclosingRequest) -> sendRequestEntity
    void sendRequestHeader(org.apache.http.HttpRequest) -> sendRequestHeader
    java.net.InetAddress getLocalAddress() -> getLocalAddress
    int getLocalPort() -> getLocalPort
    java.net.InetAddress getRemoteAddress() -> getRemoteAddress
    int getRemotePort() -> getRemotePort
    boolean isSecure() -> isSecure
    void bind(java.net.Socket) -> bind
    java.net.Socket getSocket() -> getSocket
    javax.net.ssl.SSLSession getSSLSession() -> getSSLSession
    java.lang.Object getAttribute(java.lang.String) -> getAttribute
    java.lang.Object removeAttribute(java.lang.String) -> removeAttribute
    void setAttribute(java.lang.String,java.lang.Object) -> setAttribute
    org.apache.http.conn.routing.HttpRoute getRoute() -> getRoute
    void open(org.apache.http.conn.routing.HttpRoute,org.apache.http.protocol.HttpContext,org.apache.http.params.HttpParams) -> open
    void tunnelTarget(boolean,org.apache.http.params.HttpParams) -> tunnelTarget
    void tunnelProxy(org.apache.http.HttpHost,boolean,org.apache.http.params.HttpParams) -> tunnelProxy
    void layerProtocol(org.apache.http.protocol.HttpContext,org.apache.http.params.HttpParams) -> layerProtocol
    java.lang.Object getState() -> getState
    void setState(java.lang.Object) -> setState
    void markReusable() -> markReusable
    void unmarkReusable() -> unmarkReusable
    boolean isMarkedReusable() -> isMarkedReusable
    void setIdleDuration(long,java.util.concurrent.TimeUnit) -> setIdleDuration
    void releaseConnection() -> releaseConnection
    void abortConnection() -> abortConnection
org.apache.http.impl.conn.ManagedHttpClientConnectionFactory -> org.apache.http.impl.conn.ManagedHttpClientConnectionFactory:
    java.util.concurrent.atomic.AtomicLong COUNTER -> COUNTER
    org.apache.http.impl.conn.ManagedHttpClientConnectionFactory INSTANCE -> INSTANCE
    org.apache.commons.logging.Log log -> log
    org.apache.commons.logging.Log headerlog -> headerlog
    org.apache.commons.logging.Log wirelog -> wirelog
    org.apache.http.io.HttpMessageWriterFactory requestWriterFactory -> requestWriterFactory
    org.apache.http.io.HttpMessageParserFactory responseParserFactory -> responseParserFactory
    org.apache.http.conn.ManagedHttpClientConnection create(org.apache.http.conn.routing.HttpRoute,org.apache.http.config.ConnectionConfig) -> create
    org.apache.http.HttpConnection create(java.lang.Object,org.apache.http.config.ConnectionConfig) -> create
org.apache.http.impl.conn.PoolingClientConnectionManager -> org.apache.http.impl.conn.PoolingClientConnectionManager:
    org.apache.commons.logging.Log log -> log
    org.apache.http.conn.scheme.SchemeRegistry schemeRegistry -> schemeRegistry
    org.apache.http.impl.conn.HttpConnPool pool -> pool
    org.apache.http.conn.ClientConnectionOperator operator -> operator
    org.apache.http.conn.DnsResolver dnsResolver -> dnsResolver
    void finalize() -> finalize
    org.apache.http.conn.ClientConnectionOperator createConnectionOperator(org.apache.http.conn.scheme.SchemeRegistry) -> createConnectionOperator
    org.apache.http.conn.scheme.SchemeRegistry getSchemeRegistry() -> getSchemeRegistry
    java.lang.String format(org.apache.http.conn.routing.HttpRoute,java.lang.Object) -> format
    java.lang.String formatStats(org.apache.http.conn.routing.HttpRoute) -> formatStats
    java.lang.String format(org.apache.http.impl.conn.HttpPoolEntry) -> format
    org.apache.http.conn.ClientConnectionRequest requestConnection(org.apache.http.conn.routing.HttpRoute,java.lang.Object) -> requestConnection
    org.apache.http.conn.ManagedClientConnection leaseConnection(java.util.concurrent.Future,long,java.util.concurrent.TimeUnit) -> leaseConnection
    void releaseConnection(org.apache.http.conn.ManagedClientConnection,long,java.util.concurrent.TimeUnit) -> releaseConnection
    void shutdown() -> shutdown
    void closeIdleConnections(long,java.util.concurrent.TimeUnit) -> closeIdleConnections
    void closeExpiredConnections() -> closeExpiredConnections
    int getMaxTotal() -> getMaxTotal
    void setMaxTotal(int) -> setMaxTotal
    int getDefaultMaxPerRoute() -> getDefaultMaxPerRoute
    void setDefaultMaxPerRoute(int) -> setDefaultMaxPerRoute
    int getMaxPerRoute(org.apache.http.conn.routing.HttpRoute) -> getMaxPerRoute
    void setMaxPerRoute(org.apache.http.conn.routing.HttpRoute,int) -> setMaxPerRoute
    org.apache.http.pool.PoolStats getTotalStats() -> getTotalStats
    org.apache.http.pool.PoolStats getStats(org.apache.http.conn.routing.HttpRoute) -> getStats
    org.apache.http.pool.PoolStats getStats(java.lang.Object) -> getStats
    int getMaxPerRoute(java.lang.Object) -> getMaxPerRoute
    void setMaxPerRoute(java.lang.Object,int) -> setMaxPerRoute
org.apache.http.impl.conn.PoolingClientConnectionManager$1 -> org.apache.http.impl.conn.PoolingClientConnectionManager$1:
    java.util.concurrent.Future val$future -> val$future
    org.apache.http.impl.conn.PoolingClientConnectionManager this$0 -> this$0
    void abortRequest() -> abortRequest
    org.apache.http.conn.ManagedClientConnection getConnection(long,java.util.concurrent.TimeUnit) -> getConnection
org.apache.http.impl.conn.PoolingHttpClientConnectionManager -> org.apache.http.impl.conn.PoolingHttpClientConnectionManager:
    org.apache.commons.logging.Log log -> log
    org.apache.http.impl.conn.PoolingHttpClientConnectionManager$ConfigData configData -> configData
    org.apache.http.impl.conn.CPool pool -> pool
    org.apache.http.impl.conn.HttpClientConnectionOperator connectionOperator -> connectionOperator
    java.util.concurrent.atomic.AtomicBoolean isShutDown -> isShutDown
    org.apache.http.config.Registry getDefaultRegistry() -> getDefaultRegistry
    void finalize() -> finalize
    void close() -> close
    java.lang.String format(org.apache.http.conn.routing.HttpRoute,java.lang.Object) -> format
    java.lang.String formatStats(org.apache.http.conn.routing.HttpRoute) -> formatStats
    java.lang.String format(org.apache.http.impl.conn.CPoolEntry) -> format
    org.apache.http.conn.ConnectionRequest requestConnection(org.apache.http.conn.routing.HttpRoute,java.lang.Object) -> requestConnection
    org.apache.http.HttpClientConnection leaseConnection(java.util.concurrent.Future,long,java.util.concurrent.TimeUnit) -> leaseConnection
    void releaseConnection(org.apache.http.HttpClientConnection,java.lang.Object,long,java.util.concurrent.TimeUnit) -> releaseConnection
    void connect(org.apache.http.HttpClientConnection,org.apache.http.conn.routing.HttpRoute,int,org.apache.http.protocol.HttpContext) -> connect
    void upgrade(org.apache.http.HttpClientConnection,org.apache.http.conn.routing.HttpRoute,org.apache.http.protocol.HttpContext) -> upgrade
    void routeComplete(org.apache.http.HttpClientConnection,org.apache.http.conn.routing.HttpRoute,org.apache.http.protocol.HttpContext) -> routeComplete
    void shutdown() -> shutdown
    void closeIdleConnections(long,java.util.concurrent.TimeUnit) -> closeIdleConnections
    void closeExpiredConnections() -> closeExpiredConnections
    int getMaxTotal() -> getMaxTotal
    void setMaxTotal(int) -> setMaxTotal
    int getDefaultMaxPerRoute() -> getDefaultMaxPerRoute
    void setDefaultMaxPerRoute(int) -> setDefaultMaxPerRoute
    int getMaxPerRoute(org.apache.http.conn.routing.HttpRoute) -> getMaxPerRoute
    void setMaxPerRoute(org.apache.http.conn.routing.HttpRoute,int) -> setMaxPerRoute
    org.apache.http.pool.PoolStats getTotalStats() -> getTotalStats
    org.apache.http.pool.PoolStats getStats(org.apache.http.conn.routing.HttpRoute) -> getStats
    org.apache.http.config.SocketConfig getDefaultSocketConfig() -> getDefaultSocketConfig
    void setDefaultSocketConfig(org.apache.http.config.SocketConfig) -> setDefaultSocketConfig
    org.apache.http.config.ConnectionConfig getDefaultConnectionConfig() -> getDefaultConnectionConfig
    void setDefaultConnectionConfig(org.apache.http.config.ConnectionConfig) -> setDefaultConnectionConfig
    org.apache.http.config.SocketConfig getSocketConfig(org.apache.http.HttpHost) -> getSocketConfig
    void setSocketConfig(org.apache.http.HttpHost,org.apache.http.config.SocketConfig) -> setSocketConfig
    org.apache.http.config.ConnectionConfig getConnectionConfig(org.apache.http.HttpHost) -> getConnectionConfig
    void setConnectionConfig(org.apache.http.HttpHost,org.apache.http.config.ConnectionConfig) -> setConnectionConfig
    org.apache.http.pool.PoolStats getStats(java.lang.Object) -> getStats
    int getMaxPerRoute(java.lang.Object) -> getMaxPerRoute
    void setMaxPerRoute(java.lang.Object,int) -> setMaxPerRoute
org.apache.http.impl.conn.PoolingHttpClientConnectionManager$1 -> org.apache.http.impl.conn.PoolingHttpClientConnectionManager$1:
    java.util.concurrent.Future val$future -> val$future
    org.apache.http.impl.conn.PoolingHttpClientConnectionManager this$0 -> this$0
    boolean cancel() -> cancel
    org.apache.http.HttpClientConnection get(long,java.util.concurrent.TimeUnit) -> get
org.apache.http.impl.conn.PoolingHttpClientConnectionManager$ConfigData -> org.apache.http.impl.conn.PoolingHttpClientConnectionManager$ConfigData:
    java.util.Map socketConfigMap -> socketConfigMap
    java.util.Map connectionConfigMap -> connectionConfigMap
    org.apache.http.config.SocketConfig defaultSocketConfig -> defaultSocketConfig
    org.apache.http.config.ConnectionConfig defaultConnectionConfig -> defaultConnectionConfig
    org.apache.http.config.SocketConfig getDefaultSocketConfig() -> getDefaultSocketConfig
    void setDefaultSocketConfig(org.apache.http.config.SocketConfig) -> setDefaultSocketConfig
    org.apache.http.config.ConnectionConfig getDefaultConnectionConfig() -> getDefaultConnectionConfig
    void setDefaultConnectionConfig(org.apache.http.config.ConnectionConfig) -> setDefaultConnectionConfig
    org.apache.http.config.SocketConfig getSocketConfig(org.apache.http.HttpHost) -> getSocketConfig
    void setSocketConfig(org.apache.http.HttpHost,org.apache.http.config.SocketConfig) -> setSocketConfig
    org.apache.http.config.ConnectionConfig getConnectionConfig(org.apache.http.HttpHost) -> getConnectionConfig
    void setConnectionConfig(org.apache.http.HttpHost,org.apache.http.config.ConnectionConfig) -> setConnectionConfig
org.apache.http.impl.conn.PoolingHttpClientConnectionManager$InternalConnectionFactory -> org.apache.http.impl.conn.PoolingHttpClientConnectionManager$InternalConnectionFactory:
    org.apache.http.impl.conn.PoolingHttpClientConnectionManager$ConfigData configData -> configData
    org.apache.http.conn.HttpConnectionFactory connFactory -> connFactory
    org.apache.http.conn.ManagedHttpClientConnection create(org.apache.http.conn.routing.HttpRoute) -> create
    java.lang.Object create(java.lang.Object) -> create
org.apache.http.impl.conn.ProxySelectorRoutePlanner -> org.apache.http.impl.conn.ProxySelectorRoutePlanner:
    org.apache.http.conn.scheme.SchemeRegistry schemeRegistry -> schemeRegistry
    java.net.ProxySelector proxySelector -> proxySelector
    java.net.ProxySelector getProxySelector() -> getProxySelector
    void setProxySelector(java.net.ProxySelector) -> setProxySelector
    org.apache.http.conn.routing.HttpRoute determineRoute(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext) -> determineRoute
    org.apache.http.HttpHost determineProxy(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext) -> determineProxy
    java.lang.String getHost(java.net.InetSocketAddress) -> getHost
    java.net.Proxy chooseProxy(java.util.List,org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext) -> chooseProxy
org.apache.http.impl.conn.ProxySelectorRoutePlanner$1 -> org.apache.http.impl.conn.ProxySelectorRoutePlanner$1:
    int[] $SwitchMap$java$net$Proxy$Type -> $SwitchMap$java$net$Proxy$Type
org.apache.http.impl.conn.SchemeRegistryFactory -> org.apache.http.impl.conn.SchemeRegistryFactory:
    org.apache.http.conn.scheme.SchemeRegistry createDefault() -> createDefault
    org.apache.http.conn.scheme.SchemeRegistry createSystemDefault() -> createSystemDefault
org.apache.http.impl.conn.SingleClientConnManager -> org.apache.http.impl.conn.SingleClientConnManager:
    org.apache.commons.logging.Log log -> log
    java.lang.String MISUSE_MESSAGE -> MISUSE_MESSAGE
    org.apache.http.conn.scheme.SchemeRegistry schemeRegistry -> schemeRegistry
    org.apache.http.conn.ClientConnectionOperator connOperator -> connOperator
    boolean alwaysShutDown -> alwaysShutDown
    org.apache.http.impl.conn.SingleClientConnManager$PoolEntry uniquePoolEntry -> uniquePoolEntry
    org.apache.http.impl.conn.SingleClientConnManager$ConnAdapter managedConn -> managedConn
    long lastReleaseTime -> lastReleaseTime
    long connectionExpiresTime -> connectionExpiresTime
    boolean isShutDown -> isShutDown
    void finalize() -> finalize
    org.apache.http.conn.scheme.SchemeRegistry getSchemeRegistry() -> getSchemeRegistry
    org.apache.http.conn.ClientConnectionOperator createConnectionOperator(org.apache.http.conn.scheme.SchemeRegistry) -> createConnectionOperator
    void assertStillUp() -> assertStillUp
    org.apache.http.conn.ClientConnectionRequest requestConnection(org.apache.http.conn.routing.HttpRoute,java.lang.Object) -> requestConnection
    org.apache.http.conn.ManagedClientConnection getConnection(org.apache.http.conn.routing.HttpRoute,java.lang.Object) -> getConnection
    void releaseConnection(org.apache.http.conn.ManagedClientConnection,long,java.util.concurrent.TimeUnit) -> releaseConnection
    void closeExpiredConnections() -> closeExpiredConnections
    void closeIdleConnections(long,java.util.concurrent.TimeUnit) -> closeIdleConnections
    void shutdown() -> shutdown
    void revokeConnection() -> revokeConnection
org.apache.http.impl.conn.SingleClientConnManager$1 -> org.apache.http.impl.conn.SingleClientConnManager$1:
    org.apache.http.conn.routing.HttpRoute val$route -> val$route
    java.lang.Object val$state -> val$state
    org.apache.http.impl.conn.SingleClientConnManager this$0 -> this$0
    void abortRequest() -> abortRequest
    org.apache.http.conn.ManagedClientConnection getConnection(long,java.util.concurrent.TimeUnit) -> getConnection
org.apache.http.impl.conn.SingleClientConnManager$ConnAdapter -> org.apache.http.impl.conn.SingleClientConnManager$ConnAdapter:
    org.apache.http.impl.conn.SingleClientConnManager this$0 -> this$0
org.apache.http.impl.conn.SingleClientConnManager$PoolEntry -> org.apache.http.impl.conn.SingleClientConnManager$PoolEntry:
    org.apache.http.impl.conn.SingleClientConnManager this$0 -> this$0
    void close() -> close
    void shutdown() -> shutdown
org.apache.http.impl.conn.SystemDefaultDnsResolver -> org.apache.http.impl.conn.SystemDefaultDnsResolver:
    org.apache.http.impl.conn.SystemDefaultDnsResolver INSTANCE -> INSTANCE
    java.net.InetAddress[] resolve(java.lang.String) -> resolve
org.apache.http.impl.conn.SystemDefaultRoutePlanner -> org.apache.http.impl.conn.SystemDefaultRoutePlanner:
    java.net.ProxySelector proxySelector -> proxySelector
    org.apache.http.HttpHost determineProxy(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext) -> determineProxy
    java.lang.String getHost(java.net.InetSocketAddress) -> getHost
    java.net.Proxy chooseProxy(java.util.List) -> chooseProxy
org.apache.http.impl.conn.SystemDefaultRoutePlanner$1 -> org.apache.http.impl.conn.SystemDefaultRoutePlanner$1:
    int[] $SwitchMap$java$net$Proxy$Type -> $SwitchMap$java$net$Proxy$Type
org.apache.http.impl.conn.Wire -> org.apache.http.impl.conn.Wire:
    org.apache.commons.logging.Log log -> log
    java.lang.String id -> id
    void wire(java.lang.String,java.io.InputStream) -> wire
    boolean enabled() -> enabled
    void output(java.io.InputStream) -> output
    void input(java.io.InputStream) -> input
    void output(byte[],int,int) -> output
    void input(byte[],int,int) -> input
    void output(byte[]) -> output
    void input(byte[]) -> input
    void output(int) -> output
    void input(int) -> input
    void output(java.lang.String) -> output
    void input(java.lang.String) -> input
org.apache.http.impl.conn.tsccm.AbstractConnPool -> org.apache.http.impl.conn.tsccm.AbstractConnPool:
    org.apache.commons.logging.Log log -> log
    java.util.concurrent.locks.Lock poolLock -> poolLock
    java.util.Set leasedConnections -> leasedConnections
    int numConnections -> numConnections
    boolean isShutDown -> isShutDown
    java.util.Set issuedConnections -> issuedConnections
    java.lang.ref.ReferenceQueue refQueue -> refQueue
    org.apache.http.impl.conn.IdleConnectionHandler idleConnHandler -> idleConnHandler
    void enableConnectionGC() -> enableConnectionGC
    org.apache.http.impl.conn.tsccm.BasicPoolEntry getEntry(org.apache.http.conn.routing.HttpRoute,java.lang.Object,long,java.util.concurrent.TimeUnit) -> getEntry
    org.apache.http.impl.conn.tsccm.PoolEntryRequest requestPoolEntry(org.apache.http.conn.routing.HttpRoute,java.lang.Object) -> requestPoolEntry
    void freeEntry(org.apache.http.impl.conn.tsccm.BasicPoolEntry,boolean,long,java.util.concurrent.TimeUnit) -> freeEntry
    void handleReference(java.lang.ref.Reference) -> handleReference
    void handleLostEntry(org.apache.http.conn.routing.HttpRoute) -> handleLostEntry
    void closeIdleConnections(long,java.util.concurrent.TimeUnit) -> closeIdleConnections
    void closeExpiredConnections() -> closeExpiredConnections
    void deleteClosedConnections() -> deleteClosedConnections
    void shutdown() -> shutdown
    void closeConnection(org.apache.http.conn.OperatedClientConnection) -> closeConnection
org.apache.http.impl.conn.tsccm.BasicPoolEntry -> org.apache.http.impl.conn.tsccm.BasicPoolEntry:
    long created -> created
    long updated -> updated
    long validUntil -> validUntil
    long expiry -> expiry
    org.apache.http.conn.OperatedClientConnection getConnection() -> getConnection
    org.apache.http.conn.routing.HttpRoute getPlannedRoute() -> getPlannedRoute
    org.apache.http.impl.conn.tsccm.BasicPoolEntryRef getWeakRef() -> getWeakRef
    void shutdownEntry() -> shutdownEntry
    long getCreated() -> getCreated
    long getUpdated() -> getUpdated
    long getExpiry() -> getExpiry
    long getValidUntil() -> getValidUntil
    void updateExpiry(long,java.util.concurrent.TimeUnit) -> updateExpiry
    boolean isExpired(long) -> isExpired
org.apache.http.impl.conn.tsccm.BasicPoolEntryRef -> org.apache.http.impl.conn.tsccm.BasicPoolEntryRef:
    org.apache.http.conn.routing.HttpRoute route -> route
    org.apache.http.conn.routing.HttpRoute getRoute() -> getRoute
org.apache.http.impl.conn.tsccm.BasicPooledConnAdapter -> org.apache.http.impl.conn.tsccm.BasicPooledConnAdapter:
    org.apache.http.conn.ClientConnectionManager getManager() -> getManager
    org.apache.http.impl.conn.AbstractPoolEntry getPoolEntry() -> getPoolEntry
    void detach() -> detach
org.apache.http.impl.conn.tsccm.ConnPoolByRoute -> org.apache.http.impl.conn.tsccm.ConnPoolByRoute:
    org.apache.commons.logging.Log log -> log
    java.util.concurrent.locks.Lock poolLock -> poolLock
    org.apache.http.conn.ClientConnectionOperator operator -> operator
    org.apache.http.conn.params.ConnPerRoute connPerRoute -> connPerRoute
    java.util.Set leasedConnections -> leasedConnections
    java.util.Queue freeConnections -> freeConnections
    java.util.Queue waitingThreads -> waitingThreads
    java.util.Map routeToPool -> routeToPool
    long connTTL -> connTTL
    java.util.concurrent.TimeUnit connTTLTimeUnit -> connTTLTimeUnit
    boolean shutdown -> shutdown
    int maxTotalConnections -> maxTotalConnections
    int numConnections -> numConnections
    java.util.concurrent.locks.Lock getLock() -> getLock
    java.util.Queue createFreeConnQueue() -> createFreeConnQueue
    java.util.Queue createWaitingThreadQueue() -> createWaitingThreadQueue
    java.util.Map createRouteToPoolMap() -> createRouteToPoolMap
    org.apache.http.impl.conn.tsccm.RouteSpecificPool newRouteSpecificPool(org.apache.http.conn.routing.HttpRoute) -> newRouteSpecificPool
    org.apache.http.impl.conn.tsccm.WaitingThread newWaitingThread(java.util.concurrent.locks.Condition,org.apache.http.impl.conn.tsccm.RouteSpecificPool) -> newWaitingThread
    void closeConnection(org.apache.http.impl.conn.tsccm.BasicPoolEntry) -> closeConnection
    org.apache.http.impl.conn.tsccm.RouteSpecificPool getRoutePool(org.apache.http.conn.routing.HttpRoute,boolean) -> getRoutePool
    int getConnectionsInPool(org.apache.http.conn.routing.HttpRoute) -> getConnectionsInPool
    int getConnectionsInPool() -> getConnectionsInPool
    org.apache.http.impl.conn.tsccm.PoolEntryRequest requestPoolEntry(org.apache.http.conn.routing.HttpRoute,java.lang.Object) -> requestPoolEntry
    org.apache.http.impl.conn.tsccm.BasicPoolEntry getEntryBlocking(org.apache.http.conn.routing.HttpRoute,java.lang.Object,long,java.util.concurrent.TimeUnit,org.apache.http.impl.conn.tsccm.WaitingThreadAborter) -> getEntryBlocking
    void freeEntry(org.apache.http.impl.conn.tsccm.BasicPoolEntry,boolean,long,java.util.concurrent.TimeUnit) -> freeEntry
    org.apache.http.impl.conn.tsccm.BasicPoolEntry getFreeEntry(org.apache.http.impl.conn.tsccm.RouteSpecificPool,java.lang.Object) -> getFreeEntry
    org.apache.http.impl.conn.tsccm.BasicPoolEntry createEntry(org.apache.http.impl.conn.tsccm.RouteSpecificPool,org.apache.http.conn.ClientConnectionOperator) -> createEntry
    void deleteEntry(org.apache.http.impl.conn.tsccm.BasicPoolEntry) -> deleteEntry
    void deleteLeastUsedEntry() -> deleteLeastUsedEntry
    void handleLostEntry(org.apache.http.conn.routing.HttpRoute) -> handleLostEntry
    void notifyWaitingThread(org.apache.http.impl.conn.tsccm.RouteSpecificPool) -> notifyWaitingThread
    void deleteClosedConnections() -> deleteClosedConnections
    void closeIdleConnections(long,java.util.concurrent.TimeUnit) -> closeIdleConnections
    void closeExpiredConnections() -> closeExpiredConnections
    void shutdown() -> shutdown
    void setMaxTotalConnections(int) -> setMaxTotalConnections
    int getMaxTotalConnections() -> getMaxTotalConnections
    java.util.concurrent.locks.Lock access$000(org.apache.http.impl.conn.tsccm.ConnPoolByRoute) -> access$000
org.apache.http.impl.conn.tsccm.ConnPoolByRoute$1 -> org.apache.http.impl.conn.tsccm.ConnPoolByRoute$1:
    org.apache.http.impl.conn.tsccm.WaitingThreadAborter val$aborter -> val$aborter
    org.apache.http.conn.routing.HttpRoute val$route -> val$route
    java.lang.Object val$state -> val$state
    org.apache.http.impl.conn.tsccm.ConnPoolByRoute this$0 -> this$0
    void abortRequest() -> abortRequest
    org.apache.http.impl.conn.tsccm.BasicPoolEntry getPoolEntry(long,java.util.concurrent.TimeUnit) -> getPoolEntry
org.apache.http.impl.conn.tsccm.PoolEntryRequest -> org.apache.http.impl.conn.tsccm.PoolEntryRequest:
    org.apache.http.impl.conn.tsccm.BasicPoolEntry getPoolEntry(long,java.util.concurrent.TimeUnit) -> getPoolEntry
    void abortRequest() -> abortRequest
org.apache.http.impl.conn.tsccm.RouteSpecificPool -> org.apache.http.impl.conn.tsccm.RouteSpecificPool:
    org.apache.commons.logging.Log log -> log
    org.apache.http.conn.routing.HttpRoute route -> route
    int maxEntries -> maxEntries
    org.apache.http.conn.params.ConnPerRoute connPerRoute -> connPerRoute
    java.util.LinkedList freeEntries -> freeEntries
    java.util.Queue waitingThreads -> waitingThreads
    int numEntries -> numEntries
    org.apache.http.conn.routing.HttpRoute getRoute() -> getRoute
    int getMaxEntries() -> getMaxEntries
    boolean isUnused() -> isUnused
    int getCapacity() -> getCapacity
    int getEntryCount() -> getEntryCount
    org.apache.http.impl.conn.tsccm.BasicPoolEntry allocEntry(java.lang.Object) -> allocEntry
    void freeEntry(org.apache.http.impl.conn.tsccm.BasicPoolEntry) -> freeEntry
    void createdEntry(org.apache.http.impl.conn.tsccm.BasicPoolEntry) -> createdEntry
    boolean deleteEntry(org.apache.http.impl.conn.tsccm.BasicPoolEntry) -> deleteEntry
    void dropEntry() -> dropEntry
    void queueThread(org.apache.http.impl.conn.tsccm.WaitingThread) -> queueThread
    boolean hasThread() -> hasThread
    org.apache.http.impl.conn.tsccm.WaitingThread nextThread() -> nextThread
    void removeThread(org.apache.http.impl.conn.tsccm.WaitingThread) -> removeThread
org.apache.http.impl.conn.tsccm.RouteSpecificPool$1 -> org.apache.http.impl.conn.tsccm.RouteSpecificPool$1:
    org.apache.http.impl.conn.tsccm.RouteSpecificPool this$0 -> this$0
    int getMaxForRoute(org.apache.http.conn.routing.HttpRoute) -> getMaxForRoute
org.apache.http.impl.conn.tsccm.ThreadSafeClientConnManager -> org.apache.http.impl.conn.tsccm.ThreadSafeClientConnManager:
    org.apache.commons.logging.Log log -> log
    org.apache.http.conn.scheme.SchemeRegistry schemeRegistry -> schemeRegistry
    org.apache.http.impl.conn.tsccm.AbstractConnPool connectionPool -> connectionPool
    org.apache.http.impl.conn.tsccm.ConnPoolByRoute pool -> pool
    org.apache.http.conn.ClientConnectionOperator connOperator -> connOperator
    org.apache.http.conn.params.ConnPerRouteBean connPerRoute -> connPerRoute
    void finalize() -> finalize
    org.apache.http.impl.conn.tsccm.AbstractConnPool createConnectionPool(org.apache.http.params.HttpParams) -> createConnectionPool
    org.apache.http.impl.conn.tsccm.ConnPoolByRoute createConnectionPool(long,java.util.concurrent.TimeUnit) -> createConnectionPool
    org.apache.http.conn.ClientConnectionOperator createConnectionOperator(org.apache.http.conn.scheme.SchemeRegistry) -> createConnectionOperator
    org.apache.http.conn.scheme.SchemeRegistry getSchemeRegistry() -> getSchemeRegistry
    org.apache.http.conn.ClientConnectionRequest requestConnection(org.apache.http.conn.routing.HttpRoute,java.lang.Object) -> requestConnection
    void releaseConnection(org.apache.http.conn.ManagedClientConnection,long,java.util.concurrent.TimeUnit) -> releaseConnection
    void shutdown() -> shutdown
    int getConnectionsInPool(org.apache.http.conn.routing.HttpRoute) -> getConnectionsInPool
    int getConnectionsInPool() -> getConnectionsInPool
    void closeIdleConnections(long,java.util.concurrent.TimeUnit) -> closeIdleConnections
    void closeExpiredConnections() -> closeExpiredConnections
    int getMaxTotal() -> getMaxTotal
    void setMaxTotal(int) -> setMaxTotal
    int getDefaultMaxPerRoute() -> getDefaultMaxPerRoute
    void setDefaultMaxPerRoute(int) -> setDefaultMaxPerRoute
    int getMaxForRoute(org.apache.http.conn.routing.HttpRoute) -> getMaxForRoute
    void setMaxForRoute(org.apache.http.conn.routing.HttpRoute,int) -> setMaxForRoute
    org.apache.commons.logging.Log access$000(org.apache.http.impl.conn.tsccm.ThreadSafeClientConnManager) -> access$000
org.apache.http.impl.conn.tsccm.ThreadSafeClientConnManager$1 -> org.apache.http.impl.conn.tsccm.ThreadSafeClientConnManager$1:
    org.apache.http.impl.conn.tsccm.PoolEntryRequest val$poolRequest -> val$poolRequest
    org.apache.http.conn.routing.HttpRoute val$route -> val$route
    org.apache.http.impl.conn.tsccm.ThreadSafeClientConnManager this$0 -> this$0
    void abortRequest() -> abortRequest
    org.apache.http.conn.ManagedClientConnection getConnection(long,java.util.concurrent.TimeUnit) -> getConnection
org.apache.http.impl.conn.tsccm.WaitingThread -> org.apache.http.impl.conn.tsccm.WaitingThread:
    java.util.concurrent.locks.Condition cond -> cond
    org.apache.http.impl.conn.tsccm.RouteSpecificPool pool -> pool
    java.lang.Thread waiter -> waiter
    boolean aborted -> aborted
    java.util.concurrent.locks.Condition getCondition() -> getCondition
    org.apache.http.impl.conn.tsccm.RouteSpecificPool getPool() -> getPool
    java.lang.Thread getThread() -> getThread
    boolean await(java.util.Date) -> await
    void wakeup() -> wakeup
    void interrupt() -> interrupt
org.apache.http.impl.conn.tsccm.WaitingThreadAborter -> org.apache.http.impl.conn.tsccm.WaitingThreadAborter:
    org.apache.http.impl.conn.tsccm.WaitingThread waitingThread -> waitingThread
    boolean aborted -> aborted
    void abort() -> abort
    void setWaitingThread(org.apache.http.impl.conn.tsccm.WaitingThread) -> setWaitingThread
org.apache.http.impl.cookie.AbstractCookieAttributeHandler -> org.apache.http.impl.cookie.AbstractCookieAttributeHandler:
    void validate(org.apache.http.cookie.Cookie,org.apache.http.cookie.CookieOrigin) -> validate
    boolean match(org.apache.http.cookie.Cookie,org.apache.http.cookie.CookieOrigin) -> match
org.apache.http.impl.cookie.AbstractCookieSpec -> org.apache.http.impl.cookie.AbstractCookieSpec:
    java.util.Map attribHandlerMap -> attribHandlerMap
    void registerAttribHandler(java.lang.String,org.apache.http.cookie.CookieAttributeHandler) -> registerAttribHandler
    org.apache.http.cookie.CookieAttributeHandler findAttribHandler(java.lang.String) -> findAttribHandler
    org.apache.http.cookie.CookieAttributeHandler getAttribHandler(java.lang.String) -> getAttribHandler
    java.util.Collection getAttribHandlers() -> getAttribHandlers
org.apache.http.impl.cookie.BasicClientCookie -> org.apache.http.impl.cookie.BasicClientCookie:
    long serialVersionUID -> serialVersionUID
    java.lang.String name -> name
    java.util.Map attribs -> attribs
    java.lang.String value -> value
    java.lang.String cookieComment -> cookieComment
    java.lang.String cookieDomain -> cookieDomain
    java.util.Date cookieExpiryDate -> cookieExpiryDate
    java.lang.String cookiePath -> cookiePath
    boolean isSecure -> isSecure
    int cookieVersion -> cookieVersion
    java.lang.String getName() -> getName
    java.lang.String getValue() -> getValue
    void setValue(java.lang.String) -> setValue
    java.lang.String getComment() -> getComment
    void setComment(java.lang.String) -> setComment
    java.lang.String getCommentURL() -> getCommentURL
    java.util.Date getExpiryDate() -> getExpiryDate
    void setExpiryDate(java.util.Date) -> setExpiryDate
    boolean isPersistent() -> isPersistent
    java.lang.String getDomain() -> getDomain
    void setDomain(java.lang.String) -> setDomain
    java.lang.String getPath() -> getPath
    void setPath(java.lang.String) -> setPath
    boolean isSecure() -> isSecure
    void setSecure(boolean) -> setSecure
    int[] getPorts() -> getPorts
    int getVersion() -> getVersion
    void setVersion(int) -> setVersion
    boolean isExpired(java.util.Date) -> isExpired
    void setAttribute(java.lang.String,java.lang.String) -> setAttribute
    java.lang.String getAttribute(java.lang.String) -> getAttribute
    boolean containsAttribute(java.lang.String) -> containsAttribute
    java.lang.Object clone() -> clone
    java.lang.String toString() -> toString
org.apache.http.impl.cookie.BasicClientCookie2 -> org.apache.http.impl.cookie.BasicClientCookie2:
    long serialVersionUID -> serialVersionUID
    java.lang.String commentURL -> commentURL
    int[] ports -> ports
    boolean discard -> discard
    int[] getPorts() -> getPorts
    void setPorts(int[]) -> setPorts
    java.lang.String getCommentURL() -> getCommentURL
    void setCommentURL(java.lang.String) -> setCommentURL
    void setDiscard(boolean) -> setDiscard
    boolean isPersistent() -> isPersistent
    boolean isExpired(java.util.Date) -> isExpired
    java.lang.Object clone() -> clone
org.apache.http.impl.cookie.BasicCommentHandler -> org.apache.http.impl.cookie.BasicCommentHandler:
    void parse(org.apache.http.cookie.SetCookie,java.lang.String) -> parse
org.apache.http.impl.cookie.BasicDomainHandler -> org.apache.http.impl.cookie.BasicDomainHandler:
    void parse(org.apache.http.cookie.SetCookie,java.lang.String) -> parse
    void validate(org.apache.http.cookie.Cookie,org.apache.http.cookie.CookieOrigin) -> validate
    boolean match(org.apache.http.cookie.Cookie,org.apache.http.cookie.CookieOrigin) -> match
org.apache.http.impl.cookie.BasicExpiresHandler -> org.apache.http.impl.cookie.BasicExpiresHandler:
    java.lang.String[] datepatterns -> datepatterns
    void parse(org.apache.http.cookie.SetCookie,java.lang.String) -> parse
org.apache.http.impl.cookie.BasicMaxAgeHandler -> org.apache.http.impl.cookie.BasicMaxAgeHandler:
    void parse(org.apache.http.cookie.SetCookie,java.lang.String) -> parse
org.apache.http.impl.cookie.BasicPathHandler -> org.apache.http.impl.cookie.BasicPathHandler:
    void parse(org.apache.http.cookie.SetCookie,java.lang.String) -> parse
    void validate(org.apache.http.cookie.Cookie,org.apache.http.cookie.CookieOrigin) -> validate
    boolean match(org.apache.http.cookie.Cookie,org.apache.http.cookie.CookieOrigin) -> match
org.apache.http.impl.cookie.BasicSecureHandler -> org.apache.http.impl.cookie.BasicSecureHandler:
    void parse(org.apache.http.cookie.SetCookie,java.lang.String) -> parse
    boolean match(org.apache.http.cookie.Cookie,org.apache.http.cookie.CookieOrigin) -> match
org.apache.http.impl.cookie.BestMatchSpec -> org.apache.http.impl.cookie.BestMatchSpec:
    java.lang.String[] datepatterns -> datepatterns
    boolean oneHeader -> oneHeader
    org.apache.http.impl.cookie.RFC2965Spec strict -> strict
    org.apache.http.impl.cookie.RFC2109Spec obsoleteStrict -> obsoleteStrict
    org.apache.http.impl.cookie.BrowserCompatSpec compat -> compat
    org.apache.http.impl.cookie.RFC2965Spec getStrict() -> getStrict
    org.apache.http.impl.cookie.RFC2109Spec getObsoleteStrict() -> getObsoleteStrict
    org.apache.http.impl.cookie.BrowserCompatSpec getCompat() -> getCompat
    java.util.List parse(org.apache.http.Header,org.apache.http.cookie.CookieOrigin) -> parse
    void validate(org.apache.http.cookie.Cookie,org.apache.http.cookie.CookieOrigin) -> validate
    boolean match(org.apache.http.cookie.Cookie,org.apache.http.cookie.CookieOrigin) -> match
    java.util.List formatCookies(java.util.List) -> formatCookies
    int getVersion() -> getVersion
    org.apache.http.Header getVersionHeader() -> getVersionHeader
    java.lang.String toString() -> toString
org.apache.http.impl.cookie.BestMatchSpecFactory -> org.apache.http.impl.cookie.BestMatchSpecFactory:
    java.lang.String[] datepatterns -> datepatterns
    boolean oneHeader -> oneHeader
    org.apache.http.cookie.CookieSpec newInstance(org.apache.http.params.HttpParams) -> newInstance
    org.apache.http.cookie.CookieSpec create(org.apache.http.protocol.HttpContext) -> create
org.apache.http.impl.cookie.BrowserCompatSpec -> org.apache.http.impl.cookie.BrowserCompatSpec:
    java.lang.String[] DEFAULT_DATE_PATTERNS -> DEFAULT_DATE_PATTERNS
    java.lang.String[] datepatterns -> datepatterns
    java.util.List parse(org.apache.http.Header,org.apache.http.cookie.CookieOrigin) -> parse
    boolean isQuoteEnclosed(java.lang.String) -> isQuoteEnclosed
    java.util.List formatCookies(java.util.List) -> formatCookies
    int getVersion() -> getVersion
    org.apache.http.Header getVersionHeader() -> getVersionHeader
    java.lang.String toString() -> toString
org.apache.http.impl.cookie.BrowserCompatSpec$1 -> org.apache.http.impl.cookie.BrowserCompatSpec$1:
    org.apache.http.impl.cookie.BrowserCompatSpec this$0 -> this$0
    void validate(org.apache.http.cookie.Cookie,org.apache.http.cookie.CookieOrigin) -> validate
org.apache.http.impl.cookie.BrowserCompatSpec$2 -> org.apache.http.impl.cookie.BrowserCompatSpec$2:
    int[] $SwitchMap$org$apache$http$impl$cookie$BrowserCompatSpecFactory$SecurityLevel -> $SwitchMap$org$apache$http$impl$cookie$BrowserCompatSpecFactory$SecurityLevel
org.apache.http.impl.cookie.BrowserCompatSpecFactory -> org.apache.http.impl.cookie.BrowserCompatSpecFactory:
    java.lang.String[] datepatterns -> datepatterns
    org.apache.http.impl.cookie.BrowserCompatSpecFactory$SecurityLevel securityLevel -> securityLevel
    org.apache.http.cookie.CookieSpec newInstance(org.apache.http.params.HttpParams) -> newInstance
    org.apache.http.cookie.CookieSpec create(org.apache.http.protocol.HttpContext) -> create
org.apache.http.impl.cookie.BrowserCompatSpecFactory$SecurityLevel -> org.apache.http.impl.cookie.BrowserCompatSpecFactory$SecurityLevel:
    org.apache.http.impl.cookie.BrowserCompatSpecFactory$SecurityLevel SECURITYLEVEL_DEFAULT -> SECURITYLEVEL_DEFAULT
    org.apache.http.impl.cookie.BrowserCompatSpecFactory$SecurityLevel SECURITYLEVEL_IE_MEDIUM -> SECURITYLEVEL_IE_MEDIUM
    org.apache.http.impl.cookie.BrowserCompatSpecFactory$SecurityLevel[] $VALUES -> $VALUES
    org.apache.http.impl.cookie.BrowserCompatSpecFactory$SecurityLevel[] values() -> values
    org.apache.http.impl.cookie.BrowserCompatSpecFactory$SecurityLevel valueOf(java.lang.String) -> valueOf
org.apache.http.impl.cookie.BrowserCompatVersionAttributeHandler -> org.apache.http.impl.cookie.BrowserCompatVersionAttributeHandler:
    void parse(org.apache.http.cookie.SetCookie,java.lang.String) -> parse
org.apache.http.impl.cookie.CookieSpecBase -> org.apache.http.impl.cookie.CookieSpecBase:
    java.lang.String getDefaultPath(org.apache.http.cookie.CookieOrigin) -> getDefaultPath
    java.lang.String getDefaultDomain(org.apache.http.cookie.CookieOrigin) -> getDefaultDomain
    java.util.List parse(org.apache.http.HeaderElement[],org.apache.http.cookie.CookieOrigin) -> parse
    void validate(org.apache.http.cookie.Cookie,org.apache.http.cookie.CookieOrigin) -> validate
    boolean match(org.apache.http.cookie.Cookie,org.apache.http.cookie.CookieOrigin) -> match
org.apache.http.impl.cookie.DateParseException -> org.apache.http.impl.cookie.DateParseException:
    long serialVersionUID -> serialVersionUID
org.apache.http.impl.cookie.DateUtils -> org.apache.http.impl.cookie.DateUtils:
    java.lang.String PATTERN_RFC1123 -> PATTERN_RFC1123
    java.lang.String PATTERN_RFC1036 -> PATTERN_RFC1036
    java.lang.String PATTERN_ASCTIME -> PATTERN_ASCTIME
    java.util.TimeZone GMT -> GMT
    java.util.Date parseDate(java.lang.String) -> parseDate
    java.util.Date parseDate(java.lang.String,java.lang.String[]) -> parseDate
    java.util.Date parseDate(java.lang.String,java.lang.String[],java.util.Date) -> parseDate
    java.lang.String formatDate(java.util.Date) -> formatDate
    java.lang.String formatDate(java.util.Date,java.lang.String) -> formatDate
org.apache.http.impl.cookie.IgnoreSpec -> org.apache.http.impl.cookie.IgnoreSpec:
    int getVersion() -> getVersion
    java.util.List parse(org.apache.http.Header,org.apache.http.cookie.CookieOrigin) -> parse
    java.util.List formatCookies(java.util.List) -> formatCookies
    org.apache.http.Header getVersionHeader() -> getVersionHeader
org.apache.http.impl.cookie.IgnoreSpecFactory -> org.apache.http.impl.cookie.IgnoreSpecFactory:
    org.apache.http.cookie.CookieSpec newInstance(org.apache.http.params.HttpParams) -> newInstance
    org.apache.http.cookie.CookieSpec create(org.apache.http.protocol.HttpContext) -> create
org.apache.http.impl.cookie.NetscapeDomainHandler -> org.apache.http.impl.cookie.NetscapeDomainHandler:
    void validate(org.apache.http.cookie.Cookie,org.apache.http.cookie.CookieOrigin) -> validate
    boolean isSpecialDomain(java.lang.String) -> isSpecialDomain
    boolean match(org.apache.http.cookie.Cookie,org.apache.http.cookie.CookieOrigin) -> match
org.apache.http.impl.cookie.NetscapeDraftHeaderParser -> org.apache.http.impl.cookie.NetscapeDraftHeaderParser:
    org.apache.http.impl.cookie.NetscapeDraftHeaderParser DEFAULT -> DEFAULT
    org.apache.http.HeaderElement parseHeader(org.apache.http.util.CharArrayBuffer,org.apache.http.message.ParserCursor) -> parseHeader
    org.apache.http.NameValuePair parseNameValuePair(org.apache.http.util.CharArrayBuffer,org.apache.http.message.ParserCursor) -> parseNameValuePair
org.apache.http.impl.cookie.NetscapeDraftSpec -> org.apache.http.impl.cookie.NetscapeDraftSpec:
    java.lang.String EXPIRES_PATTERN -> EXPIRES_PATTERN
    java.lang.String[] datepatterns -> datepatterns
    java.util.List parse(org.apache.http.Header,org.apache.http.cookie.CookieOrigin) -> parse
    java.util.List formatCookies(java.util.List) -> formatCookies
    int getVersion() -> getVersion
    org.apache.http.Header getVersionHeader() -> getVersionHeader
    java.lang.String toString() -> toString
org.apache.http.impl.cookie.NetscapeDraftSpecFactory -> org.apache.http.impl.cookie.NetscapeDraftSpecFactory:
    java.lang.String[] datepatterns -> datepatterns
    org.apache.http.cookie.CookieSpec newInstance(org.apache.http.params.HttpParams) -> newInstance
    org.apache.http.cookie.CookieSpec create(org.apache.http.protocol.HttpContext) -> create
org.apache.http.impl.cookie.PublicSuffixFilter -> org.apache.http.impl.cookie.PublicSuffixFilter:
    org.apache.http.cookie.CookieAttributeHandler wrapped -> wrapped
    java.util.Set exceptions -> exceptions
    java.util.Set suffixes -> suffixes
    void setPublicSuffixes(java.util.Collection) -> setPublicSuffixes
    void setExceptions(java.util.Collection) -> setExceptions
    boolean match(org.apache.http.cookie.Cookie,org.apache.http.cookie.CookieOrigin) -> match
    void parse(org.apache.http.cookie.SetCookie,java.lang.String) -> parse
    void validate(org.apache.http.cookie.Cookie,org.apache.http.cookie.CookieOrigin) -> validate
    boolean isForPublicSuffix(org.apache.http.cookie.Cookie) -> isForPublicSuffix
org.apache.http.impl.cookie.PublicSuffixListParser -> org.apache.http.impl.cookie.PublicSuffixListParser:
    int MAX_LINE_LEN -> MAX_LINE_LEN
    org.apache.http.impl.cookie.PublicSuffixFilter filter -> filter
    void parse(java.io.Reader) -> parse
    boolean readLine(java.io.Reader,java.lang.StringBuilder) -> readLine
org.apache.http.impl.cookie.RFC2109DomainHandler -> org.apache.http.impl.cookie.RFC2109DomainHandler:
    void parse(org.apache.http.cookie.SetCookie,java.lang.String) -> parse
    void validate(org.apache.http.cookie.Cookie,org.apache.http.cookie.CookieOrigin) -> validate
    boolean match(org.apache.http.cookie.Cookie,org.apache.http.cookie.CookieOrigin) -> match
org.apache.http.impl.cookie.RFC2109Spec -> org.apache.http.impl.cookie.RFC2109Spec:
    org.apache.http.cookie.CookiePathComparator PATH_COMPARATOR -> PATH_COMPARATOR
    java.lang.String[] DATE_PATTERNS -> DATE_PATTERNS
    java.lang.String[] datepatterns -> datepatterns
    boolean oneHeader -> oneHeader
    java.util.List parse(org.apache.http.Header,org.apache.http.cookie.CookieOrigin) -> parse
    void validate(org.apache.http.cookie.Cookie,org.apache.http.cookie.CookieOrigin) -> validate
    java.util.List formatCookies(java.util.List) -> formatCookies
    java.util.List doFormatOneHeader(java.util.List) -> doFormatOneHeader
    java.util.List doFormatManyHeaders(java.util.List) -> doFormatManyHeaders
    void formatParamAsVer(org.apache.http.util.CharArrayBuffer,java.lang.String,java.lang.String,int) -> formatParamAsVer
    void formatCookieAsVer(org.apache.http.util.CharArrayBuffer,org.apache.http.cookie.Cookie,int) -> formatCookieAsVer
    int getVersion() -> getVersion
    org.apache.http.Header getVersionHeader() -> getVersionHeader
    java.lang.String toString() -> toString
org.apache.http.impl.cookie.RFC2109SpecFactory -> org.apache.http.impl.cookie.RFC2109SpecFactory:
    java.lang.String[] datepatterns -> datepatterns
    boolean oneHeader -> oneHeader
    org.apache.http.cookie.CookieSpec newInstance(org.apache.http.params.HttpParams) -> newInstance
    org.apache.http.cookie.CookieSpec create(org.apache.http.protocol.HttpContext) -> create
org.apache.http.impl.cookie.RFC2109VersionHandler -> org.apache.http.impl.cookie.RFC2109VersionHandler:
    void parse(org.apache.http.cookie.SetCookie,java.lang.String) -> parse
    void validate(org.apache.http.cookie.Cookie,org.apache.http.cookie.CookieOrigin) -> validate
org.apache.http.impl.cookie.RFC2965CommentUrlAttributeHandler -> org.apache.http.impl.cookie.RFC2965CommentUrlAttributeHandler:
    void parse(org.apache.http.cookie.SetCookie,java.lang.String) -> parse
    void validate(org.apache.http.cookie.Cookie,org.apache.http.cookie.CookieOrigin) -> validate
    boolean match(org.apache.http.cookie.Cookie,org.apache.http.cookie.CookieOrigin) -> match
org.apache.http.impl.cookie.RFC2965DiscardAttributeHandler -> org.apache.http.impl.cookie.RFC2965DiscardAttributeHandler:
    void parse(org.apache.http.cookie.SetCookie,java.lang.String) -> parse
    void validate(org.apache.http.cookie.Cookie,org.apache.http.cookie.CookieOrigin) -> validate
    boolean match(org.apache.http.cookie.Cookie,org.apache.http.cookie.CookieOrigin) -> match
org.apache.http.impl.cookie.RFC2965DomainAttributeHandler -> org.apache.http.impl.cookie.RFC2965DomainAttributeHandler:
    void parse(org.apache.http.cookie.SetCookie,java.lang.String) -> parse
    boolean domainMatch(java.lang.String,java.lang.String) -> domainMatch
    void validate(org.apache.http.cookie.Cookie,org.apache.http.cookie.CookieOrigin) -> validate
    boolean match(org.apache.http.cookie.Cookie,org.apache.http.cookie.CookieOrigin) -> match
org.apache.http.impl.cookie.RFC2965PortAttributeHandler -> org.apache.http.impl.cookie.RFC2965PortAttributeHandler:
    int[] parsePortAttribute(java.lang.String) -> parsePortAttribute
    boolean portMatch(int,int[]) -> portMatch
    void parse(org.apache.http.cookie.SetCookie,java.lang.String) -> parse
    void validate(org.apache.http.cookie.Cookie,org.apache.http.cookie.CookieOrigin) -> validate
    boolean match(org.apache.http.cookie.Cookie,org.apache.http.cookie.CookieOrigin) -> match
org.apache.http.impl.cookie.RFC2965Spec -> org.apache.http.impl.cookie.RFC2965Spec:
    java.util.List parse(org.apache.http.Header,org.apache.http.cookie.CookieOrigin) -> parse
    java.util.List parse(org.apache.http.HeaderElement[],org.apache.http.cookie.CookieOrigin) -> parse
    java.util.List createCookies(org.apache.http.HeaderElement[],org.apache.http.cookie.CookieOrigin) -> createCookies
    void validate(org.apache.http.cookie.Cookie,org.apache.http.cookie.CookieOrigin) -> validate
    boolean match(org.apache.http.cookie.Cookie,org.apache.http.cookie.CookieOrigin) -> match
    void formatCookieAsVer(org.apache.http.util.CharArrayBuffer,org.apache.http.cookie.Cookie,int) -> formatCookieAsVer
    org.apache.http.cookie.CookieOrigin adjustEffectiveHost(org.apache.http.cookie.CookieOrigin) -> adjustEffectiveHost
    int getVersion() -> getVersion
    org.apache.http.Header getVersionHeader() -> getVersionHeader
    java.lang.String toString() -> toString
org.apache.http.impl.cookie.RFC2965SpecFactory -> org.apache.http.impl.cookie.RFC2965SpecFactory:
    java.lang.String[] datepatterns -> datepatterns
    boolean oneHeader -> oneHeader
    org.apache.http.cookie.CookieSpec newInstance(org.apache.http.params.HttpParams) -> newInstance
    org.apache.http.cookie.CookieSpec create(org.apache.http.protocol.HttpContext) -> create
org.apache.http.impl.cookie.RFC2965VersionAttributeHandler -> org.apache.http.impl.cookie.RFC2965VersionAttributeHandler:
    void parse(org.apache.http.cookie.SetCookie,java.lang.String) -> parse
    void validate(org.apache.http.cookie.Cookie,org.apache.http.cookie.CookieOrigin) -> validate
    boolean match(org.apache.http.cookie.Cookie,org.apache.http.cookie.CookieOrigin) -> match
org.apache.http.impl.entity.DisallowIdentityContentLengthStrategy -> org.apache.http.impl.entity.DisallowIdentityContentLengthStrategy:
    org.apache.http.impl.entity.DisallowIdentityContentLengthStrategy INSTANCE -> INSTANCE
    org.apache.http.entity.ContentLengthStrategy contentLengthStrategy -> contentLengthStrategy
    long determineLength(org.apache.http.HttpMessage) -> determineLength
org.apache.http.impl.entity.EntityDeserializer -> org.apache.http.impl.entity.EntityDeserializer:
    org.apache.http.entity.ContentLengthStrategy lenStrategy -> lenStrategy
    org.apache.http.entity.BasicHttpEntity doDeserialize(org.apache.http.io.SessionInputBuffer,org.apache.http.HttpMessage) -> doDeserialize
    org.apache.http.HttpEntity deserialize(org.apache.http.io.SessionInputBuffer,org.apache.http.HttpMessage) -> deserialize
org.apache.http.impl.entity.EntitySerializer -> org.apache.http.impl.entity.EntitySerializer:
    org.apache.http.entity.ContentLengthStrategy lenStrategy -> lenStrategy
    java.io.OutputStream doSerialize(org.apache.http.io.SessionOutputBuffer,org.apache.http.HttpMessage) -> doSerialize
    void serialize(org.apache.http.io.SessionOutputBuffer,org.apache.http.HttpMessage,org.apache.http.HttpEntity) -> serialize
org.apache.http.impl.entity.LaxContentLengthStrategy -> org.apache.http.impl.entity.LaxContentLengthStrategy:
    org.apache.http.impl.entity.LaxContentLengthStrategy INSTANCE -> INSTANCE
    int implicitLen -> implicitLen
    long determineLength(org.apache.http.HttpMessage) -> determineLength
org.apache.http.impl.entity.StrictContentLengthStrategy -> org.apache.http.impl.entity.StrictContentLengthStrategy:
    org.apache.http.impl.entity.StrictContentLengthStrategy INSTANCE -> INSTANCE
    int implicitLen -> implicitLen
    long determineLength(org.apache.http.HttpMessage) -> determineLength
org.apache.http.impl.execchain.BackoffStrategyExec -> org.apache.http.impl.execchain.BackoffStrategyExec:
    org.apache.http.impl.execchain.ClientExecChain requestExecutor -> requestExecutor
    org.apache.http.client.ConnectionBackoffStrategy connectionBackoffStrategy -> connectionBackoffStrategy
    org.apache.http.client.BackoffManager backoffManager -> backoffManager
    org.apache.http.client.methods.CloseableHttpResponse execute(org.apache.http.conn.routing.HttpRoute,org.apache.http.client.methods.HttpRequestWrapper,org.apache.http.client.protocol.HttpClientContext,org.apache.http.client.methods.HttpExecutionAware) -> execute
org.apache.http.impl.execchain.ClientExecChain -> org.apache.http.impl.execchain.ClientExecChain:
    org.apache.http.client.methods.CloseableHttpResponse execute(org.apache.http.conn.routing.HttpRoute,org.apache.http.client.methods.HttpRequestWrapper,org.apache.http.client.protocol.HttpClientContext,org.apache.http.client.methods.HttpExecutionAware) -> execute
org.apache.http.impl.execchain.ConnectionHolder -> org.apache.http.impl.execchain.ConnectionHolder:
    org.apache.commons.logging.Log log -> log
    org.apache.http.conn.HttpClientConnectionManager manager -> manager
    org.apache.http.HttpClientConnection managedConn -> managedConn
    boolean reusable -> reusable
    java.lang.Object state -> state
    long validDuration -> validDuration
    java.util.concurrent.TimeUnit tunit -> tunit
    boolean released -> released
    boolean isReusable() -> isReusable
    void markReusable() -> markReusable
    void markNonReusable() -> markNonReusable
    void setState(java.lang.Object) -> setState
    void setValidFor(long,java.util.concurrent.TimeUnit) -> setValidFor
    void releaseConnection() -> releaseConnection
    void abortConnection() -> abortConnection
    boolean cancel() -> cancel
    boolean isReleased() -> isReleased
    void close() -> close
org.apache.http.impl.execchain.HttpResponseProxy -> org.apache.http.impl.execchain.HttpResponseProxy:
    org.apache.http.HttpResponse original -> original
    org.apache.http.impl.execchain.ConnectionHolder connHolder -> connHolder
    void close() -> close
    org.apache.http.StatusLine getStatusLine() -> getStatusLine
    void setStatusLine(org.apache.http.StatusLine) -> setStatusLine
    void setStatusLine(org.apache.http.ProtocolVersion,int) -> setStatusLine
    void setStatusLine(org.apache.http.ProtocolVersion,int,java.lang.String) -> setStatusLine
    void setStatusCode(int) -> setStatusCode
    void setReasonPhrase(java.lang.String) -> setReasonPhrase
    org.apache.http.HttpEntity getEntity() -> getEntity
    void setEntity(org.apache.http.HttpEntity) -> setEntity
    java.util.Locale getLocale() -> getLocale
    void setLocale(java.util.Locale) -> setLocale
    org.apache.http.ProtocolVersion getProtocolVersion() -> getProtocolVersion
    boolean containsHeader(java.lang.String) -> containsHeader
    org.apache.http.Header[] getHeaders(java.lang.String) -> getHeaders
    org.apache.http.Header getFirstHeader(java.lang.String) -> getFirstHeader
    org.apache.http.Header getLastHeader(java.lang.String) -> getLastHeader
    org.apache.http.Header[] getAllHeaders() -> getAllHeaders
    void addHeader(org.apache.http.Header) -> addHeader
    void addHeader(java.lang.String,java.lang.String) -> addHeader
    void setHeader(org.apache.http.Header) -> setHeader
    void setHeader(java.lang.String,java.lang.String) -> setHeader
    void setHeaders(org.apache.http.Header[]) -> setHeaders
    void removeHeader(org.apache.http.Header) -> removeHeader
    void removeHeaders(java.lang.String) -> removeHeaders
    org.apache.http.HeaderIterator headerIterator() -> headerIterator
    org.apache.http.HeaderIterator headerIterator(java.lang.String) -> headerIterator
    org.apache.http.params.HttpParams getParams() -> getParams
    void setParams(org.apache.http.params.HttpParams) -> setParams
    java.lang.String toString() -> toString
org.apache.http.impl.execchain.MainClientExec -> org.apache.http.impl.execchain.MainClientExec:
    org.apache.commons.logging.Log log -> log
    org.apache.http.protocol.HttpRequestExecutor requestExecutor -> requestExecutor
    org.apache.http.conn.HttpClientConnectionManager connManager -> connManager
    org.apache.http.ConnectionReuseStrategy reuseStrategy -> reuseStrategy
    org.apache.http.conn.ConnectionKeepAliveStrategy keepAliveStrategy -> keepAliveStrategy
    org.apache.http.protocol.HttpProcessor proxyHttpProcessor -> proxyHttpProcessor
    org.apache.http.client.AuthenticationStrategy targetAuthStrategy -> targetAuthStrategy
    org.apache.http.client.AuthenticationStrategy proxyAuthStrategy -> proxyAuthStrategy
    org.apache.http.impl.auth.HttpAuthenticator authenticator -> authenticator
    org.apache.http.client.UserTokenHandler userTokenHandler -> userTokenHandler
    org.apache.http.conn.routing.HttpRouteDirector routeDirector -> routeDirector
    org.apache.http.client.methods.CloseableHttpResponse execute(org.apache.http.conn.routing.HttpRoute,org.apache.http.client.methods.HttpRequestWrapper,org.apache.http.client.protocol.HttpClientContext,org.apache.http.client.methods.HttpExecutionAware) -> execute
    void establishRoute(org.apache.http.auth.AuthState,org.apache.http.HttpClientConnection,org.apache.http.conn.routing.HttpRoute,org.apache.http.HttpRequest,org.apache.http.client.protocol.HttpClientContext) -> establishRoute
    boolean createTunnelToTarget(org.apache.http.auth.AuthState,org.apache.http.HttpClientConnection,org.apache.http.conn.routing.HttpRoute,org.apache.http.HttpRequest,org.apache.http.client.protocol.HttpClientContext) -> createTunnelToTarget
    boolean createTunnelToProxy(org.apache.http.conn.routing.HttpRoute,int,org.apache.http.client.protocol.HttpClientContext) -> createTunnelToProxy
    boolean needAuthentication(org.apache.http.auth.AuthState,org.apache.http.auth.AuthState,org.apache.http.conn.routing.HttpRoute,org.apache.http.HttpResponse,org.apache.http.client.protocol.HttpClientContext) -> needAuthentication
org.apache.http.impl.execchain.MinimalClientExec -> org.apache.http.impl.execchain.MinimalClientExec:
    org.apache.commons.logging.Log log -> log
    org.apache.http.protocol.HttpRequestExecutor requestExecutor -> requestExecutor
    org.apache.http.conn.HttpClientConnectionManager connManager -> connManager
    org.apache.http.ConnectionReuseStrategy reuseStrategy -> reuseStrategy
    org.apache.http.conn.ConnectionKeepAliveStrategy keepAliveStrategy -> keepAliveStrategy
    org.apache.http.protocol.HttpProcessor httpProcessor -> httpProcessor
    void rewriteRequestURI(org.apache.http.client.methods.HttpRequestWrapper,org.apache.http.conn.routing.HttpRoute) -> rewriteRequestURI
    org.apache.http.client.methods.CloseableHttpResponse execute(org.apache.http.conn.routing.HttpRoute,org.apache.http.client.methods.HttpRequestWrapper,org.apache.http.client.protocol.HttpClientContext,org.apache.http.client.methods.HttpExecutionAware) -> execute
org.apache.http.impl.execchain.ProtocolExec -> org.apache.http.impl.execchain.ProtocolExec:
    org.apache.commons.logging.Log log -> log
    org.apache.http.impl.execchain.ClientExecChain requestExecutor -> requestExecutor
    org.apache.http.protocol.HttpProcessor httpProcessor -> httpProcessor
    void rewriteRequestURI(org.apache.http.client.methods.HttpRequestWrapper,org.apache.http.conn.routing.HttpRoute) -> rewriteRequestURI
    org.apache.http.client.methods.CloseableHttpResponse execute(org.apache.http.conn.routing.HttpRoute,org.apache.http.client.methods.HttpRequestWrapper,org.apache.http.client.protocol.HttpClientContext,org.apache.http.client.methods.HttpExecutionAware) -> execute
org.apache.http.impl.execchain.RedirectExec -> org.apache.http.impl.execchain.RedirectExec:
    org.apache.commons.logging.Log log -> log
    org.apache.http.impl.execchain.ClientExecChain requestExecutor -> requestExecutor
    org.apache.http.client.RedirectStrategy redirectStrategy -> redirectStrategy
    org.apache.http.conn.routing.HttpRoutePlanner routePlanner -> routePlanner
    org.apache.http.client.methods.CloseableHttpResponse execute(org.apache.http.conn.routing.HttpRoute,org.apache.http.client.methods.HttpRequestWrapper,org.apache.http.client.protocol.HttpClientContext,org.apache.http.client.methods.HttpExecutionAware) -> execute
org.apache.http.impl.execchain.RequestAbortedException -> org.apache.http.impl.execchain.RequestAbortedException:
    long serialVersionUID -> serialVersionUID
org.apache.http.impl.execchain.RequestEntityProxy -> org.apache.http.impl.execchain.RequestEntityProxy:
    org.apache.http.HttpEntity original -> original
    boolean consumed -> consumed
    void enhance(org.apache.http.HttpEntityEnclosingRequest) -> enhance
    boolean isEnhanced(org.apache.http.HttpEntity) -> isEnhanced
    boolean isRepeatable(org.apache.http.HttpRequest) -> isRepeatable
    org.apache.http.HttpEntity getOriginal() -> getOriginal
    boolean isConsumed() -> isConsumed
    boolean isRepeatable() -> isRepeatable
    boolean isChunked() -> isChunked
    long getContentLength() -> getContentLength
    org.apache.http.Header getContentType() -> getContentType
    org.apache.http.Header getContentEncoding() -> getContentEncoding
    java.io.InputStream getContent() -> getContent
    void writeTo(java.io.OutputStream) -> writeTo
    boolean isStreaming() -> isStreaming
    void consumeContent() -> consumeContent
    java.lang.String toString() -> toString
org.apache.http.impl.execchain.ResponseEntityProxy -> org.apache.http.impl.execchain.ResponseEntityProxy:
    org.apache.http.impl.execchain.ConnectionHolder connHolder -> connHolder
    void enchance(org.apache.http.HttpResponse,org.apache.http.impl.execchain.ConnectionHolder) -> enchance
    void cleanup() -> cleanup
    void releaseConnection() -> releaseConnection
    boolean isRepeatable() -> isRepeatable
    java.io.InputStream getContent() -> getContent
    void consumeContent() -> consumeContent
    void writeTo(java.io.OutputStream) -> writeTo
    boolean eofDetected(java.io.InputStream) -> eofDetected
    boolean streamClosed(java.io.InputStream) -> streamClosed
    boolean streamAbort(java.io.InputStream) -> streamAbort
    java.lang.String toString() -> toString
org.apache.http.impl.execchain.RetryExec -> org.apache.http.impl.execchain.RetryExec:
    org.apache.commons.logging.Log log -> log
    org.apache.http.impl.execchain.ClientExecChain requestExecutor -> requestExecutor
    org.apache.http.client.HttpRequestRetryHandler retryHandler -> retryHandler
    org.apache.http.client.methods.CloseableHttpResponse execute(org.apache.http.conn.routing.HttpRoute,org.apache.http.client.methods.HttpRequestWrapper,org.apache.http.client.protocol.HttpClientContext,org.apache.http.client.methods.HttpExecutionAware) -> execute
org.apache.http.impl.execchain.ServiceUnavailableRetryExec -> org.apache.http.impl.execchain.ServiceUnavailableRetryExec:
    org.apache.commons.logging.Log log -> log
    org.apache.http.impl.execchain.ClientExecChain requestExecutor -> requestExecutor
    org.apache.http.client.ServiceUnavailableRetryStrategy retryStrategy -> retryStrategy
    org.apache.http.client.methods.CloseableHttpResponse execute(org.apache.http.conn.routing.HttpRoute,org.apache.http.client.methods.HttpRequestWrapper,org.apache.http.client.protocol.HttpClientContext,org.apache.http.client.methods.HttpExecutionAware) -> execute
org.apache.http.impl.execchain.TunnelRefusedException -> org.apache.http.impl.execchain.TunnelRefusedException:
    long serialVersionUID -> serialVersionUID
    org.apache.http.HttpResponse response -> response
    org.apache.http.HttpResponse getResponse() -> getResponse
org.apache.http.impl.io.AbstractMessageParser -> org.apache.http.impl.io.AbstractMessageParser:
    int HEAD_LINE -> HEAD_LINE
    int HEADERS -> HEADERS
    org.apache.http.io.SessionInputBuffer sessionBuffer -> sessionBuffer
    org.apache.http.config.MessageConstraints messageConstraints -> messageConstraints
    java.util.List headerLines -> headerLines
    org.apache.http.message.LineParser lineParser -> lineParser
    int state -> state
    org.apache.http.HttpMessage message -> message
    org.apache.http.Header[] parseHeaders(org.apache.http.io.SessionInputBuffer,int,int,org.apache.http.message.LineParser) -> parseHeaders
    org.apache.http.Header[] parseHeaders(org.apache.http.io.SessionInputBuffer,int,int,org.apache.http.message.LineParser,java.util.List) -> parseHeaders
    org.apache.http.HttpMessage parseHead(org.apache.http.io.SessionInputBuffer) -> parseHead
    org.apache.http.HttpMessage parse() -> parse
org.apache.http.impl.io.AbstractMessageWriter -> org.apache.http.impl.io.AbstractMessageWriter:
    org.apache.http.io.SessionOutputBuffer sessionBuffer -> sessionBuffer
    org.apache.http.util.CharArrayBuffer lineBuf -> lineBuf
    org.apache.http.message.LineFormatter lineFormatter -> lineFormatter
    void writeHeadLine(org.apache.http.HttpMessage) -> writeHeadLine
    void write(org.apache.http.HttpMessage) -> write
org.apache.http.impl.io.AbstractSessionInputBuffer -> org.apache.http.impl.io.AbstractSessionInputBuffer:
    java.io.InputStream instream -> instream
    byte[] buffer -> buffer
    org.apache.http.util.ByteArrayBuffer linebuffer -> linebuffer
    java.nio.charset.Charset charset -> charset
    boolean ascii -> ascii
    int maxLineLen -> maxLineLen
    int minChunkLimit -> minChunkLimit
    org.apache.http.impl.io.HttpTransportMetricsImpl metrics -> metrics
    java.nio.charset.CodingErrorAction onMalformedCharAction -> onMalformedCharAction
    java.nio.charset.CodingErrorAction onUnmappableCharAction -> onUnmappableCharAction
    int bufferpos -> bufferpos
    int bufferlen -> bufferlen
    java.nio.charset.CharsetDecoder decoder -> decoder
    java.nio.CharBuffer cbuf -> cbuf
    void init(java.io.InputStream,int,org.apache.http.params.HttpParams) -> init
    org.apache.http.impl.io.HttpTransportMetricsImpl createTransportMetrics() -> createTransportMetrics
    int capacity() -> capacity
    int length() -> length
    int available() -> available
    int fillBuffer() -> fillBuffer
    boolean hasBufferedData() -> hasBufferedData
    int read() -> read
    int read(byte[],int,int) -> read
    int read(byte[]) -> read
    int locateLF() -> locateLF
    int readLine(org.apache.http.util.CharArrayBuffer) -> readLine
    int lineFromLineBuffer(org.apache.http.util.CharArrayBuffer) -> lineFromLineBuffer
    int lineFromReadBuffer(org.apache.http.util.CharArrayBuffer,int) -> lineFromReadBuffer
    int appendDecoded(org.apache.http.util.CharArrayBuffer,java.nio.ByteBuffer) -> appendDecoded
    int handleDecodingResult(java.nio.charset.CoderResult,org.apache.http.util.CharArrayBuffer,java.nio.ByteBuffer) -> handleDecodingResult
    java.lang.String readLine() -> readLine
    org.apache.http.io.HttpTransportMetrics getMetrics() -> getMetrics
org.apache.http.impl.io.AbstractSessionOutputBuffer -> org.apache.http.impl.io.AbstractSessionOutputBuffer:
    byte[] CRLF -> CRLF
    java.io.OutputStream outstream -> outstream
    org.apache.http.util.ByteArrayBuffer buffer -> buffer
    java.nio.charset.Charset charset -> charset
    boolean ascii -> ascii
    int minChunkLimit -> minChunkLimit
    org.apache.http.impl.io.HttpTransportMetricsImpl metrics -> metrics
    java.nio.charset.CodingErrorAction onMalformedCharAction -> onMalformedCharAction
    java.nio.charset.CodingErrorAction onUnmappableCharAction -> onUnmappableCharAction
    java.nio.charset.CharsetEncoder encoder -> encoder
    java.nio.ByteBuffer bbuf -> bbuf
    void init(java.io.OutputStream,int,org.apache.http.params.HttpParams) -> init
    org.apache.http.impl.io.HttpTransportMetricsImpl createTransportMetrics() -> createTransportMetrics
    int capacity() -> capacity
    int length() -> length
    int available() -> available
    void flushBuffer() -> flushBuffer
    void flush() -> flush
    void write(byte[],int,int) -> write
    void write(byte[]) -> write
    void write(int) -> write
    void writeLine(java.lang.String) -> writeLine
    void writeLine(org.apache.http.util.CharArrayBuffer) -> writeLine
    void writeEncoded(java.nio.CharBuffer) -> writeEncoded
    void handleEncodingResult(java.nio.charset.CoderResult) -> handleEncodingResult
    org.apache.http.io.HttpTransportMetrics getMetrics() -> getMetrics
org.apache.http.impl.io.ChunkedInputStream -> org.apache.http.impl.io.ChunkedInputStream:
    int CHUNK_LEN -> CHUNK_LEN
    int CHUNK_DATA -> CHUNK_DATA
    int CHUNK_CRLF -> CHUNK_CRLF
    int BUFFER_SIZE -> BUFFER_SIZE
    org.apache.http.io.SessionInputBuffer in -> in
    org.apache.http.util.CharArrayBuffer buffer -> buffer
    int state -> state
    int chunkSize -> chunkSize
    int pos -> pos
    boolean eof -> eof
    boolean closed -> closed
    org.apache.http.Header[] footers -> footers
    int available() -> available
    int read() -> read
    int read(byte[],int,int) -> read
    int read(byte[]) -> read
    void nextChunk() -> nextChunk
    int getChunkSize() -> getChunkSize
    void parseTrailerHeaders() -> parseTrailerHeaders
    void close() -> close
    org.apache.http.Header[] getFooters() -> getFooters
org.apache.http.impl.io.ChunkedOutputStream -> org.apache.http.impl.io.ChunkedOutputStream:
    org.apache.http.io.SessionOutputBuffer out -> out
    byte[] cache -> cache
    int cachePosition -> cachePosition
    boolean wroteLastChunk -> wroteLastChunk
    boolean closed -> closed
    void flushCache() -> flushCache
    void flushCacheWithAppend(byte[],int,int) -> flushCacheWithAppend
    void writeClosingChunk() -> writeClosingChunk
    void finish() -> finish
    void write(int) -> write
    void write(byte[]) -> write
    void write(byte[],int,int) -> write
    void flush() -> flush
    void close() -> close
org.apache.http.impl.io.ContentLengthInputStream -> org.apache.http.impl.io.ContentLengthInputStream:
    int BUFFER_SIZE -> BUFFER_SIZE
    long contentLength -> contentLength
    long pos -> pos
    boolean closed -> closed
    org.apache.http.io.SessionInputBuffer in -> in
    void close() -> close
    int available() -> available
    int read() -> read
    int read(byte[],int,int) -> read
    int read(byte[]) -> read
    long skip(long) -> skip
org.apache.http.impl.io.ContentLengthOutputStream -> org.apache.http.impl.io.ContentLengthOutputStream:
    org.apache.http.io.SessionOutputBuffer out -> out
    long contentLength -> contentLength
    long total -> total
    boolean closed -> closed
    void close() -> close
    void flush() -> flush
    void write(byte[],int,int) -> write
    void write(byte[]) -> write
    void write(int) -> write
org.apache.http.impl.io.DefaultHttpRequestParser -> org.apache.http.impl.io.DefaultHttpRequestParser:
    org.apache.http.HttpRequestFactory requestFactory -> requestFactory
    org.apache.http.util.CharArrayBuffer lineBuf -> lineBuf
    org.apache.http.HttpRequest parseHead(org.apache.http.io.SessionInputBuffer) -> parseHead
    org.apache.http.HttpMessage parseHead(org.apache.http.io.SessionInputBuffer) -> parseHead
org.apache.http.impl.io.DefaultHttpRequestParserFactory -> org.apache.http.impl.io.DefaultHttpRequestParserFactory:
    org.apache.http.impl.io.DefaultHttpRequestParserFactory INSTANCE -> INSTANCE
    org.apache.http.message.LineParser lineParser -> lineParser
    org.apache.http.HttpRequestFactory requestFactory -> requestFactory
    org.apache.http.io.HttpMessageParser create(org.apache.http.io.SessionInputBuffer,org.apache.http.config.MessageConstraints) -> create
org.apache.http.impl.io.DefaultHttpRequestWriter -> org.apache.http.impl.io.DefaultHttpRequestWriter:
    void writeHeadLine(org.apache.http.HttpRequest) -> writeHeadLine
    void writeHeadLine(org.apache.http.HttpMessage) -> writeHeadLine
org.apache.http.impl.io.DefaultHttpRequestWriterFactory -> org.apache.http.impl.io.DefaultHttpRequestWriterFactory:
    org.apache.http.impl.io.DefaultHttpRequestWriterFactory INSTANCE -> INSTANCE
    org.apache.http.message.LineFormatter lineFormatter -> lineFormatter
    org.apache.http.io.HttpMessageWriter create(org.apache.http.io.SessionOutputBuffer) -> create
org.apache.http.impl.io.DefaultHttpResponseParser -> org.apache.http.impl.io.DefaultHttpResponseParser:
    org.apache.http.HttpResponseFactory responseFactory -> responseFactory
    org.apache.http.util.CharArrayBuffer lineBuf -> lineBuf
    org.apache.http.HttpResponse parseHead(org.apache.http.io.SessionInputBuffer) -> parseHead
    org.apache.http.HttpMessage parseHead(org.apache.http.io.SessionInputBuffer) -> parseHead
org.apache.http.impl.io.DefaultHttpResponseParserFactory -> org.apache.http.impl.io.DefaultHttpResponseParserFactory:
    org.apache.http.impl.io.DefaultHttpResponseParserFactory INSTANCE -> INSTANCE
    org.apache.http.message.LineParser lineParser -> lineParser
    org.apache.http.HttpResponseFactory responseFactory -> responseFactory
    org.apache.http.io.HttpMessageParser create(org.apache.http.io.SessionInputBuffer,org.apache.http.config.MessageConstraints) -> create
org.apache.http.impl.io.DefaultHttpResponseWriter -> org.apache.http.impl.io.DefaultHttpResponseWriter:
    void writeHeadLine(org.apache.http.HttpResponse) -> writeHeadLine
    void writeHeadLine(org.apache.http.HttpMessage) -> writeHeadLine
org.apache.http.impl.io.DefaultHttpResponseWriterFactory -> org.apache.http.impl.io.DefaultHttpResponseWriterFactory:
    org.apache.http.impl.io.DefaultHttpResponseWriterFactory INSTANCE -> INSTANCE
    org.apache.http.message.LineFormatter lineFormatter -> lineFormatter
    org.apache.http.io.HttpMessageWriter create(org.apache.http.io.SessionOutputBuffer) -> create
org.apache.http.impl.io.HttpRequestParser -> org.apache.http.impl.io.HttpRequestParser:
    org.apache.http.HttpRequestFactory requestFactory -> requestFactory
    org.apache.http.util.CharArrayBuffer lineBuf -> lineBuf
    org.apache.http.HttpMessage parseHead(org.apache.http.io.SessionInputBuffer) -> parseHead
org.apache.http.impl.io.HttpRequestWriter -> org.apache.http.impl.io.HttpRequestWriter:
    void writeHeadLine(org.apache.http.HttpRequest) -> writeHeadLine
    void writeHeadLine(org.apache.http.HttpMessage) -> writeHeadLine
org.apache.http.impl.io.HttpResponseParser -> org.apache.http.impl.io.HttpResponseParser:
    org.apache.http.HttpResponseFactory responseFactory -> responseFactory
    org.apache.http.util.CharArrayBuffer lineBuf -> lineBuf
    org.apache.http.HttpMessage parseHead(org.apache.http.io.SessionInputBuffer) -> parseHead
org.apache.http.impl.io.HttpResponseWriter -> org.apache.http.impl.io.HttpResponseWriter:
    void writeHeadLine(org.apache.http.HttpResponse) -> writeHeadLine
    void writeHeadLine(org.apache.http.HttpMessage) -> writeHeadLine
org.apache.http.impl.io.HttpTransportMetricsImpl -> org.apache.http.impl.io.HttpTransportMetricsImpl:
    long bytesTransferred -> bytesTransferred
    long getBytesTransferred() -> getBytesTransferred
    void setBytesTransferred(long) -> setBytesTransferred
    void incrementBytesTransferred(long) -> incrementBytesTransferred
    void reset() -> reset
org.apache.http.impl.io.IdentityInputStream -> org.apache.http.impl.io.IdentityInputStream:
    org.apache.http.io.SessionInputBuffer in -> in
    boolean closed -> closed
    int available() -> available
    void close() -> close
    int read() -> read
    int read(byte[],int,int) -> read
org.apache.http.impl.io.IdentityOutputStream -> org.apache.http.impl.io.IdentityOutputStream:
    org.apache.http.io.SessionOutputBuffer out -> out
    boolean closed -> closed
    void close() -> close
    void flush() -> flush
    void write(byte[],int,int) -> write
    void write(byte[]) -> write
    void write(int) -> write
org.apache.http.impl.io.SessionInputBufferImpl -> org.apache.http.impl.io.SessionInputBufferImpl:
    org.apache.http.impl.io.HttpTransportMetricsImpl metrics -> metrics
    byte[] buffer -> buffer
    org.apache.http.util.ByteArrayBuffer linebuffer -> linebuffer
    int minChunkLimit -> minChunkLimit
    org.apache.http.config.MessageConstraints constraints -> constraints
    java.nio.charset.CharsetDecoder decoder -> decoder
    java.io.InputStream instream -> instream
    int bufferpos -> bufferpos
    int bufferlen -> bufferlen
    java.nio.CharBuffer cbuf -> cbuf
    void bind(java.io.InputStream) -> bind
    boolean isBound() -> isBound
    int capacity() -> capacity
    int length() -> length
    int available() -> available
    int streamRead(byte[],int,int) -> streamRead
    int fillBuffer() -> fillBuffer
    boolean hasBufferedData() -> hasBufferedData
    void clear() -> clear
    int read() -> read
    int read(byte[],int,int) -> read
    int read(byte[]) -> read
    int locateLF() -> locateLF
    int readLine(org.apache.http.util.CharArrayBuffer) -> readLine
    int lineFromLineBuffer(org.apache.http.util.CharArrayBuffer) -> lineFromLineBuffer
    int lineFromReadBuffer(org.apache.http.util.CharArrayBuffer,int) -> lineFromReadBuffer
    int appendDecoded(org.apache.http.util.CharArrayBuffer,java.nio.ByteBuffer) -> appendDecoded
    int handleDecodingResult(java.nio.charset.CoderResult,org.apache.http.util.CharArrayBuffer,java.nio.ByteBuffer) -> handleDecodingResult
    java.lang.String readLine() -> readLine
    boolean isDataAvailable(int) -> isDataAvailable
    org.apache.http.io.HttpTransportMetrics getMetrics() -> getMetrics
org.apache.http.impl.io.SessionOutputBufferImpl -> org.apache.http.impl.io.SessionOutputBufferImpl:
    byte[] CRLF -> CRLF
    org.apache.http.impl.io.HttpTransportMetricsImpl metrics -> metrics
    org.apache.http.util.ByteArrayBuffer buffer -> buffer
    int fragementSizeHint -> fragementSizeHint
    java.nio.charset.CharsetEncoder encoder -> encoder
    java.io.OutputStream outstream -> outstream
    java.nio.ByteBuffer bbuf -> bbuf
    void bind(java.io.OutputStream) -> bind
    boolean isBound() -> isBound
    int capacity() -> capacity
    int length() -> length
    int available() -> available
    void streamWrite(byte[],int,int) -> streamWrite
    void flushStream() -> flushStream
    void flushBuffer() -> flushBuffer
    void flush() -> flush
    void write(byte[],int,int) -> write
    void write(byte[]) -> write
    void write(int) -> write
    void writeLine(java.lang.String) -> writeLine
    void writeLine(org.apache.http.util.CharArrayBuffer) -> writeLine
    void writeEncoded(java.nio.CharBuffer) -> writeEncoded
    void handleEncodingResult(java.nio.charset.CoderResult) -> handleEncodingResult
    org.apache.http.io.HttpTransportMetrics getMetrics() -> getMetrics
org.apache.http.impl.io.SocketInputBuffer -> org.apache.http.impl.io.SocketInputBuffer:
    java.net.Socket socket -> socket
    boolean eof -> eof
    int fillBuffer() -> fillBuffer
    boolean isDataAvailable(int) -> isDataAvailable
    boolean isEof() -> isEof
org.apache.http.impl.io.SocketOutputBuffer -> org.apache.http.impl.io.SocketOutputBuffer:
org.apache.http.impl.pool.BasicConnFactory -> org.apache.http.impl.pool.BasicConnFactory:
    javax.net.SocketFactory plainfactory -> plainfactory
    javax.net.ssl.SSLSocketFactory sslfactory -> sslfactory
    int connectTimeout -> connectTimeout
    org.apache.http.config.SocketConfig sconfig -> sconfig
    org.apache.http.HttpConnectionFactory connFactory -> connFactory
    org.apache.http.HttpClientConnection create(java.net.Socket,org.apache.http.params.HttpParams) -> create
    org.apache.http.HttpClientConnection create(org.apache.http.HttpHost) -> create
    java.lang.Object create(java.lang.Object) -> create
org.apache.http.impl.pool.BasicConnPool -> org.apache.http.impl.pool.BasicConnPool:
    java.util.concurrent.atomic.AtomicLong COUNTER -> COUNTER
    org.apache.http.impl.pool.BasicPoolEntry createEntry(org.apache.http.HttpHost,org.apache.http.HttpClientConnection) -> createEntry
    org.apache.http.pool.PoolEntry createEntry(java.lang.Object,java.lang.Object) -> createEntry
org.apache.http.impl.pool.BasicPoolEntry -> org.apache.http.impl.pool.BasicPoolEntry:
    void close() -> close
    boolean isClosed() -> isClosed
org.apache.http.io.BufferInfo -> org.apache.http.io.BufferInfo:
    int length() -> length
    int capacity() -> capacity
    int available() -> available
org.apache.http.io.EofSensor -> org.apache.http.io.EofSensor:
    boolean isEof() -> isEof
org.apache.http.io.HttpMessageParser -> org.apache.http.io.HttpMessageParser:
    org.apache.http.HttpMessage parse() -> parse
org.apache.http.io.HttpMessageParserFactory -> org.apache.http.io.HttpMessageParserFactory:
    org.apache.http.io.HttpMessageParser create(org.apache.http.io.SessionInputBuffer,org.apache.http.config.MessageConstraints) -> create
org.apache.http.io.HttpMessageWriter -> org.apache.http.io.HttpMessageWriter:
    void write(org.apache.http.HttpMessage) -> write
org.apache.http.io.HttpMessageWriterFactory -> org.apache.http.io.HttpMessageWriterFactory:
    org.apache.http.io.HttpMessageWriter create(org.apache.http.io.SessionOutputBuffer) -> create
org.apache.http.io.HttpTransportMetrics -> org.apache.http.io.HttpTransportMetrics:
    long getBytesTransferred() -> getBytesTransferred
    void reset() -> reset
org.apache.http.io.SessionInputBuffer -> org.apache.http.io.SessionInputBuffer:
    int read(byte[],int,int) -> read
    int read(byte[]) -> read
    int read() -> read
    int readLine(org.apache.http.util.CharArrayBuffer) -> readLine
    java.lang.String readLine() -> readLine
    boolean isDataAvailable(int) -> isDataAvailable
    org.apache.http.io.HttpTransportMetrics getMetrics() -> getMetrics
org.apache.http.io.SessionOutputBuffer -> org.apache.http.io.SessionOutputBuffer:
    void write(byte[],int,int) -> write
    void write(byte[]) -> write
    void write(int) -> write
    void writeLine(java.lang.String) -> writeLine
    void writeLine(org.apache.http.util.CharArrayBuffer) -> writeLine
    void flush() -> flush
    org.apache.http.io.HttpTransportMetrics getMetrics() -> getMetrics
org.apache.http.message.AbstractHttpMessage -> org.apache.http.message.AbstractHttpMessage:
    org.apache.http.message.HeaderGroup headergroup -> headergroup
    org.apache.http.params.HttpParams params -> params
    boolean containsHeader(java.lang.String) -> containsHeader
    org.apache.http.Header[] getHeaders(java.lang.String) -> getHeaders
    org.apache.http.Header getFirstHeader(java.lang.String) -> getFirstHeader
    org.apache.http.Header getLastHeader(java.lang.String) -> getLastHeader
    org.apache.http.Header[] getAllHeaders() -> getAllHeaders
    void addHeader(org.apache.http.Header) -> addHeader
    void addHeader(java.lang.String,java.lang.String) -> addHeader
    void setHeader(org.apache.http.Header) -> setHeader
    void setHeader(java.lang.String,java.lang.String) -> setHeader
    void setHeaders(org.apache.http.Header[]) -> setHeaders
    void removeHeader(org.apache.http.Header) -> removeHeader
    void removeHeaders(java.lang.String) -> removeHeaders
    org.apache.http.HeaderIterator headerIterator() -> headerIterator
    org.apache.http.HeaderIterator headerIterator(java.lang.String) -> headerIterator
    org.apache.http.params.HttpParams getParams() -> getParams
    void setParams(org.apache.http.params.HttpParams) -> setParams
org.apache.http.message.BasicHeader -> org.apache.http.message.BasicHeader:
    long serialVersionUID -> serialVersionUID
    java.lang.String name -> name
    java.lang.String value -> value
    java.lang.String getName() -> getName
    java.lang.String getValue() -> getValue
    java.lang.String toString() -> toString
    org.apache.http.HeaderElement[] getElements() -> getElements
    java.lang.Object clone() -> clone
org.apache.http.message.BasicHeaderElement -> org.apache.http.message.BasicHeaderElement:
    java.lang.String name -> name
    java.lang.String value -> value
    org.apache.http.NameValuePair[] parameters -> parameters
    java.lang.String getName() -> getName
    java.lang.String getValue() -> getValue
    org.apache.http.NameValuePair[] getParameters() -> getParameters
    int getParameterCount() -> getParameterCount
    org.apache.http.NameValuePair getParameter(int) -> getParameter
    org.apache.http.NameValuePair getParameterByName(java.lang.String) -> getParameterByName
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    java.lang.Object clone() -> clone
org.apache.http.message.BasicHeaderElementIterator -> org.apache.http.message.BasicHeaderElementIterator:
    org.apache.http.HeaderIterator headerIt -> headerIt
    org.apache.http.message.HeaderValueParser parser -> parser
    org.apache.http.HeaderElement currentElement -> currentElement
    org.apache.http.util.CharArrayBuffer buffer -> buffer
    org.apache.http.message.ParserCursor cursor -> cursor
    void bufferHeaderValue() -> bufferHeaderValue
    void parseNextElement() -> parseNextElement
    boolean hasNext() -> hasNext
    org.apache.http.HeaderElement nextElement() -> nextElement
    java.lang.Object next() -> next
    void remove() -> remove
org.apache.http.message.BasicHeaderIterator -> org.apache.http.message.BasicHeaderIterator:
    org.apache.http.Header[] allHeaders -> allHeaders
    int currentIndex -> currentIndex
    java.lang.String headerName -> headerName
    int findNext(int) -> findNext
    boolean filterHeader(int) -> filterHeader
    boolean hasNext() -> hasNext
    org.apache.http.Header nextHeader() -> nextHeader
    java.lang.Object next() -> next
    void remove() -> remove
org.apache.http.message.BasicHeaderValueFormatter -> org.apache.http.message.BasicHeaderValueFormatter:
    org.apache.http.message.BasicHeaderValueFormatter DEFAULT -> DEFAULT
    org.apache.http.message.BasicHeaderValueFormatter INSTANCE -> INSTANCE
    java.lang.String SEPARATORS -> SEPARATORS
    java.lang.String UNSAFE_CHARS -> UNSAFE_CHARS
    java.lang.String formatElements(org.apache.http.HeaderElement[],boolean,org.apache.http.message.HeaderValueFormatter) -> formatElements
    org.apache.http.util.CharArrayBuffer formatElements(org.apache.http.util.CharArrayBuffer,org.apache.http.HeaderElement[],boolean) -> formatElements
    int estimateElementsLen(org.apache.http.HeaderElement[]) -> estimateElementsLen
    java.lang.String formatHeaderElement(org.apache.http.HeaderElement,boolean,org.apache.http.message.HeaderValueFormatter) -> formatHeaderElement
    org.apache.http.util.CharArrayBuffer formatHeaderElement(org.apache.http.util.CharArrayBuffer,org.apache.http.HeaderElement,boolean) -> formatHeaderElement
    int estimateHeaderElementLen(org.apache.http.HeaderElement) -> estimateHeaderElementLen
    java.lang.String formatParameters(org.apache.http.NameValuePair[],boolean,org.apache.http.message.HeaderValueFormatter) -> formatParameters
    org.apache.http.util.CharArrayBuffer formatParameters(org.apache.http.util.CharArrayBuffer,org.apache.http.NameValuePair[],boolean) -> formatParameters
    int estimateParametersLen(org.apache.http.NameValuePair[]) -> estimateParametersLen
    java.lang.String formatNameValuePair(org.apache.http.NameValuePair,boolean,org.apache.http.message.HeaderValueFormatter) -> formatNameValuePair
    org.apache.http.util.CharArrayBuffer formatNameValuePair(org.apache.http.util.CharArrayBuffer,org.apache.http.NameValuePair,boolean) -> formatNameValuePair
    int estimateNameValuePairLen(org.apache.http.NameValuePair) -> estimateNameValuePairLen
    void doFormatValue(org.apache.http.util.CharArrayBuffer,java.lang.String,boolean) -> doFormatValue
    boolean isSeparator(char) -> isSeparator
    boolean isUnsafe(char) -> isUnsafe
org.apache.http.message.BasicHeaderValueParser -> org.apache.http.message.BasicHeaderValueParser:
    org.apache.http.message.BasicHeaderValueParser DEFAULT -> DEFAULT
    org.apache.http.message.BasicHeaderValueParser INSTANCE -> INSTANCE
    char PARAM_DELIMITER -> PARAM_DELIMITER
    char ELEM_DELIMITER -> ELEM_DELIMITER
    char[] ALL_DELIMITERS -> ALL_DELIMITERS
    org.apache.http.HeaderElement[] parseElements(java.lang.String,org.apache.http.message.HeaderValueParser) -> parseElements
    org.apache.http.HeaderElement[] parseElements(org.apache.http.util.CharArrayBuffer,org.apache.http.message.ParserCursor) -> parseElements
    org.apache.http.HeaderElement parseHeaderElement(java.lang.String,org.apache.http.message.HeaderValueParser) -> parseHeaderElement
    org.apache.http.HeaderElement parseHeaderElement(org.apache.http.util.CharArrayBuffer,org.apache.http.message.ParserCursor) -> parseHeaderElement
    org.apache.http.HeaderElement createHeaderElement(java.lang.String,java.lang.String,org.apache.http.NameValuePair[]) -> createHeaderElement
    org.apache.http.NameValuePair[] parseParameters(java.lang.String,org.apache.http.message.HeaderValueParser) -> parseParameters
    org.apache.http.NameValuePair[] parseParameters(org.apache.http.util.CharArrayBuffer,org.apache.http.message.ParserCursor) -> parseParameters
    org.apache.http.NameValuePair parseNameValuePair(java.lang.String,org.apache.http.message.HeaderValueParser) -> parseNameValuePair
    org.apache.http.NameValuePair parseNameValuePair(org.apache.http.util.CharArrayBuffer,org.apache.http.message.ParserCursor) -> parseNameValuePair
    boolean isOneOf(char,char[]) -> isOneOf
    org.apache.http.NameValuePair parseNameValuePair(org.apache.http.util.CharArrayBuffer,org.apache.http.message.ParserCursor,char[]) -> parseNameValuePair
    org.apache.http.NameValuePair createNameValuePair(java.lang.String,java.lang.String) -> createNameValuePair
org.apache.http.message.BasicHttpEntityEnclosingRequest -> org.apache.http.message.BasicHttpEntityEnclosingRequest:
    org.apache.http.HttpEntity entity -> entity
    org.apache.http.HttpEntity getEntity() -> getEntity
    void setEntity(org.apache.http.HttpEntity) -> setEntity
    boolean expectContinue() -> expectContinue
org.apache.http.message.BasicHttpRequest -> org.apache.http.message.BasicHttpRequest:
    java.lang.String method -> method
    java.lang.String uri -> uri
    org.apache.http.RequestLine requestline -> requestline
    org.apache.http.ProtocolVersion getProtocolVersion() -> getProtocolVersion
    org.apache.http.RequestLine getRequestLine() -> getRequestLine
    java.lang.String toString() -> toString
org.apache.http.message.BasicHttpResponse -> org.apache.http.message.BasicHttpResponse:
    org.apache.http.StatusLine statusline -> statusline
    org.apache.http.ProtocolVersion ver -> ver
    int code -> code
    java.lang.String reasonPhrase -> reasonPhrase
    org.apache.http.HttpEntity entity -> entity
    org.apache.http.ReasonPhraseCatalog reasonCatalog -> reasonCatalog
    java.util.Locale locale -> locale
    org.apache.http.ProtocolVersion getProtocolVersion() -> getProtocolVersion
    org.apache.http.StatusLine getStatusLine() -> getStatusLine
    org.apache.http.HttpEntity getEntity() -> getEntity
    java.util.Locale getLocale() -> getLocale
    void setStatusLine(org.apache.http.StatusLine) -> setStatusLine
    void setStatusLine(org.apache.http.ProtocolVersion,int) -> setStatusLine
    void setStatusLine(org.apache.http.ProtocolVersion,int,java.lang.String) -> setStatusLine
    void setStatusCode(int) -> setStatusCode
    void setReasonPhrase(java.lang.String) -> setReasonPhrase
    void setEntity(org.apache.http.HttpEntity) -> setEntity
    void setLocale(java.util.Locale) -> setLocale
    java.lang.String getReason(int) -> getReason
    java.lang.String toString() -> toString
org.apache.http.message.BasicLineFormatter -> org.apache.http.message.BasicLineFormatter:
    org.apache.http.message.BasicLineFormatter DEFAULT -> DEFAULT
    org.apache.http.message.BasicLineFormatter INSTANCE -> INSTANCE
    org.apache.http.util.CharArrayBuffer initBuffer(org.apache.http.util.CharArrayBuffer) -> initBuffer
    java.lang.String formatProtocolVersion(org.apache.http.ProtocolVersion,org.apache.http.message.LineFormatter) -> formatProtocolVersion
    org.apache.http.util.CharArrayBuffer appendProtocolVersion(org.apache.http.util.CharArrayBuffer,org.apache.http.ProtocolVersion) -> appendProtocolVersion
    int estimateProtocolVersionLen(org.apache.http.ProtocolVersion) -> estimateProtocolVersionLen
    java.lang.String formatRequestLine(org.apache.http.RequestLine,org.apache.http.message.LineFormatter) -> formatRequestLine
    org.apache.http.util.CharArrayBuffer formatRequestLine(org.apache.http.util.CharArrayBuffer,org.apache.http.RequestLine) -> formatRequestLine
    void doFormatRequestLine(org.apache.http.util.CharArrayBuffer,org.apache.http.RequestLine) -> doFormatRequestLine
    java.lang.String formatStatusLine(org.apache.http.StatusLine,org.apache.http.message.LineFormatter) -> formatStatusLine
    org.apache.http.util.CharArrayBuffer formatStatusLine(org.apache.http.util.CharArrayBuffer,org.apache.http.StatusLine) -> formatStatusLine
    void doFormatStatusLine(org.apache.http.util.CharArrayBuffer,org.apache.http.StatusLine) -> doFormatStatusLine
    java.lang.String formatHeader(org.apache.http.Header,org.apache.http.message.LineFormatter) -> formatHeader
    org.apache.http.util.CharArrayBuffer formatHeader(org.apache.http.util.CharArrayBuffer,org.apache.http.Header) -> formatHeader
    void doFormatHeader(org.apache.http.util.CharArrayBuffer,org.apache.http.Header) -> doFormatHeader
org.apache.http.message.BasicLineParser -> org.apache.http.message.BasicLineParser:
    org.apache.http.message.BasicLineParser DEFAULT -> DEFAULT
    org.apache.http.message.BasicLineParser INSTANCE -> INSTANCE
    org.apache.http.ProtocolVersion protocol -> protocol
    org.apache.http.ProtocolVersion parseProtocolVersion(java.lang.String,org.apache.http.message.LineParser) -> parseProtocolVersion
    org.apache.http.ProtocolVersion parseProtocolVersion(org.apache.http.util.CharArrayBuffer,org.apache.http.message.ParserCursor) -> parseProtocolVersion
    org.apache.http.ProtocolVersion createProtocolVersion(int,int) -> createProtocolVersion
    boolean hasProtocolVersion(org.apache.http.util.CharArrayBuffer,org.apache.http.message.ParserCursor) -> hasProtocolVersion
    org.apache.http.RequestLine parseRequestLine(java.lang.String,org.apache.http.message.LineParser) -> parseRequestLine
    org.apache.http.RequestLine parseRequestLine(org.apache.http.util.CharArrayBuffer,org.apache.http.message.ParserCursor) -> parseRequestLine
    org.apache.http.RequestLine createRequestLine(java.lang.String,java.lang.String,org.apache.http.ProtocolVersion) -> createRequestLine
    org.apache.http.StatusLine parseStatusLine(java.lang.String,org.apache.http.message.LineParser) -> parseStatusLine
    org.apache.http.StatusLine parseStatusLine(org.apache.http.util.CharArrayBuffer,org.apache.http.message.ParserCursor) -> parseStatusLine
    org.apache.http.StatusLine createStatusLine(org.apache.http.ProtocolVersion,int,java.lang.String) -> createStatusLine
    org.apache.http.Header parseHeader(java.lang.String,org.apache.http.message.LineParser) -> parseHeader
    org.apache.http.Header parseHeader(org.apache.http.util.CharArrayBuffer) -> parseHeader
    void skipWhitespace(org.apache.http.util.CharArrayBuffer,org.apache.http.message.ParserCursor) -> skipWhitespace
org.apache.http.message.BasicListHeaderIterator -> org.apache.http.message.BasicListHeaderIterator:
    java.util.List allHeaders -> allHeaders
    int currentIndex -> currentIndex
    int lastIndex -> lastIndex
    java.lang.String headerName -> headerName
    int findNext(int) -> findNext
    boolean filterHeader(int) -> filterHeader
    boolean hasNext() -> hasNext
    org.apache.http.Header nextHeader() -> nextHeader
    java.lang.Object next() -> next
    void remove() -> remove
org.apache.http.message.BasicNameValuePair -> org.apache.http.message.BasicNameValuePair:
    long serialVersionUID -> serialVersionUID
    java.lang.String name -> name
    java.lang.String value -> value
    java.lang.String getName() -> getName
    java.lang.String getValue() -> getValue
    java.lang.String toString() -> toString
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.Object clone() -> clone
org.apache.http.message.BasicRequestLine -> org.apache.http.message.BasicRequestLine:
    long serialVersionUID -> serialVersionUID
    org.apache.http.ProtocolVersion protoversion -> protoversion
    java.lang.String method -> method
    java.lang.String uri -> uri
    java.lang.String getMethod() -> getMethod
    org.apache.http.ProtocolVersion getProtocolVersion() -> getProtocolVersion
    java.lang.String getUri() -> getUri
    java.lang.String toString() -> toString
    java.lang.Object clone() -> clone
org.apache.http.message.BasicStatusLine -> org.apache.http.message.BasicStatusLine:
    long serialVersionUID -> serialVersionUID
    org.apache.http.ProtocolVersion protoVersion -> protoVersion
    int statusCode -> statusCode
    java.lang.String reasonPhrase -> reasonPhrase
    int getStatusCode() -> getStatusCode
    org.apache.http.ProtocolVersion getProtocolVersion() -> getProtocolVersion
    java.lang.String getReasonPhrase() -> getReasonPhrase
    java.lang.String toString() -> toString
    java.lang.Object clone() -> clone
org.apache.http.message.BasicTokenIterator -> org.apache.http.message.BasicTokenIterator:
    java.lang.String HTTP_SEPARATORS -> HTTP_SEPARATORS
    org.apache.http.HeaderIterator headerIt -> headerIt
    java.lang.String currentHeader -> currentHeader
    java.lang.String currentToken -> currentToken
    int searchPos -> searchPos
    boolean hasNext() -> hasNext
    java.lang.String nextToken() -> nextToken
    java.lang.Object next() -> next
    void remove() -> remove
    int findNext(int) -> findNext
    java.lang.String createToken(java.lang.String,int,int) -> createToken
    int findTokenStart(int) -> findTokenStart
    int findTokenSeparator(int) -> findTokenSeparator
    int findTokenEnd(int) -> findTokenEnd
    boolean isTokenSeparator(char) -> isTokenSeparator
    boolean isWhitespace(char) -> isWhitespace
    boolean isTokenChar(char) -> isTokenChar
    boolean isHttpSeparator(char) -> isHttpSeparator
org.apache.http.message.BufferedHeader -> org.apache.http.message.BufferedHeader:
    long serialVersionUID -> serialVersionUID
    java.lang.String name -> name
    org.apache.http.util.CharArrayBuffer buffer -> buffer
    int valuePos -> valuePos
    java.lang.String getName() -> getName
    java.lang.String getValue() -> getValue
    org.apache.http.HeaderElement[] getElements() -> getElements
    int getValuePos() -> getValuePos
    org.apache.http.util.CharArrayBuffer getBuffer() -> getBuffer
    java.lang.String toString() -> toString
    java.lang.Object clone() -> clone
org.apache.http.message.HeaderGroup -> org.apache.http.message.HeaderGroup:
    long serialVersionUID -> serialVersionUID
    java.util.List headers -> headers
    void clear() -> clear
    void addHeader(org.apache.http.Header) -> addHeader
    void removeHeader(org.apache.http.Header) -> removeHeader
    void updateHeader(org.apache.http.Header) -> updateHeader
    void setHeaders(org.apache.http.Header[]) -> setHeaders
    org.apache.http.Header getCondensedHeader(java.lang.String) -> getCondensedHeader
    org.apache.http.Header[] getHeaders(java.lang.String) -> getHeaders
    org.apache.http.Header getFirstHeader(java.lang.String) -> getFirstHeader
    org.apache.http.Header getLastHeader(java.lang.String) -> getLastHeader
    org.apache.http.Header[] getAllHeaders() -> getAllHeaders
    boolean containsHeader(java.lang.String) -> containsHeader
    org.apache.http.HeaderIterator iterator() -> iterator
    org.apache.http.HeaderIterator iterator(java.lang.String) -> iterator
    org.apache.http.message.HeaderGroup copy() -> copy
    java.lang.Object clone() -> clone
    java.lang.String toString() -> toString
org.apache.http.message.HeaderValueFormatter -> org.apache.http.message.HeaderValueFormatter:
    org.apache.http.util.CharArrayBuffer formatElements(org.apache.http.util.CharArrayBuffer,org.apache.http.HeaderElement[],boolean) -> formatElements
    org.apache.http.util.CharArrayBuffer formatHeaderElement(org.apache.http.util.CharArrayBuffer,org.apache.http.HeaderElement,boolean) -> formatHeaderElement
    org.apache.http.util.CharArrayBuffer formatParameters(org.apache.http.util.CharArrayBuffer,org.apache.http.NameValuePair[],boolean) -> formatParameters
    org.apache.http.util.CharArrayBuffer formatNameValuePair(org.apache.http.util.CharArrayBuffer,org.apache.http.NameValuePair,boolean) -> formatNameValuePair
org.apache.http.message.HeaderValueParser -> org.apache.http.message.HeaderValueParser:
    org.apache.http.HeaderElement[] parseElements(org.apache.http.util.CharArrayBuffer,org.apache.http.message.ParserCursor) -> parseElements
    org.apache.http.HeaderElement parseHeaderElement(org.apache.http.util.CharArrayBuffer,org.apache.http.message.ParserCursor) -> parseHeaderElement
    org.apache.http.NameValuePair[] parseParameters(org.apache.http.util.CharArrayBuffer,org.apache.http.message.ParserCursor) -> parseParameters
    org.apache.http.NameValuePair parseNameValuePair(org.apache.http.util.CharArrayBuffer,org.apache.http.message.ParserCursor) -> parseNameValuePair
org.apache.http.message.LineFormatter -> org.apache.http.message.LineFormatter:
    org.apache.http.util.CharArrayBuffer appendProtocolVersion(org.apache.http.util.CharArrayBuffer,org.apache.http.ProtocolVersion) -> appendProtocolVersion
    org.apache.http.util.CharArrayBuffer formatRequestLine(org.apache.http.util.CharArrayBuffer,org.apache.http.RequestLine) -> formatRequestLine
    org.apache.http.util.CharArrayBuffer formatStatusLine(org.apache.http.util.CharArrayBuffer,org.apache.http.StatusLine) -> formatStatusLine
    org.apache.http.util.CharArrayBuffer formatHeader(org.apache.http.util.CharArrayBuffer,org.apache.http.Header) -> formatHeader
org.apache.http.message.LineParser -> org.apache.http.message.LineParser:
    org.apache.http.ProtocolVersion parseProtocolVersion(org.apache.http.util.CharArrayBuffer,org.apache.http.message.ParserCursor) -> parseProtocolVersion
    boolean hasProtocolVersion(org.apache.http.util.CharArrayBuffer,org.apache.http.message.ParserCursor) -> hasProtocolVersion
    org.apache.http.RequestLine parseRequestLine(org.apache.http.util.CharArrayBuffer,org.apache.http.message.ParserCursor) -> parseRequestLine
    org.apache.http.StatusLine parseStatusLine(org.apache.http.util.CharArrayBuffer,org.apache.http.message.ParserCursor) -> parseStatusLine
    org.apache.http.Header parseHeader(org.apache.http.util.CharArrayBuffer) -> parseHeader
org.apache.http.message.ParserCursor -> org.apache.http.message.ParserCursor:
    int lowerBound -> lowerBound
    int upperBound -> upperBound
    int pos -> pos
    int getLowerBound() -> getLowerBound
    int getUpperBound() -> getUpperBound
    int getPos() -> getPos
    void updatePos(int) -> updatePos
    boolean atEnd() -> atEnd
    java.lang.String toString() -> toString
org.apache.http.params.AbstractHttpParams -> org.apache.http.params.AbstractHttpParams:
    long getLongParameter(java.lang.String,long) -> getLongParameter
    org.apache.http.params.HttpParams setLongParameter(java.lang.String,long) -> setLongParameter
    int getIntParameter(java.lang.String,int) -> getIntParameter
    org.apache.http.params.HttpParams setIntParameter(java.lang.String,int) -> setIntParameter
    double getDoubleParameter(java.lang.String,double) -> getDoubleParameter
    org.apache.http.params.HttpParams setDoubleParameter(java.lang.String,double) -> setDoubleParameter
    boolean getBooleanParameter(java.lang.String,boolean) -> getBooleanParameter
    org.apache.http.params.HttpParams setBooleanParameter(java.lang.String,boolean) -> setBooleanParameter
    boolean isParameterTrue(java.lang.String) -> isParameterTrue
    boolean isParameterFalse(java.lang.String) -> isParameterFalse
    java.util.Set getNames() -> getNames
org.apache.http.params.BasicHttpParams -> org.apache.http.params.BasicHttpParams:
    long serialVersionUID -> serialVersionUID
    java.util.Map parameters -> parameters
    java.lang.Object getParameter(java.lang.String) -> getParameter
    org.apache.http.params.HttpParams setParameter(java.lang.String,java.lang.Object) -> setParameter
    boolean removeParameter(java.lang.String) -> removeParameter
    void setParameters(java.lang.String[],java.lang.Object) -> setParameters
    boolean isParameterSet(java.lang.String) -> isParameterSet
    boolean isParameterSetLocally(java.lang.String) -> isParameterSetLocally
    void clear() -> clear
    org.apache.http.params.HttpParams copy() -> copy
    java.lang.Object clone() -> clone
    void copyParams(org.apache.http.params.HttpParams) -> copyParams
    java.util.Set getNames() -> getNames
org.apache.http.params.CoreConnectionPNames -> org.apache.http.params.CoreConnectionPNames:
    java.lang.String SO_TIMEOUT -> SO_TIMEOUT
    java.lang.String TCP_NODELAY -> TCP_NODELAY
    java.lang.String SOCKET_BUFFER_SIZE -> SOCKET_BUFFER_SIZE
    java.lang.String SO_LINGER -> SO_LINGER
    java.lang.String SO_REUSEADDR -> SO_REUSEADDR
    java.lang.String CONNECTION_TIMEOUT -> CONNECTION_TIMEOUT
    java.lang.String STALE_CONNECTION_CHECK -> STALE_CONNECTION_CHECK
    java.lang.String MAX_LINE_LENGTH -> MAX_LINE_LENGTH
    java.lang.String MAX_HEADER_COUNT -> MAX_HEADER_COUNT
    java.lang.String MIN_CHUNK_LIMIT -> MIN_CHUNK_LIMIT
    java.lang.String SO_KEEPALIVE -> SO_KEEPALIVE
org.apache.http.params.CoreProtocolPNames -> org.apache.http.params.CoreProtocolPNames:
    java.lang.String PROTOCOL_VERSION -> PROTOCOL_VERSION
    java.lang.String HTTP_ELEMENT_CHARSET -> HTTP_ELEMENT_CHARSET
    java.lang.String HTTP_CONTENT_CHARSET -> HTTP_CONTENT_CHARSET
    java.lang.String USER_AGENT -> USER_AGENT
    java.lang.String ORIGIN_SERVER -> ORIGIN_SERVER
    java.lang.String STRICT_TRANSFER_ENCODING -> STRICT_TRANSFER_ENCODING
    java.lang.String USE_EXPECT_CONTINUE -> USE_EXPECT_CONTINUE
    java.lang.String WAIT_FOR_CONTINUE -> WAIT_FOR_CONTINUE
    java.lang.String HTTP_MALFORMED_INPUT_ACTION -> HTTP_MALFORMED_INPUT_ACTION
    java.lang.String HTTP_UNMAPPABLE_INPUT_ACTION -> HTTP_UNMAPPABLE_INPUT_ACTION
org.apache.http.params.DefaultedHttpParams -> org.apache.http.params.DefaultedHttpParams:
    org.apache.http.params.HttpParams local -> local
    org.apache.http.params.HttpParams defaults -> defaults
    org.apache.http.params.HttpParams copy() -> copy
    java.lang.Object getParameter(java.lang.String) -> getParameter
    boolean removeParameter(java.lang.String) -> removeParameter
    org.apache.http.params.HttpParams setParameter(java.lang.String,java.lang.Object) -> setParameter
    org.apache.http.params.HttpParams getDefaults() -> getDefaults
    java.util.Set getNames() -> getNames
    java.util.Set getDefaultNames() -> getDefaultNames
    java.util.Set getLocalNames() -> getLocalNames
    java.util.Set getNames(org.apache.http.params.HttpParams) -> getNames
org.apache.http.params.HttpAbstractParamBean -> org.apache.http.params.HttpAbstractParamBean:
    org.apache.http.params.HttpParams params -> params
org.apache.http.params.HttpConnectionParamBean -> org.apache.http.params.HttpConnectionParamBean:
    void setSoTimeout(int) -> setSoTimeout
    void setTcpNoDelay(boolean) -> setTcpNoDelay
    void setSocketBufferSize(int) -> setSocketBufferSize
    void setLinger(int) -> setLinger
    void setConnectionTimeout(int) -> setConnectionTimeout
    void setStaleCheckingEnabled(boolean) -> setStaleCheckingEnabled
org.apache.http.params.HttpConnectionParams -> org.apache.http.params.HttpConnectionParams:
    int getSoTimeout(org.apache.http.params.HttpParams) -> getSoTimeout
    void setSoTimeout(org.apache.http.params.HttpParams,int) -> setSoTimeout
    boolean getSoReuseaddr(org.apache.http.params.HttpParams) -> getSoReuseaddr
    void setSoReuseaddr(org.apache.http.params.HttpParams,boolean) -> setSoReuseaddr
    boolean getTcpNoDelay(org.apache.http.params.HttpParams) -> getTcpNoDelay
    void setTcpNoDelay(org.apache.http.params.HttpParams,boolean) -> setTcpNoDelay
    int getSocketBufferSize(org.apache.http.params.HttpParams) -> getSocketBufferSize
    void setSocketBufferSize(org.apache.http.params.HttpParams,int) -> setSocketBufferSize
    int getLinger(org.apache.http.params.HttpParams) -> getLinger
    void setLinger(org.apache.http.params.HttpParams,int) -> setLinger
    int getConnectionTimeout(org.apache.http.params.HttpParams) -> getConnectionTimeout
    void setConnectionTimeout(org.apache.http.params.HttpParams,int) -> setConnectionTimeout
    boolean isStaleCheckingEnabled(org.apache.http.params.HttpParams) -> isStaleCheckingEnabled
    void setStaleCheckingEnabled(org.apache.http.params.HttpParams,boolean) -> setStaleCheckingEnabled
    boolean getSoKeepalive(org.apache.http.params.HttpParams) -> getSoKeepalive
    void setSoKeepalive(org.apache.http.params.HttpParams,boolean) -> setSoKeepalive
org.apache.http.params.HttpParamConfig -> org.apache.http.params.HttpParamConfig:
    org.apache.http.config.SocketConfig getSocketConfig(org.apache.http.params.HttpParams) -> getSocketConfig
    org.apache.http.config.MessageConstraints getMessageConstraints(org.apache.http.params.HttpParams) -> getMessageConstraints
    org.apache.http.config.ConnectionConfig getConnectionConfig(org.apache.http.params.HttpParams) -> getConnectionConfig
org.apache.http.params.HttpParams -> org.apache.http.params.HttpParams:
    java.lang.Object getParameter(java.lang.String) -> getParameter
    org.apache.http.params.HttpParams setParameter(java.lang.String,java.lang.Object) -> setParameter
    org.apache.http.params.HttpParams copy() -> copy
    boolean removeParameter(java.lang.String) -> removeParameter
    long getLongParameter(java.lang.String,long) -> getLongParameter
    org.apache.http.params.HttpParams setLongParameter(java.lang.String,long) -> setLongParameter
    int getIntParameter(java.lang.String,int) -> getIntParameter
    org.apache.http.params.HttpParams setIntParameter(java.lang.String,int) -> setIntParameter
    double getDoubleParameter(java.lang.String,double) -> getDoubleParameter
    org.apache.http.params.HttpParams setDoubleParameter(java.lang.String,double) -> setDoubleParameter
    boolean getBooleanParameter(java.lang.String,boolean) -> getBooleanParameter
    org.apache.http.params.HttpParams setBooleanParameter(java.lang.String,boolean) -> setBooleanParameter
    boolean isParameterTrue(java.lang.String) -> isParameterTrue
    boolean isParameterFalse(java.lang.String) -> isParameterFalse
org.apache.http.params.HttpParamsNames -> org.apache.http.params.HttpParamsNames:
    java.util.Set getNames() -> getNames
org.apache.http.params.HttpProtocolParamBean -> org.apache.http.params.HttpProtocolParamBean:
    void setHttpElementCharset(java.lang.String) -> setHttpElementCharset
    void setContentCharset(java.lang.String) -> setContentCharset
    void setVersion(org.apache.http.HttpVersion) -> setVersion
    void setUserAgent(java.lang.String) -> setUserAgent
    void setUseExpectContinue(boolean) -> setUseExpectContinue
org.apache.http.params.HttpProtocolParams -> org.apache.http.params.HttpProtocolParams:
    java.lang.String getHttpElementCharset(org.apache.http.params.HttpParams) -> getHttpElementCharset
    void setHttpElementCharset(org.apache.http.params.HttpParams,java.lang.String) -> setHttpElementCharset
    java.lang.String getContentCharset(org.apache.http.params.HttpParams) -> getContentCharset
    void setContentCharset(org.apache.http.params.HttpParams,java.lang.String) -> setContentCharset
    org.apache.http.ProtocolVersion getVersion(org.apache.http.params.HttpParams) -> getVersion
    void setVersion(org.apache.http.params.HttpParams,org.apache.http.ProtocolVersion) -> setVersion
    java.lang.String getUserAgent(org.apache.http.params.HttpParams) -> getUserAgent
    void setUserAgent(org.apache.http.params.HttpParams,java.lang.String) -> setUserAgent
    boolean useExpectContinue(org.apache.http.params.HttpParams) -> useExpectContinue
    void setUseExpectContinue(org.apache.http.params.HttpParams,boolean) -> setUseExpectContinue
    java.nio.charset.CodingErrorAction getMalformedInputAction(org.apache.http.params.HttpParams) -> getMalformedInputAction
    void setMalformedInputAction(org.apache.http.params.HttpParams,java.nio.charset.CodingErrorAction) -> setMalformedInputAction
    java.nio.charset.CodingErrorAction getUnmappableInputAction(org.apache.http.params.HttpParams) -> getUnmappableInputAction
    void setUnmappableInputAction(org.apache.http.params.HttpParams,java.nio.charset.CodingErrorAction) -> setUnmappableInputAction
org.apache.http.params.SyncBasicHttpParams -> org.apache.http.params.SyncBasicHttpParams:
    long serialVersionUID -> serialVersionUID
    boolean removeParameter(java.lang.String) -> removeParameter
    org.apache.http.params.HttpParams setParameter(java.lang.String,java.lang.Object) -> setParameter
    java.lang.Object getParameter(java.lang.String) -> getParameter
    boolean isParameterSet(java.lang.String) -> isParameterSet
    boolean isParameterSetLocally(java.lang.String) -> isParameterSetLocally
    void setParameters(java.lang.String[],java.lang.Object) -> setParameters
    void clear() -> clear
    java.lang.Object clone() -> clone
org.apache.http.pool.AbstractConnPool -> org.apache.http.pool.AbstractConnPool:
    java.util.concurrent.locks.Lock lock -> lock
    org.apache.http.pool.ConnFactory connFactory -> connFactory
    java.util.Map routeToPool -> routeToPool
    java.util.Set leased -> leased
    java.util.LinkedList available -> available
    java.util.LinkedList pending -> pending
    java.util.Map maxPerRoute -> maxPerRoute
    boolean isShutDown -> isShutDown
    int defaultMaxPerRoute -> defaultMaxPerRoute
    int maxTotal -> maxTotal
    org.apache.http.pool.PoolEntry createEntry(java.lang.Object,java.lang.Object) -> createEntry
    void onLease(org.apache.http.pool.PoolEntry) -> onLease
    void onRelease(org.apache.http.pool.PoolEntry) -> onRelease
    boolean isShutdown() -> isShutdown
    void shutdown() -> shutdown
    org.apache.http.pool.RouteSpecificPool getPool(java.lang.Object) -> getPool
    java.util.concurrent.Future lease(java.lang.Object,java.lang.Object,org.apache.http.concurrent.FutureCallback) -> lease
    java.util.concurrent.Future lease(java.lang.Object,java.lang.Object) -> lease
    org.apache.http.pool.PoolEntry getPoolEntryBlocking(java.lang.Object,java.lang.Object,long,java.util.concurrent.TimeUnit,org.apache.http.pool.PoolEntryFuture) -> getPoolEntryBlocking
    void release(org.apache.http.pool.PoolEntry,boolean) -> release
    int getMax(java.lang.Object) -> getMax
    void setMaxTotal(int) -> setMaxTotal
    int getMaxTotal() -> getMaxTotal
    void setDefaultMaxPerRoute(int) -> setDefaultMaxPerRoute
    int getDefaultMaxPerRoute() -> getDefaultMaxPerRoute
    void setMaxPerRoute(java.lang.Object,int) -> setMaxPerRoute
    int getMaxPerRoute(java.lang.Object) -> getMaxPerRoute
    org.apache.http.pool.PoolStats getTotalStats() -> getTotalStats
    org.apache.http.pool.PoolStats getStats(java.lang.Object) -> getStats
    void enumAvailable(org.apache.http.pool.PoolEntryCallback) -> enumAvailable
    void enumLeased(org.apache.http.pool.PoolEntryCallback) -> enumLeased
    void purgePoolMap() -> purgePoolMap
    void closeIdle(long,java.util.concurrent.TimeUnit) -> closeIdle
    void closeExpired() -> closeExpired
    java.lang.String toString() -> toString
    void release(java.lang.Object,boolean) -> release
    org.apache.http.pool.PoolEntry access$000(org.apache.http.pool.AbstractConnPool,java.lang.Object,java.lang.Object,long,java.util.concurrent.TimeUnit,org.apache.http.pool.PoolEntryFuture) -> access$000
org.apache.http.pool.AbstractConnPool$1 -> org.apache.http.pool.AbstractConnPool$1:
    java.lang.Object val$route -> val$route
    org.apache.http.pool.AbstractConnPool this$0 -> this$0
    org.apache.http.pool.PoolEntry createEntry(java.lang.Object) -> createEntry
org.apache.http.pool.AbstractConnPool$2 -> org.apache.http.pool.AbstractConnPool$2:
    java.lang.Object val$route -> val$route
    java.lang.Object val$state -> val$state
    org.apache.http.pool.AbstractConnPool this$0 -> this$0
    org.apache.http.pool.PoolEntry getPoolEntry(long,java.util.concurrent.TimeUnit) -> getPoolEntry
    java.lang.Object getPoolEntry(long,java.util.concurrent.TimeUnit) -> getPoolEntry
org.apache.http.pool.AbstractConnPool$3 -> org.apache.http.pool.AbstractConnPool$3:
    long val$deadline -> val$deadline
    org.apache.http.pool.AbstractConnPool this$0 -> this$0
    void process(org.apache.http.pool.PoolEntry) -> process
org.apache.http.pool.AbstractConnPool$4 -> org.apache.http.pool.AbstractConnPool$4:
    long val$now -> val$now
    org.apache.http.pool.AbstractConnPool this$0 -> this$0
    void process(org.apache.http.pool.PoolEntry) -> process
org.apache.http.pool.ConnFactory -> org.apache.http.pool.ConnFactory:
    java.lang.Object create(java.lang.Object) -> create
org.apache.http.pool.ConnPool -> org.apache.http.pool.ConnPool:
    java.util.concurrent.Future lease(java.lang.Object,java.lang.Object,org.apache.http.concurrent.FutureCallback) -> lease
    void release(java.lang.Object,boolean) -> release
org.apache.http.pool.ConnPoolControl -> org.apache.http.pool.ConnPoolControl:
    void setMaxTotal(int) -> setMaxTotal
    int getMaxTotal() -> getMaxTotal
    void setDefaultMaxPerRoute(int) -> setDefaultMaxPerRoute
    int getDefaultMaxPerRoute() -> getDefaultMaxPerRoute
    void setMaxPerRoute(java.lang.Object,int) -> setMaxPerRoute
    int getMaxPerRoute(java.lang.Object) -> getMaxPerRoute
    org.apache.http.pool.PoolStats getTotalStats() -> getTotalStats
    org.apache.http.pool.PoolStats getStats(java.lang.Object) -> getStats
org.apache.http.pool.PoolEntry -> org.apache.http.pool.PoolEntry:
    java.lang.String id -> id
    java.lang.Object route -> route
    java.lang.Object conn -> conn
    long created -> created
    long validUnit -> validUnit
    long updated -> updated
    long expiry -> expiry
    java.lang.Object state -> state
    java.lang.String getId() -> getId
    java.lang.Object getRoute() -> getRoute
    java.lang.Object getConnection() -> getConnection
    long getCreated() -> getCreated
    long getValidUnit() -> getValidUnit
    java.lang.Object getState() -> getState
    void setState(java.lang.Object) -> setState
    long getUpdated() -> getUpdated
    long getExpiry() -> getExpiry
    void updateExpiry(long,java.util.concurrent.TimeUnit) -> updateExpiry
    boolean isExpired(long) -> isExpired
    void close() -> close
    boolean isClosed() -> isClosed
    java.lang.String toString() -> toString
org.apache.http.pool.PoolEntryCallback -> org.apache.http.pool.PoolEntryCallback:
    void process(org.apache.http.pool.PoolEntry) -> process
org.apache.http.pool.PoolEntryFuture -> org.apache.http.pool.PoolEntryFuture:
    java.util.concurrent.locks.Lock lock -> lock
    org.apache.http.concurrent.FutureCallback callback -> callback
    java.util.concurrent.locks.Condition condition -> condition
    boolean cancelled -> cancelled
    boolean completed -> completed
    java.lang.Object result -> result
    boolean cancel(boolean) -> cancel
    boolean isCancelled() -> isCancelled
    boolean isDone() -> isDone
    java.lang.Object get() -> get
    java.lang.Object get(long,java.util.concurrent.TimeUnit) -> get
    java.lang.Object getPoolEntry(long,java.util.concurrent.TimeUnit) -> getPoolEntry
    boolean await(java.util.Date) -> await
    void wakeup() -> wakeup
org.apache.http.pool.PoolStats -> org.apache.http.pool.PoolStats:
    int leased -> leased
    int pending -> pending
    int available -> available
    int max -> max
    int getLeased() -> getLeased
    int getPending() -> getPending
    int getAvailable() -> getAvailable
    int getMax() -> getMax
    java.lang.String toString() -> toString
org.apache.http.pool.RouteSpecificPool -> org.apache.http.pool.RouteSpecificPool:
    java.lang.Object route -> route
    java.util.Set leased -> leased
    java.util.LinkedList available -> available
    java.util.LinkedList pending -> pending
    org.apache.http.pool.PoolEntry createEntry(java.lang.Object) -> createEntry
    java.lang.Object getRoute() -> getRoute
    int getLeasedCount() -> getLeasedCount
    int getPendingCount() -> getPendingCount
    int getAvailableCount() -> getAvailableCount
    int getAllocatedCount() -> getAllocatedCount
    org.apache.http.pool.PoolEntry getFree(java.lang.Object) -> getFree
    org.apache.http.pool.PoolEntry getLastUsed() -> getLastUsed
    boolean remove(org.apache.http.pool.PoolEntry) -> remove
    void free(org.apache.http.pool.PoolEntry,boolean) -> free
    org.apache.http.pool.PoolEntry add(java.lang.Object) -> add
    void queue(org.apache.http.pool.PoolEntryFuture) -> queue
    org.apache.http.pool.PoolEntryFuture nextPending() -> nextPending
    void unqueue(org.apache.http.pool.PoolEntryFuture) -> unqueue
    void shutdown() -> shutdown
    java.lang.String toString() -> toString
org.apache.http.protocol.BasicHttpContext -> org.apache.http.protocol.BasicHttpContext:
    org.apache.http.protocol.HttpContext parentContext -> parentContext
    java.util.Map map -> map
    java.lang.Object getAttribute(java.lang.String) -> getAttribute
    void setAttribute(java.lang.String,java.lang.Object) -> setAttribute
    java.lang.Object removeAttribute(java.lang.String) -> removeAttribute
    void clear() -> clear
    java.lang.String toString() -> toString
org.apache.http.protocol.BasicHttpProcessor -> org.apache.http.protocol.BasicHttpProcessor:
    java.util.List requestInterceptors -> requestInterceptors
    java.util.List responseInterceptors -> responseInterceptors
    void addRequestInterceptor(org.apache.http.HttpRequestInterceptor) -> addRequestInterceptor
    void addRequestInterceptor(org.apache.http.HttpRequestInterceptor,int) -> addRequestInterceptor
    void addResponseInterceptor(org.apache.http.HttpResponseInterceptor,int) -> addResponseInterceptor
    void removeRequestInterceptorByClass(java.lang.Class) -> removeRequestInterceptorByClass
    void removeResponseInterceptorByClass(java.lang.Class) -> removeResponseInterceptorByClass
    void addInterceptor(org.apache.http.HttpRequestInterceptor) -> addInterceptor
    void addInterceptor(org.apache.http.HttpRequestInterceptor,int) -> addInterceptor
    int getRequestInterceptorCount() -> getRequestInterceptorCount
    org.apache.http.HttpRequestInterceptor getRequestInterceptor(int) -> getRequestInterceptor
    void clearRequestInterceptors() -> clearRequestInterceptors
    void addResponseInterceptor(org.apache.http.HttpResponseInterceptor) -> addResponseInterceptor
    void addInterceptor(org.apache.http.HttpResponseInterceptor) -> addInterceptor
    void addInterceptor(org.apache.http.HttpResponseInterceptor,int) -> addInterceptor
    int getResponseInterceptorCount() -> getResponseInterceptorCount
    org.apache.http.HttpResponseInterceptor getResponseInterceptor(int) -> getResponseInterceptor
    void clearResponseInterceptors() -> clearResponseInterceptors
    void setInterceptors(java.util.List) -> setInterceptors
    void clearInterceptors() -> clearInterceptors
    void process(org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext) -> process
    void process(org.apache.http.HttpResponse,org.apache.http.protocol.HttpContext) -> process
    void copyInterceptors(org.apache.http.protocol.BasicHttpProcessor) -> copyInterceptors
    org.apache.http.protocol.BasicHttpProcessor copy() -> copy
    java.lang.Object clone() -> clone
org.apache.http.protocol.ChainBuilder -> org.apache.http.protocol.ChainBuilder:
    java.util.LinkedList list -> list
    java.util.Map uniqueClasses -> uniqueClasses
    void ensureUnique(java.lang.Object) -> ensureUnique
    org.apache.http.protocol.ChainBuilder addFirst(java.lang.Object) -> addFirst
    org.apache.http.protocol.ChainBuilder addLast(java.lang.Object) -> addLast
    org.apache.http.protocol.ChainBuilder addAllFirst(java.util.Collection) -> addAllFirst
    org.apache.http.protocol.ChainBuilder addAllFirst(java.lang.Object[]) -> addAllFirst
    org.apache.http.protocol.ChainBuilder addAllLast(java.util.Collection) -> addAllLast
    org.apache.http.protocol.ChainBuilder addAllLast(java.lang.Object[]) -> addAllLast
    java.util.LinkedList build() -> build
org.apache.http.protocol.DefaultedHttpContext -> org.apache.http.protocol.DefaultedHttpContext:
    org.apache.http.protocol.HttpContext local -> local
    org.apache.http.protocol.HttpContext defaults -> defaults
    java.lang.Object getAttribute(java.lang.String) -> getAttribute
    java.lang.Object removeAttribute(java.lang.String) -> removeAttribute
    void setAttribute(java.lang.String,java.lang.Object) -> setAttribute
    org.apache.http.protocol.HttpContext getDefaults() -> getDefaults
    java.lang.String toString() -> toString
org.apache.http.protocol.ExecutionContext -> org.apache.http.protocol.ExecutionContext:
    java.lang.String HTTP_CONNECTION -> HTTP_CONNECTION
    java.lang.String HTTP_REQUEST -> HTTP_REQUEST
    java.lang.String HTTP_RESPONSE -> HTTP_RESPONSE
    java.lang.String HTTP_TARGET_HOST -> HTTP_TARGET_HOST
    java.lang.String HTTP_PROXY_HOST -> HTTP_PROXY_HOST
    java.lang.String HTTP_REQ_SENT -> HTTP_REQ_SENT
org.apache.http.protocol.HTTP -> org.apache.http.protocol.HTTP:
    int CR -> CR
    int LF -> LF
    int SP -> SP
    int HT -> HT
    java.lang.String TRANSFER_ENCODING -> TRANSFER_ENCODING
    java.lang.String CONTENT_LEN -> CONTENT_LEN
    java.lang.String CONTENT_TYPE -> CONTENT_TYPE
    java.lang.String CONTENT_ENCODING -> CONTENT_ENCODING
    java.lang.String EXPECT_DIRECTIVE -> EXPECT_DIRECTIVE
    java.lang.String CONN_DIRECTIVE -> CONN_DIRECTIVE
    java.lang.String TARGET_HOST -> TARGET_HOST
    java.lang.String USER_AGENT -> USER_AGENT
    java.lang.String DATE_HEADER -> DATE_HEADER
    java.lang.String SERVER_HEADER -> SERVER_HEADER
    java.lang.String EXPECT_CONTINUE -> EXPECT_CONTINUE
    java.lang.String CONN_CLOSE -> CONN_CLOSE
    java.lang.String CONN_KEEP_ALIVE -> CONN_KEEP_ALIVE
    java.lang.String CHUNK_CODING -> CHUNK_CODING
    java.lang.String IDENTITY_CODING -> IDENTITY_CODING
    java.nio.charset.Charset DEF_CONTENT_CHARSET -> DEF_CONTENT_CHARSET
    java.nio.charset.Charset DEF_PROTOCOL_CHARSET -> DEF_PROTOCOL_CHARSET
    java.lang.String UTF_8 -> UTF_8
    java.lang.String UTF_16 -> UTF_16
    java.lang.String US_ASCII -> US_ASCII
    java.lang.String ASCII -> ASCII
    java.lang.String ISO_8859_1 -> ISO_8859_1
    java.lang.String DEFAULT_CONTENT_CHARSET -> DEFAULT_CONTENT_CHARSET
    java.lang.String DEFAULT_PROTOCOL_CHARSET -> DEFAULT_PROTOCOL_CHARSET
    java.lang.String OCTET_STREAM_TYPE -> OCTET_STREAM_TYPE
    java.lang.String PLAIN_TEXT_TYPE -> PLAIN_TEXT_TYPE
    java.lang.String CHARSET_PARAM -> CHARSET_PARAM
    java.lang.String DEFAULT_CONTENT_TYPE -> DEFAULT_CONTENT_TYPE
    boolean isWhitespace(char) -> isWhitespace
org.apache.http.protocol.HttpContext -> org.apache.http.protocol.HttpContext:
    java.lang.String RESERVED_PREFIX -> RESERVED_PREFIX
    java.lang.Object getAttribute(java.lang.String) -> getAttribute
    void setAttribute(java.lang.String,java.lang.Object) -> setAttribute
    java.lang.Object removeAttribute(java.lang.String) -> removeAttribute
org.apache.http.protocol.HttpCoreContext -> org.apache.http.protocol.HttpCoreContext:
    java.lang.String HTTP_CONNECTION -> HTTP_CONNECTION
    java.lang.String HTTP_REQUEST -> HTTP_REQUEST
    java.lang.String HTTP_RESPONSE -> HTTP_RESPONSE
    java.lang.String HTTP_TARGET_HOST -> HTTP_TARGET_HOST
    java.lang.String HTTP_REQ_SENT -> HTTP_REQ_SENT
    org.apache.http.protocol.HttpContext context -> context
    org.apache.http.protocol.HttpCoreContext create() -> create
    org.apache.http.protocol.HttpCoreContext adapt(org.apache.http.protocol.HttpContext) -> adapt
    java.lang.Object getAttribute(java.lang.String) -> getAttribute
    void setAttribute(java.lang.String,java.lang.Object) -> setAttribute
    java.lang.Object removeAttribute(java.lang.String) -> removeAttribute
    java.lang.Object getAttribute(java.lang.String,java.lang.Class) -> getAttribute
    org.apache.http.HttpConnection getConnection(java.lang.Class) -> getConnection
    org.apache.http.HttpConnection getConnection() -> getConnection
    org.apache.http.HttpRequest getRequest() -> getRequest
    boolean isRequestSent() -> isRequestSent
    org.apache.http.HttpResponse getResponse() -> getResponse
    void setTargetHost(org.apache.http.HttpHost) -> setTargetHost
    org.apache.http.HttpHost getTargetHost() -> getTargetHost
org.apache.http.protocol.HttpDateGenerator -> org.apache.http.protocol.HttpDateGenerator:
    java.lang.String PATTERN_RFC1123 -> PATTERN_RFC1123
    java.util.TimeZone GMT -> GMT
    java.text.DateFormat dateformat -> dateformat
    long dateAsLong -> dateAsLong
    java.lang.String dateAsText -> dateAsText
    java.lang.String getCurrentDate() -> getCurrentDate
org.apache.http.protocol.HttpExpectationVerifier -> org.apache.http.protocol.HttpExpectationVerifier:
    void verify(org.apache.http.HttpRequest,org.apache.http.HttpResponse,org.apache.http.protocol.HttpContext) -> verify
org.apache.http.protocol.HttpProcessor -> org.apache.http.protocol.HttpProcessor:
org.apache.http.protocol.HttpProcessorBuilder -> org.apache.http.protocol.HttpProcessorBuilder:
    org.apache.http.protocol.ChainBuilder requestChainBuilder -> requestChainBuilder
    org.apache.http.protocol.ChainBuilder responseChainBuilder -> responseChainBuilder
    org.apache.http.protocol.HttpProcessorBuilder create() -> create
    org.apache.http.protocol.ChainBuilder getRequestChainBuilder() -> getRequestChainBuilder
    org.apache.http.protocol.ChainBuilder getResponseChainBuilder() -> getResponseChainBuilder
    org.apache.http.protocol.HttpProcessorBuilder addFirst(org.apache.http.HttpRequestInterceptor) -> addFirst
    org.apache.http.protocol.HttpProcessorBuilder addLast(org.apache.http.HttpRequestInterceptor) -> addLast
    org.apache.http.protocol.HttpProcessorBuilder add(org.apache.http.HttpRequestInterceptor) -> add
    org.apache.http.protocol.HttpProcessorBuilder addAllFirst(org.apache.http.HttpRequestInterceptor[]) -> addAllFirst
    org.apache.http.protocol.HttpProcessorBuilder addAllLast(org.apache.http.HttpRequestInterceptor[]) -> addAllLast
    org.apache.http.protocol.HttpProcessorBuilder addAll(org.apache.http.HttpRequestInterceptor[]) -> addAll
    org.apache.http.protocol.HttpProcessorBuilder addFirst(org.apache.http.HttpResponseInterceptor) -> addFirst
    org.apache.http.protocol.HttpProcessorBuilder addLast(org.apache.http.HttpResponseInterceptor) -> addLast
    org.apache.http.protocol.HttpProcessorBuilder add(org.apache.http.HttpResponseInterceptor) -> add
    org.apache.http.protocol.HttpProcessorBuilder addAllFirst(org.apache.http.HttpResponseInterceptor[]) -> addAllFirst
    org.apache.http.protocol.HttpProcessorBuilder addAllLast(org.apache.http.HttpResponseInterceptor[]) -> addAllLast
    org.apache.http.protocol.HttpProcessorBuilder addAll(org.apache.http.HttpResponseInterceptor[]) -> addAll
    org.apache.http.protocol.HttpProcessor build() -> build
org.apache.http.protocol.HttpRequestExecutor -> org.apache.http.protocol.HttpRequestExecutor:
    int DEFAULT_WAIT_FOR_CONTINUE -> DEFAULT_WAIT_FOR_CONTINUE
    int waitForContinue -> waitForContinue
    boolean canResponseHaveBody(org.apache.http.HttpRequest,org.apache.http.HttpResponse) -> canResponseHaveBody
    org.apache.http.HttpResponse execute(org.apache.http.HttpRequest,org.apache.http.HttpClientConnection,org.apache.http.protocol.HttpContext) -> execute
    void closeConnection(org.apache.http.HttpClientConnection) -> closeConnection
    void preProcess(org.apache.http.HttpRequest,org.apache.http.protocol.HttpProcessor,org.apache.http.protocol.HttpContext) -> preProcess
    org.apache.http.HttpResponse doSendRequest(org.apache.http.HttpRequest,org.apache.http.HttpClientConnection,org.apache.http.protocol.HttpContext) -> doSendRequest
    org.apache.http.HttpResponse doReceiveResponse(org.apache.http.HttpRequest,org.apache.http.HttpClientConnection,org.apache.http.protocol.HttpContext) -> doReceiveResponse
    void postProcess(org.apache.http.HttpResponse,org.apache.http.protocol.HttpProcessor,org.apache.http.protocol.HttpContext) -> postProcess
org.apache.http.protocol.HttpRequestHandler -> org.apache.http.protocol.HttpRequestHandler:
    void handle(org.apache.http.HttpRequest,org.apache.http.HttpResponse,org.apache.http.protocol.HttpContext) -> handle
org.apache.http.protocol.HttpRequestHandlerMapper -> org.apache.http.protocol.HttpRequestHandlerMapper:
    org.apache.http.protocol.HttpRequestHandler lookup(org.apache.http.HttpRequest) -> lookup
org.apache.http.protocol.HttpRequestHandlerRegistry -> org.apache.http.protocol.HttpRequestHandlerRegistry:
    org.apache.http.protocol.UriPatternMatcher matcher -> matcher
    void register(java.lang.String,org.apache.http.protocol.HttpRequestHandler) -> register
    void unregister(java.lang.String) -> unregister
    void setHandlers(java.util.Map) -> setHandlers
    java.util.Map getHandlers() -> getHandlers
    org.apache.http.protocol.HttpRequestHandler lookup(java.lang.String) -> lookup
org.apache.http.protocol.HttpRequestHandlerResolver -> org.apache.http.protocol.HttpRequestHandlerResolver:
    org.apache.http.protocol.HttpRequestHandler lookup(java.lang.String) -> lookup
org.apache.http.protocol.HttpRequestInterceptorList -> org.apache.http.protocol.HttpRequestInterceptorList:
    void addRequestInterceptor(org.apache.http.HttpRequestInterceptor) -> addRequestInterceptor
    void addRequestInterceptor(org.apache.http.HttpRequestInterceptor,int) -> addRequestInterceptor
    int getRequestInterceptorCount() -> getRequestInterceptorCount
    org.apache.http.HttpRequestInterceptor getRequestInterceptor(int) -> getRequestInterceptor
    void clearRequestInterceptors() -> clearRequestInterceptors
    void removeRequestInterceptorByClass(java.lang.Class) -> removeRequestInterceptorByClass
    void setInterceptors(java.util.List) -> setInterceptors
org.apache.http.protocol.HttpResponseInterceptorList -> org.apache.http.protocol.HttpResponseInterceptorList:
    void addResponseInterceptor(org.apache.http.HttpResponseInterceptor) -> addResponseInterceptor
    void addResponseInterceptor(org.apache.http.HttpResponseInterceptor,int) -> addResponseInterceptor
    int getResponseInterceptorCount() -> getResponseInterceptorCount
    org.apache.http.HttpResponseInterceptor getResponseInterceptor(int) -> getResponseInterceptor
    void clearResponseInterceptors() -> clearResponseInterceptors
    void removeResponseInterceptorByClass(java.lang.Class) -> removeResponseInterceptorByClass
    void setInterceptors(java.util.List) -> setInterceptors
org.apache.http.protocol.HttpService -> org.apache.http.protocol.HttpService:
    org.apache.http.params.HttpParams params -> params
    org.apache.http.protocol.HttpProcessor processor -> processor
    org.apache.http.protocol.HttpRequestHandlerMapper handlerMapper -> handlerMapper
    org.apache.http.ConnectionReuseStrategy connStrategy -> connStrategy
    org.apache.http.HttpResponseFactory responseFactory -> responseFactory
    org.apache.http.protocol.HttpExpectationVerifier expectationVerifier -> expectationVerifier
    void setHttpProcessor(org.apache.http.protocol.HttpProcessor) -> setHttpProcessor
    void setConnReuseStrategy(org.apache.http.ConnectionReuseStrategy) -> setConnReuseStrategy
    void setResponseFactory(org.apache.http.HttpResponseFactory) -> setResponseFactory
    void setParams(org.apache.http.params.HttpParams) -> setParams
    void setHandlerResolver(org.apache.http.protocol.HttpRequestHandlerResolver) -> setHandlerResolver
    void setExpectationVerifier(org.apache.http.protocol.HttpExpectationVerifier) -> setExpectationVerifier
    org.apache.http.params.HttpParams getParams() -> getParams
    void handleRequest(org.apache.http.HttpServerConnection,org.apache.http.protocol.HttpContext) -> handleRequest
    void handleException(org.apache.http.HttpException,org.apache.http.HttpResponse) -> handleException
    void doService(org.apache.http.HttpRequest,org.apache.http.HttpResponse,org.apache.http.protocol.HttpContext) -> doService
org.apache.http.protocol.HttpService$HttpRequestHandlerResolverAdapter -> org.apache.http.protocol.HttpService$HttpRequestHandlerResolverAdapter:
    org.apache.http.protocol.HttpRequestHandlerResolver resolver -> resolver
    org.apache.http.protocol.HttpRequestHandler lookup(org.apache.http.HttpRequest) -> lookup
org.apache.http.protocol.ImmutableHttpProcessor -> org.apache.http.protocol.ImmutableHttpProcessor:
    org.apache.http.HttpRequestInterceptor[] requestInterceptors -> requestInterceptors
    org.apache.http.HttpResponseInterceptor[] responseInterceptors -> responseInterceptors
    void process(org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext) -> process
    void process(org.apache.http.HttpResponse,org.apache.http.protocol.HttpContext) -> process
org.apache.http.protocol.RequestConnControl -> org.apache.http.protocol.RequestConnControl:
    void process(org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext) -> process
org.apache.http.protocol.RequestContent -> org.apache.http.protocol.RequestContent:
    boolean overwrite -> overwrite
    void process(org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext) -> process
org.apache.http.protocol.RequestDate -> org.apache.http.protocol.RequestDate:
    org.apache.http.protocol.HttpDateGenerator DATE_GENERATOR -> DATE_GENERATOR
    void process(org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext) -> process
org.apache.http.protocol.RequestExpectContinue -> org.apache.http.protocol.RequestExpectContinue:
    boolean activeByDefault -> activeByDefault
    void process(org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext) -> process
org.apache.http.protocol.RequestTargetHost -> org.apache.http.protocol.RequestTargetHost:
    void process(org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext) -> process
org.apache.http.protocol.RequestUserAgent -> org.apache.http.protocol.RequestUserAgent:
    java.lang.String userAgent -> userAgent
    void process(org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext) -> process
org.apache.http.protocol.ResponseConnControl -> org.apache.http.protocol.ResponseConnControl:
    void process(org.apache.http.HttpResponse,org.apache.http.protocol.HttpContext) -> process
org.apache.http.protocol.ResponseContent -> org.apache.http.protocol.ResponseContent:
    boolean overwrite -> overwrite
    void process(org.apache.http.HttpResponse,org.apache.http.protocol.HttpContext) -> process
org.apache.http.protocol.ResponseDate -> org.apache.http.protocol.ResponseDate:
    org.apache.http.protocol.HttpDateGenerator DATE_GENERATOR -> DATE_GENERATOR
    void process(org.apache.http.HttpResponse,org.apache.http.protocol.HttpContext) -> process
org.apache.http.protocol.ResponseServer -> org.apache.http.protocol.ResponseServer:
    java.lang.String originServer -> originServer
    void process(org.apache.http.HttpResponse,org.apache.http.protocol.HttpContext) -> process
org.apache.http.protocol.SyncBasicHttpContext -> org.apache.http.protocol.SyncBasicHttpContext:
    java.lang.Object getAttribute(java.lang.String) -> getAttribute
    void setAttribute(java.lang.String,java.lang.Object) -> setAttribute
    java.lang.Object removeAttribute(java.lang.String) -> removeAttribute
    void clear() -> clear
org.apache.http.protocol.UriHttpRequestHandlerMapper -> org.apache.http.protocol.UriHttpRequestHandlerMapper:
    org.apache.http.protocol.UriPatternMatcher matcher -> matcher
    void register(java.lang.String,org.apache.http.protocol.HttpRequestHandler) -> register
    void unregister(java.lang.String) -> unregister
    java.lang.String getRequestPath(org.apache.http.HttpRequest) -> getRequestPath
    org.apache.http.protocol.HttpRequestHandler lookup(org.apache.http.HttpRequest) -> lookup
org.apache.http.protocol.UriPatternMatcher -> org.apache.http.protocol.UriPatternMatcher:
    java.util.Map map -> map
    void register(java.lang.String,java.lang.Object) -> register
    void unregister(java.lang.String) -> unregister
    void setHandlers(java.util.Map) -> setHandlers
    void setObjects(java.util.Map) -> setObjects
    java.util.Map getObjects() -> getObjects
    java.lang.Object lookup(java.lang.String) -> lookup
    boolean matchUriRequestPattern(java.lang.String,java.lang.String) -> matchUriRequestPattern
    java.lang.String toString() -> toString
org.apache.http.util.Args -> org.apache.http.util.Args:
    void check(boolean,java.lang.String) -> check
    void check(boolean,java.lang.String,java.lang.Object[]) -> check
    java.lang.Object notNull(java.lang.Object,java.lang.String) -> notNull
    java.lang.CharSequence notEmpty(java.lang.CharSequence,java.lang.String) -> notEmpty
    java.lang.CharSequence notBlank(java.lang.CharSequence,java.lang.String) -> notBlank
    java.util.Collection notEmpty(java.util.Collection,java.lang.String) -> notEmpty
    int positive(int,java.lang.String) -> positive
    long positive(long,java.lang.String) -> positive
    int notNegative(int,java.lang.String) -> notNegative
    long notNegative(long,java.lang.String) -> notNegative
org.apache.http.util.Asserts -> org.apache.http.util.Asserts:
    void check(boolean,java.lang.String) -> check
    void check(boolean,java.lang.String,java.lang.Object[]) -> check
    void notNull(java.lang.Object,java.lang.String) -> notNull
    void notEmpty(java.lang.CharSequence,java.lang.String) -> notEmpty
    void notBlank(java.lang.CharSequence,java.lang.String) -> notBlank
org.apache.http.util.ByteArrayBuffer -> org.apache.http.util.ByteArrayBuffer:
    long serialVersionUID -> serialVersionUID
    byte[] buffer -> buffer
    int len -> len
    void expand(int) -> expand
    void append(byte[],int,int) -> append
    void append(int) -> append
    void append(char[],int,int) -> append
    void append(org.apache.http.util.CharArrayBuffer,int,int) -> append
    void clear() -> clear
    byte[] toByteArray() -> toByteArray
    int byteAt(int) -> byteAt
    int capacity() -> capacity
    int length() -> length
    void ensureCapacity(int) -> ensureCapacity
    byte[] buffer() -> buffer
    void setLength(int) -> setLength
    boolean isEmpty() -> isEmpty
    boolean isFull() -> isFull
    int indexOf(byte,int,int) -> indexOf
    int indexOf(byte) -> indexOf
org.apache.http.util.CharArrayBuffer -> org.apache.http.util.CharArrayBuffer:
    long serialVersionUID -> serialVersionUID
    char[] buffer -> buffer
    int len -> len
    void expand(int) -> expand
    void append(char[],int,int) -> append
    void append(java.lang.String) -> append
    void append(org.apache.http.util.CharArrayBuffer,int,int) -> append
    void append(org.apache.http.util.CharArrayBuffer) -> append
    void append(char) -> append
    void append(byte[],int,int) -> append
    void append(org.apache.http.util.ByteArrayBuffer,int,int) -> append
    void append(java.lang.Object) -> append
    void clear() -> clear
    char[] toCharArray() -> toCharArray
    char charAt(int) -> charAt
    char[] buffer() -> buffer
    int capacity() -> capacity
    int length() -> length
    void ensureCapacity(int) -> ensureCapacity
    void setLength(int) -> setLength
    boolean isEmpty() -> isEmpty
    boolean isFull() -> isFull
    int indexOf(int,int,int) -> indexOf
    int indexOf(int) -> indexOf
    java.lang.String substring(int,int) -> substring
    java.lang.String substringTrimmed(int,int) -> substringTrimmed
    java.lang.String toString() -> toString
org.apache.http.util.CharsetUtils -> org.apache.http.util.CharsetUtils:
    java.nio.charset.Charset lookup(java.lang.String) -> lookup
    java.nio.charset.Charset get(java.lang.String) -> get
org.apache.http.util.EncodingUtils -> org.apache.http.util.EncodingUtils:
    java.lang.String getString(byte[],int,int,java.lang.String) -> getString
    java.lang.String getString(byte[],java.lang.String) -> getString
    byte[] getBytes(java.lang.String,java.lang.String) -> getBytes
    byte[] getAsciiBytes(java.lang.String) -> getAsciiBytes
    java.lang.String getAsciiString(byte[],int,int) -> getAsciiString
    java.lang.String getAsciiString(byte[]) -> getAsciiString
org.apache.http.util.EntityUtils -> org.apache.http.util.EntityUtils:
    void consumeQuietly(org.apache.http.HttpEntity) -> consumeQuietly
    void consume(org.apache.http.HttpEntity) -> consume
    void updateEntity(org.apache.http.HttpResponse,org.apache.http.HttpEntity) -> updateEntity
    byte[] toByteArray(org.apache.http.HttpEntity) -> toByteArray
    java.lang.String getContentCharSet(org.apache.http.HttpEntity) -> getContentCharSet
    java.lang.String getContentMimeType(org.apache.http.HttpEntity) -> getContentMimeType
    java.lang.String toString(org.apache.http.HttpEntity,java.nio.charset.Charset) -> toString
    java.lang.String toString(org.apache.http.HttpEntity,java.lang.String) -> toString
    java.lang.String toString(org.apache.http.HttpEntity) -> toString
org.apache.http.util.ExceptionUtils -> org.apache.http.util.ExceptionUtils:
    java.lang.reflect.Method INIT_CAUSE_METHOD -> INIT_CAUSE_METHOD
    java.lang.reflect.Method getInitCauseMethod() -> getInitCauseMethod
    void initCause(java.lang.Throwable,java.lang.Throwable) -> initCause
org.apache.http.util.LangUtils -> org.apache.http.util.LangUtils:
    int HASH_SEED -> HASH_SEED
    int HASH_OFFSET -> HASH_OFFSET
    int hashCode(int,int) -> hashCode
    int hashCode(int,boolean) -> hashCode
    int hashCode(int,java.lang.Object) -> hashCode
    boolean equals(java.lang.Object,java.lang.Object) -> equals
    boolean equals(java.lang.Object[],java.lang.Object[]) -> equals
org.apache.http.util.NetUtils -> org.apache.http.util.NetUtils:
    void formatAddress(java.lang.StringBuilder,java.net.SocketAddress) -> formatAddress
org.apache.http.util.TextUtils -> org.apache.http.util.TextUtils:
    boolean isEmpty(java.lang.CharSequence) -> isEmpty
    boolean isBlank(java.lang.CharSequence) -> isBlank
org.apache.http.util.VersionInfo -> org.apache.http.util.VersionInfo:
    java.lang.String UNAVAILABLE -> UNAVAILABLE
    java.lang.String VERSION_PROPERTY_FILE -> VERSION_PROPERTY_FILE
    java.lang.String PROPERTY_MODULE -> PROPERTY_MODULE
    java.lang.String PROPERTY_RELEASE -> PROPERTY_RELEASE
    java.lang.String PROPERTY_TIMESTAMP -> PROPERTY_TIMESTAMP
    java.lang.String infoPackage -> infoPackage
    java.lang.String infoModule -> infoModule
    java.lang.String infoRelease -> infoRelease
    java.lang.String infoTimestamp -> infoTimestamp
    java.lang.String infoClassloader -> infoClassloader
    java.lang.String getPackage() -> getPackage
    java.lang.String getModule() -> getModule
    java.lang.String getRelease() -> getRelease
    java.lang.String getTimestamp() -> getTimestamp
    java.lang.String getClassloader() -> getClassloader
    java.lang.String toString() -> toString
    org.apache.http.util.VersionInfo[] loadVersionInfo(java.lang.String[],java.lang.ClassLoader) -> loadVersionInfo
    org.apache.http.util.VersionInfo loadVersionInfo(java.lang.String,java.lang.ClassLoader) -> loadVersionInfo
    org.apache.http.util.VersionInfo fromMap(java.lang.String,java.util.Map,java.lang.ClassLoader) -> fromMap
    java.lang.String getUserAgent(java.lang.String,java.lang.String,java.lang.Class) -> getUserAgent
org.bouncycastle.LICENSE -> org.bouncycastle.LICENSE:
    java.lang.String licenseText -> licenseText
    void main(java.lang.String[]) -> main
org.bouncycastle.apache.bzip2.BZip2Constants -> org.bouncycastle.apache.bzip2.BZip2Constants:
    int baseBlockSize -> baseBlockSize
    int MAX_ALPHA_SIZE -> MAX_ALPHA_SIZE
    int MAX_CODE_LEN -> MAX_CODE_LEN
    int RUNA -> RUNA
    int RUNB -> RUNB
    int N_GROUPS -> N_GROUPS
    int G_SIZE -> G_SIZE
    int N_ITERS -> N_ITERS
    int MAX_SELECTORS -> MAX_SELECTORS
    int NUM_OVERSHOOT_BYTES -> NUM_OVERSHOOT_BYTES
    int[] rNums -> rNums
org.bouncycastle.apache.bzip2.CBZip2InputStream -> org.bouncycastle.apache.bzip2.CBZip2InputStream:
    int last -> last
    int origPtr -> origPtr
    int blockSize100k -> blockSize100k
    boolean blockRandomised -> blockRandomised
    int bsBuff -> bsBuff
    int bsLive -> bsLive
    org.bouncycastle.apache.bzip2.CRC mCrc -> mCrc
    boolean[] inUse -> inUse
    int nInUse -> nInUse
    char[] seqToUnseq -> seqToUnseq
    char[] unseqToSeq -> unseqToSeq
    char[] selector -> selector
    char[] selectorMtf -> selectorMtf
    int[] tt -> tt
    char[] ll8 -> ll8
    int[] unzftab -> unzftab
    int[][] limit -> limit
    int[][] base -> base
    int[][] perm -> perm
    int[] minLens -> minLens
    java.io.InputStream bsStream -> bsStream
    boolean streamEnd -> streamEnd
    int currentChar -> currentChar
    int START_BLOCK_STATE -> START_BLOCK_STATE
    int RAND_PART_A_STATE -> RAND_PART_A_STATE
    int RAND_PART_B_STATE -> RAND_PART_B_STATE
    int RAND_PART_C_STATE -> RAND_PART_C_STATE
    int NO_RAND_PART_A_STATE -> NO_RAND_PART_A_STATE
    int NO_RAND_PART_B_STATE -> NO_RAND_PART_B_STATE
    int NO_RAND_PART_C_STATE -> NO_RAND_PART_C_STATE
    int currentState -> currentState
    int storedBlockCRC -> storedBlockCRC
    int storedCombinedCRC -> storedCombinedCRC
    int computedBlockCRC -> computedBlockCRC
    int computedCombinedCRC -> computedCombinedCRC
    int i2 -> i2
    int count -> count
    int chPrev -> chPrev
    int ch2 -> ch2
    int i -> i
    int tPos -> tPos
    int rNToGo -> rNToGo
    int rTPos -> rTPos
    int j2 -> j2
    char z -> z
    void cadvise() -> cadvise
    void compressedStreamEOF() -> compressedStreamEOF
    void makeMaps() -> makeMaps
    int read() -> read
    void initialize() -> initialize
    void initBlock() -> initBlock
    void endBlock() -> endBlock
    void complete() -> complete
    void blockOverrun() -> blockOverrun
    void badBlockHeader() -> badBlockHeader
    void crcError() -> crcError
    void bsFinishedWithStream() -> bsFinishedWithStream
    void bsSetStream(java.io.InputStream) -> bsSetStream
    int bsR(int) -> bsR
    char bsGetUChar() -> bsGetUChar
    int bsGetint() -> bsGetint
    int bsGetIntVS(int) -> bsGetIntVS
    int bsGetInt32() -> bsGetInt32
    void hbCreateDecodeTables(int[],int[],int[],char[],int,int,int) -> hbCreateDecodeTables
    void recvDecodingTables() -> recvDecodingTables
    void getAndMoveToFrontDecode() -> getAndMoveToFrontDecode
    void setupBlock() -> setupBlock
    void setupRandPartA() -> setupRandPartA
    void setupNoRandPartA() -> setupNoRandPartA
    void setupRandPartB() -> setupRandPartB
    void setupRandPartC() -> setupRandPartC
    void setupNoRandPartB() -> setupNoRandPartB
    void setupNoRandPartC() -> setupNoRandPartC
    void setDecompressStructureSizes(int) -> setDecompressStructureSizes
org.bouncycastle.apache.bzip2.CBZip2OutputStream -> org.bouncycastle.apache.bzip2.CBZip2OutputStream:
    int SETMASK -> SETMASK
    int CLEARMASK -> CLEARMASK
    int GREATER_ICOST -> GREATER_ICOST
    int LESSER_ICOST -> LESSER_ICOST
    int SMALL_THRESH -> SMALL_THRESH
    int DEPTH_THRESH -> DEPTH_THRESH
    int QSORT_STACK_SIZE -> QSORT_STACK_SIZE
    boolean finished -> finished
    int last -> last
    int origPtr -> origPtr
    int blockSize100k -> blockSize100k
    boolean blockRandomised -> blockRandomised
    int bytesOut -> bytesOut
    int bsBuff -> bsBuff
    int bsLive -> bsLive
    org.bouncycastle.apache.bzip2.CRC mCrc -> mCrc
    boolean[] inUse -> inUse
    int nInUse -> nInUse
    char[] seqToUnseq -> seqToUnseq
    char[] unseqToSeq -> unseqToSeq
    char[] selector -> selector
    char[] selectorMtf -> selectorMtf
    char[] block -> block
    int[] quadrant -> quadrant
    int[] zptr -> zptr
    short[] szptr -> szptr
    int[] ftab -> ftab
    int nMTF -> nMTF
    int[] mtfFreq -> mtfFreq
    int workFactor -> workFactor
    int workDone -> workDone
    int workLimit -> workLimit
    boolean firstAttempt -> firstAttempt
    int nBlocksRandomised -> nBlocksRandomised
    int currentChar -> currentChar
    int runLength -> runLength
    boolean closed -> closed
    int blockCRC -> blockCRC
    int combinedCRC -> combinedCRC
    int allowableBlockSize -> allowableBlockSize
    java.io.OutputStream bsStream -> bsStream
    int[] incs -> incs
    void panic() -> panic
    void makeMaps() -> makeMaps
    void hbMakeCodeLengths(char[],int[],int,int) -> hbMakeCodeLengths
    void write(int) -> write
    void writeRun() -> writeRun
    void finalize() -> finalize
    void close() -> close
    void finish() -> finish
    void flush() -> flush
    void initialize() -> initialize
    void initBlock() -> initBlock
    void endBlock() -> endBlock
    void endCompression() -> endCompression
    void hbAssignCodes(int[],char[],int,int,int) -> hbAssignCodes
    void bsSetStream(java.io.OutputStream) -> bsSetStream
    void bsFinishedWithStream() -> bsFinishedWithStream
    void bsW(int,int) -> bsW
    void bsPutUChar(int) -> bsPutUChar
    void bsPutint(int) -> bsPutint
    void bsPutIntVS(int,int) -> bsPutIntVS
    void sendMTFValues() -> sendMTFValues
    void moveToFrontCodeAndSend() -> moveToFrontCodeAndSend
    void simpleSort(int,int,int) -> simpleSort
    void vswap(int,int,int) -> vswap
    char med3(char,char,char) -> med3
    void qSort3(int,int,int) -> qSort3
    void mainSort() -> mainSort
    void randomiseBlock() -> randomiseBlock
    void doReversibleTransformation() -> doReversibleTransformation
    boolean fullGtU(int,int) -> fullGtU
    void allocateCompressStructures() -> allocateCompressStructures
    void generateMTFValues() -> generateMTFValues
org.bouncycastle.apache.bzip2.CBZip2OutputStream$1 -> org.bouncycastle.apache.bzip2.CBZip2OutputStream$1:
org.bouncycastle.apache.bzip2.CBZip2OutputStream$StackElem -> org.bouncycastle.apache.bzip2.CBZip2OutputStream$StackElem:
    int ll -> ll
    int hh -> hh
    int dd -> dd
org.bouncycastle.apache.bzip2.CRC -> org.bouncycastle.apache.bzip2.CRC:
    int[] crc32Table -> crc32Table
    int globalCrc -> globalCrc
    void initialiseCRC() -> initialiseCRC
    int getFinalCRC() -> getFinalCRC
    int getGlobalCRC() -> getGlobalCRC
    void setGlobalCRC(int) -> setGlobalCRC
    void updateCRC(int) -> updateCRC
org.bouncycastle.asn1.ASN1ApplicationSpecificParser -> org.bouncycastle.asn1.ASN1ApplicationSpecificParser:
    org.bouncycastle.asn1.ASN1Encodable readObject() -> readObject
org.bouncycastle.asn1.ASN1Boolean -> org.bouncycastle.asn1.ASN1Boolean:
    byte[] TRUE_VALUE -> TRUE_VALUE
    byte[] FALSE_VALUE -> FALSE_VALUE
    byte[] value -> value
    org.bouncycastle.asn1.ASN1Boolean FALSE -> FALSE
    org.bouncycastle.asn1.ASN1Boolean TRUE -> TRUE
    org.bouncycastle.asn1.ASN1Boolean getInstance(java.lang.Object) -> getInstance
    org.bouncycastle.asn1.ASN1Boolean getInstance(boolean) -> getInstance
    org.bouncycastle.asn1.ASN1Boolean getInstance(int) -> getInstance
    org.bouncycastle.asn1.ASN1Boolean getInstance(org.bouncycastle.asn1.ASN1TaggedObject,boolean) -> getInstance
    boolean isTrue() -> isTrue
    boolean isConstructed() -> isConstructed
    int encodedLength() -> encodedLength
    void encode(org.bouncycastle.asn1.ASN1OutputStream) -> encode
    boolean asn1Equals(org.bouncycastle.asn1.ASN1Primitive) -> asn1Equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    org.bouncycastle.asn1.ASN1Boolean fromOctetString(byte[]) -> fromOctetString
org.bouncycastle.asn1.ASN1Choice -> org.bouncycastle.asn1.ASN1Choice:
org.bouncycastle.asn1.ASN1Encodable -> org.bouncycastle.asn1.ASN1Encodable:
    org.bouncycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
org.bouncycastle.asn1.ASN1EncodableVector -> org.bouncycastle.asn1.ASN1EncodableVector:
    java.util.Vector v -> v
    void add(org.bouncycastle.asn1.ASN1Encodable) -> add
    void addAll(org.bouncycastle.asn1.ASN1EncodableVector) -> addAll
    org.bouncycastle.asn1.ASN1Encodable get(int) -> get
    int size() -> size
org.bouncycastle.asn1.ASN1Encoding -> org.bouncycastle.asn1.ASN1Encoding:
    java.lang.String DER -> DER
    java.lang.String DL -> DL
    java.lang.String BER -> BER
org.bouncycastle.asn1.ASN1Enumerated -> org.bouncycastle.asn1.ASN1Enumerated:
    byte[] bytes -> bytes
    org.bouncycastle.asn1.ASN1Enumerated[] cache -> cache
    org.bouncycastle.asn1.ASN1Enumerated getInstance(java.lang.Object) -> getInstance
    org.bouncycastle.asn1.ASN1Enumerated getInstance(org.bouncycastle.asn1.ASN1TaggedObject,boolean) -> getInstance
    java.math.BigInteger getValue() -> getValue
    boolean isConstructed() -> isConstructed
    int encodedLength() -> encodedLength
    void encode(org.bouncycastle.asn1.ASN1OutputStream) -> encode
    boolean asn1Equals(org.bouncycastle.asn1.ASN1Primitive) -> asn1Equals
    int hashCode() -> hashCode
    org.bouncycastle.asn1.ASN1Enumerated fromOctetString(byte[]) -> fromOctetString
org.bouncycastle.asn1.ASN1Exception -> org.bouncycastle.asn1.ASN1Exception:
    java.lang.Throwable cause -> cause
    java.lang.Throwable getCause() -> getCause
org.bouncycastle.asn1.ASN1GeneralizedTime -> org.bouncycastle.asn1.ASN1GeneralizedTime:
    byte[] time -> time
    org.bouncycastle.asn1.ASN1GeneralizedTime getInstance(java.lang.Object) -> getInstance
    org.bouncycastle.asn1.ASN1GeneralizedTime getInstance(org.bouncycastle.asn1.ASN1TaggedObject,boolean) -> getInstance
    java.lang.String getTimeString() -> getTimeString
    java.lang.String getTime() -> getTime
    java.lang.String calculateGMTOffset() -> calculateGMTOffset
    java.lang.String convert(int) -> convert
    java.util.Date getDate() -> getDate
    boolean hasFractionalSeconds() -> hasFractionalSeconds
    boolean isConstructed() -> isConstructed
    int encodedLength() -> encodedLength
    void encode(org.bouncycastle.asn1.ASN1OutputStream) -> encode
    boolean asn1Equals(org.bouncycastle.asn1.ASN1Primitive) -> asn1Equals
    int hashCode() -> hashCode
org.bouncycastle.asn1.ASN1Generator -> org.bouncycastle.asn1.ASN1Generator:
    java.io.OutputStream _out -> _out
    java.io.OutputStream getRawOutputStream() -> getRawOutputStream
org.bouncycastle.asn1.ASN1InputStream -> org.bouncycastle.asn1.ASN1InputStream:
    int limit -> limit
    boolean lazyEvaluate -> lazyEvaluate
    byte[][] tmpBuffers -> tmpBuffers
    int getLimit() -> getLimit
    int readLength() -> readLength
    void readFully(byte[]) -> readFully
    org.bouncycastle.asn1.ASN1Primitive buildObject(int,int,int) -> buildObject
    org.bouncycastle.asn1.ASN1EncodableVector buildEncodableVector() -> buildEncodableVector
    org.bouncycastle.asn1.ASN1EncodableVector buildDEREncodableVector(org.bouncycastle.asn1.DefiniteLengthInputStream) -> buildDEREncodableVector
    org.bouncycastle.asn1.ASN1Primitive readObject() -> readObject
    int readTagNumber(java.io.InputStream,int) -> readTagNumber
    int readLength(java.io.InputStream,int) -> readLength
    byte[] getBuffer(org.bouncycastle.asn1.DefiniteLengthInputStream,byte[][]) -> getBuffer
    char[] getBMPCharBuffer(org.bouncycastle.asn1.DefiniteLengthInputStream) -> getBMPCharBuffer
    org.bouncycastle.asn1.ASN1Primitive createPrimitiveDERObject(int,org.bouncycastle.asn1.DefiniteLengthInputStream,byte[][]) -> createPrimitiveDERObject
org.bouncycastle.asn1.ASN1Integer -> org.bouncycastle.asn1.ASN1Integer:
    byte[] bytes -> bytes
    org.bouncycastle.asn1.ASN1Integer getInstance(java.lang.Object) -> getInstance
    org.bouncycastle.asn1.ASN1Integer getInstance(org.bouncycastle.asn1.ASN1TaggedObject,boolean) -> getInstance
    java.math.BigInteger getValue() -> getValue
    java.math.BigInteger getPositiveValue() -> getPositiveValue
    boolean isConstructed() -> isConstructed
    int encodedLength() -> encodedLength
    void encode(org.bouncycastle.asn1.ASN1OutputStream) -> encode
    int hashCode() -> hashCode
    boolean asn1Equals(org.bouncycastle.asn1.ASN1Primitive) -> asn1Equals
    java.lang.String toString() -> toString
org.bouncycastle.asn1.ASN1Null -> org.bouncycastle.asn1.ASN1Null:
    org.bouncycastle.asn1.ASN1Null getInstance(java.lang.Object) -> getInstance
    int hashCode() -> hashCode
    boolean asn1Equals(org.bouncycastle.asn1.ASN1Primitive) -> asn1Equals
    void encode(org.bouncycastle.asn1.ASN1OutputStream) -> encode
    java.lang.String toString() -> toString
org.bouncycastle.asn1.ASN1Object -> org.bouncycastle.asn1.ASN1Object:
    byte[] getEncoded() -> getEncoded
    byte[] getEncoded(java.lang.String) -> getEncoded
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    org.bouncycastle.asn1.ASN1Primitive toASN1Object() -> toASN1Object
    boolean hasEncodedTagValue(java.lang.Object,int) -> hasEncodedTagValue
    org.bouncycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
org.bouncycastle.asn1.ASN1ObjectIdentifier -> org.bouncycastle.asn1.ASN1ObjectIdentifier:
    java.lang.String identifier -> identifier
    byte[] body -> body
    long LONG_LIMIT -> LONG_LIMIT
    org.bouncycastle.asn1.ASN1ObjectIdentifier[][] cache -> cache
    org.bouncycastle.asn1.ASN1ObjectIdentifier getInstance(java.lang.Object) -> getInstance
    org.bouncycastle.asn1.ASN1ObjectIdentifier getInstance(org.bouncycastle.asn1.ASN1TaggedObject,boolean) -> getInstance
    java.lang.String getId() -> getId
    org.bouncycastle.asn1.ASN1ObjectIdentifier branch(java.lang.String) -> branch
    boolean on(org.bouncycastle.asn1.ASN1ObjectIdentifier) -> on
    void writeField(java.io.ByteArrayOutputStream,long) -> writeField
    void writeField(java.io.ByteArrayOutputStream,java.math.BigInteger) -> writeField
    void doOutput(java.io.ByteArrayOutputStream) -> doOutput
    byte[] getBody() -> getBody
    boolean isConstructed() -> isConstructed
    int encodedLength() -> encodedLength
    void encode(org.bouncycastle.asn1.ASN1OutputStream) -> encode
    int hashCode() -> hashCode
    boolean asn1Equals(org.bouncycastle.asn1.ASN1Primitive) -> asn1Equals
    java.lang.String toString() -> toString
    boolean isValidBranchID(java.lang.String,int) -> isValidBranchID
    boolean isValidIdentifier(java.lang.String) -> isValidIdentifier
    org.bouncycastle.asn1.ASN1ObjectIdentifier fromOctetString(byte[]) -> fromOctetString
org.bouncycastle.asn1.ASN1OctetString -> org.bouncycastle.asn1.ASN1OctetString:
    byte[] string -> string
    org.bouncycastle.asn1.ASN1OctetString getInstance(org.bouncycastle.asn1.ASN1TaggedObject,boolean) -> getInstance
    org.bouncycastle.asn1.ASN1OctetString getInstance(java.lang.Object) -> getInstance
    java.io.InputStream getOctetStream() -> getOctetStream
    org.bouncycastle.asn1.ASN1OctetStringParser parser() -> parser
    byte[] getOctets() -> getOctets
    int hashCode() -> hashCode
    boolean asn1Equals(org.bouncycastle.asn1.ASN1Primitive) -> asn1Equals
    org.bouncycastle.asn1.ASN1Primitive getLoadedObject() -> getLoadedObject
    org.bouncycastle.asn1.ASN1Primitive toDERObject() -> toDERObject
    org.bouncycastle.asn1.ASN1Primitive toDLObject() -> toDLObject
    void encode(org.bouncycastle.asn1.ASN1OutputStream) -> encode
    java.lang.String toString() -> toString
org.bouncycastle.asn1.ASN1OctetStringParser -> org.bouncycastle.asn1.ASN1OctetStringParser:
    java.io.InputStream getOctetStream() -> getOctetStream
org.bouncycastle.asn1.ASN1OutputStream -> org.bouncycastle.asn1.ASN1OutputStream:
    java.io.OutputStream os -> os
    void writeLength(int) -> writeLength
    void write(int) -> write
    void write(byte[]) -> write
    void write(byte[],int,int) -> write
    void writeEncoded(int,byte[]) -> writeEncoded
    void writeTag(int,int) -> writeTag
    void writeEncoded(int,int,byte[]) -> writeEncoded
    void writeNull() -> writeNull
    void writeObject(org.bouncycastle.asn1.ASN1Encodable) -> writeObject
    void writeImplicitObject(org.bouncycastle.asn1.ASN1Primitive) -> writeImplicitObject
    void close() -> close
    void flush() -> flush
    org.bouncycastle.asn1.ASN1OutputStream getDERSubStream() -> getDERSubStream
    org.bouncycastle.asn1.ASN1OutputStream getDLSubStream() -> getDLSubStream
org.bouncycastle.asn1.ASN1OutputStream$ImplicitOutputStream -> org.bouncycastle.asn1.ASN1OutputStream$ImplicitOutputStream:
    boolean first -> first
    org.bouncycastle.asn1.ASN1OutputStream this$0 -> this$0
    void write(int) -> write
org.bouncycastle.asn1.ASN1ParsingException -> org.bouncycastle.asn1.ASN1ParsingException:
    java.lang.Throwable cause -> cause
    java.lang.Throwable getCause() -> getCause
org.bouncycastle.asn1.ASN1Primitive -> org.bouncycastle.asn1.ASN1Primitive:
    org.bouncycastle.asn1.ASN1Primitive fromByteArray(byte[]) -> fromByteArray
    boolean equals(java.lang.Object) -> equals
    org.bouncycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
    org.bouncycastle.asn1.ASN1Primitive toDERObject() -> toDERObject
    org.bouncycastle.asn1.ASN1Primitive toDLObject() -> toDLObject
    int hashCode() -> hashCode
    boolean isConstructed() -> isConstructed
    int encodedLength() -> encodedLength
    void encode(org.bouncycastle.asn1.ASN1OutputStream) -> encode
    boolean asn1Equals(org.bouncycastle.asn1.ASN1Primitive) -> asn1Equals
org.bouncycastle.asn1.ASN1Sequence -> org.bouncycastle.asn1.ASN1Sequence:
    java.util.Vector seq -> seq
    org.bouncycastle.asn1.ASN1Sequence getInstance(java.lang.Object) -> getInstance
    org.bouncycastle.asn1.ASN1Sequence getInstance(org.bouncycastle.asn1.ASN1TaggedObject,boolean) -> getInstance
    org.bouncycastle.asn1.ASN1Encodable[] toArray() -> toArray
    java.util.Enumeration getObjects() -> getObjects
    org.bouncycastle.asn1.ASN1SequenceParser parser() -> parser
    org.bouncycastle.asn1.ASN1Encodable getObjectAt(int) -> getObjectAt
    int size() -> size
    int hashCode() -> hashCode
    boolean asn1Equals(org.bouncycastle.asn1.ASN1Primitive) -> asn1Equals
    org.bouncycastle.asn1.ASN1Encodable getNext(java.util.Enumeration) -> getNext
    org.bouncycastle.asn1.ASN1Primitive toDERObject() -> toDERObject
    org.bouncycastle.asn1.ASN1Primitive toDLObject() -> toDLObject
    boolean isConstructed() -> isConstructed
    void encode(org.bouncycastle.asn1.ASN1OutputStream) -> encode
    java.lang.String toString() -> toString
org.bouncycastle.asn1.ASN1Sequence$1 -> org.bouncycastle.asn1.ASN1Sequence$1:
    int max -> max
    int index -> index
    org.bouncycastle.asn1.ASN1Sequence val$outer -> val$outer
    org.bouncycastle.asn1.ASN1Sequence this$0 -> this$0
    org.bouncycastle.asn1.ASN1Encodable readObject() -> readObject
    org.bouncycastle.asn1.ASN1Primitive getLoadedObject() -> getLoadedObject
    org.bouncycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
org.bouncycastle.asn1.ASN1SequenceParser -> org.bouncycastle.asn1.ASN1SequenceParser:
    org.bouncycastle.asn1.ASN1Encodable readObject() -> readObject
org.bouncycastle.asn1.ASN1Set -> org.bouncycastle.asn1.ASN1Set:
    java.util.Vector set -> set
    boolean isSorted -> isSorted
    org.bouncycastle.asn1.ASN1Set getInstance(java.lang.Object) -> getInstance
    org.bouncycastle.asn1.ASN1Set getInstance(org.bouncycastle.asn1.ASN1TaggedObject,boolean) -> getInstance
    java.util.Enumeration getObjects() -> getObjects
    org.bouncycastle.asn1.ASN1Encodable getObjectAt(int) -> getObjectAt
    int size() -> size
    org.bouncycastle.asn1.ASN1Encodable[] toArray() -> toArray
    org.bouncycastle.asn1.ASN1SetParser parser() -> parser
    int hashCode() -> hashCode
    org.bouncycastle.asn1.ASN1Primitive toDERObject() -> toDERObject
    org.bouncycastle.asn1.ASN1Primitive toDLObject() -> toDLObject
    boolean asn1Equals(org.bouncycastle.asn1.ASN1Primitive) -> asn1Equals
    org.bouncycastle.asn1.ASN1Encodable getNext(java.util.Enumeration) -> getNext
    boolean lessThanOrEqual(byte[],byte[]) -> lessThanOrEqual
    byte[] getEncoded(org.bouncycastle.asn1.ASN1Encodable) -> getEncoded
    void sort() -> sort
    boolean isConstructed() -> isConstructed
    void encode(org.bouncycastle.asn1.ASN1OutputStream) -> encode
    java.lang.String toString() -> toString
org.bouncycastle.asn1.ASN1Set$1 -> org.bouncycastle.asn1.ASN1Set$1:
    int max -> max
    int index -> index
    org.bouncycastle.asn1.ASN1Set val$outer -> val$outer
    org.bouncycastle.asn1.ASN1Set this$0 -> this$0
    org.bouncycastle.asn1.ASN1Encodable readObject() -> readObject
    org.bouncycastle.asn1.ASN1Primitive getLoadedObject() -> getLoadedObject
    org.bouncycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
org.bouncycastle.asn1.ASN1SetParser -> org.bouncycastle.asn1.ASN1SetParser:
    org.bouncycastle.asn1.ASN1Encodable readObject() -> readObject
org.bouncycastle.asn1.ASN1StreamParser -> org.bouncycastle.asn1.ASN1StreamParser:
    java.io.InputStream _in -> _in
    int _limit -> _limit
    byte[][] tmpBuffers -> tmpBuffers
    org.bouncycastle.asn1.ASN1Encodable readIndef(int) -> readIndef
    org.bouncycastle.asn1.ASN1Encodable readImplicit(boolean,int) -> readImplicit
    org.bouncycastle.asn1.ASN1Primitive readTaggedObject(boolean,int) -> readTaggedObject
    org.bouncycastle.asn1.ASN1Encodable readObject() -> readObject
    void set00Check(boolean) -> set00Check
    org.bouncycastle.asn1.ASN1EncodableVector readVector() -> readVector
org.bouncycastle.asn1.ASN1String -> org.bouncycastle.asn1.ASN1String:
    java.lang.String getString() -> getString
org.bouncycastle.asn1.ASN1TaggedObject -> org.bouncycastle.asn1.ASN1TaggedObject:
    int tagNo -> tagNo
    boolean empty -> empty
    boolean explicit -> explicit
    org.bouncycastle.asn1.ASN1Encodable obj -> obj
    org.bouncycastle.asn1.ASN1TaggedObject getInstance(org.bouncycastle.asn1.ASN1TaggedObject,boolean) -> getInstance
    org.bouncycastle.asn1.ASN1TaggedObject getInstance(java.lang.Object) -> getInstance
    boolean asn1Equals(org.bouncycastle.asn1.ASN1Primitive) -> asn1Equals
    int hashCode() -> hashCode
    int getTagNo() -> getTagNo
    boolean isExplicit() -> isExplicit
    boolean isEmpty() -> isEmpty
    org.bouncycastle.asn1.ASN1Primitive getObject() -> getObject
    org.bouncycastle.asn1.ASN1Encodable getObjectParser(int,boolean) -> getObjectParser
    org.bouncycastle.asn1.ASN1Primitive getLoadedObject() -> getLoadedObject
    org.bouncycastle.asn1.ASN1Primitive toDERObject() -> toDERObject
    org.bouncycastle.asn1.ASN1Primitive toDLObject() -> toDLObject
    void encode(org.bouncycastle.asn1.ASN1OutputStream) -> encode
    java.lang.String toString() -> toString
org.bouncycastle.asn1.ASN1TaggedObjectParser -> org.bouncycastle.asn1.ASN1TaggedObjectParser:
    int getTagNo() -> getTagNo
    org.bouncycastle.asn1.ASN1Encodable getObjectParser(int,boolean) -> getObjectParser
org.bouncycastle.asn1.ASN1UTCTime -> org.bouncycastle.asn1.ASN1UTCTime:
    byte[] time -> time
    org.bouncycastle.asn1.ASN1UTCTime getInstance(java.lang.Object) -> getInstance
    org.bouncycastle.asn1.ASN1UTCTime getInstance(org.bouncycastle.asn1.ASN1TaggedObject,boolean) -> getInstance
    java.util.Date getDate() -> getDate
    java.util.Date getAdjustedDate() -> getAdjustedDate
    java.lang.String getTime() -> getTime
    java.lang.String getAdjustedTime() -> getAdjustedTime
    boolean isConstructed() -> isConstructed
    int encodedLength() -> encodedLength
    void encode(org.bouncycastle.asn1.ASN1OutputStream) -> encode
    boolean asn1Equals(org.bouncycastle.asn1.ASN1Primitive) -> asn1Equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
org.bouncycastle.asn1.BERApplicationSpecific -> org.bouncycastle.asn1.BERApplicationSpecific:
org.bouncycastle.asn1.BERApplicationSpecificParser -> org.bouncycastle.asn1.BERApplicationSpecificParser:
    int tag -> tag
    org.bouncycastle.asn1.ASN1StreamParser parser -> parser
    org.bouncycastle.asn1.ASN1Encodable readObject() -> readObject
    org.bouncycastle.asn1.ASN1Primitive getLoadedObject() -> getLoadedObject
    org.bouncycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
org.bouncycastle.asn1.BERConstructedOctetString -> org.bouncycastle.asn1.BERConstructedOctetString:
    int MAX_LENGTH -> MAX_LENGTH
    java.util.Vector octs -> octs
    byte[] toBytes(java.util.Vector) -> toBytes
    byte[] toByteArray(org.bouncycastle.asn1.ASN1Primitive) -> toByteArray
    byte[] getOctets() -> getOctets
    java.util.Enumeration getObjects() -> getObjects
    java.util.Vector generateOcts() -> generateOcts
    org.bouncycastle.asn1.BEROctetString fromSequence(org.bouncycastle.asn1.ASN1Sequence) -> fromSequence
org.bouncycastle.asn1.BERFactory -> org.bouncycastle.asn1.BERFactory:
    org.bouncycastle.asn1.BERSequence EMPTY_SEQUENCE -> EMPTY_SEQUENCE
    org.bouncycastle.asn1.BERSet EMPTY_SET -> EMPTY_SET
    org.bouncycastle.asn1.BERSequence createSequence(org.bouncycastle.asn1.ASN1EncodableVector) -> createSequence
    org.bouncycastle.asn1.BERSet createSet(org.bouncycastle.asn1.ASN1EncodableVector) -> createSet
org.bouncycastle.asn1.BERGenerator -> org.bouncycastle.asn1.BERGenerator:
    boolean _tagged -> _tagged
    boolean _isExplicit -> _isExplicit
    int _tagNo -> _tagNo
    java.io.OutputStream getRawOutputStream() -> getRawOutputStream
    void writeHdr(int) -> writeHdr
    void writeBERHeader(int) -> writeBERHeader
    void writeBERBody(java.io.InputStream) -> writeBERBody
    void writeBEREnd() -> writeBEREnd
org.bouncycastle.asn1.BEROctetString -> org.bouncycastle.asn1.BEROctetString:
    int MAX_LENGTH -> MAX_LENGTH
    org.bouncycastle.asn1.ASN1OctetString[] octs -> octs
    byte[] toBytes(org.bouncycastle.asn1.ASN1OctetString[]) -> toBytes
    byte[] getOctets() -> getOctets
    java.util.Enumeration getObjects() -> getObjects
    java.util.Vector generateOcts() -> generateOcts
    boolean isConstructed() -> isConstructed
    int encodedLength() -> encodedLength
    void encode(org.bouncycastle.asn1.ASN1OutputStream) -> encode
    org.bouncycastle.asn1.BEROctetString fromSequence(org.bouncycastle.asn1.ASN1Sequence) -> fromSequence
    org.bouncycastle.asn1.ASN1OctetString[] access$000(org.bouncycastle.asn1.BEROctetString) -> access$000
org.bouncycastle.asn1.BEROctetString$1 -> org.bouncycastle.asn1.BEROctetString$1:
    int counter -> counter
    org.bouncycastle.asn1.BEROctetString this$0 -> this$0
    boolean hasMoreElements() -> hasMoreElements
    java.lang.Object nextElement() -> nextElement
org.bouncycastle.asn1.BEROctetStringGenerator -> org.bouncycastle.asn1.BEROctetStringGenerator:
    java.io.OutputStream getOctetOutputStream() -> getOctetOutputStream
    java.io.OutputStream getOctetOutputStream(byte[]) -> getOctetOutputStream
org.bouncycastle.asn1.BEROctetStringGenerator$BufferedBEROctetStream -> org.bouncycastle.asn1.BEROctetStringGenerator$BufferedBEROctetStream:
    byte[] _buf -> _buf
    int _off -> _off
    org.bouncycastle.asn1.DEROutputStream _derOut -> _derOut
    org.bouncycastle.asn1.BEROctetStringGenerator this$0 -> this$0
    void write(int) -> write
    void write(byte[],int,int) -> write
    void close() -> close
org.bouncycastle.asn1.BEROctetStringParser -> org.bouncycastle.asn1.BEROctetStringParser:
    org.bouncycastle.asn1.ASN1StreamParser _parser -> _parser
    java.io.InputStream getOctetStream() -> getOctetStream
    org.bouncycastle.asn1.ASN1Primitive getLoadedObject() -> getLoadedObject
    org.bouncycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
org.bouncycastle.asn1.BEROutputStream -> org.bouncycastle.asn1.BEROutputStream:
    void writeObject(java.lang.Object) -> writeObject
org.bouncycastle.asn1.BERSequence -> org.bouncycastle.asn1.BERSequence:
    int encodedLength() -> encodedLength
    void encode(org.bouncycastle.asn1.ASN1OutputStream) -> encode
org.bouncycastle.asn1.BERSequenceGenerator -> org.bouncycastle.asn1.BERSequenceGenerator:
    void addObject(org.bouncycastle.asn1.ASN1Encodable) -> addObject
    void close() -> close
org.bouncycastle.asn1.BERSequenceParser -> org.bouncycastle.asn1.BERSequenceParser:
    org.bouncycastle.asn1.ASN1StreamParser _parser -> _parser
    org.bouncycastle.asn1.ASN1Encodable readObject() -> readObject
    org.bouncycastle.asn1.ASN1Primitive getLoadedObject() -> getLoadedObject
    org.bouncycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
org.bouncycastle.asn1.BERSet -> org.bouncycastle.asn1.BERSet:
    int encodedLength() -> encodedLength
    void encode(org.bouncycastle.asn1.ASN1OutputStream) -> encode
org.bouncycastle.asn1.BERSetParser -> org.bouncycastle.asn1.BERSetParser:
    org.bouncycastle.asn1.ASN1StreamParser _parser -> _parser
    org.bouncycastle.asn1.ASN1Encodable readObject() -> readObject
    org.bouncycastle.asn1.ASN1Primitive getLoadedObject() -> getLoadedObject
    org.bouncycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
org.bouncycastle.asn1.BERTaggedObject -> org.bouncycastle.asn1.BERTaggedObject:
    boolean isConstructed() -> isConstructed
    int encodedLength() -> encodedLength
    void encode(org.bouncycastle.asn1.ASN1OutputStream) -> encode
org.bouncycastle.asn1.BERTaggedObjectParser -> org.bouncycastle.asn1.BERTaggedObjectParser:
    boolean _constructed -> _constructed
    int _tagNumber -> _tagNumber
    org.bouncycastle.asn1.ASN1StreamParser _parser -> _parser
    boolean isConstructed() -> isConstructed
    int getTagNo() -> getTagNo
    org.bouncycastle.asn1.ASN1Encodable getObjectParser(int,boolean) -> getObjectParser
    org.bouncycastle.asn1.ASN1Primitive getLoadedObject() -> getLoadedObject
    org.bouncycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
org.bouncycastle.asn1.BERTags -> org.bouncycastle.asn1.BERTags:
    int BOOLEAN -> BOOLEAN
    int INTEGER -> INTEGER
    int BIT_STRING -> BIT_STRING
    int OCTET_STRING -> OCTET_STRING
    int NULL -> NULL
    int OBJECT_IDENTIFIER -> OBJECT_IDENTIFIER
    int EXTERNAL -> EXTERNAL
    int ENUMERATED -> ENUMERATED
    int SEQUENCE -> SEQUENCE
    int SEQUENCE_OF -> SEQUENCE_OF
    int SET -> SET
    int SET_OF -> SET_OF
    int NUMERIC_STRING -> NUMERIC_STRING
    int PRINTABLE_STRING -> PRINTABLE_STRING
    int T61_STRING -> T61_STRING
    int VIDEOTEX_STRING -> VIDEOTEX_STRING
    int IA5_STRING -> IA5_STRING
    int UTC_TIME -> UTC_TIME
    int GENERALIZED_TIME -> GENERALIZED_TIME
    int GRAPHIC_STRING -> GRAPHIC_STRING
    int VISIBLE_STRING -> VISIBLE_STRING
    int GENERAL_STRING -> GENERAL_STRING
    int UNIVERSAL_STRING -> UNIVERSAL_STRING
    int BMP_STRING -> BMP_STRING
    int UTF8_STRING -> UTF8_STRING
    int CONSTRUCTED -> CONSTRUCTED
    int APPLICATION -> APPLICATION
    int TAGGED -> TAGGED
org.bouncycastle.asn1.ConstructedOctetStream -> org.bouncycastle.asn1.ConstructedOctetStream:
    org.bouncycastle.asn1.ASN1StreamParser _parser -> _parser
    boolean _first -> _first
    java.io.InputStream _currentStream -> _currentStream
    int read(byte[],int,int) -> read
    int read() -> read
org.bouncycastle.asn1.DERApplicationSpecific -> org.bouncycastle.asn1.DERApplicationSpecific:
    boolean isConstructed -> isConstructed
    int tag -> tag
    byte[] octets -> octets
    org.bouncycastle.asn1.DERApplicationSpecific getInstance(java.lang.Object) -> getInstance
    int getLengthOfHeader(byte[]) -> getLengthOfHeader
    boolean isConstructed() -> isConstructed
    byte[] getContents() -> getContents
    int getApplicationTag() -> getApplicationTag
    org.bouncycastle.asn1.ASN1Primitive getObject() -> getObject
    org.bouncycastle.asn1.ASN1Primitive getObject(int) -> getObject
    int encodedLength() -> encodedLength
    void encode(org.bouncycastle.asn1.ASN1OutputStream) -> encode
    boolean asn1Equals(org.bouncycastle.asn1.ASN1Primitive) -> asn1Equals
    int hashCode() -> hashCode
    byte[] replaceTagNumber(int,byte[]) -> replaceTagNumber
org.bouncycastle.asn1.DERBMPString -> org.bouncycastle.asn1.DERBMPString:
    char[] string -> string
    org.bouncycastle.asn1.DERBMPString getInstance(java.lang.Object) -> getInstance
    org.bouncycastle.asn1.DERBMPString getInstance(org.bouncycastle.asn1.ASN1TaggedObject,boolean) -> getInstance
    java.lang.String getString() -> getString
    java.lang.String toString() -> toString
    int hashCode() -> hashCode
    boolean asn1Equals(org.bouncycastle.asn1.ASN1Primitive) -> asn1Equals
    boolean isConstructed() -> isConstructed
    int encodedLength() -> encodedLength
    void encode(org.bouncycastle.asn1.ASN1OutputStream) -> encode
org.bouncycastle.asn1.DERBitString -> org.bouncycastle.asn1.DERBitString:
    char[] table -> table
    byte[] data -> data
    int padBits -> padBits
    int getPadBits(int) -> getPadBits
    byte[] getBytes(int) -> getBytes
    org.bouncycastle.asn1.DERBitString getInstance(java.lang.Object) -> getInstance
    org.bouncycastle.asn1.DERBitString getInstance(org.bouncycastle.asn1.ASN1TaggedObject,boolean) -> getInstance
    byte[] getBytes() -> getBytes
    int getPadBits() -> getPadBits
    int intValue() -> intValue
    boolean isConstructed() -> isConstructed
    int encodedLength() -> encodedLength
    void encode(org.bouncycastle.asn1.ASN1OutputStream) -> encode
    int hashCode() -> hashCode
    boolean asn1Equals(org.bouncycastle.asn1.ASN1Primitive) -> asn1Equals
    java.lang.String getString() -> getString
    java.lang.String toString() -> toString
    org.bouncycastle.asn1.DERBitString fromOctetString(byte[]) -> fromOctetString
    org.bouncycastle.asn1.DERBitString fromInputStream(int,java.io.InputStream) -> fromInputStream
org.bouncycastle.asn1.DERBoolean -> org.bouncycastle.asn1.DERBoolean:
org.bouncycastle.asn1.DEREncodableVector -> org.bouncycastle.asn1.DEREncodableVector:
org.bouncycastle.asn1.DEREnumerated -> org.bouncycastle.asn1.DEREnumerated:
org.bouncycastle.asn1.DERExternal -> org.bouncycastle.asn1.DERExternal:
    org.bouncycastle.asn1.ASN1ObjectIdentifier directReference -> directReference
    org.bouncycastle.asn1.ASN1Integer indirectReference -> indirectReference
    org.bouncycastle.asn1.ASN1Primitive dataValueDescriptor -> dataValueDescriptor
    int encoding -> encoding
    org.bouncycastle.asn1.ASN1Primitive externalContent -> externalContent
    org.bouncycastle.asn1.ASN1Primitive getObjFromVector(org.bouncycastle.asn1.ASN1EncodableVector,int) -> getObjFromVector
    int hashCode() -> hashCode
    boolean isConstructed() -> isConstructed
    int encodedLength() -> encodedLength
    void encode(org.bouncycastle.asn1.ASN1OutputStream) -> encode
    boolean asn1Equals(org.bouncycastle.asn1.ASN1Primitive) -> asn1Equals
    org.bouncycastle.asn1.ASN1Primitive getDataValueDescriptor() -> getDataValueDescriptor
    org.bouncycastle.asn1.ASN1ObjectIdentifier getDirectReference() -> getDirectReference
    int getEncoding() -> getEncoding
    org.bouncycastle.asn1.ASN1Primitive getExternalContent() -> getExternalContent
    org.bouncycastle.asn1.ASN1Integer getIndirectReference() -> getIndirectReference
    void setDataValueDescriptor(org.bouncycastle.asn1.ASN1Primitive) -> setDataValueDescriptor
    void setDirectReference(org.bouncycastle.asn1.ASN1ObjectIdentifier) -> setDirectReference
    void setEncoding(int) -> setEncoding
    void setExternalContent(org.bouncycastle.asn1.ASN1Primitive) -> setExternalContent
    void setIndirectReference(org.bouncycastle.asn1.ASN1Integer) -> setIndirectReference
org.bouncycastle.asn1.DERExternalParser -> org.bouncycastle.asn1.DERExternalParser:
    org.bouncycastle.asn1.ASN1StreamParser _parser -> _parser
    org.bouncycastle.asn1.ASN1Encodable readObject() -> readObject
    org.bouncycastle.asn1.ASN1Primitive getLoadedObject() -> getLoadedObject
    org.bouncycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
org.bouncycastle.asn1.DERFactory -> org.bouncycastle.asn1.DERFactory:
    org.bouncycastle.asn1.ASN1Sequence EMPTY_SEQUENCE -> EMPTY_SEQUENCE
    org.bouncycastle.asn1.ASN1Set EMPTY_SET -> EMPTY_SET
    org.bouncycastle.asn1.ASN1Sequence createSequence(org.bouncycastle.asn1.ASN1EncodableVector) -> createSequence
    org.bouncycastle.asn1.ASN1Set createSet(org.bouncycastle.asn1.ASN1EncodableVector) -> createSet
org.bouncycastle.asn1.DERGeneralString -> org.bouncycastle.asn1.DERGeneralString:
    byte[] string -> string
    org.bouncycastle.asn1.DERGeneralString getInstance(java.lang.Object) -> getInstance
    org.bouncycastle.asn1.DERGeneralString getInstance(org.bouncycastle.asn1.ASN1TaggedObject,boolean) -> getInstance
    java.lang.String getString() -> getString
    java.lang.String toString() -> toString
    byte[] getOctets() -> getOctets
    boolean isConstructed() -> isConstructed
    int encodedLength() -> encodedLength
    void encode(org.bouncycastle.asn1.ASN1OutputStream) -> encode
    int hashCode() -> hashCode
    boolean asn1Equals(org.bouncycastle.asn1.ASN1Primitive) -> asn1Equals
org.bouncycastle.asn1.DERGeneralizedTime -> org.bouncycastle.asn1.DERGeneralizedTime:
org.bouncycastle.asn1.DERGenerator -> org.bouncycastle.asn1.DERGenerator:
    boolean _tagged -> _tagged
    boolean _isExplicit -> _isExplicit
    int _tagNo -> _tagNo
    void writeLength(java.io.OutputStream,int) -> writeLength
    void writeDEREncoded(java.io.OutputStream,int,byte[]) -> writeDEREncoded
    void writeDEREncoded(int,byte[]) -> writeDEREncoded
    void writeDEREncoded(java.io.OutputStream,int,java.io.InputStream) -> writeDEREncoded
org.bouncycastle.asn1.DERIA5String -> org.bouncycastle.asn1.DERIA5String:
    byte[] string -> string
    org.bouncycastle.asn1.DERIA5String getInstance(java.lang.Object) -> getInstance
    org.bouncycastle.asn1.DERIA5String getInstance(org.bouncycastle.asn1.ASN1TaggedObject,boolean) -> getInstance
    java.lang.String getString() -> getString
    java.lang.String toString() -> toString
    byte[] getOctets() -> getOctets
    boolean isConstructed() -> isConstructed
    int encodedLength() -> encodedLength
    void encode(org.bouncycastle.asn1.ASN1OutputStream) -> encode
    int hashCode() -> hashCode
    boolean asn1Equals(org.bouncycastle.asn1.ASN1Primitive) -> asn1Equals
    boolean isIA5String(java.lang.String) -> isIA5String
org.bouncycastle.asn1.DERInteger -> org.bouncycastle.asn1.DERInteger:
org.bouncycastle.asn1.DERNull -> org.bouncycastle.asn1.DERNull:
    org.bouncycastle.asn1.DERNull INSTANCE -> INSTANCE
    byte[] zeroBytes -> zeroBytes
    boolean isConstructed() -> isConstructed
    int encodedLength() -> encodedLength
    void encode(org.bouncycastle.asn1.ASN1OutputStream) -> encode
org.bouncycastle.asn1.DERNumericString -> org.bouncycastle.asn1.DERNumericString:
    byte[] string -> string
    org.bouncycastle.asn1.DERNumericString getInstance(java.lang.Object) -> getInstance
    org.bouncycastle.asn1.DERNumericString getInstance(org.bouncycastle.asn1.ASN1TaggedObject,boolean) -> getInstance
    java.lang.String getString() -> getString
    java.lang.String toString() -> toString
    byte[] getOctets() -> getOctets
    boolean isConstructed() -> isConstructed
    int encodedLength() -> encodedLength
    void encode(org.bouncycastle.asn1.ASN1OutputStream) -> encode
    int hashCode() -> hashCode
    boolean asn1Equals(org.bouncycastle.asn1.ASN1Primitive) -> asn1Equals
    boolean isNumericString(java.lang.String) -> isNumericString
org.bouncycastle.asn1.DERObjectIdentifier -> org.bouncycastle.asn1.DERObjectIdentifier:
org.bouncycastle.asn1.DEROctetString -> org.bouncycastle.asn1.DEROctetString:
    boolean isConstructed() -> isConstructed
    int encodedLength() -> encodedLength
    void encode(org.bouncycastle.asn1.ASN1OutputStream) -> encode
    void encode(org.bouncycastle.asn1.DEROutputStream,byte[]) -> encode
org.bouncycastle.asn1.DEROctetStringParser -> org.bouncycastle.asn1.DEROctetStringParser:
    org.bouncycastle.asn1.DefiniteLengthInputStream stream -> stream
    java.io.InputStream getOctetStream() -> getOctetStream
    org.bouncycastle.asn1.ASN1Primitive getLoadedObject() -> getLoadedObject
    org.bouncycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
org.bouncycastle.asn1.DEROutputStream -> org.bouncycastle.asn1.DEROutputStream:
    void writeObject(org.bouncycastle.asn1.ASN1Encodable) -> writeObject
    org.bouncycastle.asn1.ASN1OutputStream getDERSubStream() -> getDERSubStream
    org.bouncycastle.asn1.ASN1OutputStream getDLSubStream() -> getDLSubStream
org.bouncycastle.asn1.DERPrintableString -> org.bouncycastle.asn1.DERPrintableString:
    byte[] string -> string
    org.bouncycastle.asn1.DERPrintableString getInstance(java.lang.Object) -> getInstance
    org.bouncycastle.asn1.DERPrintableString getInstance(org.bouncycastle.asn1.ASN1TaggedObject,boolean) -> getInstance
    java.lang.String getString() -> getString
    byte[] getOctets() -> getOctets
    boolean isConstructed() -> isConstructed
    int encodedLength() -> encodedLength
    void encode(org.bouncycastle.asn1.ASN1OutputStream) -> encode
    int hashCode() -> hashCode
    boolean asn1Equals(org.bouncycastle.asn1.ASN1Primitive) -> asn1Equals
    java.lang.String toString() -> toString
    boolean isPrintableString(java.lang.String) -> isPrintableString
org.bouncycastle.asn1.DERSequence -> org.bouncycastle.asn1.DERSequence:
    int bodyLength -> bodyLength
    int getBodyLength() -> getBodyLength
    int encodedLength() -> encodedLength
    void encode(org.bouncycastle.asn1.ASN1OutputStream) -> encode
org.bouncycastle.asn1.DERSequenceGenerator -> org.bouncycastle.asn1.DERSequenceGenerator:
    java.io.ByteArrayOutputStream _bOut -> _bOut
    void addObject(org.bouncycastle.asn1.ASN1Encodable) -> addObject
    java.io.OutputStream getRawOutputStream() -> getRawOutputStream
    void close() -> close
org.bouncycastle.asn1.DERSequenceParser -> org.bouncycastle.asn1.DERSequenceParser:
    org.bouncycastle.asn1.ASN1StreamParser _parser -> _parser
    org.bouncycastle.asn1.ASN1Encodable readObject() -> readObject
    org.bouncycastle.asn1.ASN1Primitive getLoadedObject() -> getLoadedObject
    org.bouncycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
org.bouncycastle.asn1.DERSet -> org.bouncycastle.asn1.DERSet:
    int bodyLength -> bodyLength
    int getBodyLength() -> getBodyLength
    int encodedLength() -> encodedLength
    void encode(org.bouncycastle.asn1.ASN1OutputStream) -> encode
org.bouncycastle.asn1.DERSetParser -> org.bouncycastle.asn1.DERSetParser:
    org.bouncycastle.asn1.ASN1StreamParser _parser -> _parser
    org.bouncycastle.asn1.ASN1Encodable readObject() -> readObject
    org.bouncycastle.asn1.ASN1Primitive getLoadedObject() -> getLoadedObject
    org.bouncycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
org.bouncycastle.asn1.DERT61String -> org.bouncycastle.asn1.DERT61String:
    byte[] string -> string
    org.bouncycastle.asn1.DERT61String getInstance(java.lang.Object) -> getInstance
    org.bouncycastle.asn1.DERT61String getInstance(org.bouncycastle.asn1.ASN1TaggedObject,boolean) -> getInstance
    java.lang.String getString() -> getString
    java.lang.String toString() -> toString
    boolean isConstructed() -> isConstructed
    int encodedLength() -> encodedLength
    void encode(org.bouncycastle.asn1.ASN1OutputStream) -> encode
    byte[] getOctets() -> getOctets
    boolean asn1Equals(org.bouncycastle.asn1.ASN1Primitive) -> asn1Equals
    int hashCode() -> hashCode
org.bouncycastle.asn1.DERT61UTF8String -> org.bouncycastle.asn1.DERT61UTF8String:
    byte[] string -> string
    org.bouncycastle.asn1.DERT61UTF8String getInstance(java.lang.Object) -> getInstance
    org.bouncycastle.asn1.DERT61UTF8String getInstance(org.bouncycastle.asn1.ASN1TaggedObject,boolean) -> getInstance
    java.lang.String getString() -> getString
    java.lang.String toString() -> toString
    boolean isConstructed() -> isConstructed
    int encodedLength() -> encodedLength
    void encode(org.bouncycastle.asn1.ASN1OutputStream) -> encode
    byte[] getOctets() -> getOctets
    boolean asn1Equals(org.bouncycastle.asn1.ASN1Primitive) -> asn1Equals
    int hashCode() -> hashCode
org.bouncycastle.asn1.DERTaggedObject -> org.bouncycastle.asn1.DERTaggedObject:
    byte[] ZERO_BYTES -> ZERO_BYTES
    boolean isConstructed() -> isConstructed
    int encodedLength() -> encodedLength
    void encode(org.bouncycastle.asn1.ASN1OutputStream) -> encode
org.bouncycastle.asn1.DERTags -> org.bouncycastle.asn1.DERTags:
org.bouncycastle.asn1.DERUTCTime -> org.bouncycastle.asn1.DERUTCTime:
org.bouncycastle.asn1.DERUTF8String -> org.bouncycastle.asn1.DERUTF8String:
    byte[] string -> string
    org.bouncycastle.asn1.DERUTF8String getInstance(java.lang.Object) -> getInstance
    org.bouncycastle.asn1.DERUTF8String getInstance(org.bouncycastle.asn1.ASN1TaggedObject,boolean) -> getInstance
    java.lang.String getString() -> getString
    java.lang.String toString() -> toString
    int hashCode() -> hashCode
    boolean asn1Equals(org.bouncycastle.asn1.ASN1Primitive) -> asn1Equals
    boolean isConstructed() -> isConstructed
    int encodedLength() -> encodedLength
    void encode(org.bouncycastle.asn1.ASN1OutputStream) -> encode
org.bouncycastle.asn1.DERUniversalString -> org.bouncycastle.asn1.DERUniversalString:
    char[] table -> table
    byte[] string -> string
    org.bouncycastle.asn1.DERUniversalString getInstance(java.lang.Object) -> getInstance
    org.bouncycastle.asn1.DERUniversalString getInstance(org.bouncycastle.asn1.ASN1TaggedObject,boolean) -> getInstance
    java.lang.String getString() -> getString
    java.lang.String toString() -> toString
    byte[] getOctets() -> getOctets
    boolean isConstructed() -> isConstructed
    int encodedLength() -> encodedLength
    void encode(org.bouncycastle.asn1.ASN1OutputStream) -> encode
    boolean asn1Equals(org.bouncycastle.asn1.ASN1Primitive) -> asn1Equals
    int hashCode() -> hashCode
org.bouncycastle.asn1.DERVisibleString -> org.bouncycastle.asn1.DERVisibleString:
    byte[] string -> string
    org.bouncycastle.asn1.DERVisibleString getInstance(java.lang.Object) -> getInstance
    org.bouncycastle.asn1.DERVisibleString getInstance(org.bouncycastle.asn1.ASN1TaggedObject,boolean) -> getInstance
    java.lang.String getString() -> getString
    java.lang.String toString() -> toString
    byte[] getOctets() -> getOctets
    boolean isConstructed() -> isConstructed
    int encodedLength() -> encodedLength
    void encode(org.bouncycastle.asn1.ASN1OutputStream) -> encode
    boolean asn1Equals(org.bouncycastle.asn1.ASN1Primitive) -> asn1Equals
    int hashCode() -> hashCode
org.bouncycastle.asn1.DLOutputStream -> org.bouncycastle.asn1.DLOutputStream:
    void writeObject(org.bouncycastle.asn1.ASN1Encodable) -> writeObject
org.bouncycastle.asn1.DLSequence -> org.bouncycastle.asn1.DLSequence:
    int bodyLength -> bodyLength
    int getBodyLength() -> getBodyLength
    int encodedLength() -> encodedLength
    void encode(org.bouncycastle.asn1.ASN1OutputStream) -> encode
org.bouncycastle.asn1.DLSet -> org.bouncycastle.asn1.DLSet:
    int bodyLength -> bodyLength
    int getBodyLength() -> getBodyLength
    int encodedLength() -> encodedLength
    void encode(org.bouncycastle.asn1.ASN1OutputStream) -> encode
org.bouncycastle.asn1.DLTaggedObject -> org.bouncycastle.asn1.DLTaggedObject:
    byte[] ZERO_BYTES -> ZERO_BYTES
    boolean isConstructed() -> isConstructed
    int encodedLength() -> encodedLength
    void encode(org.bouncycastle.asn1.ASN1OutputStream) -> encode
org.bouncycastle.asn1.DefiniteLengthInputStream -> org.bouncycastle.asn1.DefiniteLengthInputStream:
    byte[] EMPTY_BYTES -> EMPTY_BYTES
    int _originalLength -> _originalLength
    int _remaining -> _remaining
    int getRemaining() -> getRemaining
    int read() -> read
    int read(byte[],int,int) -> read
    byte[] toByteArray() -> toByteArray
org.bouncycastle.asn1.InMemoryRepresentable -> org.bouncycastle.asn1.InMemoryRepresentable:
    org.bouncycastle.asn1.ASN1Primitive getLoadedObject() -> getLoadedObject
org.bouncycastle.asn1.IndefiniteLengthInputStream -> org.bouncycastle.asn1.IndefiniteLengthInputStream:
    int _b1 -> _b1
    int _b2 -> _b2
    boolean _eofReached -> _eofReached
    boolean _eofOn00 -> _eofOn00
    void setEofOn00(boolean) -> setEofOn00
    boolean checkForEof() -> checkForEof
    int read(byte[],int,int) -> read
    int read() -> read
org.bouncycastle.asn1.LazyConstructionEnumeration -> org.bouncycastle.asn1.LazyConstructionEnumeration:
    org.bouncycastle.asn1.ASN1InputStream aIn -> aIn
    java.lang.Object nextObj -> nextObj
    boolean hasMoreElements() -> hasMoreElements
    java.lang.Object nextElement() -> nextElement
    java.lang.Object readObject() -> readObject
org.bouncycastle.asn1.LazyEncodedSequence -> org.bouncycastle.asn1.LazyEncodedSequence:
    byte[] encoded -> encoded
    void parse() -> parse
    org.bouncycastle.asn1.ASN1Encodable getObjectAt(int) -> getObjectAt
    java.util.Enumeration getObjects() -> getObjects
    int size() -> size
    org.bouncycastle.asn1.ASN1Primitive toDERObject() -> toDERObject
    org.bouncycastle.asn1.ASN1Primitive toDLObject() -> toDLObject
    int encodedLength() -> encodedLength
    void encode(org.bouncycastle.asn1.ASN1OutputStream) -> encode
org.bouncycastle.asn1.LimitedInputStream -> org.bouncycastle.asn1.LimitedInputStream:
    java.io.InputStream _in -> _in
    int _limit -> _limit
    int getRemaining() -> getRemaining
    void setParentEofDetect(boolean) -> setParentEofDetect
org.bouncycastle.asn1.OIDTokenizer -> org.bouncycastle.asn1.OIDTokenizer:
    java.lang.String oid -> oid
    int index -> index
    boolean hasMoreTokens() -> hasMoreTokens
    java.lang.String nextToken() -> nextToken
org.bouncycastle.asn1.StreamUtil -> org.bouncycastle.asn1.StreamUtil:
    long MAX_MEMORY -> MAX_MEMORY
    int findLimit(java.io.InputStream) -> findLimit
    int calculateBodyLength(int) -> calculateBodyLength
    int calculateTagLength(int) -> calculateTagLength
org.bouncycastle.asn1.bc.BCObjectIdentifiers -> org.bouncycastle.asn1.bc.BCObjectIdentifiers:
    org.bouncycastle.asn1.ASN1ObjectIdentifier bc -> bc
    org.bouncycastle.asn1.ASN1ObjectIdentifier bc_pbe -> bc_pbe
    org.bouncycastle.asn1.ASN1ObjectIdentifier bc_pbe_sha1 -> bc_pbe_sha1
    org.bouncycastle.asn1.ASN1ObjectIdentifier bc_pbe_sha256 -> bc_pbe_sha256
    org.bouncycastle.asn1.ASN1ObjectIdentifier bc_pbe_sha384 -> bc_pbe_sha384
    org.bouncycastle.asn1.ASN1ObjectIdentifier bc_pbe_sha512 -> bc_pbe_sha512
    org.bouncycastle.asn1.ASN1ObjectIdentifier bc_pbe_sha224 -> bc_pbe_sha224
    org.bouncycastle.asn1.ASN1ObjectIdentifier bc_pbe_sha1_pkcs5 -> bc_pbe_sha1_pkcs5
    org.bouncycastle.asn1.ASN1ObjectIdentifier bc_pbe_sha1_pkcs12 -> bc_pbe_sha1_pkcs12
    org.bouncycastle.asn1.ASN1ObjectIdentifier bc_pbe_sha256_pkcs5 -> bc_pbe_sha256_pkcs5
    org.bouncycastle.asn1.ASN1ObjectIdentifier bc_pbe_sha256_pkcs12 -> bc_pbe_sha256_pkcs12
    org.bouncycastle.asn1.ASN1ObjectIdentifier bc_pbe_sha1_pkcs12_aes128_cbc -> bc_pbe_sha1_pkcs12_aes128_cbc
    org.bouncycastle.asn1.ASN1ObjectIdentifier bc_pbe_sha1_pkcs12_aes192_cbc -> bc_pbe_sha1_pkcs12_aes192_cbc
    org.bouncycastle.asn1.ASN1ObjectIdentifier bc_pbe_sha1_pkcs12_aes256_cbc -> bc_pbe_sha1_pkcs12_aes256_cbc
    org.bouncycastle.asn1.ASN1ObjectIdentifier bc_pbe_sha256_pkcs12_aes128_cbc -> bc_pbe_sha256_pkcs12_aes128_cbc
    org.bouncycastle.asn1.ASN1ObjectIdentifier bc_pbe_sha256_pkcs12_aes192_cbc -> bc_pbe_sha256_pkcs12_aes192_cbc
    org.bouncycastle.asn1.ASN1ObjectIdentifier bc_pbe_sha256_pkcs12_aes256_cbc -> bc_pbe_sha256_pkcs12_aes256_cbc
org.bouncycastle.asn1.bsi.BSIObjectIdentifiers -> org.bouncycastle.asn1.bsi.BSIObjectIdentifiers:
    org.bouncycastle.asn1.ASN1ObjectIdentifier bsi_de -> bsi_de
    org.bouncycastle.asn1.ASN1ObjectIdentifier id_ecc -> id_ecc
    org.bouncycastle.asn1.ASN1ObjectIdentifier ecdsa_plain_signatures -> ecdsa_plain_signatures
    org.bouncycastle.asn1.ASN1ObjectIdentifier ecdsa_plain_SHA1 -> ecdsa_plain_SHA1
    org.bouncycastle.asn1.ASN1ObjectIdentifier ecdsa_plain_SHA224 -> ecdsa_plain_SHA224
    org.bouncycastle.asn1.ASN1ObjectIdentifier ecdsa_plain_SHA256 -> ecdsa_plain_SHA256
    org.bouncycastle.asn1.ASN1ObjectIdentifier ecdsa_plain_SHA384 -> ecdsa_plain_SHA384
    org.bouncycastle.asn1.ASN1ObjectIdentifier ecdsa_plain_SHA512 -> ecdsa_plain_SHA512
    org.bouncycastle.asn1.ASN1ObjectIdentifier ecdsa_plain_RIPEMD160 -> ecdsa_plain_RIPEMD160
org.bouncycastle.asn1.cmp.CAKeyUpdAnnContent -> org.bouncycastle.asn1.cmp.CAKeyUpdAnnContent:
    org.bouncycastle.asn1.cmp.CMPCertificate oldWithNew -> oldWithNew
    org.bouncycastle.asn1.cmp.CMPCertificate newWithOld -> newWithOld
    org.bouncycastle.asn1.cmp.CMPCertificate newWithNew -> newWithNew
    org.bouncycastle.asn1.cmp.CAKeyUpdAnnContent getInstance(java.lang.Object) -> getInstance
    org.bouncycastle.asn1.cmp.CMPCertificate getOldWithNew() -> getOldWithNew
    org.bouncycastle.asn1.cmp.CMPCertificate getNewWithOld() -> getNewWithOld
    org.bouncycastle.asn1.cmp.CMPCertificate getNewWithNew() -> getNewWithNew
    org.bouncycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
org.bouncycastle.asn1.cmp.CMPCertificate -> org.bouncycastle.asn1.cmp.CMPCertificate:
    org.bouncycastle.asn1.x509.Certificate x509v3PKCert -> x509v3PKCert
    org.bouncycastle.asn1.x509.AttributeCertificate x509v2AttrCert -> x509v2AttrCert
    org.bouncycastle.asn1.cmp.CMPCertificate getInstance(java.lang.Object) -> getInstance
    boolean isX509v3PKCert() -> isX509v3PKCert
    org.bouncycastle.asn1.x509.Certificate getX509v3PKCert() -> getX509v3PKCert
    org.bouncycastle.asn1.x509.AttributeCertificate getX509v2AttrCert() -> getX509v2AttrCert
    org.bouncycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
org.bouncycastle.asn1.cmp.CMPObjectIdentifiers -> org.bouncycastle.asn1.cmp.CMPObjectIdentifiers:
    org.bouncycastle.asn1.ASN1ObjectIdentifier passwordBasedMac -> passwordBasedMac
    org.bouncycastle.asn1.ASN1ObjectIdentifier dhBasedMac -> dhBasedMac
    org.bouncycastle.asn1.ASN1ObjectIdentifier it_caProtEncCert -> it_caProtEncCert
    org.bouncycastle.asn1.ASN1ObjectIdentifier it_signKeyPairTypes -> it_signKeyPairTypes
    org.bouncycastle.asn1.ASN1ObjectIdentifier it_encKeyPairTypes -> it_encKeyPairTypes
    org.bouncycastle.asn1.ASN1ObjectIdentifier it_preferredSymAlg -> it_preferredSymAlg
    org.bouncycastle.asn1.ASN1ObjectIdentifier it_caKeyUpdateInfo -> it_caKeyUpdateInfo
    org.bouncycastle.asn1.ASN1ObjectIdentifier it_currentCRL -> it_currentCRL
    org.bouncycastle.asn1.ASN1ObjectIdentifier it_unsupportedOIDs -> it_unsupportedOIDs
    org.bouncycastle.asn1.ASN1ObjectIdentifier it_keyPairParamReq -> it_keyPairParamReq
    org.bouncycastle.asn1.ASN1ObjectIdentifier it_keyPairParamRep -> it_keyPairParamRep
    org.bouncycastle.asn1.ASN1ObjectIdentifier it_revPassphrase -> it_revPassphrase
    org.bouncycastle.asn1.ASN1ObjectIdentifier it_implicitConfirm -> it_implicitConfirm
    org.bouncycastle.asn1.ASN1ObjectIdentifier it_confirmWaitTime -> it_confirmWaitTime
    org.bouncycastle.asn1.ASN1ObjectIdentifier it_origPKIMessage -> it_origPKIMessage
    org.bouncycastle.asn1.ASN1ObjectIdentifier it_suppLangTags -> it_suppLangTags
    org.bouncycastle.asn1.ASN1ObjectIdentifier id_pkip -> id_pkip
    org.bouncycastle.asn1.ASN1ObjectIdentifier id_regCtrl -> id_regCtrl
    org.bouncycastle.asn1.ASN1ObjectIdentifier id_regInfo -> id_regInfo
    org.bouncycastle.asn1.ASN1ObjectIdentifier regCtrl_regToken -> regCtrl_regToken
    org.bouncycastle.asn1.ASN1ObjectIdentifier regCtrl_authenticator -> regCtrl_authenticator
    org.bouncycastle.asn1.ASN1ObjectIdentifier regCtrl_pkiPublicationInfo -> regCtrl_pkiPublicationInfo
    org.bouncycastle.asn1.ASN1ObjectIdentifier regCtrl_pkiArchiveOptions -> regCtrl_pkiArchiveOptions
    org.bouncycastle.asn1.ASN1ObjectIdentifier regCtrl_oldCertID -> regCtrl_oldCertID
    org.bouncycastle.asn1.ASN1ObjectIdentifier regCtrl_protocolEncrKey -> regCtrl_protocolEncrKey
    org.bouncycastle.asn1.ASN1ObjectIdentifier regCtrl_altCertTemplate -> regCtrl_altCertTemplate
    org.bouncycastle.asn1.ASN1ObjectIdentifier regInfo_utf8Pairs -> regInfo_utf8Pairs
    org.bouncycastle.asn1.ASN1ObjectIdentifier regInfo_certReq -> regInfo_certReq
    org.bouncycastle.asn1.ASN1ObjectIdentifier ct_encKeyWithID -> ct_encKeyWithID
org.bouncycastle.asn1.cmp.CRLAnnContent -> org.bouncycastle.asn1.cmp.CRLAnnContent:
    org.bouncycastle.asn1.ASN1Sequence content -> content
    org.bouncycastle.asn1.cmp.CRLAnnContent getInstance(java.lang.Object) -> getInstance
    org.bouncycastle.asn1.x509.CertificateList[] getCertificateLists() -> getCertificateLists
    org.bouncycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
org.bouncycastle.asn1.cmp.CertConfirmContent -> org.bouncycastle.asn1.cmp.CertConfirmContent:
    org.bouncycastle.asn1.ASN1Sequence content -> content
    org.bouncycastle.asn1.cmp.CertConfirmContent getInstance(java.lang.Object) -> getInstance
    org.bouncycastle.asn1.cmp.CertStatus[] toCertStatusArray() -> toCertStatusArray
    org.bouncycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
org.bouncycastle.asn1.cmp.CertOrEncCert -> org.bouncycastle.asn1.cmp.CertOrEncCert:
    org.bouncycastle.asn1.cmp.CMPCertificate certificate -> certificate
    org.bouncycastle.asn1.crmf.EncryptedValue encryptedCert -> encryptedCert
    org.bouncycastle.asn1.cmp.CertOrEncCert getInstance(java.lang.Object) -> getInstance
    org.bouncycastle.asn1.cmp.CMPCertificate getCertificate() -> getCertificate
    org.bouncycastle.asn1.crmf.EncryptedValue getEncryptedCert() -> getEncryptedCert
    org.bouncycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
org.bouncycastle.asn1.cmp.CertRepMessage -> org.bouncycastle.asn1.cmp.CertRepMessage:
    org.bouncycastle.asn1.ASN1Sequence caPubs -> caPubs
    org.bouncycastle.asn1.ASN1Sequence response -> response
    org.bouncycastle.asn1.cmp.CertRepMessage getInstance(java.lang.Object) -> getInstance
    org.bouncycastle.asn1.cmp.CMPCertificate[] getCaPubs() -> getCaPubs
    org.bouncycastle.asn1.cmp.CertResponse[] getResponse() -> getResponse
    org.bouncycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
org.bouncycastle.asn1.cmp.CertResponse -> org.bouncycastle.asn1.cmp.CertResponse:
    org.bouncycastle.asn1.ASN1Integer certReqId -> certReqId
    org.bouncycastle.asn1.cmp.PKIStatusInfo status -> status
    org.bouncycastle.asn1.cmp.CertifiedKeyPair certifiedKeyPair -> certifiedKeyPair
    org.bouncycastle.asn1.ASN1OctetString rspInfo -> rspInfo
    org.bouncycastle.asn1.cmp.CertResponse getInstance(java.lang.Object) -> getInstance
    org.bouncycastle.asn1.ASN1Integer getCertReqId() -> getCertReqId
    org.bouncycastle.asn1.cmp.PKIStatusInfo getStatus() -> getStatus
    org.bouncycastle.asn1.cmp.CertifiedKeyPair getCertifiedKeyPair() -> getCertifiedKeyPair
    org.bouncycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
org.bouncycastle.asn1.cmp.CertStatus -> org.bouncycastle.asn1.cmp.CertStatus:
    org.bouncycastle.asn1.ASN1OctetString certHash -> certHash
    org.bouncycastle.asn1.ASN1Integer certReqId -> certReqId
    org.bouncycastle.asn1.cmp.PKIStatusInfo statusInfo -> statusInfo
    org.bouncycastle.asn1.cmp.CertStatus getInstance(java.lang.Object) -> getInstance
    org.bouncycastle.asn1.ASN1OctetString getCertHash() -> getCertHash
    org.bouncycastle.asn1.ASN1Integer getCertReqId() -> getCertReqId
    org.bouncycastle.asn1.cmp.PKIStatusInfo getStatusInfo() -> getStatusInfo
    org.bouncycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
org.bouncycastle.asn1.cmp.CertifiedKeyPair -> org.bouncycastle.asn1.cmp.CertifiedKeyPair:
    org.bouncycastle.asn1.cmp.CertOrEncCert certOrEncCert -> certOrEncCert
    org.bouncycastle.asn1.crmf.EncryptedValue privateKey -> privateKey
    org.bouncycastle.asn1.crmf.PKIPublicationInfo publicationInfo -> publicationInfo
    org.bouncycastle.asn1.cmp.CertifiedKeyPair getInstance(java.lang.Object) -> getInstance
    org.bouncycastle.asn1.cmp.CertOrEncCert getCertOrEncCert() -> getCertOrEncCert
    org.bouncycastle.asn1.crmf.EncryptedValue getPrivateKey() -> getPrivateKey
    org.bouncycastle.asn1.crmf.PKIPublicationInfo getPublicationInfo() -> getPublicationInfo
    org.bouncycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
org.bouncycastle.asn1.cmp.Challenge -> org.bouncycastle.asn1.cmp.Challenge:
    org.bouncycastle.asn1.x509.AlgorithmIdentifier owf -> owf
    org.bouncycastle.asn1.ASN1OctetString witness -> witness
    org.bouncycastle.asn1.ASN1OctetString challenge -> challenge
    org.bouncycastle.asn1.cmp.Challenge getInstance(java.lang.Object) -> getInstance
    org.bouncycastle.asn1.x509.AlgorithmIdentifier getOwf() -> getOwf
    byte[] getWitness() -> getWitness
    byte[] getChallenge() -> getChallenge
    org.bouncycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
    void addOptional(org.bouncycastle.asn1.ASN1EncodableVector,org.bouncycastle.asn1.ASN1Encodable) -> addOptional
org.bouncycastle.asn1.cmp.ErrorMsgContent -> org.bouncycastle.asn1.cmp.ErrorMsgContent:
    org.bouncycastle.asn1.cmp.PKIStatusInfo pkiStatusInfo -> pkiStatusInfo
    org.bouncycastle.asn1.ASN1Integer errorCode -> errorCode
    org.bouncycastle.asn1.cmp.PKIFreeText errorDetails -> errorDetails
    org.bouncycastle.asn1.cmp.ErrorMsgContent getInstance(java.lang.Object) -> getInstance
    org.bouncycastle.asn1.cmp.PKIStatusInfo getPKIStatusInfo() -> getPKIStatusInfo
    org.bouncycastle.asn1.ASN1Integer getErrorCode() -> getErrorCode
    org.bouncycastle.asn1.cmp.PKIFreeText getErrorDetails() -> getErrorDetails
    org.bouncycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
    void addOptional(org.bouncycastle.asn1.ASN1EncodableVector,org.bouncycastle.asn1.ASN1Encodable) -> addOptional
org.bouncycastle.asn1.cmp.GenMsgContent -> org.bouncycastle.asn1.cmp.GenMsgContent:
    org.bouncycastle.asn1.ASN1Sequence content -> content
    org.bouncycastle.asn1.cmp.GenMsgContent getInstance(java.lang.Object) -> getInstance
    org.bouncycastle.asn1.cmp.InfoTypeAndValue[] toInfoTypeAndValueArray() -> toInfoTypeAndValueArray
    org.bouncycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
org.bouncycastle.asn1.cmp.GenRepContent -> org.bouncycastle.asn1.cmp.GenRepContent:
    org.bouncycastle.asn1.ASN1Sequence content -> content
    org.bouncycastle.asn1.cmp.GenRepContent getInstance(java.lang.Object) -> getInstance
    org.bouncycastle.asn1.cmp.InfoTypeAndValue[] toInfoTypeAndValueArray() -> toInfoTypeAndValueArray
    org.bouncycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
org.bouncycastle.asn1.cmp.InfoTypeAndValue -> org.bouncycastle.asn1.cmp.InfoTypeAndValue:
    org.bouncycastle.asn1.ASN1ObjectIdentifier infoType -> infoType
    org.bouncycastle.asn1.ASN1Encodable infoValue -> infoValue
    org.bouncycastle.asn1.cmp.InfoTypeAndValue getInstance(java.lang.Object) -> getInstance
    org.bouncycastle.asn1.ASN1ObjectIdentifier getInfoType() -> getInfoType
    org.bouncycastle.asn1.ASN1Encodable getInfoValue() -> getInfoValue
    org.bouncycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
org.bouncycastle.asn1.cmp.KeyRecRepContent -> org.bouncycastle.asn1.cmp.KeyRecRepContent:
    org.bouncycastle.asn1.cmp.PKIStatusInfo status -> status
    org.bouncycastle.asn1.cmp.CMPCertificate newSigCert -> newSigCert
    org.bouncycastle.asn1.ASN1Sequence caCerts -> caCerts
    org.bouncycastle.asn1.ASN1Sequence keyPairHist -> keyPairHist
    org.bouncycastle.asn1.cmp.KeyRecRepContent getInstance(java.lang.Object) -> getInstance
    org.bouncycastle.asn1.cmp.PKIStatusInfo getStatus() -> getStatus
    org.bouncycastle.asn1.cmp.CMPCertificate getNewSigCert() -> getNewSigCert
    org.bouncycastle.asn1.cmp.CMPCertificate[] getCaCerts() -> getCaCerts
    org.bouncycastle.asn1.cmp.CertifiedKeyPair[] getKeyPairHist() -> getKeyPairHist
    org.bouncycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
    void addOptional(org.bouncycastle.asn1.ASN1EncodableVector,int,org.bouncycastle.asn1.ASN1Encodable) -> addOptional
org.bouncycastle.asn1.cmp.OOBCertHash -> org.bouncycastle.asn1.cmp.OOBCertHash:
    org.bouncycastle.asn1.x509.AlgorithmIdentifier hashAlg -> hashAlg
    org.bouncycastle.asn1.crmf.CertId certId -> certId
    org.bouncycastle.asn1.DERBitString hashVal -> hashVal
    org.bouncycastle.asn1.cmp.OOBCertHash getInstance(java.lang.Object) -> getInstance
    org.bouncycastle.asn1.x509.AlgorithmIdentifier getHashAlg() -> getHashAlg
    org.bouncycastle.asn1.crmf.CertId getCertId() -> getCertId
    org.bouncycastle.asn1.DERBitString getHashVal() -> getHashVal
    org.bouncycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
    void addOptional(org.bouncycastle.asn1.ASN1EncodableVector,int,org.bouncycastle.asn1.ASN1Encodable) -> addOptional
org.bouncycastle.asn1.cmp.PBMParameter -> org.bouncycastle.asn1.cmp.PBMParameter:
    org.bouncycastle.asn1.ASN1OctetString salt -> salt
    org.bouncycastle.asn1.x509.AlgorithmIdentifier owf -> owf
    org.bouncycastle.asn1.ASN1Integer iterationCount -> iterationCount
    org.bouncycastle.asn1.x509.AlgorithmIdentifier mac -> mac
    org.bouncycastle.asn1.cmp.PBMParameter getInstance(java.lang.Object) -> getInstance
    org.bouncycastle.asn1.ASN1OctetString getSalt() -> getSalt
    org.bouncycastle.asn1.x509.AlgorithmIdentifier getOwf() -> getOwf
    org.bouncycastle.asn1.ASN1Integer getIterationCount() -> getIterationCount
    org.bouncycastle.asn1.x509.AlgorithmIdentifier getMac() -> getMac
    org.bouncycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
org.bouncycastle.asn1.cmp.PKIBody -> org.bouncycastle.asn1.cmp.PKIBody:
    int TYPE_INIT_REQ -> TYPE_INIT_REQ
    int TYPE_INIT_REP -> TYPE_INIT_REP
    int TYPE_CERT_REQ -> TYPE_CERT_REQ
    int TYPE_CERT_REP -> TYPE_CERT_REP
    int TYPE_P10_CERT_REQ -> TYPE_P10_CERT_REQ
    int TYPE_POPO_CHALL -> TYPE_POPO_CHALL
    int TYPE_POPO_REP -> TYPE_POPO_REP
    int TYPE_KEY_UPDATE_REQ -> TYPE_KEY_UPDATE_REQ
    int TYPE_KEY_UPDATE_REP -> TYPE_KEY_UPDATE_REP
    int TYPE_KEY_RECOVERY_REQ -> TYPE_KEY_RECOVERY_REQ
    int TYPE_KEY_RECOVERY_REP -> TYPE_KEY_RECOVERY_REP
    int TYPE_REVOCATION_REQ -> TYPE_REVOCATION_REQ
    int TYPE_REVOCATION_REP -> TYPE_REVOCATION_REP
    int TYPE_CROSS_CERT_REQ -> TYPE_CROSS_CERT_REQ
    int TYPE_CROSS_CERT_REP -> TYPE_CROSS_CERT_REP
    int TYPE_CA_KEY_UPDATE_ANN -> TYPE_CA_KEY_UPDATE_ANN
    int TYPE_CERT_ANN -> TYPE_CERT_ANN
    int TYPE_REVOCATION_ANN -> TYPE_REVOCATION_ANN
    int TYPE_CRL_ANN -> TYPE_CRL_ANN
    int TYPE_CONFIRM -> TYPE_CONFIRM
    int TYPE_NESTED -> TYPE_NESTED
    int TYPE_GEN_MSG -> TYPE_GEN_MSG
    int TYPE_GEN_REP -> TYPE_GEN_REP
    int TYPE_ERROR -> TYPE_ERROR
    int TYPE_CERT_CONFIRM -> TYPE_CERT_CONFIRM
    int TYPE_POLL_REQ -> TYPE_POLL_REQ
    int TYPE_POLL_REP -> TYPE_POLL_REP
    int tagNo -> tagNo
    org.bouncycastle.asn1.ASN1Encodable body -> body
    org.bouncycastle.asn1.cmp.PKIBody getInstance(java.lang.Object) -> getInstance
    org.bouncycastle.asn1.ASN1Encodable getBodyForType(int,org.bouncycastle.asn1.ASN1Encodable) -> getBodyForType
    int getType() -> getType
    org.bouncycastle.asn1.ASN1Encodable getContent() -> getContent
    org.bouncycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
org.bouncycastle.asn1.cmp.PKIConfirmContent -> org.bouncycastle.asn1.cmp.PKIConfirmContent:
    org.bouncycastle.asn1.ASN1Null val -> val
    org.bouncycastle.asn1.cmp.PKIConfirmContent getInstance(java.lang.Object) -> getInstance
    org.bouncycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
org.bouncycastle.asn1.cmp.PKIFailureInfo -> org.bouncycastle.asn1.cmp.PKIFailureInfo:
    int badAlg -> badAlg
    int badMessageCheck -> badMessageCheck
    int badRequest -> badRequest
    int badTime -> badTime
    int badCertId -> badCertId
    int badDataFormat -> badDataFormat
    int wrongAuthority -> wrongAuthority
    int incorrectData -> incorrectData
    int missingTimeStamp -> missingTimeStamp
    int badPOP -> badPOP
    int certRevoked -> certRevoked
    int certConfirmed -> certConfirmed
    int wrongIntegrity -> wrongIntegrity
    int badRecipientNonce -> badRecipientNonce
    int timeNotAvailable -> timeNotAvailable
    int unacceptedPolicy -> unacceptedPolicy
    int unacceptedExtension -> unacceptedExtension
    int addInfoNotAvailable -> addInfoNotAvailable
    int badSenderNonce -> badSenderNonce
    int badCertTemplate -> badCertTemplate
    int signerNotTrusted -> signerNotTrusted
    int transactionIdInUse -> transactionIdInUse
    int unsupportedVersion -> unsupportedVersion
    int notAuthorized -> notAuthorized
    int systemUnavail -> systemUnavail
    int systemFailure -> systemFailure
    int duplicateCertReq -> duplicateCertReq
    int BAD_ALG -> BAD_ALG
    int BAD_MESSAGE_CHECK -> BAD_MESSAGE_CHECK
    int BAD_REQUEST -> BAD_REQUEST
    int BAD_TIME -> BAD_TIME
    int BAD_CERT_ID -> BAD_CERT_ID
    int BAD_DATA_FORMAT -> BAD_DATA_FORMAT
    int WRONG_AUTHORITY -> WRONG_AUTHORITY
    int INCORRECT_DATA -> INCORRECT_DATA
    int MISSING_TIME_STAMP -> MISSING_TIME_STAMP
    int BAD_POP -> BAD_POP
    int TIME_NOT_AVAILABLE -> TIME_NOT_AVAILABLE
    int UNACCEPTED_POLICY -> UNACCEPTED_POLICY
    int UNACCEPTED_EXTENSION -> UNACCEPTED_EXTENSION
    int ADD_INFO_NOT_AVAILABLE -> ADD_INFO_NOT_AVAILABLE
    int SYSTEM_FAILURE -> SYSTEM_FAILURE
    java.lang.String toString() -> toString
org.bouncycastle.asn1.cmp.PKIFreeText -> org.bouncycastle.asn1.cmp.PKIFreeText:
    org.bouncycastle.asn1.ASN1Sequence strings -> strings
    org.bouncycastle.asn1.cmp.PKIFreeText getInstance(org.bouncycastle.asn1.ASN1TaggedObject,boolean) -> getInstance
    org.bouncycastle.asn1.cmp.PKIFreeText getInstance(java.lang.Object) -> getInstance
    int size() -> size
    org.bouncycastle.asn1.DERUTF8String getStringAt(int) -> getStringAt
    org.bouncycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
org.bouncycastle.asn1.cmp.PKIHeader -> org.bouncycastle.asn1.cmp.PKIHeader:
    org.bouncycastle.asn1.x509.GeneralName NULL_NAME -> NULL_NAME
    int CMP_1999 -> CMP_1999
    int CMP_2000 -> CMP_2000
    org.bouncycastle.asn1.ASN1Integer pvno -> pvno
    org.bouncycastle.asn1.x509.GeneralName sender -> sender
    org.bouncycastle.asn1.x509.GeneralName recipient -> recipient
    org.bouncycastle.asn1.ASN1GeneralizedTime messageTime -> messageTime
    org.bouncycastle.asn1.x509.AlgorithmIdentifier protectionAlg -> protectionAlg
    org.bouncycastle.asn1.ASN1OctetString senderKID -> senderKID
    org.bouncycastle.asn1.ASN1OctetString recipKID -> recipKID
    org.bouncycastle.asn1.ASN1OctetString transactionID -> transactionID
    org.bouncycastle.asn1.ASN1OctetString senderNonce -> senderNonce
    org.bouncycastle.asn1.ASN1OctetString recipNonce -> recipNonce
    org.bouncycastle.asn1.cmp.PKIFreeText freeText -> freeText
    org.bouncycastle.asn1.ASN1Sequence generalInfo -> generalInfo
    org.bouncycastle.asn1.cmp.PKIHeader getInstance(java.lang.Object) -> getInstance
    org.bouncycastle.asn1.ASN1Integer getPvno() -> getPvno
    org.bouncycastle.asn1.x509.GeneralName getSender() -> getSender
    org.bouncycastle.asn1.x509.GeneralName getRecipient() -> getRecipient
    org.bouncycastle.asn1.ASN1GeneralizedTime getMessageTime() -> getMessageTime
    org.bouncycastle.asn1.x509.AlgorithmIdentifier getProtectionAlg() -> getProtectionAlg
    org.bouncycastle.asn1.ASN1OctetString getSenderKID() -> getSenderKID
    org.bouncycastle.asn1.ASN1OctetString getRecipKID() -> getRecipKID
    org.bouncycastle.asn1.ASN1OctetString getTransactionID() -> getTransactionID
    org.bouncycastle.asn1.ASN1OctetString getSenderNonce() -> getSenderNonce
    org.bouncycastle.asn1.ASN1OctetString getRecipNonce() -> getRecipNonce
    org.bouncycastle.asn1.cmp.PKIFreeText getFreeText() -> getFreeText
    org.bouncycastle.asn1.cmp.InfoTypeAndValue[] getGeneralInfo() -> getGeneralInfo
    org.bouncycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
    void addOptional(org.bouncycastle.asn1.ASN1EncodableVector,int,org.bouncycastle.asn1.ASN1Encodable) -> addOptional
org.bouncycastle.asn1.cmp.PKIHeaderBuilder -> org.bouncycastle.asn1.cmp.PKIHeaderBuilder:
    org.bouncycastle.asn1.ASN1Integer pvno -> pvno
    org.bouncycastle.asn1.x509.GeneralName sender -> sender
    org.bouncycastle.asn1.x509.GeneralName recipient -> recipient
    org.bouncycastle.asn1.ASN1GeneralizedTime messageTime -> messageTime
    org.bouncycastle.asn1.x509.AlgorithmIdentifier protectionAlg -> protectionAlg
    org.bouncycastle.asn1.ASN1OctetString senderKID -> senderKID
    org.bouncycastle.asn1.ASN1OctetString recipKID -> recipKID
    org.bouncycastle.asn1.ASN1OctetString transactionID -> transactionID
    org.bouncycastle.asn1.ASN1OctetString senderNonce -> senderNonce
    org.bouncycastle.asn1.ASN1OctetString recipNonce -> recipNonce
    org.bouncycastle.asn1.cmp.PKIFreeText freeText -> freeText
    org.bouncycastle.asn1.ASN1Sequence generalInfo -> generalInfo
    org.bouncycastle.asn1.cmp.PKIHeaderBuilder setMessageTime(org.bouncycastle.asn1.ASN1GeneralizedTime) -> setMessageTime
    org.bouncycastle.asn1.cmp.PKIHeaderBuilder setProtectionAlg(org.bouncycastle.asn1.x509.AlgorithmIdentifier) -> setProtectionAlg
    org.bouncycastle.asn1.cmp.PKIHeaderBuilder setSenderKID(byte[]) -> setSenderKID
    org.bouncycastle.asn1.cmp.PKIHeaderBuilder setSenderKID(org.bouncycastle.asn1.ASN1OctetString) -> setSenderKID
    org.bouncycastle.asn1.cmp.PKIHeaderBuilder setRecipKID(byte[]) -> setRecipKID
    org.bouncycastle.asn1.cmp.PKIHeaderBuilder setRecipKID(org.bouncycastle.asn1.DEROctetString) -> setRecipKID
    org.bouncycastle.asn1.cmp.PKIHeaderBuilder setTransactionID(byte[]) -> setTransactionID
    org.bouncycastle.asn1.cmp.PKIHeaderBuilder setTransactionID(org.bouncycastle.asn1.ASN1OctetString) -> setTransactionID
    org.bouncycastle.asn1.cmp.PKIHeaderBuilder setSenderNonce(byte[]) -> setSenderNonce
    org.bouncycastle.asn1.cmp.PKIHeaderBuilder setSenderNonce(org.bouncycastle.asn1.ASN1OctetString) -> setSenderNonce
    org.bouncycastle.asn1.cmp.PKIHeaderBuilder setRecipNonce(byte[]) -> setRecipNonce
    org.bouncycastle.asn1.cmp.PKIHeaderBuilder setRecipNonce(org.bouncycastle.asn1.ASN1OctetString) -> setRecipNonce
    org.bouncycastle.asn1.cmp.PKIHeaderBuilder setFreeText(org.bouncycastle.asn1.cmp.PKIFreeText) -> setFreeText
    org.bouncycastle.asn1.cmp.PKIHeaderBuilder setGeneralInfo(org.bouncycastle.asn1.cmp.InfoTypeAndValue) -> setGeneralInfo
    org.bouncycastle.asn1.cmp.PKIHeaderBuilder setGeneralInfo(org.bouncycastle.asn1.cmp.InfoTypeAndValue[]) -> setGeneralInfo
    org.bouncycastle.asn1.cmp.PKIHeaderBuilder setGeneralInfo(org.bouncycastle.asn1.ASN1Sequence) -> setGeneralInfo
    org.bouncycastle.asn1.ASN1Sequence makeGeneralInfoSeq(org.bouncycastle.asn1.cmp.InfoTypeAndValue) -> makeGeneralInfoSeq
    org.bouncycastle.asn1.ASN1Sequence makeGeneralInfoSeq(org.bouncycastle.asn1.cmp.InfoTypeAndValue[]) -> makeGeneralInfoSeq
    org.bouncycastle.asn1.cmp.PKIHeader build() -> build
    void addOptional(org.bouncycastle.asn1.ASN1EncodableVector,int,org.bouncycastle.asn1.ASN1Encodable) -> addOptional
org.bouncycastle.asn1.cmp.PKIMessage -> org.bouncycastle.asn1.cmp.PKIMessage:
    org.bouncycastle.asn1.cmp.PKIHeader header -> header
    org.bouncycastle.asn1.cmp.PKIBody body -> body
    org.bouncycastle.asn1.DERBitString protection -> protection
    org.bouncycastle.asn1.ASN1Sequence extraCerts -> extraCerts
    org.bouncycastle.asn1.cmp.PKIMessage getInstance(java.lang.Object) -> getInstance
    org.bouncycastle.asn1.cmp.PKIHeader getHeader() -> getHeader
    org.bouncycastle.asn1.cmp.PKIBody getBody() -> getBody
    org.bouncycastle.asn1.DERBitString getProtection() -> getProtection
    org.bouncycastle.asn1.cmp.CMPCertificate[] getExtraCerts() -> getExtraCerts
    org.bouncycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
    void addOptional(org.bouncycastle.asn1.ASN1EncodableVector,int,org.bouncycastle.asn1.ASN1Encodable) -> addOptional
org.bouncycastle.asn1.cmp.PKIMessages -> org.bouncycastle.asn1.cmp.PKIMessages:
    org.bouncycastle.asn1.ASN1Sequence content -> content
    org.bouncycastle.asn1.cmp.PKIMessages getInstance(java.lang.Object) -> getInstance
    org.bouncycastle.asn1.cmp.PKIMessage[] toPKIMessageArray() -> toPKIMessageArray
    org.bouncycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
org.bouncycastle.asn1.cmp.PKIStatus -> org.bouncycastle.asn1.cmp.PKIStatus:
    int GRANTED -> GRANTED
    int GRANTED_WITH_MODS -> GRANTED_WITH_MODS
    int REJECTION -> REJECTION
    int WAITING -> WAITING
    int REVOCATION_WARNING -> REVOCATION_WARNING
    int REVOCATION_NOTIFICATION -> REVOCATION_NOTIFICATION
    int KEY_UPDATE_WARNING -> KEY_UPDATE_WARNING
    org.bouncycastle.asn1.cmp.PKIStatus granted -> granted
    org.bouncycastle.asn1.cmp.PKIStatus grantedWithMods -> grantedWithMods
    org.bouncycastle.asn1.cmp.PKIStatus rejection -> rejection
    org.bouncycastle.asn1.cmp.PKIStatus waiting -> waiting
    org.bouncycastle.asn1.cmp.PKIStatus revocationWarning -> revocationWarning
    org.bouncycastle.asn1.cmp.PKIStatus revocationNotification -> revocationNotification
    org.bouncycastle.asn1.cmp.PKIStatus keyUpdateWaiting -> keyUpdateWaiting
    org.bouncycastle.asn1.ASN1Integer value -> value
    org.bouncycastle.asn1.cmp.PKIStatus getInstance(java.lang.Object) -> getInstance
    java.math.BigInteger getValue() -> getValue
    org.bouncycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
org.bouncycastle.asn1.cmp.PKIStatusInfo -> org.bouncycastle.asn1.cmp.PKIStatusInfo:
    org.bouncycastle.asn1.ASN1Integer status -> status
    org.bouncycastle.asn1.cmp.PKIFreeText statusString -> statusString
    org.bouncycastle.asn1.DERBitString failInfo -> failInfo
    org.bouncycastle.asn1.cmp.PKIStatusInfo getInstance(org.bouncycastle.asn1.ASN1TaggedObject,boolean) -> getInstance
    org.bouncycastle.asn1.cmp.PKIStatusInfo getInstance(java.lang.Object) -> getInstance
    java.math.BigInteger getStatus() -> getStatus
    org.bouncycastle.asn1.cmp.PKIFreeText getStatusString() -> getStatusString
    org.bouncycastle.asn1.DERBitString getFailInfo() -> getFailInfo
    org.bouncycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
org.bouncycastle.asn1.cmp.POPODecKeyChallContent -> org.bouncycastle.asn1.cmp.POPODecKeyChallContent:
    org.bouncycastle.asn1.ASN1Sequence content -> content
    org.bouncycastle.asn1.cmp.POPODecKeyChallContent getInstance(java.lang.Object) -> getInstance
    org.bouncycastle.asn1.cmp.Challenge[] toChallengeArray() -> toChallengeArray
    org.bouncycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
org.bouncycastle.asn1.cmp.POPODecKeyRespContent -> org.bouncycastle.asn1.cmp.POPODecKeyRespContent:
    org.bouncycastle.asn1.ASN1Sequence content -> content
    org.bouncycastle.asn1.cmp.POPODecKeyRespContent getInstance(java.lang.Object) -> getInstance
    org.bouncycastle.asn1.ASN1Integer[] toASN1IntegerArray() -> toASN1IntegerArray
    org.bouncycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
org.bouncycastle.asn1.cmp.PollRepContent -> org.bouncycastle.asn1.cmp.PollRepContent:
    org.bouncycastle.asn1.ASN1Integer[] certReqId -> certReqId
    org.bouncycastle.asn1.ASN1Integer[] checkAfter -> checkAfter
    org.bouncycastle.asn1.cmp.PKIFreeText[] reason -> reason
    org.bouncycastle.asn1.cmp.PollRepContent getInstance(java.lang.Object) -> getInstance
    int size() -> size
    org.bouncycastle.asn1.ASN1Integer getCertReqId(int) -> getCertReqId
    org.bouncycastle.asn1.ASN1Integer getCheckAfter(int) -> getCheckAfter
    org.bouncycastle.asn1.cmp.PKIFreeText getReason(int) -> getReason
    org.bouncycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
org.bouncycastle.asn1.cmp.PollReqContent -> org.bouncycastle.asn1.cmp.PollReqContent:
    org.bouncycastle.asn1.ASN1Sequence content -> content
    org.bouncycastle.asn1.cmp.PollReqContent getInstance(java.lang.Object) -> getInstance
    org.bouncycastle.asn1.ASN1Integer[][] getCertReqIds() -> getCertReqIds
    org.bouncycastle.asn1.ASN1Integer[] sequenceToASN1IntegerArray(org.bouncycastle.asn1.ASN1Sequence) -> sequenceToASN1IntegerArray
    org.bouncycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
org.bouncycastle.asn1.cmp.ProtectedPart -> org.bouncycastle.asn1.cmp.ProtectedPart:
    org.bouncycastle.asn1.cmp.PKIHeader header -> header
    org.bouncycastle.asn1.cmp.PKIBody body -> body
    org.bouncycastle.asn1.cmp.ProtectedPart getInstance(java.lang.Object) -> getInstance
    org.bouncycastle.asn1.cmp.PKIHeader getHeader() -> getHeader
    org.bouncycastle.asn1.cmp.PKIBody getBody() -> getBody
    org.bouncycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
org.bouncycastle.asn1.cmp.RevAnnContent -> org.bouncycastle.asn1.cmp.RevAnnContent:
    org.bouncycastle.asn1.cmp.PKIStatus status -> status
    org.bouncycastle.asn1.crmf.CertId certId -> certId
    org.bouncycastle.asn1.ASN1GeneralizedTime willBeRevokedAt -> willBeRevokedAt
    org.bouncycastle.asn1.ASN1GeneralizedTime badSinceDate -> badSinceDate
    org.bouncycastle.asn1.x509.Extensions crlDetails -> crlDetails
    org.bouncycastle.asn1.cmp.RevAnnContent getInstance(java.lang.Object) -> getInstance
    org.bouncycastle.asn1.cmp.PKIStatus getStatus() -> getStatus
    org.bouncycastle.asn1.crmf.CertId getCertId() -> getCertId
    org.bouncycastle.asn1.ASN1GeneralizedTime getWillBeRevokedAt() -> getWillBeRevokedAt
    org.bouncycastle.asn1.ASN1GeneralizedTime getBadSinceDate() -> getBadSinceDate
    org.bouncycastle.asn1.x509.Extensions getCrlDetails() -> getCrlDetails
    org.bouncycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
org.bouncycastle.asn1.cmp.RevDetails -> org.bouncycastle.asn1.cmp.RevDetails:
    org.bouncycastle.asn1.crmf.CertTemplate certDetails -> certDetails
    org.bouncycastle.asn1.x509.Extensions crlEntryDetails -> crlEntryDetails
    org.bouncycastle.asn1.cmp.RevDetails getInstance(java.lang.Object) -> getInstance
    org.bouncycastle.asn1.crmf.CertTemplate getCertDetails() -> getCertDetails
    org.bouncycastle.asn1.x509.Extensions getCrlEntryDetails() -> getCrlEntryDetails
    org.bouncycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
org.bouncycastle.asn1.cmp.RevRepContent -> org.bouncycastle.asn1.cmp.RevRepContent:
    org.bouncycastle.asn1.ASN1Sequence status -> status
    org.bouncycastle.asn1.ASN1Sequence revCerts -> revCerts
    org.bouncycastle.asn1.ASN1Sequence crls -> crls
    org.bouncycastle.asn1.cmp.RevRepContent getInstance(java.lang.Object) -> getInstance
    org.bouncycastle.asn1.cmp.PKIStatusInfo[] getStatus() -> getStatus
    org.bouncycastle.asn1.crmf.CertId[] getRevCerts() -> getRevCerts
    org.bouncycastle.asn1.x509.CertificateList[] getCrls() -> getCrls
    org.bouncycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
    void addOptional(org.bouncycastle.asn1.ASN1EncodableVector,int,org.bouncycastle.asn1.ASN1Encodable) -> addOptional
org.bouncycastle.asn1.cmp.RevRepContentBuilder -> org.bouncycastle.asn1.cmp.RevRepContentBuilder:
    org.bouncycastle.asn1.ASN1EncodableVector status -> status
    org.bouncycastle.asn1.ASN1EncodableVector revCerts -> revCerts
    org.bouncycastle.asn1.ASN1EncodableVector crls -> crls
    org.bouncycastle.asn1.cmp.RevRepContentBuilder add(org.bouncycastle.asn1.cmp.PKIStatusInfo) -> add
    org.bouncycastle.asn1.cmp.RevRepContentBuilder add(org.bouncycastle.asn1.cmp.PKIStatusInfo,org.bouncycastle.asn1.crmf.CertId) -> add
    org.bouncycastle.asn1.cmp.RevRepContentBuilder addCrl(org.bouncycastle.asn1.x509.CertificateList) -> addCrl
    org.bouncycastle.asn1.cmp.RevRepContent build() -> build
org.bouncycastle.asn1.cmp.RevReqContent -> org.bouncycastle.asn1.cmp.RevReqContent:
    org.bouncycastle.asn1.ASN1Sequence content -> content
    org.bouncycastle.asn1.cmp.RevReqContent getInstance(java.lang.Object) -> getInstance
    org.bouncycastle.asn1.cmp.RevDetails[] toRevDetailsArray() -> toRevDetailsArray
    org.bouncycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
org.bouncycastle.asn1.cms.Attribute -> org.bouncycastle.asn1.cms.Attribute:
    org.bouncycastle.asn1.ASN1ObjectIdentifier attrType -> attrType
    org.bouncycastle.asn1.ASN1Set attrValues -> attrValues
    org.bouncycastle.asn1.cms.Attribute getInstance(java.lang.Object) -> getInstance
    org.bouncycastle.asn1.ASN1ObjectIdentifier getAttrType() -> getAttrType
    org.bouncycastle.asn1.ASN1Set getAttrValues() -> getAttrValues
    org.bouncycastle.asn1.ASN1Encodable[] getAttributeValues() -> getAttributeValues
    org.bouncycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
org.bouncycastle.asn1.cms.AttributeTable -> org.bouncycastle.asn1.cms.AttributeTable:
    java.util.Hashtable attributes -> attributes
    void addAttribute(org.bouncycastle.asn1.ASN1ObjectIdentifier,org.bouncycastle.asn1.cms.Attribute) -> addAttribute
    org.bouncycastle.asn1.cms.Attribute get(org.bouncycastle.asn1.ASN1ObjectIdentifier) -> get
    org.bouncycastle.asn1.ASN1EncodableVector getAll(org.bouncycastle.asn1.ASN1ObjectIdentifier) -> getAll
    int size() -> size
    java.util.Hashtable toHashtable() -> toHashtable
    org.bouncycastle.asn1.ASN1EncodableVector toASN1EncodableVector() -> toASN1EncodableVector
    org.bouncycastle.asn1.cms.Attributes toASN1Structure() -> toASN1Structure
    java.util.Hashtable copyTable(java.util.Hashtable) -> copyTable
    org.bouncycastle.asn1.cms.AttributeTable add(org.bouncycastle.asn1.ASN1ObjectIdentifier,org.bouncycastle.asn1.ASN1Encodable) -> add
    org.bouncycastle.asn1.cms.AttributeTable remove(org.bouncycastle.asn1.ASN1ObjectIdentifier) -> remove
org.bouncycastle.asn1.cms.Attributes -> org.bouncycastle.asn1.cms.Attributes:
    org.bouncycastle.asn1.ASN1Set attributes -> attributes
    org.bouncycastle.asn1.cms.Attributes getInstance(java.lang.Object) -> getInstance
    org.bouncycastle.asn1.cms.Attribute[] getAttributes() -> getAttributes
    org.bouncycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
org.bouncycastle.asn1.cms.AuthEnvelopedData -> org.bouncycastle.asn1.cms.AuthEnvelopedData:
    org.bouncycastle.asn1.ASN1Integer version -> version
    org.bouncycastle.asn1.cms.OriginatorInfo originatorInfo -> originatorInfo
    org.bouncycastle.asn1.ASN1Set recipientInfos -> recipientInfos
    org.bouncycastle.asn1.cms.EncryptedContentInfo authEncryptedContentInfo -> authEncryptedContentInfo
    org.bouncycastle.asn1.ASN1Set authAttrs -> authAttrs
    org.bouncycastle.asn1.ASN1OctetString mac -> mac
    org.bouncycastle.asn1.ASN1Set unauthAttrs -> unauthAttrs
    org.bouncycastle.asn1.cms.AuthEnvelopedData getInstance(org.bouncycastle.asn1.ASN1TaggedObject,boolean) -> getInstance
    org.bouncycastle.asn1.cms.AuthEnvelopedData getInstance(java.lang.Object) -> getInstance
    org.bouncycastle.asn1.ASN1Integer getVersion() -> getVersion
    org.bouncycastle.asn1.cms.OriginatorInfo getOriginatorInfo() -> getOriginatorInfo
    org.bouncycastle.asn1.ASN1Set getRecipientInfos() -> getRecipientInfos
    org.bouncycastle.asn1.cms.EncryptedContentInfo getAuthEncryptedContentInfo() -> getAuthEncryptedContentInfo
    org.bouncycastle.asn1.ASN1Set getAuthAttrs() -> getAuthAttrs
    org.bouncycastle.asn1.ASN1OctetString getMac() -> getMac
    org.bouncycastle.asn1.ASN1Set getUnauthAttrs() -> getUnauthAttrs
    org.bouncycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
org.bouncycastle.asn1.cms.AuthEnvelopedDataParser -> org.bouncycastle.asn1.cms.AuthEnvelopedDataParser:
    org.bouncycastle.asn1.ASN1SequenceParser seq -> seq
    org.bouncycastle.asn1.ASN1Integer version -> version
    org.bouncycastle.asn1.ASN1Encodable nextObject -> nextObject
    boolean originatorInfoCalled -> originatorInfoCalled
    org.bouncycastle.asn1.ASN1Integer getVersion() -> getVersion
    org.bouncycastle.asn1.cms.OriginatorInfo getOriginatorInfo() -> getOriginatorInfo
    org.bouncycastle.asn1.ASN1SetParser getRecipientInfos() -> getRecipientInfos
    org.bouncycastle.asn1.cms.EncryptedContentInfoParser getAuthEncryptedContentInfo() -> getAuthEncryptedContentInfo
    org.bouncycastle.asn1.ASN1SetParser getAuthAttrs() -> getAuthAttrs
    org.bouncycastle.asn1.ASN1OctetString getMac() -> getMac
    org.bouncycastle.asn1.ASN1SetParser getUnauthAttrs() -> getUnauthAttrs
org.bouncycastle.asn1.cms.AuthenticatedData -> org.bouncycastle.asn1.cms.AuthenticatedData:
    org.bouncycastle.asn1.ASN1Integer version -> version
    org.bouncycastle.asn1.cms.OriginatorInfo originatorInfo -> originatorInfo
    org.bouncycastle.asn1.ASN1Set recipientInfos -> recipientInfos
    org.bouncycastle.asn1.x509.AlgorithmIdentifier macAlgorithm -> macAlgorithm
    org.bouncycastle.asn1.x509.AlgorithmIdentifier digestAlgorithm -> digestAlgorithm
    org.bouncycastle.asn1.cms.ContentInfo encapsulatedContentInfo -> encapsulatedContentInfo
    org.bouncycastle.asn1.ASN1Set authAttrs -> authAttrs
    org.bouncycastle.asn1.ASN1OctetString mac -> mac
    org.bouncycastle.asn1.ASN1Set unauthAttrs -> unauthAttrs
    org.bouncycastle.asn1.cms.AuthenticatedData getInstance(org.bouncycastle.asn1.ASN1TaggedObject,boolean) -> getInstance
    org.bouncycastle.asn1.cms.AuthenticatedData getInstance(java.lang.Object) -> getInstance
    org.bouncycastle.asn1.ASN1Integer getVersion() -> getVersion
    org.bouncycastle.asn1.cms.OriginatorInfo getOriginatorInfo() -> getOriginatorInfo
    org.bouncycastle.asn1.ASN1Set getRecipientInfos() -> getRecipientInfos
    org.bouncycastle.asn1.x509.AlgorithmIdentifier getMacAlgorithm() -> getMacAlgorithm
    org.bouncycastle.asn1.x509.AlgorithmIdentifier getDigestAlgorithm() -> getDigestAlgorithm
    org.bouncycastle.asn1.cms.ContentInfo getEncapsulatedContentInfo() -> getEncapsulatedContentInfo
    org.bouncycastle.asn1.ASN1Set getAuthAttrs() -> getAuthAttrs
    org.bouncycastle.asn1.ASN1OctetString getMac() -> getMac
    org.bouncycastle.asn1.ASN1Set getUnauthAttrs() -> getUnauthAttrs
    org.bouncycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
    int calculateVersion(org.bouncycastle.asn1.cms.OriginatorInfo) -> calculateVersion
org.bouncycastle.asn1.cms.AuthenticatedDataParser -> org.bouncycastle.asn1.cms.AuthenticatedDataParser:
    org.bouncycastle.asn1.ASN1SequenceParser seq -> seq
    org.bouncycastle.asn1.ASN1Integer version -> version
    org.bouncycastle.asn1.ASN1Encodable nextObject -> nextObject
    boolean originatorInfoCalled -> originatorInfoCalled
    org.bouncycastle.asn1.ASN1Integer getVersion() -> getVersion
    org.bouncycastle.asn1.cms.OriginatorInfo getOriginatorInfo() -> getOriginatorInfo
    org.bouncycastle.asn1.ASN1SetParser getRecipientInfos() -> getRecipientInfos
    org.bouncycastle.asn1.x509.AlgorithmIdentifier getMacAlgorithm() -> getMacAlgorithm
    org.bouncycastle.asn1.x509.AlgorithmIdentifier getDigestAlgorithm() -> getDigestAlgorithm
    org.bouncycastle.asn1.cms.ContentInfoParser getEnapsulatedContentInfo() -> getEnapsulatedContentInfo
    org.bouncycastle.asn1.cms.ContentInfoParser getEncapsulatedContentInfo() -> getEncapsulatedContentInfo
    org.bouncycastle.asn1.ASN1SetParser getAuthAttrs() -> getAuthAttrs
    org.bouncycastle.asn1.ASN1OctetString getMac() -> getMac
    org.bouncycastle.asn1.ASN1SetParser getUnauthAttrs() -> getUnauthAttrs
org.bouncycastle.asn1.cms.CCMParameters -> org.bouncycastle.asn1.cms.CCMParameters:
    byte[] nonce -> nonce
    int icvLen -> icvLen
    org.bouncycastle.asn1.cms.CCMParameters getInstance(java.lang.Object) -> getInstance
    byte[] getNonce() -> getNonce
    int getIcvLen() -> getIcvLen
    org.bouncycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
org.bouncycastle.asn1.cms.CMSAttributes -> org.bouncycastle.asn1.cms.CMSAttributes:
    org.bouncycastle.asn1.ASN1ObjectIdentifier contentType -> contentType
    org.bouncycastle.asn1.ASN1ObjectIdentifier messageDigest -> messageDigest
    org.bouncycastle.asn1.ASN1ObjectIdentifier signingTime -> signingTime
    org.bouncycastle.asn1.ASN1ObjectIdentifier counterSignature -> counterSignature
    org.bouncycastle.asn1.ASN1ObjectIdentifier contentHint -> contentHint
org.bouncycastle.asn1.cms.CMSObjectIdentifiers -> org.bouncycastle.asn1.cms.CMSObjectIdentifiers:
    org.bouncycastle.asn1.ASN1ObjectIdentifier data -> data
    org.bouncycastle.asn1.ASN1ObjectIdentifier signedData -> signedData
    org.bouncycastle.asn1.ASN1ObjectIdentifier envelopedData -> envelopedData
    org.bouncycastle.asn1.ASN1ObjectIdentifier signedAndEnvelopedData -> signedAndEnvelopedData
    org.bouncycastle.asn1.ASN1ObjectIdentifier digestedData -> digestedData
    org.bouncycastle.asn1.ASN1ObjectIdentifier encryptedData -> encryptedData
    org.bouncycastle.asn1.ASN1ObjectIdentifier authenticatedData -> authenticatedData
    org.bouncycastle.asn1.ASN1ObjectIdentifier compressedData -> compressedData
    org.bouncycastle.asn1.ASN1ObjectIdentifier authEnvelopedData -> authEnvelopedData
    org.bouncycastle.asn1.ASN1ObjectIdentifier timestampedData -> timestampedData
    org.bouncycastle.asn1.ASN1ObjectIdentifier id_ri -> id_ri
    org.bouncycastle.asn1.ASN1ObjectIdentifier id_ri_ocsp_response -> id_ri_ocsp_response
    org.bouncycastle.asn1.ASN1ObjectIdentifier id_ri_scvp -> id_ri_scvp
org.bouncycastle.asn1.cms.CompressedData -> org.bouncycastle.asn1.cms.CompressedData:
    org.bouncycastle.asn1.ASN1Integer version -> version
    org.bouncycastle.asn1.x509.AlgorithmIdentifier compressionAlgorithm -> compressionAlgorithm
    org.bouncycastle.asn1.cms.ContentInfo encapContentInfo -> encapContentInfo
    org.bouncycastle.asn1.cms.CompressedData getInstance(org.bouncycastle.asn1.ASN1TaggedObject,boolean) -> getInstance
    org.bouncycastle.asn1.cms.CompressedData getInstance(java.lang.Object) -> getInstance
    org.bouncycastle.asn1.ASN1Integer getVersion() -> getVersion
    org.bouncycastle.asn1.x509.AlgorithmIdentifier getCompressionAlgorithmIdentifier() -> getCompressionAlgorithmIdentifier
    org.bouncycastle.asn1.cms.ContentInfo getEncapContentInfo() -> getEncapContentInfo
    org.bouncycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
org.bouncycastle.asn1.cms.CompressedDataParser -> org.bouncycastle.asn1.cms.CompressedDataParser:
    org.bouncycastle.asn1.ASN1Integer _version -> _version
    org.bouncycastle.asn1.x509.AlgorithmIdentifier _compressionAlgorithm -> _compressionAlgorithm
    org.bouncycastle.asn1.cms.ContentInfoParser _encapContentInfo -> _encapContentInfo
    org.bouncycastle.asn1.ASN1Integer getVersion() -> getVersion
    org.bouncycastle.asn1.x509.AlgorithmIdentifier getCompressionAlgorithmIdentifier() -> getCompressionAlgorithmIdentifier
    org.bouncycastle.asn1.cms.ContentInfoParser getEncapContentInfo() -> getEncapContentInfo
org.bouncycastle.asn1.cms.ContentInfo -> org.bouncycastle.asn1.cms.ContentInfo:
    org.bouncycastle.asn1.ASN1ObjectIdentifier contentType -> contentType
    org.bouncycastle.asn1.ASN1Encodable content -> content
    org.bouncycastle.asn1.cms.ContentInfo getInstance(java.lang.Object) -> getInstance
    org.bouncycastle.asn1.cms.ContentInfo getInstance(org.bouncycastle.asn1.ASN1TaggedObject,boolean) -> getInstance
    org.bouncycastle.asn1.ASN1ObjectIdentifier getContentType() -> getContentType
    org.bouncycastle.asn1.ASN1Encodable getContent() -> getContent
    org.bouncycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
org.bouncycastle.asn1.cms.ContentInfoParser -> org.bouncycastle.asn1.cms.ContentInfoParser:
    org.bouncycastle.asn1.ASN1ObjectIdentifier contentType -> contentType
    org.bouncycastle.asn1.ASN1TaggedObjectParser content -> content
    org.bouncycastle.asn1.ASN1ObjectIdentifier getContentType() -> getContentType
    org.bouncycastle.asn1.ASN1Encodable getContent(int) -> getContent
org.bouncycastle.asn1.cms.DigestedData -> org.bouncycastle.asn1.cms.DigestedData:
    org.bouncycastle.asn1.ASN1Integer version -> version
    org.bouncycastle.asn1.x509.AlgorithmIdentifier digestAlgorithm -> digestAlgorithm
    org.bouncycastle.asn1.cms.ContentInfo encapContentInfo -> encapContentInfo
    org.bouncycastle.asn1.ASN1OctetString digest -> digest
    org.bouncycastle.asn1.cms.DigestedData getInstance(org.bouncycastle.asn1.ASN1TaggedObject,boolean) -> getInstance
    org.bouncycastle.asn1.cms.DigestedData getInstance(java.lang.Object) -> getInstance
    org.bouncycastle.asn1.ASN1Integer getVersion() -> getVersion
    org.bouncycastle.asn1.x509.AlgorithmIdentifier getDigestAlgorithm() -> getDigestAlgorithm
    org.bouncycastle.asn1.cms.ContentInfo getEncapContentInfo() -> getEncapContentInfo
    org.bouncycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
    byte[] getDigest() -> getDigest
org.bouncycastle.asn1.cms.EncryptedContentInfo -> org.bouncycastle.asn1.cms.EncryptedContentInfo:
    org.bouncycastle.asn1.ASN1ObjectIdentifier contentType -> contentType
    org.bouncycastle.asn1.x509.AlgorithmIdentifier contentEncryptionAlgorithm -> contentEncryptionAlgorithm
    org.bouncycastle.asn1.ASN1OctetString encryptedContent -> encryptedContent
    org.bouncycastle.asn1.cms.EncryptedContentInfo getInstance(java.lang.Object) -> getInstance
    org.bouncycastle.asn1.ASN1ObjectIdentifier getContentType() -> getContentType
    org.bouncycastle.asn1.x509.AlgorithmIdentifier getContentEncryptionAlgorithm() -> getContentEncryptionAlgorithm
    org.bouncycastle.asn1.ASN1OctetString getEncryptedContent() -> getEncryptedContent
    org.bouncycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
org.bouncycastle.asn1.cms.EncryptedContentInfoParser -> org.bouncycastle.asn1.cms.EncryptedContentInfoParser:
    org.bouncycastle.asn1.ASN1ObjectIdentifier _contentType -> _contentType
    org.bouncycastle.asn1.x509.AlgorithmIdentifier _contentEncryptionAlgorithm -> _contentEncryptionAlgorithm
    org.bouncycastle.asn1.ASN1TaggedObjectParser _encryptedContent -> _encryptedContent
    org.bouncycastle.asn1.ASN1ObjectIdentifier getContentType() -> getContentType
    org.bouncycastle.asn1.x509.AlgorithmIdentifier getContentEncryptionAlgorithm() -> getContentEncryptionAlgorithm
    org.bouncycastle.asn1.ASN1Encodable getEncryptedContent(int) -> getEncryptedContent
org.bouncycastle.asn1.cms.EncryptedData -> org.bouncycastle.asn1.cms.EncryptedData:
    org.bouncycastle.asn1.ASN1Integer version -> version
    org.bouncycastle.asn1.cms.EncryptedContentInfo encryptedContentInfo -> encryptedContentInfo
    org.bouncycastle.asn1.ASN1Set unprotectedAttrs -> unprotectedAttrs
    org.bouncycastle.asn1.cms.EncryptedData getInstance(java.lang.Object) -> getInstance
    org.bouncycastle.asn1.ASN1Integer getVersion() -> getVersion
    org.bouncycastle.asn1.cms.EncryptedContentInfo getEncryptedContentInfo() -> getEncryptedContentInfo
    org.bouncycastle.asn1.ASN1Set getUnprotectedAttrs() -> getUnprotectedAttrs
    org.bouncycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
org.bouncycastle.asn1.cms.EnvelopedData -> org.bouncycastle.asn1.cms.EnvelopedData:
    org.bouncycastle.asn1.ASN1Integer version -> version
    org.bouncycastle.asn1.cms.OriginatorInfo originatorInfo -> originatorInfo
    org.bouncycastle.asn1.ASN1Set recipientInfos -> recipientInfos
    org.bouncycastle.asn1.cms.EncryptedContentInfo encryptedContentInfo -> encryptedContentInfo
    org.bouncycastle.asn1.ASN1Set unprotectedAttrs -> unprotectedAttrs
    org.bouncycastle.asn1.cms.EnvelopedData getInstance(org.bouncycastle.asn1.ASN1TaggedObject,boolean) -> getInstance
    org.bouncycastle.asn1.cms.EnvelopedData getInstance(java.lang.Object) -> getInstance
    org.bouncycastle.asn1.ASN1Integer getVersion() -> getVersion
    org.bouncycastle.asn1.cms.OriginatorInfo getOriginatorInfo() -> getOriginatorInfo
    org.bouncycastle.asn1.ASN1Set getRecipientInfos() -> getRecipientInfos
    org.bouncycastle.asn1.cms.EncryptedContentInfo getEncryptedContentInfo() -> getEncryptedContentInfo
    org.bouncycastle.asn1.ASN1Set getUnprotectedAttrs() -> getUnprotectedAttrs
    org.bouncycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
    int calculateVersion(org.bouncycastle.asn1.cms.OriginatorInfo,org.bouncycastle.asn1.ASN1Set,org.bouncycastle.asn1.ASN1Set) -> calculateVersion
org.bouncycastle.asn1.cms.EnvelopedDataParser -> org.bouncycastle.asn1.cms.EnvelopedDataParser:
    org.bouncycastle.asn1.ASN1SequenceParser _seq -> _seq
    org.bouncycastle.asn1.ASN1Integer _version -> _version
    org.bouncycastle.asn1.ASN1Encodable _nextObject -> _nextObject
    boolean _originatorInfoCalled -> _originatorInfoCalled
    org.bouncycastle.asn1.ASN1Integer getVersion() -> getVersion
    org.bouncycastle.asn1.cms.OriginatorInfo getOriginatorInfo() -> getOriginatorInfo
    org.bouncycastle.asn1.ASN1SetParser getRecipientInfos() -> getRecipientInfos
    org.bouncycastle.asn1.cms.EncryptedContentInfoParser getEncryptedContentInfo() -> getEncryptedContentInfo
    org.bouncycastle.asn1.ASN1SetParser getUnprotectedAttrs() -> getUnprotectedAttrs
org.bouncycastle.asn1.cms.Evidence -> org.bouncycastle.asn1.cms.Evidence:
    org.bouncycastle.asn1.cms.TimeStampTokenEvidence tstEvidence -> tstEvidence
    org.bouncycastle.asn1.cms.Evidence getInstance(java.lang.Object) -> getInstance
    org.bouncycastle.asn1.cms.TimeStampTokenEvidence getTstEvidence() -> getTstEvidence
    org.bouncycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
org.bouncycastle.asn1.cms.GCMParameters -> org.bouncycastle.asn1.cms.GCMParameters:
    byte[] nonce -> nonce
    int icvLen -> icvLen
    org.bouncycastle.asn1.cms.GCMParameters getInstance(java.lang.Object) -> getInstance
    byte[] getNonce() -> getNonce
    int getIcvLen() -> getIcvLen
    org.bouncycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
org.bouncycastle.asn1.cms.IssuerAndSerialNumber -> org.bouncycastle.asn1.cms.IssuerAndSerialNumber:
    org.bouncycastle.asn1.x500.X500Name name -> name
    org.bouncycastle.asn1.ASN1Integer serialNumber -> serialNumber
    org.bouncycastle.asn1.cms.IssuerAndSerialNumber getInstance(java.lang.Object) -> getInstance
    org.bouncycastle.asn1.x500.X500Name getName() -> getName
    org.bouncycastle.asn1.ASN1Integer getSerialNumber() -> getSerialNumber
    org.bouncycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
org.bouncycastle.asn1.cms.KEKIdentifier -> org.bouncycastle.asn1.cms.KEKIdentifier:
    org.bouncycastle.asn1.ASN1OctetString keyIdentifier -> keyIdentifier
    org.bouncycastle.asn1.ASN1GeneralizedTime date -> date
    org.bouncycastle.asn1.cms.OtherKeyAttribute other -> other
    org.bouncycastle.asn1.cms.KEKIdentifier getInstance(org.bouncycastle.asn1.ASN1TaggedObject,boolean) -> getInstance
    org.bouncycastle.asn1.cms.KEKIdentifier getInstance(java.lang.Object) -> getInstance
    org.bouncycastle.asn1.ASN1OctetString getKeyIdentifier() -> getKeyIdentifier
    org.bouncycastle.asn1.ASN1GeneralizedTime getDate() -> getDate
    org.bouncycastle.asn1.cms.OtherKeyAttribute getOther() -> getOther
    org.bouncycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
org.bouncycastle.asn1.cms.KEKRecipientInfo -> org.bouncycastle.asn1.cms.KEKRecipientInfo:
    org.bouncycastle.asn1.ASN1Integer version -> version
    org.bouncycastle.asn1.cms.KEKIdentifier kekid -> kekid
    org.bouncycastle.asn1.x509.AlgorithmIdentifier keyEncryptionAlgorithm -> keyEncryptionAlgorithm
    org.bouncycastle.asn1.ASN1OctetString encryptedKey -> encryptedKey
    org.bouncycastle.asn1.cms.KEKRecipientInfo getInstance(org.bouncycastle.asn1.ASN1TaggedObject,boolean) -> getInstance
    org.bouncycastle.asn1.cms.KEKRecipientInfo getInstance(java.lang.Object) -> getInstance
    org.bouncycastle.asn1.ASN1Integer getVersion() -> getVersion
    org.bouncycastle.asn1.cms.KEKIdentifier getKekid() -> getKekid
    org.bouncycastle.asn1.x509.AlgorithmIdentifier getKeyEncryptionAlgorithm() -> getKeyEncryptionAlgorithm
    org.bouncycastle.asn1.ASN1OctetString getEncryptedKey() -> getEncryptedKey
    org.bouncycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
org.bouncycastle.asn1.cms.KeyAgreeRecipientIdentifier -> org.bouncycastle.asn1.cms.KeyAgreeRecipientIdentifier:
    org.bouncycastle.asn1.cms.IssuerAndSerialNumber issuerSerial -> issuerSerial
    org.bouncycastle.asn1.cms.RecipientKeyIdentifier rKeyID -> rKeyID
    org.bouncycastle.asn1.cms.KeyAgreeRecipientIdentifier getInstance(org.bouncycastle.asn1.ASN1TaggedObject,boolean) -> getInstance
    org.bouncycastle.asn1.cms.KeyAgreeRecipientIdentifier getInstance(java.lang.Object) -> getInstance
    org.bouncycastle.asn1.cms.IssuerAndSerialNumber getIssuerAndSerialNumber() -> getIssuerAndSerialNumber
    org.bouncycastle.asn1.cms.RecipientKeyIdentifier getRKeyID() -> getRKeyID
    org.bouncycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
org.bouncycastle.asn1.cms.KeyAgreeRecipientInfo -> org.bouncycastle.asn1.cms.KeyAgreeRecipientInfo:
    org.bouncycastle.asn1.ASN1Integer version -> version
    org.bouncycastle.asn1.cms.OriginatorIdentifierOrKey originator -> originator
    org.bouncycastle.asn1.ASN1OctetString ukm -> ukm
    org.bouncycastle.asn1.x509.AlgorithmIdentifier keyEncryptionAlgorithm -> keyEncryptionAlgorithm
    org.bouncycastle.asn1.ASN1Sequence recipientEncryptedKeys -> recipientEncryptedKeys
    org.bouncycastle.asn1.cms.KeyAgreeRecipientInfo getInstance(org.bouncycastle.asn1.ASN1TaggedObject,boolean) -> getInstance
    org.bouncycastle.asn1.cms.KeyAgreeRecipientInfo getInstance(java.lang.Object) -> getInstance
    org.bouncycastle.asn1.ASN1Integer getVersion() -> getVersion
    org.bouncycastle.asn1.cms.OriginatorIdentifierOrKey getOriginator() -> getOriginator
    org.bouncycastle.asn1.ASN1OctetString getUserKeyingMaterial() -> getUserKeyingMaterial
    org.bouncycastle.asn1.x509.AlgorithmIdentifier getKeyEncryptionAlgorithm() -> getKeyEncryptionAlgorithm
    org.bouncycastle.asn1.ASN1Sequence getRecipientEncryptedKeys() -> getRecipientEncryptedKeys
    org.bouncycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
org.bouncycastle.asn1.cms.KeyTransRecipientInfo -> org.bouncycastle.asn1.cms.KeyTransRecipientInfo:
    org.bouncycastle.asn1.ASN1Integer version -> version
    org.bouncycastle.asn1.cms.RecipientIdentifier rid -> rid
    org.bouncycastle.asn1.x509.AlgorithmIdentifier keyEncryptionAlgorithm -> keyEncryptionAlgorithm
    org.bouncycastle.asn1.ASN1OctetString encryptedKey -> encryptedKey
    org.bouncycastle.asn1.cms.KeyTransRecipientInfo getInstance(java.lang.Object) -> getInstance
    org.bouncycastle.asn1.ASN1Integer getVersion() -> getVersion
    org.bouncycastle.asn1.cms.RecipientIdentifier getRecipientIdentifier() -> getRecipientIdentifier
    org.bouncycastle.asn1.x509.AlgorithmIdentifier getKeyEncryptionAlgorithm() -> getKeyEncryptionAlgorithm
    org.bouncycastle.asn1.ASN1OctetString getEncryptedKey() -> getEncryptedKey
    org.bouncycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
org.bouncycastle.asn1.cms.MetaData -> org.bouncycastle.asn1.cms.MetaData:
    org.bouncycastle.asn1.ASN1Boolean hashProtected -> hashProtected
    org.bouncycastle.asn1.DERUTF8String fileName -> fileName
    org.bouncycastle.asn1.DERIA5String mediaType -> mediaType
    org.bouncycastle.asn1.cms.Attributes otherMetaData -> otherMetaData
    org.bouncycastle.asn1.cms.MetaData getInstance(java.lang.Object) -> getInstance
    org.bouncycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
    boolean isHashProtected() -> isHashProtected
    org.bouncycastle.asn1.DERUTF8String getFileName() -> getFileName
    org.bouncycastle.asn1.DERIA5String getMediaType() -> getMediaType
    org.bouncycastle.asn1.cms.Attributes getOtherMetaData() -> getOtherMetaData
org.bouncycastle.asn1.cms.OriginatorIdentifierOrKey -> org.bouncycastle.asn1.cms.OriginatorIdentifierOrKey:
    org.bouncycastle.asn1.ASN1Encodable id -> id
    org.bouncycastle.asn1.cms.OriginatorIdentifierOrKey getInstance(org.bouncycastle.asn1.ASN1TaggedObject,boolean) -> getInstance
    org.bouncycastle.asn1.cms.OriginatorIdentifierOrKey getInstance(java.lang.Object) -> getInstance
    org.bouncycastle.asn1.ASN1Encodable getId() -> getId
    org.bouncycastle.asn1.cms.IssuerAndSerialNumber getIssuerAndSerialNumber() -> getIssuerAndSerialNumber
    org.bouncycastle.asn1.x509.SubjectKeyIdentifier getSubjectKeyIdentifier() -> getSubjectKeyIdentifier
    org.bouncycastle.asn1.cms.OriginatorPublicKey getOriginatorKey() -> getOriginatorKey
    org.bouncycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
org.bouncycastle.asn1.cms.OriginatorInfo -> org.bouncycastle.asn1.cms.OriginatorInfo:
    org.bouncycastle.asn1.ASN1Set certs -> certs
    org.bouncycastle.asn1.ASN1Set crls -> crls
    org.bouncycastle.asn1.cms.OriginatorInfo getInstance(org.bouncycastle.asn1.ASN1TaggedObject,boolean) -> getInstance
    org.bouncycastle.asn1.cms.OriginatorInfo getInstance(java.lang.Object) -> getInstance
    org.bouncycastle.asn1.ASN1Set getCertificates() -> getCertificates
    org.bouncycastle.asn1.ASN1Set getCRLs() -> getCRLs
    org.bouncycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
org.bouncycastle.asn1.cms.OriginatorPublicKey -> org.bouncycastle.asn1.cms.OriginatorPublicKey:
    org.bouncycastle.asn1.x509.AlgorithmIdentifier algorithm -> algorithm
    org.bouncycastle.asn1.DERBitString publicKey -> publicKey
    org.bouncycastle.asn1.cms.OriginatorPublicKey getInstance(org.bouncycastle.asn1.ASN1TaggedObject,boolean) -> getInstance
    org.bouncycastle.asn1.cms.OriginatorPublicKey getInstance(java.lang.Object) -> getInstance
    org.bouncycastle.asn1.x509.AlgorithmIdentifier getAlgorithm() -> getAlgorithm
    org.bouncycastle.asn1.DERBitString getPublicKey() -> getPublicKey
    org.bouncycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
org.bouncycastle.asn1.cms.OtherKeyAttribute -> org.bouncycastle.asn1.cms.OtherKeyAttribute:
    org.bouncycastle.asn1.ASN1ObjectIdentifier keyAttrId -> keyAttrId
    org.bouncycastle.asn1.ASN1Encodable keyAttr -> keyAttr
    org.bouncycastle.asn1.cms.OtherKeyAttribute getInstance(java.lang.Object) -> getInstance
    org.bouncycastle.asn1.ASN1ObjectIdentifier getKeyAttrId() -> getKeyAttrId
    org.bouncycastle.asn1.ASN1Encodable getKeyAttr() -> getKeyAttr
    org.bouncycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
org.bouncycastle.asn1.cms.OtherRecipientInfo -> org.bouncycastle.asn1.cms.OtherRecipientInfo:
    org.bouncycastle.asn1.ASN1ObjectIdentifier oriType -> oriType
    org.bouncycastle.asn1.ASN1Encodable oriValue -> oriValue
    org.bouncycastle.asn1.cms.OtherRecipientInfo getInstance(org.bouncycastle.asn1.ASN1TaggedObject,boolean) -> getInstance
    org.bouncycastle.asn1.cms.OtherRecipientInfo getInstance(java.lang.Object) -> getInstance
    org.bouncycastle.asn1.ASN1ObjectIdentifier getType() -> getType
    org.bouncycastle.asn1.ASN1Encodable getValue() -> getValue
    org.bouncycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
org.bouncycastle.asn1.cms.OtherRevocationInfoFormat -> org.bouncycastle.asn1.cms.OtherRevocationInfoFormat:
    org.bouncycastle.asn1.ASN1ObjectIdentifier otherRevInfoFormat -> otherRevInfoFormat
    org.bouncycastle.asn1.ASN1Encodable otherRevInfo -> otherRevInfo
    org.bouncycastle.asn1.cms.OtherRevocationInfoFormat getInstance(org.bouncycastle.asn1.ASN1TaggedObject,boolean) -> getInstance
    org.bouncycastle.asn1.cms.OtherRevocationInfoFormat getInstance(java.lang.Object) -> getInstance
    org.bouncycastle.asn1.ASN1ObjectIdentifier getInfoFormat() -> getInfoFormat
    org.bouncycastle.asn1.ASN1Encodable getInfo() -> getInfo
    org.bouncycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
org.bouncycastle.asn1.cms.PasswordRecipientInfo -> org.bouncycastle.asn1.cms.PasswordRecipientInfo:
    org.bouncycastle.asn1.ASN1Integer version -> version
    org.bouncycastle.asn1.x509.AlgorithmIdentifier keyDerivationAlgorithm -> keyDerivationAlgorithm
    org.bouncycastle.asn1.x509.AlgorithmIdentifier keyEncryptionAlgorithm -> keyEncryptionAlgorithm
    org.bouncycastle.asn1.ASN1OctetString encryptedKey -> encryptedKey
    org.bouncycastle.asn1.cms.PasswordRecipientInfo getInstance(org.bouncycastle.asn1.ASN1TaggedObject,boolean) -> getInstance
    org.bouncycastle.asn1.cms.PasswordRecipientInfo getInstance(java.lang.Object) -> getInstance
    org.bouncycastle.asn1.ASN1Integer getVersion() -> getVersion
    org.bouncycastle.asn1.x509.AlgorithmIdentifier getKeyDerivationAlgorithm() -> getKeyDerivationAlgorithm
    org.bouncycastle.asn1.x509.AlgorithmIdentifier getKeyEncryptionAlgorithm() -> getKeyEncryptionAlgorithm
    org.bouncycastle.asn1.ASN1OctetString getEncryptedKey() -> getEncryptedKey
    org.bouncycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
org.bouncycastle.asn1.cms.RecipientEncryptedKey -> org.bouncycastle.asn1.cms.RecipientEncryptedKey:
    org.bouncycastle.asn1.cms.KeyAgreeRecipientIdentifier identifier -> identifier
    org.bouncycastle.asn1.ASN1OctetString encryptedKey -> encryptedKey
    org.bouncycastle.asn1.cms.RecipientEncryptedKey getInstance(org.bouncycastle.asn1.ASN1TaggedObject,boolean) -> getInstance
    org.bouncycastle.asn1.cms.RecipientEncryptedKey getInstance(java.lang.Object) -> getInstance
    org.bouncycastle.asn1.cms.KeyAgreeRecipientIdentifier getIdentifier() -> getIdentifier
    org.bouncycastle.asn1.ASN1OctetString getEncryptedKey() -> getEncryptedKey
    org.bouncycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
org.bouncycastle.asn1.cms.RecipientIdentifier -> org.bouncycastle.asn1.cms.RecipientIdentifier:
    org.bouncycastle.asn1.ASN1Encodable id -> id
    org.bouncycastle.asn1.cms.RecipientIdentifier getInstance(java.lang.Object) -> getInstance
    boolean isTagged() -> isTagged
    org.bouncycastle.asn1.ASN1Encodable getId() -> getId
    org.bouncycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
org.bouncycastle.asn1.cms.RecipientInfo -> org.bouncycastle.asn1.cms.RecipientInfo:
    org.bouncycastle.asn1.ASN1Encodable info -> info
    org.bouncycastle.asn1.cms.RecipientInfo getInstance(java.lang.Object) -> getInstance
    org.bouncycastle.asn1.ASN1Integer getVersion() -> getVersion
    boolean isTagged() -> isTagged
    org.bouncycastle.asn1.ASN1Encodable getInfo() -> getInfo
    org.bouncycastle.asn1.cms.KEKRecipientInfo getKEKInfo(org.bouncycastle.asn1.ASN1TaggedObject) -> getKEKInfo
    org.bouncycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
org.bouncycastle.asn1.cms.RecipientKeyIdentifier -> org.bouncycastle.asn1.cms.RecipientKeyIdentifier:
    org.bouncycastle.asn1.ASN1OctetString subjectKeyIdentifier -> subjectKeyIdentifier
    org.bouncycastle.asn1.ASN1GeneralizedTime date -> date
    org.bouncycastle.asn1.cms.OtherKeyAttribute other -> other
    org.bouncycastle.asn1.cms.RecipientKeyIdentifier getInstance(org.bouncycastle.asn1.ASN1TaggedObject,boolean) -> getInstance
    org.bouncycastle.asn1.cms.RecipientKeyIdentifier getInstance(java.lang.Object) -> getInstance
    org.bouncycastle.asn1.ASN1OctetString getSubjectKeyIdentifier() -> getSubjectKeyIdentifier
    org.bouncycastle.asn1.ASN1GeneralizedTime getDate() -> getDate
    org.bouncycastle.asn1.cms.OtherKeyAttribute getOtherKeyAttribute() -> getOtherKeyAttribute
    org.bouncycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
org.bouncycastle.asn1.cms.SCVPReqRes -> org.bouncycastle.asn1.cms.SCVPReqRes:
    org.bouncycastle.asn1.cms.ContentInfo request -> request
    org.bouncycastle.asn1.cms.ContentInfo response -> response
    org.bouncycastle.asn1.cms.SCVPReqRes getInstance(java.lang.Object) -> getInstance
    org.bouncycastle.asn1.cms.ContentInfo getRequest() -> getRequest
    org.bouncycastle.asn1.cms.ContentInfo getResponse() -> getResponse
    org.bouncycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
org.bouncycastle.asn1.cms.SignedData -> org.bouncycastle.asn1.cms.SignedData:
    org.bouncycastle.asn1.ASN1Integer VERSION_1 -> VERSION_1
    org.bouncycastle.asn1.ASN1Integer VERSION_3 -> VERSION_3
    org.bouncycastle.asn1.ASN1Integer VERSION_4 -> VERSION_4
    org.bouncycastle.asn1.ASN1Integer VERSION_5 -> VERSION_5
    org.bouncycastle.asn1.ASN1Integer version -> version
    org.bouncycastle.asn1.ASN1Set digestAlgorithms -> digestAlgorithms
    org.bouncycastle.asn1.cms.ContentInfo contentInfo -> contentInfo
    org.bouncycastle.asn1.ASN1Set certificates -> certificates
    org.bouncycastle.asn1.ASN1Set crls -> crls
    org.bouncycastle.asn1.ASN1Set signerInfos -> signerInfos
    boolean certsBer -> certsBer
    boolean crlsBer -> crlsBer
    org.bouncycastle.asn1.cms.SignedData getInstance(java.lang.Object) -> getInstance
    org.bouncycastle.asn1.ASN1Integer calculateVersion(org.bouncycastle.asn1.ASN1ObjectIdentifier,org.bouncycastle.asn1.ASN1Set,org.bouncycastle.asn1.ASN1Set,org.bouncycastle.asn1.ASN1Set) -> calculateVersion
    boolean checkForVersion3(org.bouncycastle.asn1.ASN1Set) -> checkForVersion3
    org.bouncycastle.asn1.ASN1Integer getVersion() -> getVersion
    org.bouncycastle.asn1.ASN1Set getDigestAlgorithms() -> getDigestAlgorithms
    org.bouncycastle.asn1.cms.ContentInfo getEncapContentInfo() -> getEncapContentInfo
    org.bouncycastle.asn1.ASN1Set getCertificates() -> getCertificates
    org.bouncycastle.asn1.ASN1Set getCRLs() -> getCRLs
    org.bouncycastle.asn1.ASN1Set getSignerInfos() -> getSignerInfos
    org.bouncycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
org.bouncycastle.asn1.cms.SignedDataParser -> org.bouncycastle.asn1.cms.SignedDataParser:
    org.bouncycastle.asn1.ASN1SequenceParser _seq -> _seq
    org.bouncycastle.asn1.ASN1Integer _version -> _version
    java.lang.Object _nextObject -> _nextObject
    boolean _certsCalled -> _certsCalled
    boolean _crlsCalled -> _crlsCalled
    org.bouncycastle.asn1.cms.SignedDataParser getInstance(java.lang.Object) -> getInstance
    org.bouncycastle.asn1.ASN1Integer getVersion() -> getVersion
    org.bouncycastle.asn1.ASN1SetParser getDigestAlgorithms() -> getDigestAlgorithms
    org.bouncycastle.asn1.cms.ContentInfoParser getEncapContentInfo() -> getEncapContentInfo
    org.bouncycastle.asn1.ASN1SetParser getCertificates() -> getCertificates
    org.bouncycastle.asn1.ASN1SetParser getCrls() -> getCrls
    org.bouncycastle.asn1.ASN1SetParser getSignerInfos() -> getSignerInfos
org.bouncycastle.asn1.cms.SignerIdentifier -> org.bouncycastle.asn1.cms.SignerIdentifier:
    org.bouncycastle.asn1.ASN1Encodable id -> id
    org.bouncycastle.asn1.cms.SignerIdentifier getInstance(java.lang.Object) -> getInstance
    boolean isTagged() -> isTagged
    org.bouncycastle.asn1.ASN1Encodable getId() -> getId
    org.bouncycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
org.bouncycastle.asn1.cms.SignerInfo -> org.bouncycastle.asn1.cms.SignerInfo:
    org.bouncycastle.asn1.ASN1Integer version -> version
    org.bouncycastle.asn1.cms.SignerIdentifier sid -> sid
    org.bouncycastle.asn1.x509.AlgorithmIdentifier digAlgorithm -> digAlgorithm
    org.bouncycastle.asn1.ASN1Set authenticatedAttributes -> authenticatedAttributes
    org.bouncycastle.asn1.x509.AlgorithmIdentifier digEncryptionAlgorithm -> digEncryptionAlgorithm
    org.bouncycastle.asn1.ASN1OctetString encryptedDigest -> encryptedDigest
    org.bouncycastle.asn1.ASN1Set unauthenticatedAttributes -> unauthenticatedAttributes
    org.bouncycastle.asn1.cms.SignerInfo getInstance(java.lang.Object) -> getInstance
    org.bouncycastle.asn1.ASN1Integer getVersion() -> getVersion
    org.bouncycastle.asn1.cms.SignerIdentifier getSID() -> getSID
    org.bouncycastle.asn1.ASN1Set getAuthenticatedAttributes() -> getAuthenticatedAttributes
    org.bouncycastle.asn1.x509.AlgorithmIdentifier getDigestAlgorithm() -> getDigestAlgorithm
    org.bouncycastle.asn1.ASN1OctetString getEncryptedDigest() -> getEncryptedDigest
    org.bouncycastle.asn1.x509.AlgorithmIdentifier getDigestEncryptionAlgorithm() -> getDigestEncryptionAlgorithm
    org.bouncycastle.asn1.ASN1Set getUnauthenticatedAttributes() -> getUnauthenticatedAttributes
    org.bouncycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
org.bouncycastle.asn1.cms.Time -> org.bouncycastle.asn1.cms.Time:
    org.bouncycastle.asn1.ASN1Primitive time -> time
    org.bouncycastle.asn1.cms.Time getInstance(org.bouncycastle.asn1.ASN1TaggedObject,boolean) -> getInstance
    org.bouncycastle.asn1.cms.Time getInstance(java.lang.Object) -> getInstance
    java.lang.String getTime() -> getTime
    java.util.Date getDate() -> getDate
    org.bouncycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
org.bouncycastle.asn1.cms.TimeStampAndCRL -> org.bouncycastle.asn1.cms.TimeStampAndCRL:
    org.bouncycastle.asn1.cms.ContentInfo timeStamp -> timeStamp
    org.bouncycastle.asn1.x509.CertificateList crl -> crl
    org.bouncycastle.asn1.cms.TimeStampAndCRL getInstance(java.lang.Object) -> getInstance
    org.bouncycastle.asn1.cms.ContentInfo getTimeStampToken() -> getTimeStampToken
    org.bouncycastle.asn1.x509.CertificateList getCertificateList() -> getCertificateList
    org.bouncycastle.asn1.x509.CertificateList getCRL() -> getCRL
    org.bouncycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
org.bouncycastle.asn1.cms.TimeStampTokenEvidence -> org.bouncycastle.asn1.cms.TimeStampTokenEvidence:
    org.bouncycastle.asn1.cms.TimeStampAndCRL[] timeStampAndCRLs -> timeStampAndCRLs
    org.bouncycastle.asn1.cms.TimeStampTokenEvidence getInstance(org.bouncycastle.asn1.ASN1TaggedObject,boolean) -> getInstance
    org.bouncycastle.asn1.cms.TimeStampTokenEvidence getInstance(java.lang.Object) -> getInstance
    org.bouncycastle.asn1.cms.TimeStampAndCRL[] toTimeStampAndCRLArray() -> toTimeStampAndCRLArray
    org.bouncycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
org.bouncycastle.asn1.cms.TimeStampedData -> org.bouncycastle.asn1.cms.TimeStampedData:
    org.bouncycastle.asn1.ASN1Integer version -> version
    org.bouncycastle.asn1.DERIA5String dataUri -> dataUri
    org.bouncycastle.asn1.cms.MetaData metaData -> metaData
    org.bouncycastle.asn1.ASN1OctetString content -> content
    org.bouncycastle.asn1.cms.Evidence temporalEvidence -> temporalEvidence
    org.bouncycastle.asn1.cms.TimeStampedData getInstance(java.lang.Object) -> getInstance
    org.bouncycastle.asn1.DERIA5String getDataUri() -> getDataUri
    org.bouncycastle.asn1.cms.MetaData getMetaData() -> getMetaData
    org.bouncycastle.asn1.ASN1OctetString getContent() -> getContent
    org.bouncycastle.asn1.cms.Evidence getTemporalEvidence() -> getTemporalEvidence
    org.bouncycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
org.bouncycastle.asn1.cms.TimeStampedDataParser -> org.bouncycastle.asn1.cms.TimeStampedDataParser:
    org.bouncycastle.asn1.ASN1Integer version -> version
    org.bouncycastle.asn1.DERIA5String dataUri -> dataUri
    org.bouncycastle.asn1.cms.MetaData metaData -> metaData
    org.bouncycastle.asn1.ASN1OctetStringParser content -> content
    org.bouncycastle.asn1.cms.Evidence temporalEvidence -> temporalEvidence
    org.bouncycastle.asn1.ASN1SequenceParser parser -> parser
    org.bouncycastle.asn1.cms.TimeStampedDataParser getInstance(java.lang.Object) -> getInstance
    org.bouncycastle.asn1.DERIA5String getDataUri() -> getDataUri
    org.bouncycastle.asn1.cms.MetaData getMetaData() -> getMetaData
    org.bouncycastle.asn1.ASN1OctetStringParser getContent() -> getContent
    org.bouncycastle.asn1.cms.Evidence getTemporalEvidence() -> getTemporalEvidence
    org.bouncycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
org.bouncycastle.asn1.cms.ecc.MQVuserKeyingMaterial -> org.bouncycastle.asn1.cms.ecc.MQVuserKeyingMaterial:
    org.bouncycastle.asn1.cms.OriginatorPublicKey ephemeralPublicKey -> ephemeralPublicKey
    org.bouncycastle.asn1.ASN1OctetString addedukm -> addedukm
    org.bouncycastle.asn1.cms.ecc.MQVuserKeyingMaterial getInstance(org.bouncycastle.asn1.ASN1TaggedObject,boolean) -> getInstance
    org.bouncycastle.asn1.cms.ecc.MQVuserKeyingMaterial getInstance(java.lang.Object) -> getInstance
    org.bouncycastle.asn1.cms.OriginatorPublicKey getEphemeralPublicKey() -> getEphemeralPublicKey
    org.bouncycastle.asn1.ASN1OctetString getAddedukm() -> getAddedukm
    org.bouncycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
org.bouncycastle.asn1.crmf.AttributeTypeAndValue -> org.bouncycastle.asn1.crmf.AttributeTypeAndValue:
    org.bouncycastle.asn1.ASN1ObjectIdentifier type -> type
    org.bouncycastle.asn1.ASN1Encodable value -> value
    org.bouncycastle.asn1.crmf.AttributeTypeAndValue getInstance(java.lang.Object) -> getInstance
    org.bouncycastle.asn1.ASN1ObjectIdentifier getType() -> getType
    org.bouncycastle.asn1.ASN1Encodable getValue() -> getValue
    org.bouncycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
org.bouncycastle.asn1.crmf.CRMFObjectIdentifiers -> org.bouncycastle.asn1.crmf.CRMFObjectIdentifiers:
    org.bouncycastle.asn1.ASN1ObjectIdentifier id_pkix -> id_pkix
    org.bouncycastle.asn1.ASN1ObjectIdentifier id_pkip -> id_pkip
    org.bouncycastle.asn1.ASN1ObjectIdentifier id_regCtrl -> id_regCtrl
    org.bouncycastle.asn1.ASN1ObjectIdentifier id_regCtrl_regToken -> id_regCtrl_regToken
    org.bouncycastle.asn1.ASN1ObjectIdentifier id_regCtrl_authenticator -> id_regCtrl_authenticator
    org.bouncycastle.asn1.ASN1ObjectIdentifier id_regCtrl_pkiPublicationInfo -> id_regCtrl_pkiPublicationInfo
    org.bouncycastle.asn1.ASN1ObjectIdentifier id_regCtrl_pkiArchiveOptions -> id_regCtrl_pkiArchiveOptions
    org.bouncycastle.asn1.ASN1ObjectIdentifier id_ct_encKeyWithID -> id_ct_encKeyWithID
org.bouncycastle.asn1.crmf.CertId -> org.bouncycastle.asn1.crmf.CertId:
    org.bouncycastle.asn1.x509.GeneralName issuer -> issuer
    org.bouncycastle.asn1.ASN1Integer serialNumber -> serialNumber
    org.bouncycastle.asn1.crmf.CertId getInstance(java.lang.Object) -> getInstance
    org.bouncycastle.asn1.crmf.CertId getInstance(org.bouncycastle.asn1.ASN1TaggedObject,boolean) -> getInstance
    org.bouncycastle.asn1.x509.GeneralName getIssuer() -> getIssuer
    org.bouncycastle.asn1.ASN1Integer getSerialNumber() -> getSerialNumber
    org.bouncycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
org.bouncycastle.asn1.crmf.CertReqMessages -> org.bouncycastle.asn1.crmf.CertReqMessages:
    org.bouncycastle.asn1.ASN1Sequence content -> content
    org.bouncycastle.asn1.crmf.CertReqMessages getInstance(java.lang.Object) -> getInstance
    org.bouncycastle.asn1.crmf.CertReqMsg[] toCertReqMsgArray() -> toCertReqMsgArray
    org.bouncycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
org.bouncycastle.asn1.crmf.CertReqMsg -> org.bouncycastle.asn1.crmf.CertReqMsg:
    org.bouncycastle.asn1.crmf.CertRequest certReq -> certReq
    org.bouncycastle.asn1.crmf.ProofOfPossession pop -> pop
    org.bouncycastle.asn1.ASN1Sequence regInfo -> regInfo
    org.bouncycastle.asn1.crmf.CertReqMsg getInstance(java.lang.Object) -> getInstance
    org.bouncycastle.asn1.crmf.CertRequest getCertReq() -> getCertReq
    org.bouncycastle.asn1.crmf.ProofOfPossession getPop() -> getPop
    org.bouncycastle.asn1.crmf.ProofOfPossession getPopo() -> getPopo
    org.bouncycastle.asn1.crmf.AttributeTypeAndValue[] getRegInfo() -> getRegInfo
    org.bouncycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
    void addOptional(org.bouncycastle.asn1.ASN1EncodableVector,org.bouncycastle.asn1.ASN1Encodable) -> addOptional
org.bouncycastle.asn1.crmf.CertRequest -> org.bouncycastle.asn1.crmf.CertRequest:
    org.bouncycastle.asn1.ASN1Integer certReqId -> certReqId
    org.bouncycastle.asn1.crmf.CertTemplate certTemplate -> certTemplate
    org.bouncycastle.asn1.crmf.Controls controls -> controls
    org.bouncycastle.asn1.crmf.CertRequest getInstance(java.lang.Object) -> getInstance
    org.bouncycastle.asn1.ASN1Integer getCertReqId() -> getCertReqId
    org.bouncycastle.asn1.crmf.CertTemplate getCertTemplate() -> getCertTemplate
    org.bouncycastle.asn1.crmf.Controls getControls() -> getControls
    org.bouncycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
org.bouncycastle.asn1.crmf.CertTemplate -> org.bouncycastle.asn1.crmf.CertTemplate:
    org.bouncycastle.asn1.ASN1Sequence seq -> seq
    org.bouncycastle.asn1.ASN1Integer version -> version
    org.bouncycastle.asn1.ASN1Integer serialNumber -> serialNumber
    org.bouncycastle.asn1.x509.AlgorithmIdentifier signingAlg -> signingAlg
    org.bouncycastle.asn1.x500.X500Name issuer -> issuer
    org.bouncycastle.asn1.crmf.OptionalValidity validity -> validity
    org.bouncycastle.asn1.x500.X500Name subject -> subject
    org.bouncycastle.asn1.x509.SubjectPublicKeyInfo publicKey -> publicKey
    org.bouncycastle.asn1.DERBitString issuerUID -> issuerUID
    org.bouncycastle.asn1.DERBitString subjectUID -> subjectUID
    org.bouncycastle.asn1.x509.Extensions extensions -> extensions
    org.bouncycastle.asn1.crmf.CertTemplate getInstance(java.lang.Object) -> getInstance
    int getVersion() -> getVersion
    org.bouncycastle.asn1.ASN1Integer getSerialNumber() -> getSerialNumber
    org.bouncycastle.asn1.x509.AlgorithmIdentifier getSigningAlg() -> getSigningAlg
    org.bouncycastle.asn1.x500.X500Name getIssuer() -> getIssuer
    org.bouncycastle.asn1.crmf.OptionalValidity getValidity() -> getValidity
    org.bouncycastle.asn1.x500.X500Name getSubject() -> getSubject
    org.bouncycastle.asn1.x509.SubjectPublicKeyInfo getPublicKey() -> getPublicKey
    org.bouncycastle.asn1.DERBitString getIssuerUID() -> getIssuerUID
    org.bouncycastle.asn1.DERBitString getSubjectUID() -> getSubjectUID
    org.bouncycastle.asn1.x509.Extensions getExtensions() -> getExtensions
    org.bouncycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
org.bouncycastle.asn1.crmf.CertTemplateBuilder -> org.bouncycastle.asn1.crmf.CertTemplateBuilder:
    org.bouncycastle.asn1.ASN1Integer version -> version
    org.bouncycastle.asn1.ASN1Integer serialNumber -> serialNumber
    org.bouncycastle.asn1.x509.AlgorithmIdentifier signingAlg -> signingAlg
    org.bouncycastle.asn1.x500.X500Name issuer -> issuer
    org.bouncycastle.asn1.crmf.OptionalValidity validity -> validity
    org.bouncycastle.asn1.x500.X500Name subject -> subject
    org.bouncycastle.asn1.x509.SubjectPublicKeyInfo publicKey -> publicKey
    org.bouncycastle.asn1.DERBitString issuerUID -> issuerUID
    org.bouncycastle.asn1.DERBitString subjectUID -> subjectUID
    org.bouncycastle.asn1.x509.Extensions extensions -> extensions
    org.bouncycastle.asn1.crmf.CertTemplateBuilder setVersion(int) -> setVersion
    org.bouncycastle.asn1.crmf.CertTemplateBuilder setSerialNumber(org.bouncycastle.asn1.ASN1Integer) -> setSerialNumber
    org.bouncycastle.asn1.crmf.CertTemplateBuilder setSigningAlg(org.bouncycastle.asn1.x509.AlgorithmIdentifier) -> setSigningAlg
    org.bouncycastle.asn1.crmf.CertTemplateBuilder setIssuer(org.bouncycastle.asn1.x500.X500Name) -> setIssuer
    org.bouncycastle.asn1.crmf.CertTemplateBuilder setValidity(org.bouncycastle.asn1.crmf.OptionalValidity) -> setValidity
    org.bouncycastle.asn1.crmf.CertTemplateBuilder setSubject(org.bouncycastle.asn1.x500.X500Name) -> setSubject
    org.bouncycastle.asn1.crmf.CertTemplateBuilder setPublicKey(org.bouncycastle.asn1.x509.SubjectPublicKeyInfo) -> setPublicKey
    org.bouncycastle.asn1.crmf.CertTemplateBuilder setIssuerUID(org.bouncycastle.asn1.DERBitString) -> setIssuerUID
    org.bouncycastle.asn1.crmf.CertTemplateBuilder setSubjectUID(org.bouncycastle.asn1.DERBitString) -> setSubjectUID
    org.bouncycastle.asn1.crmf.CertTemplateBuilder setExtensions(org.bouncycastle.asn1.x509.X509Extensions) -> setExtensions
    org.bouncycastle.asn1.crmf.CertTemplateBuilder setExtensions(org.bouncycastle.asn1.x509.Extensions) -> setExtensions
    org.bouncycastle.asn1.crmf.CertTemplate build() -> build
    void addOptional(org.bouncycastle.asn1.ASN1EncodableVector,int,boolean,org.bouncycastle.asn1.ASN1Encodable) -> addOptional
org.bouncycastle.asn1.crmf.Controls -> org.bouncycastle.asn1.crmf.Controls:
    org.bouncycastle.asn1.ASN1Sequence content -> content
    org.bouncycastle.asn1.crmf.Controls getInstance(java.lang.Object) -> getInstance
    org.bouncycastle.asn1.crmf.AttributeTypeAndValue[] toAttributeTypeAndValueArray() -> toAttributeTypeAndValueArray
    org.bouncycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
org.bouncycastle.asn1.crmf.EncKeyWithID -> org.bouncycastle.asn1.crmf.EncKeyWithID:
    org.bouncycastle.asn1.pkcs.PrivateKeyInfo privKeyInfo -> privKeyInfo
    org.bouncycastle.asn1.ASN1Encodable identifier -> identifier
    org.bouncycastle.asn1.crmf.EncKeyWithID getInstance(java.lang.Object) -> getInstance
    org.bouncycastle.asn1.pkcs.PrivateKeyInfo getPrivateKey() -> getPrivateKey
    boolean hasIdentifier() -> hasIdentifier
    boolean isIdentifierUTF8String() -> isIdentifierUTF8String
    org.bouncycastle.asn1.ASN1Encodable getIdentifier() -> getIdentifier
    org.bouncycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
org.bouncycastle.asn1.crmf.EncryptedKey -> org.bouncycastle.asn1.crmf.EncryptedKey:
    org.bouncycastle.asn1.cms.EnvelopedData envelopedData -> envelopedData
    org.bouncycastle.asn1.crmf.EncryptedValue encryptedValue -> encryptedValue
    org.bouncycastle.asn1.crmf.EncryptedKey getInstance(java.lang.Object) -> getInstance
    boolean isEncryptedValue() -> isEncryptedValue
    org.bouncycastle.asn1.ASN1Encodable getValue() -> getValue
    org.bouncycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
org.bouncycastle.asn1.crmf.EncryptedValue -> org.bouncycastle.asn1.crmf.EncryptedValue:
    org.bouncycastle.asn1.x509.AlgorithmIdentifier intendedAlg -> intendedAlg
    org.bouncycastle.asn1.x509.AlgorithmIdentifier symmAlg -> symmAlg
    org.bouncycastle.asn1.DERBitString encSymmKey -> encSymmKey
    org.bouncycastle.asn1.x509.AlgorithmIdentifier keyAlg -> keyAlg
    org.bouncycastle.asn1.ASN1OctetString valueHint -> valueHint
    org.bouncycastle.asn1.DERBitString encValue -> encValue
    org.bouncycastle.asn1.crmf.EncryptedValue getInstance(java.lang.Object) -> getInstance
    org.bouncycastle.asn1.x509.AlgorithmIdentifier getIntendedAlg() -> getIntendedAlg
    org.bouncycastle.asn1.x509.AlgorithmIdentifier getSymmAlg() -> getSymmAlg
    org.bouncycastle.asn1.DERBitString getEncSymmKey() -> getEncSymmKey
    org.bouncycastle.asn1.x509.AlgorithmIdentifier getKeyAlg() -> getKeyAlg
    org.bouncycastle.asn1.ASN1OctetString getValueHint() -> getValueHint
    org.bouncycastle.asn1.DERBitString getEncValue() -> getEncValue
    org.bouncycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
    void addOptional(org.bouncycastle.asn1.ASN1EncodableVector,int,org.bouncycastle.asn1.ASN1Encodable) -> addOptional
org.bouncycastle.asn1.crmf.OptionalValidity -> org.bouncycastle.asn1.crmf.OptionalValidity:
    org.bouncycastle.asn1.x509.Time notBefore -> notBefore
    org.bouncycastle.asn1.x509.Time notAfter -> notAfter
    org.bouncycastle.asn1.crmf.OptionalValidity getInstance(java.lang.Object) -> getInstance
    org.bouncycastle.asn1.x509.Time getNotBefore() -> getNotBefore
    org.bouncycastle.asn1.x509.Time getNotAfter() -> getNotAfter
    org.bouncycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
org.bouncycastle.asn1.crmf.PKIArchiveOptions -> org.bouncycastle.asn1.crmf.PKIArchiveOptions:
    int encryptedPrivKey -> encryptedPrivKey
    int keyGenParameters -> keyGenParameters
    int archiveRemGenPrivKey -> archiveRemGenPrivKey
    org.bouncycastle.asn1.ASN1Encodable value -> value
    org.bouncycastle.asn1.crmf.PKIArchiveOptions getInstance(java.lang.Object) -> getInstance
    int getType() -> getType
    org.bouncycastle.asn1.ASN1Encodable getValue() -> getValue
    org.bouncycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
org.bouncycastle.asn1.crmf.PKIPublicationInfo -> org.bouncycastle.asn1.crmf.PKIPublicationInfo:
    org.bouncycastle.asn1.ASN1Integer action -> action
    org.bouncycastle.asn1.ASN1Sequence pubInfos -> pubInfos
    org.bouncycastle.asn1.crmf.PKIPublicationInfo getInstance(java.lang.Object) -> getInstance
    org.bouncycastle.asn1.ASN1Integer getAction() -> getAction
    org.bouncycastle.asn1.crmf.SinglePubInfo[] getPubInfos() -> getPubInfos
    org.bouncycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
org.bouncycastle.asn1.crmf.PKMACValue -> org.bouncycastle.asn1.crmf.PKMACValue:
    org.bouncycastle.asn1.x509.AlgorithmIdentifier algId -> algId
    org.bouncycastle.asn1.DERBitString value -> value
    org.bouncycastle.asn1.crmf.PKMACValue getInstance(java.lang.Object) -> getInstance
    org.bouncycastle.asn1.crmf.PKMACValue getInstance(org.bouncycastle.asn1.ASN1TaggedObject,boolean) -> getInstance
    org.bouncycastle.asn1.x509.AlgorithmIdentifier getAlgId() -> getAlgId
    org.bouncycastle.asn1.DERBitString getValue() -> getValue
    org.bouncycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
org.bouncycastle.asn1.crmf.POPOPrivKey -> org.bouncycastle.asn1.crmf.POPOPrivKey:
    int thisMessage -> thisMessage
    int subsequentMessage -> subsequentMessage
    int dhMAC -> dhMAC
    int agreeMAC -> agreeMAC
    int encryptedKey -> encryptedKey
    int tagNo -> tagNo
    org.bouncycastle.asn1.ASN1Encodable obj -> obj
    org.bouncycastle.asn1.crmf.POPOPrivKey getInstance(java.lang.Object) -> getInstance
    org.bouncycastle.asn1.crmf.POPOPrivKey getInstance(org.bouncycastle.asn1.ASN1TaggedObject,boolean) -> getInstance
    int getType() -> getType
    org.bouncycastle.asn1.ASN1Encodable getValue() -> getValue
    org.bouncycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
org.bouncycastle.asn1.crmf.POPOSigningKey -> org.bouncycastle.asn1.crmf.POPOSigningKey:
    org.bouncycastle.asn1.crmf.POPOSigningKeyInput poposkInput -> poposkInput
    org.bouncycastle.asn1.x509.AlgorithmIdentifier algorithmIdentifier -> algorithmIdentifier
    org.bouncycastle.asn1.DERBitString signature -> signature
    org.bouncycastle.asn1.crmf.POPOSigningKey getInstance(java.lang.Object) -> getInstance
    org.bouncycastle.asn1.crmf.POPOSigningKey getInstance(org.bouncycastle.asn1.ASN1TaggedObject,boolean) -> getInstance
    org.bouncycastle.asn1.crmf.POPOSigningKeyInput getPoposkInput() -> getPoposkInput
    org.bouncycastle.asn1.x509.AlgorithmIdentifier getAlgorithmIdentifier() -> getAlgorithmIdentifier
    org.bouncycastle.asn1.DERBitString getSignature() -> getSignature
    org.bouncycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
org.bouncycastle.asn1.crmf.POPOSigningKeyInput -> org.bouncycastle.asn1.crmf.POPOSigningKeyInput:
    org.bouncycastle.asn1.x509.GeneralName sender -> sender
    org.bouncycastle.asn1.crmf.PKMACValue publicKeyMAC -> publicKeyMAC
    org.bouncycastle.asn1.x509.SubjectPublicKeyInfo publicKey -> publicKey
    org.bouncycastle.asn1.crmf.POPOSigningKeyInput getInstance(java.lang.Object) -> getInstance
    org.bouncycastle.asn1.x509.GeneralName getSender() -> getSender
    org.bouncycastle.asn1.crmf.PKMACValue getPublicKeyMAC() -> getPublicKeyMAC
    org.bouncycastle.asn1.x509.SubjectPublicKeyInfo getPublicKey() -> getPublicKey
    org.bouncycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
org.bouncycastle.asn1.crmf.ProofOfPossession -> org.bouncycastle.asn1.crmf.ProofOfPossession:
    int TYPE_RA_VERIFIED -> TYPE_RA_VERIFIED
    int TYPE_SIGNING_KEY -> TYPE_SIGNING_KEY
    int TYPE_KEY_ENCIPHERMENT -> TYPE_KEY_ENCIPHERMENT
    int TYPE_KEY_AGREEMENT -> TYPE_KEY_AGREEMENT
    int tagNo -> tagNo
    org.bouncycastle.asn1.ASN1Encodable obj -> obj
    org.bouncycastle.asn1.crmf.ProofOfPossession getInstance(java.lang.Object) -> getInstance
    int getType() -> getType
    org.bouncycastle.asn1.ASN1Encodable getObject() -> getObject
    org.bouncycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
org.bouncycastle.asn1.crmf.SinglePubInfo -> org.bouncycastle.asn1.crmf.SinglePubInfo:
    org.bouncycastle.asn1.ASN1Integer pubMethod -> pubMethod
    org.bouncycastle.asn1.x509.GeneralName pubLocation -> pubLocation
    org.bouncycastle.asn1.crmf.SinglePubInfo getInstance(java.lang.Object) -> getInstance
    org.bouncycastle.asn1.x509.GeneralName getPubLocation() -> getPubLocation
    org.bouncycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
org.bouncycastle.asn1.crmf.SubsequentMessage -> org.bouncycastle.asn1.crmf.SubsequentMessage:
    org.bouncycastle.asn1.crmf.SubsequentMessage encrCert -> encrCert
    org.bouncycastle.asn1.crmf.SubsequentMessage challengeResp -> challengeResp
    org.bouncycastle.asn1.crmf.SubsequentMessage valueOf(int) -> valueOf
org.bouncycastle.asn1.cryptopro.CryptoProObjectIdentifiers -> org.bouncycastle.asn1.cryptopro.CryptoProObjectIdentifiers:
    org.bouncycastle.asn1.ASN1ObjectIdentifier GOST_id -> GOST_id
    org.bouncycastle.asn1.ASN1ObjectIdentifier gostR3411 -> gostR3411
    org.bouncycastle.asn1.ASN1ObjectIdentifier gostR3411Hmac -> gostR3411Hmac
    org.bouncycastle.asn1.ASN1ObjectIdentifier gostR28147_gcfb -> gostR28147_gcfb
    org.bouncycastle.asn1.ASN1ObjectIdentifier id_Gost28147_89_CryptoPro_A_ParamSet -> id_Gost28147_89_CryptoPro_A_ParamSet
    org.bouncycastle.asn1.ASN1ObjectIdentifier id_Gost28147_89_CryptoPro_B_ParamSet -> id_Gost28147_89_CryptoPro_B_ParamSet
    org.bouncycastle.asn1.ASN1ObjectIdentifier id_Gost28147_89_CryptoPro_C_ParamSet -> id_Gost28147_89_CryptoPro_C_ParamSet
    org.bouncycastle.asn1.ASN1ObjectIdentifier id_Gost28147_89_CryptoPro_D_ParamSet -> id_Gost28147_89_CryptoPro_D_ParamSet
    org.bouncycastle.asn1.ASN1ObjectIdentifier gostR3410_94 -> gostR3410_94
    org.bouncycastle.asn1.ASN1ObjectIdentifier gostR3410_2001 -> gostR3410_2001
    org.bouncycastle.asn1.ASN1ObjectIdentifier gostR3411_94_with_gostR3410_94 -> gostR3411_94_with_gostR3410_94
    org.bouncycastle.asn1.ASN1ObjectIdentifier gostR3411_94_with_gostR3410_2001 -> gostR3411_94_with_gostR3410_2001
    org.bouncycastle.asn1.ASN1ObjectIdentifier gostR3411_94_CryptoProParamSet -> gostR3411_94_CryptoProParamSet
    org.bouncycastle.asn1.ASN1ObjectIdentifier gostR3410_94_CryptoPro_A -> gostR3410_94_CryptoPro_A
    org.bouncycastle.asn1.ASN1ObjectIdentifier gostR3410_94_CryptoPro_B -> gostR3410_94_CryptoPro_B
    org.bouncycastle.asn1.ASN1ObjectIdentifier gostR3410_94_CryptoPro_C -> gostR3410_94_CryptoPro_C
    org.bouncycastle.asn1.ASN1ObjectIdentifier gostR3410_94_CryptoPro_D -> gostR3410_94_CryptoPro_D
    org.bouncycastle.asn1.ASN1ObjectIdentifier gostR3410_94_CryptoPro_XchA -> gostR3410_94_CryptoPro_XchA
    org.bouncycastle.asn1.ASN1ObjectIdentifier gostR3410_94_CryptoPro_XchB -> gostR3410_94_CryptoPro_XchB
    org.bouncycastle.asn1.ASN1ObjectIdentifier gostR3410_94_CryptoPro_XchC -> gostR3410_94_CryptoPro_XchC
    org.bouncycastle.asn1.ASN1ObjectIdentifier gostR3410_2001_CryptoPro_A -> gostR3410_2001_CryptoPro_A
    org.bouncycastle.asn1.ASN1ObjectIdentifier gostR3410_2001_CryptoPro_B -> gostR3410_2001_CryptoPro_B
    org.bouncycastle.asn1.ASN1ObjectIdentifier gostR3410_2001_CryptoPro_C -> gostR3410_2001_CryptoPro_C
    org.bouncycastle.asn1.ASN1ObjectIdentifier gostR3410_2001_CryptoPro_XchA -> gostR3410_2001_CryptoPro_XchA
    org.bouncycastle.asn1.ASN1ObjectIdentifier gostR3410_2001_CryptoPro_XchB -> gostR3410_2001_CryptoPro_XchB
    org.bouncycastle.asn1.ASN1ObjectIdentifier gost_ElSgDH3410_default -> gost_ElSgDH3410_default
    org.bouncycastle.asn1.ASN1ObjectIdentifier gost_ElSgDH3410_1 -> gost_ElSgDH3410_1
org.bouncycastle.asn1.cryptopro.ECGOST3410NamedCurves -> org.bouncycastle.asn1.cryptopro.ECGOST3410NamedCurves:
    java.util.Hashtable objIds -> objIds
    java.util.Hashtable params -> params
    java.util.Hashtable names -> names
    org.bouncycastle.crypto.params.ECDomainParameters getByOID(org.bouncycastle.asn1.ASN1ObjectIdentifier) -> getByOID
    java.util.Enumeration getNames() -> getNames
    org.bouncycastle.crypto.params.ECDomainParameters getByName(java.lang.String) -> getByName
    java.lang.String getName(org.bouncycastle.asn1.ASN1ObjectIdentifier) -> getName
    org.bouncycastle.asn1.ASN1ObjectIdentifier getOID(java.lang.String) -> getOID
org.bouncycastle.asn1.cryptopro.ECGOST3410ParamSetParameters -> org.bouncycastle.asn1.cryptopro.ECGOST3410ParamSetParameters:
    org.bouncycastle.asn1.ASN1Integer p -> p
    org.bouncycastle.asn1.ASN1Integer q -> q
    org.bouncycastle.asn1.ASN1Integer a -> a
    org.bouncycastle.asn1.ASN1Integer b -> b
    org.bouncycastle.asn1.ASN1Integer x -> x
    org.bouncycastle.asn1.ASN1Integer y -> y
    org.bouncycastle.asn1.cryptopro.ECGOST3410ParamSetParameters getInstance(org.bouncycastle.asn1.ASN1TaggedObject,boolean) -> getInstance
    org.bouncycastle.asn1.cryptopro.ECGOST3410ParamSetParameters getInstance(java.lang.Object) -> getInstance
    java.math.BigInteger getP() -> getP
    java.math.BigInteger getQ() -> getQ
    java.math.BigInteger getA() -> getA
    org.bouncycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
org.bouncycastle.asn1.cryptopro.GOST28147Parameters -> org.bouncycastle.asn1.cryptopro.GOST28147Parameters:
    org.bouncycastle.asn1.ASN1OctetString iv -> iv
    org.bouncycastle.asn1.ASN1ObjectIdentifier paramSet -> paramSet
    org.bouncycastle.asn1.cryptopro.GOST28147Parameters getInstance(org.bouncycastle.asn1.ASN1TaggedObject,boolean) -> getInstance
    org.bouncycastle.asn1.cryptopro.GOST28147Parameters getInstance(java.lang.Object) -> getInstance
    org.bouncycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
    org.bouncycastle.asn1.ASN1ObjectIdentifier getEncryptionParamSet() -> getEncryptionParamSet
    byte[] getIV() -> getIV
org.bouncycastle.asn1.cryptopro.GOST3410NamedParameters -> org.bouncycastle.asn1.cryptopro.GOST3410NamedParameters:
    java.util.Hashtable objIds -> objIds
    java.util.Hashtable params -> params
    java.util.Hashtable names -> names
    org.bouncycastle.asn1.cryptopro.GOST3410ParamSetParameters cryptoProA -> cryptoProA
    org.bouncycastle.asn1.cryptopro.GOST3410ParamSetParameters cryptoProB -> cryptoProB
    org.bouncycastle.asn1.cryptopro.GOST3410ParamSetParameters cryptoProXchA -> cryptoProXchA
    org.bouncycastle.asn1.cryptopro.GOST3410ParamSetParameters getByOID(org.bouncycastle.asn1.ASN1ObjectIdentifier) -> getByOID
    java.util.Enumeration getNames() -> getNames
    org.bouncycastle.asn1.cryptopro.GOST3410ParamSetParameters getByName(java.lang.String) -> getByName
    org.bouncycastle.asn1.ASN1ObjectIdentifier getOID(java.lang.String) -> getOID
org.bouncycastle.asn1.cryptopro.GOST3410ParamSetParameters -> org.bouncycastle.asn1.cryptopro.GOST3410ParamSetParameters:
    int keySize -> keySize
    org.bouncycastle.asn1.ASN1Integer p -> p
    org.bouncycastle.asn1.ASN1Integer q -> q
    org.bouncycastle.asn1.ASN1Integer a -> a
    org.bouncycastle.asn1.cryptopro.GOST3410ParamSetParameters getInstance(org.bouncycastle.asn1.ASN1TaggedObject,boolean) -> getInstance
    org.bouncycastle.asn1.cryptopro.GOST3410ParamSetParameters getInstance(java.lang.Object) -> getInstance
    int getLKeySize() -> getLKeySize
    int getKeySize() -> getKeySize
    java.math.BigInteger getP() -> getP
    java.math.BigInteger getQ() -> getQ
    java.math.BigInteger getA() -> getA
    org.bouncycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
org.bouncycastle.asn1.cryptopro.GOST3410PublicKeyAlgParameters -> org.bouncycastle.asn1.cryptopro.GOST3410PublicKeyAlgParameters:
    org.bouncycastle.asn1.ASN1ObjectIdentifier publicKeyParamSet -> publicKeyParamSet
    org.bouncycastle.asn1.ASN1ObjectIdentifier digestParamSet -> digestParamSet
    org.bouncycastle.asn1.ASN1ObjectIdentifier encryptionParamSet -> encryptionParamSet
    org.bouncycastle.asn1.cryptopro.GOST3410PublicKeyAlgParameters getInstance(org.bouncycastle.asn1.ASN1TaggedObject,boolean) -> getInstance
    org.bouncycastle.asn1.cryptopro.GOST3410PublicKeyAlgParameters getInstance(java.lang.Object) -> getInstance
    org.bouncycastle.asn1.ASN1ObjectIdentifier getPublicKeyParamSet() -> getPublicKeyParamSet
    org.bouncycastle.asn1.ASN1ObjectIdentifier getDigestParamSet() -> getDigestParamSet
    org.bouncycastle.asn1.ASN1ObjectIdentifier getEncryptionParamSet() -> getEncryptionParamSet
    org.bouncycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
org.bouncycastle.asn1.dvcs.CertEtcToken -> org.bouncycastle.asn1.dvcs.CertEtcToken:
    int TAG_CERTIFICATE -> TAG_CERTIFICATE
    int TAG_ESSCERTID -> TAG_ESSCERTID
    int TAG_PKISTATUS -> TAG_PKISTATUS
    int TAG_ASSERTION -> TAG_ASSERTION
    int TAG_CRL -> TAG_CRL
    int TAG_OCSPCERTSTATUS -> TAG_OCSPCERTSTATUS
    int TAG_OCSPCERTID -> TAG_OCSPCERTID
    int TAG_OCSPRESPONSE -> TAG_OCSPRESPONSE
    int TAG_CAPABILITIES -> TAG_CAPABILITIES
    boolean[] explicit -> explicit
    int tagNo -> tagNo
    org.bouncycastle.asn1.ASN1Encodable value -> value
    org.bouncycastle.asn1.x509.Extension extension -> extension
    org.bouncycastle.asn1.dvcs.CertEtcToken getInstance(java.lang.Object) -> getInstance
    org.bouncycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
    int getTagNo() -> getTagNo
    org.bouncycastle.asn1.ASN1Encodable getValue() -> getValue
    org.bouncycastle.asn1.x509.Extension getExtension() -> getExtension
    java.lang.String toString() -> toString
    org.bouncycastle.asn1.dvcs.CertEtcToken[] arrayFromSequence(org.bouncycastle.asn1.ASN1Sequence) -> arrayFromSequence
org.bouncycastle.asn1.dvcs.DVCSCertInfo -> org.bouncycastle.asn1.dvcs.DVCSCertInfo:
    int version -> version
    org.bouncycastle.asn1.dvcs.DVCSRequestInformation dvReqInfo -> dvReqInfo
    org.bouncycastle.asn1.x509.DigestInfo messageImprint -> messageImprint
    org.bouncycastle.asn1.ASN1Integer serialNumber -> serialNumber
    org.bouncycastle.asn1.dvcs.DVCSTime responseTime -> responseTime
    org.bouncycastle.asn1.cmp.PKIStatusInfo dvStatus -> dvStatus
    org.bouncycastle.asn1.x509.PolicyInformation policy -> policy
    org.bouncycastle.asn1.ASN1Set reqSignature -> reqSignature
    org.bouncycastle.asn1.ASN1Sequence certs -> certs
    org.bouncycastle.asn1.x509.Extensions extensions -> extensions
    int DEFAULT_VERSION -> DEFAULT_VERSION
    int TAG_DV_STATUS -> TAG_DV_STATUS
    int TAG_POLICY -> TAG_POLICY
    int TAG_REQ_SIGNATURE -> TAG_REQ_SIGNATURE
    int TAG_CERTS -> TAG_CERTS
    org.bouncycastle.asn1.dvcs.DVCSCertInfo getInstance(java.lang.Object) -> getInstance
    org.bouncycastle.asn1.dvcs.DVCSCertInfo getInstance(org.bouncycastle.asn1.ASN1TaggedObject,boolean) -> getInstance
    org.bouncycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
    java.lang.String toString() -> toString
    int getVersion() -> getVersion
    void setVersion(int) -> setVersion
    org.bouncycastle.asn1.dvcs.DVCSRequestInformation getDvReqInfo() -> getDvReqInfo
    void setDvReqInfo(org.bouncycastle.asn1.dvcs.DVCSRequestInformation) -> setDvReqInfo
    org.bouncycastle.asn1.x509.DigestInfo getMessageImprint() -> getMessageImprint
    void setMessageImprint(org.bouncycastle.asn1.x509.DigestInfo) -> setMessageImprint
    org.bouncycastle.asn1.ASN1Integer getSerialNumber() -> getSerialNumber
    org.bouncycastle.asn1.dvcs.DVCSTime getResponseTime() -> getResponseTime
    org.bouncycastle.asn1.cmp.PKIStatusInfo getDvStatus() -> getDvStatus
    org.bouncycastle.asn1.x509.PolicyInformation getPolicy() -> getPolicy
    org.bouncycastle.asn1.ASN1Set getReqSignature() -> getReqSignature
    org.bouncycastle.asn1.dvcs.TargetEtcChain[] getCerts() -> getCerts
    org.bouncycastle.asn1.x509.Extensions getExtensions() -> getExtensions
org.bouncycastle.asn1.dvcs.DVCSCertInfoBuilder -> org.bouncycastle.asn1.dvcs.DVCSCertInfoBuilder:
    int version -> version
    org.bouncycastle.asn1.dvcs.DVCSRequestInformation dvReqInfo -> dvReqInfo
    org.bouncycastle.asn1.x509.DigestInfo messageImprint -> messageImprint
    org.bouncycastle.asn1.ASN1Integer serialNumber -> serialNumber
    org.bouncycastle.asn1.dvcs.DVCSTime responseTime -> responseTime
    org.bouncycastle.asn1.cmp.PKIStatusInfo dvStatus -> dvStatus
    org.bouncycastle.asn1.x509.PolicyInformation policy -> policy
    org.bouncycastle.asn1.ASN1Set reqSignature -> reqSignature
    org.bouncycastle.asn1.ASN1Sequence certs -> certs
    org.bouncycastle.asn1.x509.Extensions extensions -> extensions
    int DEFAULT_VERSION -> DEFAULT_VERSION
    int TAG_DV_STATUS -> TAG_DV_STATUS
    int TAG_POLICY -> TAG_POLICY
    int TAG_REQ_SIGNATURE -> TAG_REQ_SIGNATURE
    int TAG_CERTS -> TAG_CERTS
    org.bouncycastle.asn1.dvcs.DVCSCertInfo build() -> build
    void setVersion(int) -> setVersion
    void setDvReqInfo(org.bouncycastle.asn1.dvcs.DVCSRequestInformation) -> setDvReqInfo
    void setMessageImprint(org.bouncycastle.asn1.x509.DigestInfo) -> setMessageImprint
    void setSerialNumber(org.bouncycastle.asn1.ASN1Integer) -> setSerialNumber
    void setResponseTime(org.bouncycastle.asn1.dvcs.DVCSTime) -> setResponseTime
    void setDvStatus(org.bouncycastle.asn1.cmp.PKIStatusInfo) -> setDvStatus
    void setPolicy(org.bouncycastle.asn1.x509.PolicyInformation) -> setPolicy
    void setReqSignature(org.bouncycastle.asn1.ASN1Set) -> setReqSignature
    void setCerts(org.bouncycastle.asn1.dvcs.TargetEtcChain[]) -> setCerts
    void setExtensions(org.bouncycastle.asn1.x509.Extensions) -> setExtensions
org.bouncycastle.asn1.dvcs.DVCSErrorNotice -> org.bouncycastle.asn1.dvcs.DVCSErrorNotice:
    org.bouncycastle.asn1.cmp.PKIStatusInfo transactionStatus -> transactionStatus
    org.bouncycastle.asn1.x509.GeneralName transactionIdentifier -> transactionIdentifier
    org.bouncycastle.asn1.dvcs.DVCSErrorNotice getInstance(java.lang.Object) -> getInstance
    org.bouncycastle.asn1.dvcs.DVCSErrorNotice getInstance(org.bouncycastle.asn1.ASN1TaggedObject,boolean) -> getInstance
    org.bouncycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
    java.lang.String toString() -> toString
    org.bouncycastle.asn1.cmp.PKIStatusInfo getTransactionStatus() -> getTransactionStatus
    org.bouncycastle.asn1.x509.GeneralName getTransactionIdentifier() -> getTransactionIdentifier
org.bouncycastle.asn1.dvcs.DVCSObjectIdentifiers -> org.bouncycastle.asn1.dvcs.DVCSObjectIdentifiers:
    org.bouncycastle.asn1.ASN1ObjectIdentifier id_pkix -> id_pkix
    org.bouncycastle.asn1.ASN1ObjectIdentifier id_smime -> id_smime
    org.bouncycastle.asn1.ASN1ObjectIdentifier id_ad_dvcs -> id_ad_dvcs
    org.bouncycastle.asn1.ASN1ObjectIdentifier id_kp_dvcs -> id_kp_dvcs
    org.bouncycastle.asn1.ASN1ObjectIdentifier id_ct_DVCSRequestData -> id_ct_DVCSRequestData
    org.bouncycastle.asn1.ASN1ObjectIdentifier id_ct_DVCSResponseData -> id_ct_DVCSResponseData
    org.bouncycastle.asn1.ASN1ObjectIdentifier id_aa_dvcs_dvc -> id_aa_dvcs_dvc
org.bouncycastle.asn1.dvcs.DVCSRequest -> org.bouncycastle.asn1.dvcs.DVCSRequest:
    org.bouncycastle.asn1.dvcs.DVCSRequestInformation requestInformation -> requestInformation
    org.bouncycastle.asn1.dvcs.Data data -> data
    org.bouncycastle.asn1.x509.GeneralName transactionIdentifier -> transactionIdentifier
    org.bouncycastle.asn1.dvcs.DVCSRequest getInstance(java.lang.Object) -> getInstance
    org.bouncycastle.asn1.dvcs.DVCSRequest getInstance(org.bouncycastle.asn1.ASN1TaggedObject,boolean) -> getInstance
    org.bouncycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
    java.lang.String toString() -> toString
    org.bouncycastle.asn1.dvcs.Data getData() -> getData
    org.bouncycastle.asn1.dvcs.DVCSRequestInformation getRequestInformation() -> getRequestInformation
    org.bouncycastle.asn1.x509.GeneralName getTransactionIdentifier() -> getTransactionIdentifier
org.bouncycastle.asn1.dvcs.DVCSRequestInformation -> org.bouncycastle.asn1.dvcs.DVCSRequestInformation:
    int version -> version
    org.bouncycastle.asn1.dvcs.ServiceType service -> service
    java.math.BigInteger nonce -> nonce
    org.bouncycastle.asn1.dvcs.DVCSTime requestTime -> requestTime
    org.bouncycastle.asn1.x509.GeneralNames requester -> requester
    org.bouncycastle.asn1.x509.PolicyInformation requestPolicy -> requestPolicy
    org.bouncycastle.asn1.x509.GeneralNames dvcs -> dvcs
    org.bouncycastle.asn1.x509.GeneralNames dataLocations -> dataLocations
    org.bouncycastle.asn1.x509.Extensions extensions -> extensions
    int DEFAULT_VERSION -> DEFAULT_VERSION
    int TAG_REQUESTER -> TAG_REQUESTER
    int TAG_REQUEST_POLICY -> TAG_REQUEST_POLICY
    int TAG_DVCS -> TAG_DVCS
    int TAG_DATA_LOCATIONS -> TAG_DATA_LOCATIONS
    int TAG_EXTENSIONS -> TAG_EXTENSIONS
    org.bouncycastle.asn1.dvcs.DVCSRequestInformation getInstance(java.lang.Object) -> getInstance
    org.bouncycastle.asn1.dvcs.DVCSRequestInformation getInstance(org.bouncycastle.asn1.ASN1TaggedObject,boolean) -> getInstance
    org.bouncycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
    java.lang.String toString() -> toString
    int getVersion() -> getVersion
    org.bouncycastle.asn1.dvcs.ServiceType getService() -> getService
    java.math.BigInteger getNonce() -> getNonce
    org.bouncycastle.asn1.dvcs.DVCSTime getRequestTime() -> getRequestTime
    org.bouncycastle.asn1.x509.GeneralNames getRequester() -> getRequester
    org.bouncycastle.asn1.x509.PolicyInformation getRequestPolicy() -> getRequestPolicy
    org.bouncycastle.asn1.x509.GeneralNames getDVCS() -> getDVCS
    org.bouncycastle.asn1.x509.GeneralNames getDataLocations() -> getDataLocations
    org.bouncycastle.asn1.x509.Extensions getExtensions() -> getExtensions
org.bouncycastle.asn1.dvcs.DVCSRequestInformationBuilder -> org.bouncycastle.asn1.dvcs.DVCSRequestInformationBuilder:
    int version -> version
    org.bouncycastle.asn1.dvcs.ServiceType service -> service
    org.bouncycastle.asn1.dvcs.DVCSRequestInformation initialInfo -> initialInfo
    java.math.BigInteger nonce -> nonce
    org.bouncycastle.asn1.dvcs.DVCSTime requestTime -> requestTime
    org.bouncycastle.asn1.x509.GeneralNames requester -> requester
    org.bouncycastle.asn1.x509.PolicyInformation requestPolicy -> requestPolicy
    org.bouncycastle.asn1.x509.GeneralNames dvcs -> dvcs
    org.bouncycastle.asn1.x509.GeneralNames dataLocations -> dataLocations
    org.bouncycastle.asn1.x509.Extensions extensions -> extensions
    int DEFAULT_VERSION -> DEFAULT_VERSION
    int TAG_REQUESTER -> TAG_REQUESTER
    int TAG_REQUEST_POLICY -> TAG_REQUEST_POLICY
    int TAG_DVCS -> TAG_DVCS
    int TAG_DATA_LOCATIONS -> TAG_DATA_LOCATIONS
    int TAG_EXTENSIONS -> TAG_EXTENSIONS
    org.bouncycastle.asn1.dvcs.DVCSRequestInformation build() -> build
    void setVersion(int) -> setVersion
    void setNonce(java.math.BigInteger) -> setNonce
    void setRequestTime(org.bouncycastle.asn1.dvcs.DVCSTime) -> setRequestTime
    void setRequester(org.bouncycastle.asn1.x509.GeneralName) -> setRequester
    void setRequester(org.bouncycastle.asn1.x509.GeneralNames) -> setRequester
    void setRequestPolicy(org.bouncycastle.asn1.x509.PolicyInformation) -> setRequestPolicy
    void setDVCS(org.bouncycastle.asn1.x509.GeneralName) -> setDVCS
    void setDVCS(org.bouncycastle.asn1.x509.GeneralNames) -> setDVCS
    void setDataLocations(org.bouncycastle.asn1.x509.GeneralName) -> setDataLocations
    void setDataLocations(org.bouncycastle.asn1.x509.GeneralNames) -> setDataLocations
    void setExtensions(org.bouncycastle.asn1.x509.Extensions) -> setExtensions
org.bouncycastle.asn1.dvcs.DVCSResponse -> org.bouncycastle.asn1.dvcs.DVCSResponse:
    org.bouncycastle.asn1.dvcs.DVCSCertInfo dvCertInfo -> dvCertInfo
    org.bouncycastle.asn1.dvcs.DVCSErrorNotice dvErrorNote -> dvErrorNote
    org.bouncycastle.asn1.dvcs.DVCSResponse getInstance(java.lang.Object) -> getInstance
    org.bouncycastle.asn1.dvcs.DVCSResponse getInstance(org.bouncycastle.asn1.ASN1TaggedObject,boolean) -> getInstance
    org.bouncycastle.asn1.dvcs.DVCSCertInfo getCertInfo() -> getCertInfo
    org.bouncycastle.asn1.dvcs.DVCSErrorNotice getErrorNotice() -> getErrorNotice
    org.bouncycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
    java.lang.String toString() -> toString
org.bouncycastle.asn1.dvcs.DVCSTime -> org.bouncycastle.asn1.dvcs.DVCSTime:
    org.bouncycastle.asn1.ASN1GeneralizedTime genTime -> genTime
    org.bouncycastle.asn1.cms.ContentInfo timeStampToken -> timeStampToken
    java.util.Date time -> time
    org.bouncycastle.asn1.dvcs.DVCSTime getInstance(java.lang.Object) -> getInstance
    org.bouncycastle.asn1.dvcs.DVCSTime getInstance(org.bouncycastle.asn1.ASN1TaggedObject,boolean) -> getInstance
    org.bouncycastle.asn1.ASN1GeneralizedTime getGenTime() -> getGenTime
    org.bouncycastle.asn1.cms.ContentInfo getTimeStampToken() -> getTimeStampToken
    org.bouncycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
    java.lang.String toString() -> toString
org.bouncycastle.asn1.dvcs.Data -> org.bouncycastle.asn1.dvcs.Data:
    org.bouncycastle.asn1.ASN1OctetString message -> message
    org.bouncycastle.asn1.x509.DigestInfo messageImprint -> messageImprint
    org.bouncycastle.asn1.ASN1Sequence certs -> certs
    org.bouncycastle.asn1.dvcs.Data getInstance(java.lang.Object) -> getInstance
    org.bouncycastle.asn1.dvcs.Data getInstance(org.bouncycastle.asn1.ASN1TaggedObject,boolean) -> getInstance
    org.bouncycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
    java.lang.String toString() -> toString
    org.bouncycastle.asn1.ASN1OctetString getMessage() -> getMessage
    org.bouncycastle.asn1.x509.DigestInfo getMessageImprint() -> getMessageImprint
    org.bouncycastle.asn1.dvcs.TargetEtcChain[] getCerts() -> getCerts
org.bouncycastle.asn1.dvcs.PathProcInput -> org.bouncycastle.asn1.dvcs.PathProcInput:
    org.bouncycastle.asn1.x509.PolicyInformation[] acceptablePolicySet -> acceptablePolicySet
    boolean inhibitPolicyMapping -> inhibitPolicyMapping
    boolean explicitPolicyReqd -> explicitPolicyReqd
    boolean inhibitAnyPolicy -> inhibitAnyPolicy
    org.bouncycastle.asn1.x509.PolicyInformation[] fromSequence(org.bouncycastle.asn1.ASN1Sequence) -> fromSequence
    org.bouncycastle.asn1.dvcs.PathProcInput getInstance(java.lang.Object) -> getInstance
    org.bouncycastle.asn1.dvcs.PathProcInput getInstance(org.bouncycastle.asn1.ASN1TaggedObject,boolean) -> getInstance
    org.bouncycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
    java.lang.String toString() -> toString
    org.bouncycastle.asn1.x509.PolicyInformation[] getAcceptablePolicySet() -> getAcceptablePolicySet
    boolean isInhibitPolicyMapping() -> isInhibitPolicyMapping
    void setInhibitPolicyMapping(boolean) -> setInhibitPolicyMapping
    boolean isExplicitPolicyReqd() -> isExplicitPolicyReqd
    void setExplicitPolicyReqd(boolean) -> setExplicitPolicyReqd
    boolean isInhibitAnyPolicy() -> isInhibitAnyPolicy
    void setInhibitAnyPolicy(boolean) -> setInhibitAnyPolicy
org.bouncycastle.asn1.dvcs.ServiceType -> org.bouncycastle.asn1.dvcs.ServiceType:
    org.bouncycastle.asn1.dvcs.ServiceType CPD -> CPD
    org.bouncycastle.asn1.dvcs.ServiceType VSD -> VSD
    org.bouncycastle.asn1.dvcs.ServiceType VPKC -> VPKC
    org.bouncycastle.asn1.dvcs.ServiceType CCPD -> CCPD
    org.bouncycastle.asn1.ASN1Enumerated value -> value
    org.bouncycastle.asn1.dvcs.ServiceType getInstance(java.lang.Object) -> getInstance
    org.bouncycastle.asn1.dvcs.ServiceType getInstance(org.bouncycastle.asn1.ASN1TaggedObject,boolean) -> getInstance
    java.math.BigInteger getValue() -> getValue
    org.bouncycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
    java.lang.String toString() -> toString
org.bouncycastle.asn1.dvcs.TargetEtcChain -> org.bouncycastle.asn1.dvcs.TargetEtcChain:
    org.bouncycastle.asn1.dvcs.CertEtcToken target -> target
    org.bouncycastle.asn1.ASN1Sequence chain -> chain
    org.bouncycastle.asn1.dvcs.PathProcInput pathProcInput -> pathProcInput
    org.bouncycastle.asn1.dvcs.TargetEtcChain getInstance(java.lang.Object) -> getInstance
    org.bouncycastle.asn1.dvcs.TargetEtcChain getInstance(org.bouncycastle.asn1.ASN1TaggedObject,boolean) -> getInstance
    org.bouncycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
    java.lang.String toString() -> toString
    org.bouncycastle.asn1.dvcs.CertEtcToken getTarget() -> getTarget
    org.bouncycastle.asn1.dvcs.CertEtcToken[] getChain() -> getChain
    void setChain(org.bouncycastle.asn1.ASN1Sequence) -> setChain
    org.bouncycastle.asn1.dvcs.PathProcInput getPathProcInput() -> getPathProcInput
    void setPathProcInput(org.bouncycastle.asn1.dvcs.PathProcInput) -> setPathProcInput
    org.bouncycastle.asn1.dvcs.TargetEtcChain[] arrayFromSequence(org.bouncycastle.asn1.ASN1Sequence) -> arrayFromSequence
org.bouncycastle.asn1.eac.BidirectionalMap -> org.bouncycastle.asn1.eac.BidirectionalMap:
    long serialVersionUID -> serialVersionUID
    java.util.Hashtable reverseMap -> reverseMap
    java.lang.Object getReverse(java.lang.Object) -> getReverse
    java.lang.Object put(java.lang.Object,java.lang.Object) -> put
org.bouncycastle.asn1.eac.CVCertificate -> org.bouncycastle.asn1.eac.CVCertificate:
    org.bouncycastle.asn1.eac.CertificateBody certificateBody -> certificateBody
    byte[] signature -> signature
    int valid -> valid
    int bodyValid -> bodyValid
    int signValid -> signValid
    byte version_1 -> version_1
    java.lang.String ReferenceEncoding -> ReferenceEncoding
    void setPrivateData(org.bouncycastle.asn1.DERApplicationSpecific) -> setPrivateData
    void initFrom(org.bouncycastle.asn1.ASN1InputStream) -> initFrom
    org.bouncycastle.asn1.eac.CVCertificate getInstance(java.lang.Object) -> getInstance
    byte[] getSignature() -> getSignature
    org.bouncycastle.asn1.eac.CertificateBody getBody() -> getBody
    org.bouncycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
    org.bouncycastle.asn1.ASN1ObjectIdentifier getHolderAuthorization() -> getHolderAuthorization
    org.bouncycastle.asn1.eac.PackedDate getEffectiveDate() -> getEffectiveDate
    int getCertificateType() -> getCertificateType
    org.bouncycastle.asn1.eac.PackedDate getExpirationDate() -> getExpirationDate
    int getRole() -> getRole
    org.bouncycastle.asn1.eac.CertificationAuthorityReference getAuthorityReference() -> getAuthorityReference
    org.bouncycastle.asn1.eac.CertificateHolderReference getHolderReference() -> getHolderReference
    int getHolderAuthorizationRole() -> getHolderAuthorizationRole
    org.bouncycastle.asn1.eac.Flags getHolderAuthorizationRights() -> getHolderAuthorizationRights
org.bouncycastle.asn1.eac.CVCertificateRequest -> org.bouncycastle.asn1.eac.CVCertificateRequest:
    org.bouncycastle.asn1.eac.CertificateBody certificateBody -> certificateBody
    byte[] innerSignature -> innerSignature
    byte[] outerSignature -> outerSignature
    int valid -> valid
    int bodyValid -> bodyValid
    int signValid -> signValid
    org.bouncycastle.asn1.ASN1ObjectIdentifier signOid -> signOid
    org.bouncycastle.asn1.ASN1ObjectIdentifier keyOid -> keyOid
    byte[] ZeroArray -> ZeroArray
    java.lang.String strCertificateHolderReference -> strCertificateHolderReference
    byte[] encodedAuthorityReference -> encodedAuthorityReference
    int ProfileId -> ProfileId
    byte[] certificate -> certificate
    java.lang.String overSignerReference -> overSignerReference
    byte[] encoded -> encoded
    org.bouncycastle.asn1.eac.PublicKeyDataObject iso7816PubKey -> iso7816PubKey
    void initCertBody(org.bouncycastle.asn1.DERApplicationSpecific) -> initCertBody
    org.bouncycastle.asn1.eac.CVCertificateRequest getInstance(java.lang.Object) -> getInstance
    org.bouncycastle.asn1.eac.CertificateBody getCertificateBody() -> getCertificateBody
    org.bouncycastle.asn1.eac.PublicKeyDataObject getPublicKey() -> getPublicKey
    byte[] getInnerSignature() -> getInnerSignature
    byte[] getOuterSignature() -> getOuterSignature
    boolean hasOuterSignature() -> hasOuterSignature
    org.bouncycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
org.bouncycastle.asn1.eac.CertificateBody -> org.bouncycastle.asn1.eac.CertificateBody:
    org.bouncycastle.asn1.ASN1InputStream seq -> seq
    org.bouncycastle.asn1.DERApplicationSpecific certificateProfileIdentifier -> certificateProfileIdentifier
    org.bouncycastle.asn1.DERApplicationSpecific certificationAuthorityReference -> certificationAuthorityReference
    org.bouncycastle.asn1.eac.PublicKeyDataObject publicKey -> publicKey
    org.bouncycastle.asn1.DERApplicationSpecific certificateHolderReference -> certificateHolderReference
    org.bouncycastle.asn1.eac.CertificateHolderAuthorization certificateHolderAuthorization -> certificateHolderAuthorization
    org.bouncycastle.asn1.DERApplicationSpecific certificateEffectiveDate -> certificateEffectiveDate
    org.bouncycastle.asn1.DERApplicationSpecific certificateExpirationDate -> certificateExpirationDate
    int certificateType -> certificateType
    int CPI -> CPI
    int CAR -> CAR
    int PK -> PK
    int CHR -> CHR
    int CHA -> CHA
    int CEfD -> CEfD
    int CExD -> CExD
    int profileType -> profileType
    int requestType -> requestType
    void setIso7816CertificateBody(org.bouncycastle.asn1.DERApplicationSpecific) -> setIso7816CertificateBody
    org.bouncycastle.asn1.ASN1Primitive profileToASN1Object() -> profileToASN1Object
    void setCertificateProfileIdentifier(org.bouncycastle.asn1.DERApplicationSpecific) -> setCertificateProfileIdentifier
    void setCertificateHolderReference(org.bouncycastle.asn1.DERApplicationSpecific) -> setCertificateHolderReference
    void setCertificationAuthorityReference(org.bouncycastle.asn1.DERApplicationSpecific) -> setCertificationAuthorityReference
    void setPublicKey(org.bouncycastle.asn1.eac.PublicKeyDataObject) -> setPublicKey
    org.bouncycastle.asn1.ASN1Primitive requestToASN1Object() -> requestToASN1Object
    org.bouncycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
    int getCertificateType() -> getCertificateType
    org.bouncycastle.asn1.eac.CertificateBody getInstance(java.lang.Object) -> getInstance
    org.bouncycastle.asn1.eac.PackedDate getCertificateEffectiveDate() -> getCertificateEffectiveDate
    void setCertificateEffectiveDate(org.bouncycastle.asn1.DERApplicationSpecific) -> setCertificateEffectiveDate
    org.bouncycastle.asn1.eac.PackedDate getCertificateExpirationDate() -> getCertificateExpirationDate
    void setCertificateExpirationDate(org.bouncycastle.asn1.DERApplicationSpecific) -> setCertificateExpirationDate
    org.bouncycastle.asn1.eac.CertificateHolderAuthorization getCertificateHolderAuthorization() -> getCertificateHolderAuthorization
    void setCertificateHolderAuthorization(org.bouncycastle.asn1.eac.CertificateHolderAuthorization) -> setCertificateHolderAuthorization
    org.bouncycastle.asn1.eac.CertificateHolderReference getCertificateHolderReference() -> getCertificateHolderReference
    org.bouncycastle.asn1.DERApplicationSpecific getCertificateProfileIdentifier() -> getCertificateProfileIdentifier
    org.bouncycastle.asn1.eac.CertificationAuthorityReference getCertificationAuthorityReference() -> getCertificationAuthorityReference
    org.bouncycastle.asn1.eac.PublicKeyDataObject getPublicKey() -> getPublicKey
org.bouncycastle.asn1.eac.CertificateHolderAuthorization -> org.bouncycastle.asn1.eac.CertificateHolderAuthorization:
    org.bouncycastle.asn1.ASN1ObjectIdentifier oid -> oid
    org.bouncycastle.asn1.DERApplicationSpecific accessRights -> accessRights
    org.bouncycastle.asn1.ASN1ObjectIdentifier id_role_EAC -> id_role_EAC
    int CVCA -> CVCA
    int DV_DOMESTIC -> DV_DOMESTIC
    int DV_FOREIGN -> DV_FOREIGN
    int IS -> IS
    int RADG4 -> RADG4
    int RADG3 -> RADG3
    java.util.Hashtable RightsDecodeMap -> RightsDecodeMap
    org.bouncycastle.asn1.eac.BidirectionalMap AuthorizationRole -> AuthorizationRole
    java.util.Hashtable ReverseMap -> ReverseMap
    java.lang.String GetRoleDescription(int) -> GetRoleDescription
    int GetFlag(java.lang.String) -> GetFlag
    void setPrivateData(org.bouncycastle.asn1.ASN1InputStream) -> setPrivateData
    int getAccessRights() -> getAccessRights
    void setAccessRights(byte) -> setAccessRights
    org.bouncycastle.asn1.ASN1ObjectIdentifier getOid() -> getOid
    void setOid(org.bouncycastle.asn1.ASN1ObjectIdentifier) -> setOid
    org.bouncycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
org.bouncycastle.asn1.eac.CertificateHolderReference -> org.bouncycastle.asn1.eac.CertificateHolderReference:
    java.lang.String ReferenceEncoding -> ReferenceEncoding
    java.lang.String countryCode -> countryCode
    java.lang.String holderMnemonic -> holderMnemonic
    java.lang.String sequenceNumber -> sequenceNumber
    java.lang.String getCountryCode() -> getCountryCode
    java.lang.String getHolderMnemonic() -> getHolderMnemonic
    java.lang.String getSequenceNumber() -> getSequenceNumber
    byte[] getEncoded() -> getEncoded
org.bouncycastle.asn1.eac.CertificationAuthorityReference -> org.bouncycastle.asn1.eac.CertificationAuthorityReference:
org.bouncycastle.asn1.eac.EACObjectIdentifiers -> org.bouncycastle.asn1.eac.EACObjectIdentifiers:
    org.bouncycastle.asn1.ASN1ObjectIdentifier bsi_de -> bsi_de
    org.bouncycastle.asn1.ASN1ObjectIdentifier id_PK -> id_PK
    org.bouncycastle.asn1.ASN1ObjectIdentifier id_PK_DH -> id_PK_DH
    org.bouncycastle.asn1.ASN1ObjectIdentifier id_PK_ECDH -> id_PK_ECDH
    org.bouncycastle.asn1.ASN1ObjectIdentifier id_CA -> id_CA
    org.bouncycastle.asn1.ASN1ObjectIdentifier id_CA_DH -> id_CA_DH
    org.bouncycastle.asn1.ASN1ObjectIdentifier id_CA_DH_3DES_CBC_CBC -> id_CA_DH_3DES_CBC_CBC
    org.bouncycastle.asn1.ASN1ObjectIdentifier id_CA_ECDH -> id_CA_ECDH
    org.bouncycastle.asn1.ASN1ObjectIdentifier id_CA_ECDH_3DES_CBC_CBC -> id_CA_ECDH_3DES_CBC_CBC
    org.bouncycastle.asn1.ASN1ObjectIdentifier id_TA -> id_TA
    org.bouncycastle.asn1.ASN1ObjectIdentifier id_TA_RSA -> id_TA_RSA
    org.bouncycastle.asn1.ASN1ObjectIdentifier id_TA_RSA_v1_5_SHA_1 -> id_TA_RSA_v1_5_SHA_1
    org.bouncycastle.asn1.ASN1ObjectIdentifier id_TA_RSA_v1_5_SHA_256 -> id_TA_RSA_v1_5_SHA_256
    org.bouncycastle.asn1.ASN1ObjectIdentifier id_TA_RSA_PSS_SHA_1 -> id_TA_RSA_PSS_SHA_1
    org.bouncycastle.asn1.ASN1ObjectIdentifier id_TA_RSA_PSS_SHA_256 -> id_TA_RSA_PSS_SHA_256
    org.bouncycastle.asn1.ASN1ObjectIdentifier id_TA_RSA_v1_5_SHA_512 -> id_TA_RSA_v1_5_SHA_512
    org.bouncycastle.asn1.ASN1ObjectIdentifier id_TA_RSA_PSS_SHA_512 -> id_TA_RSA_PSS_SHA_512
    org.bouncycastle.asn1.ASN1ObjectIdentifier id_TA_ECDSA -> id_TA_ECDSA
    org.bouncycastle.asn1.ASN1ObjectIdentifier id_TA_ECDSA_SHA_1 -> id_TA_ECDSA_SHA_1
    org.bouncycastle.asn1.ASN1ObjectIdentifier id_TA_ECDSA_SHA_224 -> id_TA_ECDSA_SHA_224
    org.bouncycastle.asn1.ASN1ObjectIdentifier id_TA_ECDSA_SHA_256 -> id_TA_ECDSA_SHA_256
    org.bouncycastle.asn1.ASN1ObjectIdentifier id_TA_ECDSA_SHA_384 -> id_TA_ECDSA_SHA_384
    org.bouncycastle.asn1.ASN1ObjectIdentifier id_TA_ECDSA_SHA_512 -> id_TA_ECDSA_SHA_512
    org.bouncycastle.asn1.ASN1ObjectIdentifier id_EAC_ePassport -> id_EAC_ePassport
org.bouncycastle.asn1.eac.EACTags -> org.bouncycastle.asn1.eac.EACTags:
    int OBJECT_IDENTIFIER -> OBJECT_IDENTIFIER
    int COUNTRY_CODE_NATIONAL_DATA -> COUNTRY_CODE_NATIONAL_DATA
    int ISSUER_IDENTIFICATION_NUMBER -> ISSUER_IDENTIFICATION_NUMBER
    int CARD_SERVICE_DATA -> CARD_SERVICE_DATA
    int INITIAL_ACCESS_DATA -> INITIAL_ACCESS_DATA
    int CARD_ISSUER_DATA -> CARD_ISSUER_DATA
    int PRE_ISSUING_DATA -> PRE_ISSUING_DATA
    int CARD_CAPABILITIES -> CARD_CAPABILITIES
    int STATUS_INFORMATION -> STATUS_INFORMATION
    int EXTENDED_HEADER_LIST -> EXTENDED_HEADER_LIST
    int APPLICATION_IDENTIFIER -> APPLICATION_IDENTIFIER
    int APPLICATION_LABEL -> APPLICATION_LABEL
    int FILE_REFERENCE -> FILE_REFERENCE
    int COMMAND_TO_PERFORM -> COMMAND_TO_PERFORM
    int DISCRETIONARY_DATA -> DISCRETIONARY_DATA
    int OFFSET_DATA_OBJECT -> OFFSET_DATA_OBJECT
    int TRACK1_APPLICATION -> TRACK1_APPLICATION
    int TRACK2_APPLICATION -> TRACK2_APPLICATION
    int TRACK3_APPLICATION -> TRACK3_APPLICATION
    int CARD_EXPIRATION_DATA -> CARD_EXPIRATION_DATA
    int PRIMARY_ACCOUNT_NUMBER -> PRIMARY_ACCOUNT_NUMBER
    int NAME -> NAME
    int TAG_LIST -> TAG_LIST
    int HEADER_LIST -> HEADER_LIST
    int LOGIN_DATA -> LOGIN_DATA
    int CARDHOLDER_NAME -> CARDHOLDER_NAME
    int TRACK1_CARD -> TRACK1_CARD
    int TRACK2_CARD -> TRACK2_CARD
    int TRACK3_CARD -> TRACK3_CARD
    int APPLICATION_EXPIRATION_DATE -> APPLICATION_EXPIRATION_DATE
    int APPLICATION_EFFECTIVE_DATE -> APPLICATION_EFFECTIVE_DATE
    int CARD_EFFECTIVE_DATE -> CARD_EFFECTIVE_DATE
    int INTERCHANGE_CONTROL -> INTERCHANGE_CONTROL
    int COUNTRY_CODE -> COUNTRY_CODE
    int INTERCHANGE_PROFILE -> INTERCHANGE_PROFILE
    int CURRENCY_CODE -> CURRENCY_CODE
    int DATE_OF_BIRTH -> DATE_OF_BIRTH
    int CARDHOLDER_NATIONALITY -> CARDHOLDER_NATIONALITY
    int LANGUAGE_PREFERENCES -> LANGUAGE_PREFERENCES
    int CARDHOLDER_BIOMETRIC_DATA -> CARDHOLDER_BIOMETRIC_DATA
    int PIN_USAGE_POLICY -> PIN_USAGE_POLICY
    int SERVICE_CODE -> SERVICE_CODE
    int TRANSACTION_COUNTER -> TRANSACTION_COUNTER
    int TRANSACTION_DATE -> TRANSACTION_DATE
    int CARD_SEQUENCE_NUMBER -> CARD_SEQUENCE_NUMBER
    int SEX -> SEX
    int CURRENCY_EXPONENT -> CURRENCY_EXPONENT
    int STATIC_INTERNAL_AUTHENTIFICATION_ONE_STEP -> STATIC_INTERNAL_AUTHENTIFICATION_ONE_STEP
    int SIGNATURE -> SIGNATURE
    int STATIC_INTERNAL_AUTHENTIFICATION_FIRST_DATA -> STATIC_INTERNAL_AUTHENTIFICATION_FIRST_DATA
    int STATIC_INTERNAL_AUTHENTIFICATION_SECOND_DATA -> STATIC_INTERNAL_AUTHENTIFICATION_SECOND_DATA
    int DYNAMIC_INTERNAL_AUTHENTIFICATION -> DYNAMIC_INTERNAL_AUTHENTIFICATION
    int DYNAMIC_EXTERNAL_AUTHENTIFICATION -> DYNAMIC_EXTERNAL_AUTHENTIFICATION
    int DYNAMIC_MUTUAL_AUTHENTIFICATION -> DYNAMIC_MUTUAL_AUTHENTIFICATION
    int CARDHOLDER_PORTRAIT_IMAGE -> CARDHOLDER_PORTRAIT_IMAGE
    int ELEMENT_LIST -> ELEMENT_LIST
    int ADDRESS -> ADDRESS
    int CARDHOLDER_HANDWRITTEN_SIGNATURE -> CARDHOLDER_HANDWRITTEN_SIGNATURE
    int APPLICATION_IMAGE -> APPLICATION_IMAGE
    int DISPLAY_IMAGE -> DISPLAY_IMAGE
    int TIMER -> TIMER
    int MESSAGE_REFERENCE -> MESSAGE_REFERENCE
    int CARDHOLDER_PRIVATE_KEY -> CARDHOLDER_PRIVATE_KEY
    int CARDHOLDER_PUBLIC_KEY -> CARDHOLDER_PUBLIC_KEY
    int CERTIFICATION_AUTHORITY_PUBLIC_KEY -> CERTIFICATION_AUTHORITY_PUBLIC_KEY
    int DEPRECATED -> DEPRECATED
    int CERTIFICATE_HOLDER_AUTHORIZATION -> CERTIFICATE_HOLDER_AUTHORIZATION
    int INTEGRATED_CIRCUIT_MANUFACTURER_ID -> INTEGRATED_CIRCUIT_MANUFACTURER_ID
    int CERTIFICATE_CONTENT -> CERTIFICATE_CONTENT
    int UNIFORM_RESOURCE_LOCATOR -> UNIFORM_RESOURCE_LOCATOR
    int ANSWER_TO_RESET -> ANSWER_TO_RESET
    int HISTORICAL_BYTES -> HISTORICAL_BYTES
    int DIGITAL_SIGNATURE -> DIGITAL_SIGNATURE
    int APPLICATION_TEMPLATE -> APPLICATION_TEMPLATE
    int FCP_TEMPLATE -> FCP_TEMPLATE
    int WRAPPER -> WRAPPER
    int FMD_TEMPLATE -> FMD_TEMPLATE
    int CARDHOLDER_RELATIVE_DATA -> CARDHOLDER_RELATIVE_DATA
    int CARD_DATA -> CARD_DATA
    int AUTHENTIFICATION_DATA -> AUTHENTIFICATION_DATA
    int SPECIAL_USER_REQUIREMENTS -> SPECIAL_USER_REQUIREMENTS
    int LOGIN_TEMPLATE -> LOGIN_TEMPLATE
    int QUALIFIED_NAME -> QUALIFIED_NAME
    int CARDHOLDER_IMAGE_TEMPLATE -> CARDHOLDER_IMAGE_TEMPLATE
    int APPLICATION_IMAGE_TEMPLATE -> APPLICATION_IMAGE_TEMPLATE
    int APPLICATION_RELATED_DATA -> APPLICATION_RELATED_DATA
    int FCI_TEMPLATE -> FCI_TEMPLATE
    int DISCRETIONARY_DATA_OBJECTS -> DISCRETIONARY_DATA_OBJECTS
    int COMPATIBLE_TAG_ALLOCATION_AUTHORITY -> COMPATIBLE_TAG_ALLOCATION_AUTHORITY
    int COEXISTANT_TAG_ALLOCATION_AUTHORITY -> COEXISTANT_TAG_ALLOCATION_AUTHORITY
    int SECURITY_SUPPORT_TEMPLATE -> SECURITY_SUPPORT_TEMPLATE
    int SECURITY_ENVIRONMENT_TEMPLATE -> SECURITY_ENVIRONMENT_TEMPLATE
    int DYNAMIC_AUTHENTIFICATION_TEMPLATE -> DYNAMIC_AUTHENTIFICATION_TEMPLATE
    int SECURE_MESSAGING_TEMPLATE -> SECURE_MESSAGING_TEMPLATE
    int NON_INTERINDUSTRY_DATA_OBJECT_NESTING_TEMPLATE -> NON_INTERINDUSTRY_DATA_OBJECT_NESTING_TEMPLATE
    int DISPLAY_CONTROL -> DISPLAY_CONTROL
    int CARDHOLDER_CERTIFICATE -> CARDHOLDER_CERTIFICATE
    int CV_CERTIFICATE -> CV_CERTIFICATE
    int CARDHOLER_REQUIREMENTS_INCLUDED_FEATURES -> CARDHOLER_REQUIREMENTS_INCLUDED_FEATURES
    int CARDHOLER_REQUIREMENTS_EXCLUDED_FEATURES -> CARDHOLER_REQUIREMENTS_EXCLUDED_FEATURES
    int BIOMETRIC_DATA_TEMPLATE -> BIOMETRIC_DATA_TEMPLATE
    int DIGITAL_SIGNATURE_BLOCK -> DIGITAL_SIGNATURE_BLOCK
    int CARDHOLDER_PRIVATE_KEY_TEMPLATE -> CARDHOLDER_PRIVATE_KEY_TEMPLATE
    int CARDHOLDER_PUBLIC_KEY_TEMPLATE -> CARDHOLDER_PUBLIC_KEY_TEMPLATE
    int CERTIFICATE_HOLDER_AUTHORIZATION_TEMPLATE -> CERTIFICATE_HOLDER_AUTHORIZATION_TEMPLATE
    int CERTIFICATE_CONTENT_TEMPLATE -> CERTIFICATE_CONTENT_TEMPLATE
    int CERTIFICATE_BODY -> CERTIFICATE_BODY
    int BIOMETRIC_INFORMATION_TEMPLATE -> BIOMETRIC_INFORMATION_TEMPLATE
    int BIOMETRIC_INFORMATION_GROUP_TEMPLATE -> BIOMETRIC_INFORMATION_GROUP_TEMPLATE
    int getTag(int) -> getTag
    int getTagNo(int) -> getTagNo
    int encodeTag(org.bouncycastle.asn1.DERApplicationSpecific) -> encodeTag
    int decodeTag(int) -> decodeTag
org.bouncycastle.asn1.eac.ECDSAPublicKey -> org.bouncycastle.asn1.eac.ECDSAPublicKey:
    org.bouncycastle.asn1.ASN1ObjectIdentifier usage -> usage
    java.math.BigInteger primeModulusP -> primeModulusP
    java.math.BigInteger firstCoefA -> firstCoefA
    java.math.BigInteger secondCoefB -> secondCoefB
    byte[] basePointG -> basePointG
    java.math.BigInteger orderOfBasePointR -> orderOfBasePointR
    byte[] publicPointY -> publicPointY
    java.math.BigInteger cofactorF -> cofactorF
    int options -> options
    int P -> P
    int A -> A
    int B -> B
    int G -> G
    int R -> R
    int Y -> Y
    int F -> F
    org.bouncycastle.asn1.ASN1ObjectIdentifier getUsage() -> getUsage
    byte[] getBasePointG() -> getBasePointG
    void setBasePointG(org.bouncycastle.asn1.ASN1OctetString) -> setBasePointG
    java.math.BigInteger getCofactorF() -> getCofactorF
    void setCofactorF(java.math.BigInteger) -> setCofactorF
    java.math.BigInteger getFirstCoefA() -> getFirstCoefA
    void setFirstCoefA(java.math.BigInteger) -> setFirstCoefA
    java.math.BigInteger getOrderOfBasePointR() -> getOrderOfBasePointR
    void setOrderOfBasePointR(java.math.BigInteger) -> setOrderOfBasePointR
    java.math.BigInteger getPrimeModulusP() -> getPrimeModulusP
    void setPrimeModulusP(java.math.BigInteger) -> setPrimeModulusP
    byte[] getPublicPointY() -> getPublicPointY
    void setPublicPointY(org.bouncycastle.asn1.ASN1OctetString) -> setPublicPointY
    java.math.BigInteger getSecondCoefB() -> getSecondCoefB
    void setSecondCoefB(java.math.BigInteger) -> setSecondCoefB
    boolean hasParameters() -> hasParameters
    org.bouncycastle.asn1.ASN1EncodableVector getASN1EncodableVector(org.bouncycastle.asn1.ASN1ObjectIdentifier,boolean) -> getASN1EncodableVector
    org.bouncycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
org.bouncycastle.asn1.eac.Flags -> org.bouncycastle.asn1.eac.Flags:
    int value -> value
    void set(int) -> set
    boolean isSet(int) -> isSet
    int getFlags() -> getFlags
    java.lang.String decode(java.util.Hashtable) -> decode
org.bouncycastle.asn1.eac.Flags$StringJoiner -> org.bouncycastle.asn1.eac.Flags$StringJoiner:
    java.lang.String mSeparator -> mSeparator
    boolean First -> First
    java.lang.StringBuffer b -> b
    org.bouncycastle.asn1.eac.Flags this$0 -> this$0
    void add(java.lang.String) -> add
    java.lang.String toString() -> toString
org.bouncycastle.asn1.eac.PackedDate -> org.bouncycastle.asn1.eac.PackedDate:
    byte[] time -> time
    byte[] convert(java.lang.String) -> convert
    java.util.Date getDate() -> getDate
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    java.lang.String toString() -> toString
    byte[] getEncoding() -> getEncoding
org.bouncycastle.asn1.eac.PublicKeyDataObject -> org.bouncycastle.asn1.eac.PublicKeyDataObject:
    org.bouncycastle.asn1.eac.PublicKeyDataObject getInstance(java.lang.Object) -> getInstance
    org.bouncycastle.asn1.ASN1ObjectIdentifier getUsage() -> getUsage
org.bouncycastle.asn1.eac.RSAPublicKey -> org.bouncycastle.asn1.eac.RSAPublicKey:
    org.bouncycastle.asn1.ASN1ObjectIdentifier usage -> usage
    java.math.BigInteger modulus -> modulus
    java.math.BigInteger exponent -> exponent
    int valid -> valid
    int modulusValid -> modulusValid
    int exponentValid -> exponentValid
    org.bouncycastle.asn1.ASN1ObjectIdentifier getUsage() -> getUsage
    java.math.BigInteger getModulus() -> getModulus
    java.math.BigInteger getPublicExponent() -> getPublicExponent
    void setModulus(org.bouncycastle.asn1.eac.UnsignedInteger) -> setModulus
    void setExponent(org.bouncycastle.asn1.eac.UnsignedInteger) -> setExponent
    org.bouncycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
org.bouncycastle.asn1.eac.UnsignedInteger -> org.bouncycastle.asn1.eac.UnsignedInteger:
    int tagNo -> tagNo
    java.math.BigInteger value -> value
    org.bouncycastle.asn1.eac.UnsignedInteger getInstance(java.lang.Object) -> getInstance
    byte[] convertValue() -> convertValue
    int getTagNo() -> getTagNo
    java.math.BigInteger getValue() -> getValue
    org.bouncycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
org.bouncycastle.asn1.esf.CommitmentTypeIdentifier -> org.bouncycastle.asn1.esf.CommitmentTypeIdentifier:
    org.bouncycastle.asn1.ASN1ObjectIdentifier proofOfOrigin -> proofOfOrigin
    org.bouncycastle.asn1.ASN1ObjectIdentifier proofOfReceipt -> proofOfReceipt
    org.bouncycastle.asn1.ASN1ObjectIdentifier proofOfDelivery -> proofOfDelivery
    org.bouncycastle.asn1.ASN1ObjectIdentifier proofOfSender -> proofOfSender
    org.bouncycastle.asn1.ASN1ObjectIdentifier proofOfApproval -> proofOfApproval
    org.bouncycastle.asn1.ASN1ObjectIdentifier proofOfCreation -> proofOfCreation
org.bouncycastle.asn1.esf.CommitmentTypeIndication -> org.bouncycastle.asn1.esf.CommitmentTypeIndication:
    org.bouncycastle.asn1.ASN1ObjectIdentifier commitmentTypeId -> commitmentTypeId
    org.bouncycastle.asn1.ASN1Sequence commitmentTypeQualifier -> commitmentTypeQualifier
    org.bouncycastle.asn1.esf.CommitmentTypeIndication getInstance(java.lang.Object) -> getInstance
    org.bouncycastle.asn1.ASN1ObjectIdentifier getCommitmentTypeId() -> getCommitmentTypeId
    org.bouncycastle.asn1.ASN1Sequence getCommitmentTypeQualifier() -> getCommitmentTypeQualifier
    org.bouncycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
org.bouncycastle.asn1.esf.CommitmentTypeQualifier -> org.bouncycastle.asn1.esf.CommitmentTypeQualifier:
    org.bouncycastle.asn1.ASN1ObjectIdentifier commitmentTypeIdentifier -> commitmentTypeIdentifier
    org.bouncycastle.asn1.ASN1Encodable qualifier -> qualifier
    org.bouncycastle.asn1.esf.CommitmentTypeQualifier getInstance(java.lang.Object) -> getInstance
    org.bouncycastle.asn1.ASN1ObjectIdentifier getCommitmentTypeIdentifier() -> getCommitmentTypeIdentifier
    org.bouncycastle.asn1.ASN1Encodable getQualifier() -> getQualifier
    org.bouncycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
org.bouncycastle.asn1.esf.CompleteRevocationRefs -> org.bouncycastle.asn1.esf.CompleteRevocationRefs:
    org.bouncycastle.asn1.ASN1Sequence crlOcspRefs -> crlOcspRefs
    org.bouncycastle.asn1.esf.CompleteRevocationRefs getInstance(java.lang.Object) -> getInstance
    org.bouncycastle.asn1.esf.CrlOcspRef[] getCrlOcspRefs() -> getCrlOcspRefs
    org.bouncycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
org.bouncycastle.asn1.esf.CrlIdentifier -> org.bouncycastle.asn1.esf.CrlIdentifier:
    org.bouncycastle.asn1.x500.X500Name crlIssuer -> crlIssuer
    org.bouncycastle.asn1.ASN1UTCTime crlIssuedTime -> crlIssuedTime
    org.bouncycastle.asn1.ASN1Integer crlNumber -> crlNumber
    org.bouncycastle.asn1.esf.CrlIdentifier getInstance(java.lang.Object) -> getInstance
    org.bouncycastle.asn1.x500.X500Name getCrlIssuer() -> getCrlIssuer
    org.bouncycastle.asn1.ASN1UTCTime getCrlIssuedTime() -> getCrlIssuedTime
    java.math.BigInteger getCrlNumber() -> getCrlNumber
    org.bouncycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
org.bouncycastle.asn1.esf.CrlListID -> org.bouncycastle.asn1.esf.CrlListID:
    org.bouncycastle.asn1.ASN1Sequence crls -> crls
    org.bouncycastle.asn1.esf.CrlListID getInstance(java.lang.Object) -> getInstance
    org.bouncycastle.asn1.esf.CrlValidatedID[] getCrls() -> getCrls
    org.bouncycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
org.bouncycastle.asn1.esf.CrlOcspRef -> org.bouncycastle.asn1.esf.CrlOcspRef:
    org.bouncycastle.asn1.esf.CrlListID crlids -> crlids
    org.bouncycastle.asn1.esf.OcspListID ocspids -> ocspids
    org.bouncycastle.asn1.esf.OtherRevRefs otherRev -> otherRev
    org.bouncycastle.asn1.esf.CrlOcspRef getInstance(java.lang.Object) -> getInstance
    org.bouncycastle.asn1.esf.CrlListID getCrlids() -> getCrlids
    org.bouncycastle.asn1.esf.OcspListID getOcspids() -> getOcspids
    org.bouncycastle.asn1.esf.OtherRevRefs getOtherRev() -> getOtherRev
    org.bouncycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
org.bouncycastle.asn1.esf.CrlValidatedID -> org.bouncycastle.asn1.esf.CrlValidatedID:
    org.bouncycastle.asn1.esf.OtherHash crlHash -> crlHash
    org.bouncycastle.asn1.esf.CrlIdentifier crlIdentifier -> crlIdentifier
    org.bouncycastle.asn1.esf.CrlValidatedID getInstance(java.lang.Object) -> getInstance
    org.bouncycastle.asn1.esf.OtherHash getCrlHash() -> getCrlHash
    org.bouncycastle.asn1.esf.CrlIdentifier getCrlIdentifier() -> getCrlIdentifier
    org.bouncycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
org.bouncycastle.asn1.esf.ESFAttributes -> org.bouncycastle.asn1.esf.ESFAttributes:
    org.bouncycastle.asn1.ASN1ObjectIdentifier sigPolicyId -> sigPolicyId
    org.bouncycastle.asn1.ASN1ObjectIdentifier commitmentType -> commitmentType
    org.bouncycastle.asn1.ASN1ObjectIdentifier signerLocation -> signerLocation
    org.bouncycastle.asn1.ASN1ObjectIdentifier signerAttr -> signerAttr
    org.bouncycastle.asn1.ASN1ObjectIdentifier otherSigCert -> otherSigCert
    org.bouncycastle.asn1.ASN1ObjectIdentifier contentTimestamp -> contentTimestamp
    org.bouncycastle.asn1.ASN1ObjectIdentifier certificateRefs -> certificateRefs
    org.bouncycastle.asn1.ASN1ObjectIdentifier revocationRefs -> revocationRefs
    org.bouncycastle.asn1.ASN1ObjectIdentifier certValues -> certValues
    org.bouncycastle.asn1.ASN1ObjectIdentifier revocationValues -> revocationValues
    org.bouncycastle.asn1.ASN1ObjectIdentifier escTimeStamp -> escTimeStamp
    org.bouncycastle.asn1.ASN1ObjectIdentifier certCRLTimestamp -> certCRLTimestamp
    org.bouncycastle.asn1.ASN1ObjectIdentifier archiveTimestamp -> archiveTimestamp
    org.bouncycastle.asn1.ASN1ObjectIdentifier archiveTimestampV2 -> archiveTimestampV2
org.bouncycastle.asn1.esf.OcspIdentifier -> org.bouncycastle.asn1.esf.OcspIdentifier:
    org.bouncycastle.asn1.ocsp.ResponderID ocspResponderID -> ocspResponderID
    org.bouncycastle.asn1.ASN1GeneralizedTime producedAt -> producedAt
    org.bouncycastle.asn1.esf.OcspIdentifier getInstance(java.lang.Object) -> getInstance
    org.bouncycastle.asn1.ocsp.ResponderID getOcspResponderID() -> getOcspResponderID
    org.bouncycastle.asn1.ASN1GeneralizedTime getProducedAt() -> getProducedAt
    org.bouncycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
org.bouncycastle.asn1.esf.OcspListID -> org.bouncycastle.asn1.esf.OcspListID:
    org.bouncycastle.asn1.ASN1Sequence ocspResponses -> ocspResponses
    org.bouncycastle.asn1.esf.OcspListID getInstance(java.lang.Object) -> getInstance
    org.bouncycastle.asn1.esf.OcspResponsesID[] getOcspResponses() -> getOcspResponses
    org.bouncycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
org.bouncycastle.asn1.esf.OcspResponsesID -> org.bouncycastle.asn1.esf.OcspResponsesID:
    org.bouncycastle.asn1.esf.OcspIdentifier ocspIdentifier -> ocspIdentifier
    org.bouncycastle.asn1.esf.OtherHash ocspRepHash -> ocspRepHash
    org.bouncycastle.asn1.esf.OcspResponsesID getInstance(java.lang.Object) -> getInstance
    org.bouncycastle.asn1.esf.OcspIdentifier getOcspIdentifier() -> getOcspIdentifier
    org.bouncycastle.asn1.esf.OtherHash getOcspRepHash() -> getOcspRepHash
    org.bouncycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
org.bouncycastle.asn1.esf.OtherHash -> org.bouncycastle.asn1.esf.OtherHash:
    org.bouncycastle.asn1.ASN1OctetString sha1Hash -> sha1Hash
    org.bouncycastle.asn1.esf.OtherHashAlgAndValue otherHash -> otherHash
    org.bouncycastle.asn1.esf.OtherHash getInstance(java.lang.Object) -> getInstance
    org.bouncycastle.asn1.x509.AlgorithmIdentifier getHashAlgorithm() -> getHashAlgorithm
    byte[] getHashValue() -> getHashValue
    org.bouncycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
org.bouncycastle.asn1.esf.OtherHashAlgAndValue -> org.bouncycastle.asn1.esf.OtherHashAlgAndValue:
    org.bouncycastle.asn1.x509.AlgorithmIdentifier hashAlgorithm -> hashAlgorithm
    org.bouncycastle.asn1.ASN1OctetString hashValue -> hashValue
    org.bouncycastle.asn1.esf.OtherHashAlgAndValue getInstance(java.lang.Object) -> getInstance
    org.bouncycastle.asn1.x509.AlgorithmIdentifier getHashAlgorithm() -> getHashAlgorithm
    org.bouncycastle.asn1.ASN1OctetString getHashValue() -> getHashValue
    org.bouncycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
org.bouncycastle.asn1.esf.OtherRevRefs -> org.bouncycastle.asn1.esf.OtherRevRefs:
    org.bouncycastle.asn1.ASN1ObjectIdentifier otherRevRefType -> otherRevRefType
    org.bouncycastle.asn1.ASN1Encodable otherRevRefs -> otherRevRefs
    org.bouncycastle.asn1.esf.OtherRevRefs getInstance(java.lang.Object) -> getInstance
    org.bouncycastle.asn1.ASN1ObjectIdentifier getOtherRevRefType() -> getOtherRevRefType
    org.bouncycastle.asn1.ASN1Encodable getOtherRevRefs() -> getOtherRevRefs
    org.bouncycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
org.bouncycastle.asn1.esf.OtherRevVals -> org.bouncycastle.asn1.esf.OtherRevVals:
    org.bouncycastle.asn1.ASN1ObjectIdentifier otherRevValType -> otherRevValType
    org.bouncycastle.asn1.ASN1Encodable otherRevVals -> otherRevVals
    org.bouncycastle.asn1.esf.OtherRevVals getInstance(java.lang.Object) -> getInstance
    org.bouncycastle.asn1.ASN1ObjectIdentifier getOtherRevValType() -> getOtherRevValType
    org.bouncycastle.asn1.ASN1Encodable getOtherRevVals() -> getOtherRevVals
    org.bouncycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
org.bouncycastle.asn1.esf.RevocationValues -> org.bouncycastle.asn1.esf.RevocationValues:
    org.bouncycastle.asn1.ASN1Sequence crlVals -> crlVals
    org.bouncycastle.asn1.ASN1Sequence ocspVals -> ocspVals
    org.bouncycastle.asn1.esf.OtherRevVals otherRevVals -> otherRevVals
    org.bouncycastle.asn1.esf.RevocationValues getInstance(java.lang.Object) -> getInstance
    org.bouncycastle.asn1.x509.CertificateList[] getCrlVals() -> getCrlVals
    org.bouncycastle.asn1.ocsp.BasicOCSPResponse[] getOcspVals() -> getOcspVals
    org.bouncycastle.asn1.esf.OtherRevVals getOtherRevVals() -> getOtherRevVals
    org.bouncycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
org.bouncycastle.asn1.esf.SPUserNotice -> org.bouncycastle.asn1.esf.SPUserNotice:
    org.bouncycastle.asn1.x509.NoticeReference noticeRef -> noticeRef
    org.bouncycastle.asn1.x509.DisplayText explicitText -> explicitText
    org.bouncycastle.asn1.esf.SPUserNotice getInstance(java.lang.Object) -> getInstance
    org.bouncycastle.asn1.x509.NoticeReference getNoticeRef() -> getNoticeRef
    org.bouncycastle.asn1.x509.DisplayText getExplicitText() -> getExplicitText
    org.bouncycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
org.bouncycastle.asn1.esf.SPuri -> org.bouncycastle.asn1.esf.SPuri:
    org.bouncycastle.asn1.DERIA5String uri -> uri
    org.bouncycastle.asn1.esf.SPuri getInstance(java.lang.Object) -> getInstance
    org.bouncycastle.asn1.DERIA5String getUri() -> getUri
    org.bouncycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
org.bouncycastle.asn1.esf.SigPolicyQualifierInfo -> org.bouncycastle.asn1.esf.SigPolicyQualifierInfo:
    org.bouncycastle.asn1.ASN1ObjectIdentifier sigPolicyQualifierId -> sigPolicyQualifierId
    org.bouncycastle.asn1.ASN1Encodable sigQualifier -> sigQualifier
    org.bouncycastle.asn1.esf.SigPolicyQualifierInfo getInstance(java.lang.Object) -> getInstance
    org.bouncycastle.asn1.ASN1ObjectIdentifier getSigPolicyQualifierId() -> getSigPolicyQualifierId
    org.bouncycastle.asn1.ASN1Encodable getSigQualifier() -> getSigQualifier
    org.bouncycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
org.bouncycastle.asn1.esf.SigPolicyQualifiers -> org.bouncycastle.asn1.esf.SigPolicyQualifiers:
    org.bouncycastle.asn1.ASN1Sequence qualifiers -> qualifiers
    org.bouncycastle.asn1.esf.SigPolicyQualifiers getInstance(java.lang.Object) -> getInstance
    int size() -> size
    org.bouncycastle.asn1.esf.SigPolicyQualifierInfo getInfoAt(int) -> getInfoAt
    org.bouncycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
org.bouncycastle.asn1.esf.SignaturePolicyId -> org.bouncycastle.asn1.esf.SignaturePolicyId:
    org.bouncycastle.asn1.ASN1ObjectIdentifier sigPolicyId -> sigPolicyId
    org.bouncycastle.asn1.esf.OtherHashAlgAndValue sigPolicyHash -> sigPolicyHash
    org.bouncycastle.asn1.esf.SigPolicyQualifiers sigPolicyQualifiers -> sigPolicyQualifiers
    org.bouncycastle.asn1.esf.SignaturePolicyId getInstance(java.lang.Object) -> getInstance
    org.bouncycastle.asn1.ASN1ObjectIdentifier getSigPolicyId() -> getSigPolicyId
    org.bouncycastle.asn1.esf.OtherHashAlgAndValue getSigPolicyHash() -> getSigPolicyHash
    org.bouncycastle.asn1.esf.SigPolicyQualifiers getSigPolicyQualifiers() -> getSigPolicyQualifiers
    org.bouncycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
org.bouncycastle.asn1.esf.SignaturePolicyIdentifier -> org.bouncycastle.asn1.esf.SignaturePolicyIdentifier:
    org.bouncycastle.asn1.esf.SignaturePolicyId signaturePolicyId -> signaturePolicyId
    boolean isSignaturePolicyImplied -> isSignaturePolicyImplied
    org.bouncycastle.asn1.esf.SignaturePolicyIdentifier getInstance(java.lang.Object) -> getInstance
    org.bouncycastle.asn1.esf.SignaturePolicyId getSignaturePolicyId() -> getSignaturePolicyId
    boolean isSignaturePolicyImplied() -> isSignaturePolicyImplied
    org.bouncycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
org.bouncycastle.asn1.esf.SignerAttribute -> org.bouncycastle.asn1.esf.SignerAttribute:
    java.lang.Object[] values -> values
    org.bouncycastle.asn1.esf.SignerAttribute getInstance(java.lang.Object) -> getInstance
    java.lang.Object[] getValues() -> getValues
    org.bouncycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
org.bouncycastle.asn1.esf.SignerLocation -> org.bouncycastle.asn1.esf.SignerLocation:
    org.bouncycastle.asn1.DERUTF8String countryName -> countryName
    org.bouncycastle.asn1.DERUTF8String localityName -> localityName
    org.bouncycastle.asn1.ASN1Sequence postalAddress -> postalAddress
    org.bouncycastle.asn1.esf.SignerLocation getInstance(java.lang.Object) -> getInstance
    org.bouncycastle.asn1.DERUTF8String getCountryName() -> getCountryName
    org.bouncycastle.asn1.DERUTF8String getLocalityName() -> getLocalityName
    org.bouncycastle.asn1.ASN1Sequence getPostalAddress() -> getPostalAddress
    org.bouncycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
org.bouncycastle.asn1.ess.ContentHints -> org.bouncycastle.asn1.ess.ContentHints:
    org.bouncycastle.asn1.DERUTF8String contentDescription -> contentDescription
    org.bouncycastle.asn1.ASN1ObjectIdentifier contentType -> contentType
    org.bouncycastle.asn1.ess.ContentHints getInstance(java.lang.Object) -> getInstance
    org.bouncycastle.asn1.ASN1ObjectIdentifier getContentType() -> getContentType
    org.bouncycastle.asn1.DERUTF8String getContentDescription() -> getContentDescription
    org.bouncycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
org.bouncycastle.asn1.ess.ContentIdentifier -> org.bouncycastle.asn1.ess.ContentIdentifier:
    org.bouncycastle.asn1.ASN1OctetString value -> value
    org.bouncycastle.asn1.ess.ContentIdentifier getInstance(java.lang.Object) -> getInstance
    org.bouncycastle.asn1.ASN1OctetString getValue() -> getValue
    org.bouncycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
org.bouncycastle.asn1.ess.ESSCertID -> org.bouncycastle.asn1.ess.ESSCertID:
    org.bouncycastle.asn1.ASN1OctetString certHash -> certHash
    org.bouncycastle.asn1.x509.IssuerSerial issuerSerial -> issuerSerial
    org.bouncycastle.asn1.ess.ESSCertID getInstance(java.lang.Object) -> getInstance
    byte[] getCertHash() -> getCertHash
    org.bouncycastle.asn1.x509.IssuerSerial getIssuerSerial() -> getIssuerSerial
    org.bouncycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
org.bouncycastle.asn1.ess.ESSCertIDv2 -> org.bouncycastle.asn1.ess.ESSCertIDv2:
    org.bouncycastle.asn1.x509.AlgorithmIdentifier hashAlgorithm -> hashAlgorithm
    byte[] certHash -> certHash
    org.bouncycastle.asn1.x509.IssuerSerial issuerSerial -> issuerSerial
    org.bouncycastle.asn1.x509.AlgorithmIdentifier DEFAULT_ALG_ID -> DEFAULT_ALG_ID
    org.bouncycastle.asn1.ess.ESSCertIDv2 getInstance(java.lang.Object) -> getInstance
    org.bouncycastle.asn1.x509.AlgorithmIdentifier getHashAlgorithm() -> getHashAlgorithm
    byte[] getCertHash() -> getCertHash
    org.bouncycastle.asn1.x509.IssuerSerial getIssuerSerial() -> getIssuerSerial
    org.bouncycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
org.bouncycastle.asn1.ess.OtherCertID -> org.bouncycastle.asn1.ess.OtherCertID:
    org.bouncycastle.asn1.ASN1Encodable otherCertHash -> otherCertHash
    org.bouncycastle.asn1.x509.IssuerSerial issuerSerial -> issuerSerial
    org.bouncycastle.asn1.ess.OtherCertID getInstance(java.lang.Object) -> getInstance
    org.bouncycastle.asn1.x509.AlgorithmIdentifier getAlgorithmHash() -> getAlgorithmHash
    byte[] getCertHash() -> getCertHash
    org.bouncycastle.asn1.x509.IssuerSerial getIssuerSerial() -> getIssuerSerial
    org.bouncycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
org.bouncycastle.asn1.ess.OtherSigningCertificate -> org.bouncycastle.asn1.ess.OtherSigningCertificate:
    org.bouncycastle.asn1.ASN1Sequence certs -> certs
    org.bouncycastle.asn1.ASN1Sequence policies -> policies
    org.bouncycastle.asn1.ess.OtherSigningCertificate getInstance(java.lang.Object) -> getInstance
    org.bouncycastle.asn1.ess.OtherCertID[] getCerts() -> getCerts
    org.bouncycastle.asn1.x509.PolicyInformation[] getPolicies() -> getPolicies
    org.bouncycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
org.bouncycastle.asn1.ess.SigningCertificate -> org.bouncycastle.asn1.ess.SigningCertificate:
    org.bouncycastle.asn1.ASN1Sequence certs -> certs
    org.bouncycastle.asn1.ASN1Sequence policies -> policies
    org.bouncycastle.asn1.ess.SigningCertificate getInstance(java.lang.Object) -> getInstance
    org.bouncycastle.asn1.ess.ESSCertID[] getCerts() -> getCerts
    org.bouncycastle.asn1.x509.PolicyInformation[] getPolicies() -> getPolicies
    org.bouncycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
org.bouncycastle.asn1.ess.SigningCertificateV2 -> org.bouncycastle.asn1.ess.SigningCertificateV2:
    org.bouncycastle.asn1.ASN1Sequence certs -> certs
    org.bouncycastle.asn1.ASN1Sequence policies -> policies
    org.bouncycastle.asn1.ess.SigningCertificateV2 getInstance(java.lang.Object) -> getInstance
    org.bouncycastle.asn1.ess.ESSCertIDv2[] getCerts() -> getCerts
    org.bouncycastle.asn1.x509.PolicyInformation[] getPolicies() -> getPolicies
    org.bouncycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
org.bouncycastle.asn1.gnu.GNUObjectIdentifiers -> org.bouncycastle.asn1.gnu.GNUObjectIdentifiers:
    org.bouncycastle.asn1.ASN1ObjectIdentifier GNU -> GNU
    org.bouncycastle.asn1.ASN1ObjectIdentifier GnuPG -> GnuPG
    org.bouncycastle.asn1.ASN1ObjectIdentifier notation -> notation
    org.bouncycastle.asn1.ASN1ObjectIdentifier pkaAddress -> pkaAddress
    org.bouncycastle.asn1.ASN1ObjectIdentifier GnuRadar -> GnuRadar
    org.bouncycastle.asn1.ASN1ObjectIdentifier digestAlgorithm -> digestAlgorithm
    org.bouncycastle.asn1.ASN1ObjectIdentifier Tiger_192 -> Tiger_192
    org.bouncycastle.asn1.ASN1ObjectIdentifier encryptionAlgorithm -> encryptionAlgorithm
    org.bouncycastle.asn1.ASN1ObjectIdentifier Serpent -> Serpent
    org.bouncycastle.asn1.ASN1ObjectIdentifier Serpent_128_ECB -> Serpent_128_ECB
    org.bouncycastle.asn1.ASN1ObjectIdentifier Serpent_128_CBC -> Serpent_128_CBC
    org.bouncycastle.asn1.ASN1ObjectIdentifier Serpent_128_OFB -> Serpent_128_OFB
    org.bouncycastle.asn1.ASN1ObjectIdentifier Serpent_128_CFB -> Serpent_128_CFB
    org.bouncycastle.asn1.ASN1ObjectIdentifier Serpent_192_ECB -> Serpent_192_ECB
    org.bouncycastle.asn1.ASN1ObjectIdentifier Serpent_192_CBC -> Serpent_192_CBC
    org.bouncycastle.asn1.ASN1ObjectIdentifier Serpent_192_OFB -> Serpent_192_OFB
    org.bouncycastle.asn1.ASN1ObjectIdentifier Serpent_192_CFB -> Serpent_192_CFB
    org.bouncycastle.asn1.ASN1ObjectIdentifier Serpent_256_ECB -> Serpent_256_ECB
    org.bouncycastle.asn1.ASN1ObjectIdentifier Serpent_256_CBC -> Serpent_256_CBC
    org.bouncycastle.asn1.ASN1ObjectIdentifier Serpent_256_OFB -> Serpent_256_OFB
    org.bouncycastle.asn1.ASN1ObjectIdentifier Serpent_256_CFB -> Serpent_256_CFB
    org.bouncycastle.asn1.ASN1ObjectIdentifier CRC -> CRC
    org.bouncycastle.asn1.ASN1ObjectIdentifier CRC32 -> CRC32
org.bouncycastle.asn1.iana.IANAObjectIdentifiers -> org.bouncycastle.asn1.iana.IANAObjectIdentifiers:
    org.bouncycastle.asn1.ASN1ObjectIdentifier internet -> internet
    org.bouncycastle.asn1.ASN1ObjectIdentifier directory -> directory
    org.bouncycastle.asn1.ASN1ObjectIdentifier mgmt -> mgmt
    org.bouncycastle.asn1.ASN1ObjectIdentifier experimental -> experimental
    org.bouncycastle.asn1.ASN1ObjectIdentifier _private -> _private
    org.bouncycastle.asn1.ASN1ObjectIdentifier security -> security
    org.bouncycastle.asn1.ASN1ObjectIdentifier SNMPv2 -> SNMPv2
    org.bouncycastle.asn1.ASN1ObjectIdentifier mail -> mail
    org.bouncycastle.asn1.ASN1ObjectIdentifier security_mechanisms -> security_mechanisms
    org.bouncycastle.asn1.ASN1ObjectIdentifier security_nametypes -> security_nametypes
    org.bouncycastle.asn1.ASN1ObjectIdentifier pkix -> pkix
    org.bouncycastle.asn1.ASN1ObjectIdentifier ipsec -> ipsec
    org.bouncycastle.asn1.ASN1ObjectIdentifier isakmpOakley -> isakmpOakley
    org.bouncycastle.asn1.ASN1ObjectIdentifier hmacMD5 -> hmacMD5
    org.bouncycastle.asn1.ASN1ObjectIdentifier hmacSHA1 -> hmacSHA1
    org.bouncycastle.asn1.ASN1ObjectIdentifier hmacTIGER -> hmacTIGER
    org.bouncycastle.asn1.ASN1ObjectIdentifier hmacRIPEMD160 -> hmacRIPEMD160
org.bouncycastle.asn1.icao.CscaMasterList -> org.bouncycastle.asn1.icao.CscaMasterList:
    org.bouncycastle.asn1.ASN1Integer version -> version
    org.bouncycastle.asn1.x509.Certificate[] certList -> certList
    org.bouncycastle.asn1.icao.CscaMasterList getInstance(java.lang.Object) -> getInstance
    int getVersion() -> getVersion
    org.bouncycastle.asn1.x509.Certificate[] getCertStructs() -> getCertStructs
    org.bouncycastle.asn1.x509.Certificate[] copyCertList(org.bouncycastle.asn1.x509.Certificate[]) -> copyCertList
    org.bouncycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
org.bouncycastle.asn1.icao.DataGroupHash -> org.bouncycastle.asn1.icao.DataGroupHash:
    org.bouncycastle.asn1.ASN1Integer dataGroupNumber -> dataGroupNumber
    org.bouncycastle.asn1.ASN1OctetString dataGroupHashValue -> dataGroupHashValue
    org.bouncycastle.asn1.icao.DataGroupHash getInstance(java.lang.Object) -> getInstance
    int getDataGroupNumber() -> getDataGroupNumber
    org.bouncycastle.asn1.ASN1OctetString getDataGroupHashValue() -> getDataGroupHashValue
    org.bouncycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
org.bouncycastle.asn1.icao.ICAOObjectIdentifiers -> org.bouncycastle.asn1.icao.ICAOObjectIdentifiers:
    org.bouncycastle.asn1.ASN1ObjectIdentifier id_icao -> id_icao
    org.bouncycastle.asn1.ASN1ObjectIdentifier id_icao_mrtd -> id_icao_mrtd
    org.bouncycastle.asn1.ASN1ObjectIdentifier id_icao_mrtd_security -> id_icao_mrtd_security
    org.bouncycastle.asn1.ASN1ObjectIdentifier id_icao_ldsSecurityObject -> id_icao_ldsSecurityObject
    org.bouncycastle.asn1.ASN1ObjectIdentifier id_icao_cscaMasterList -> id_icao_cscaMasterList
    org.bouncycastle.asn1.ASN1ObjectIdentifier id_icao_cscaMasterListSigningKey -> id_icao_cscaMasterListSigningKey
    org.bouncycastle.asn1.ASN1ObjectIdentifier id_icao_documentTypeList -> id_icao_documentTypeList
    org.bouncycastle.asn1.ASN1ObjectIdentifier id_icao_aaProtocolObject -> id_icao_aaProtocolObject
    org.bouncycastle.asn1.ASN1ObjectIdentifier id_icao_extensions -> id_icao_extensions
    org.bouncycastle.asn1.ASN1ObjectIdentifier id_icao_extensions_namechangekeyrollover -> id_icao_extensions_namechangekeyrollover
org.bouncycastle.asn1.icao.LDSSecurityObject -> org.bouncycastle.asn1.icao.LDSSecurityObject:
    int ub_DataGroups -> ub_DataGroups
    org.bouncycastle.asn1.ASN1Integer version -> version
    org.bouncycastle.asn1.x509.AlgorithmIdentifier digestAlgorithmIdentifier -> digestAlgorithmIdentifier
    org.bouncycastle.asn1.icao.DataGroupHash[] datagroupHash -> datagroupHash
    org.bouncycastle.asn1.icao.LDSVersionInfo versionInfo -> versionInfo
    org.bouncycastle.asn1.icao.LDSSecurityObject getInstance(java.lang.Object) -> getInstance
    void checkDatagroupHashSeqSize(int) -> checkDatagroupHashSeqSize
    int getVersion() -> getVersion
    org.bouncycastle.asn1.x509.AlgorithmIdentifier getDigestAlgorithmIdentifier() -> getDigestAlgorithmIdentifier
    org.bouncycastle.asn1.icao.DataGroupHash[] getDatagroupHash() -> getDatagroupHash
    org.bouncycastle.asn1.icao.LDSVersionInfo getVersionInfo() -> getVersionInfo
    org.bouncycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
org.bouncycastle.asn1.icao.LDSVersionInfo -> org.bouncycastle.asn1.icao.LDSVersionInfo:
    org.bouncycastle.asn1.DERPrintableString ldsVersion -> ldsVersion
    org.bouncycastle.asn1.DERPrintableString unicodeVersion -> unicodeVersion
    org.bouncycastle.asn1.icao.LDSVersionInfo getInstance(java.lang.Object) -> getInstance
    java.lang.String getLdsVersion() -> getLdsVersion
    java.lang.String getUnicodeVersion() -> getUnicodeVersion
    org.bouncycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
org.bouncycastle.asn1.isismtt.ISISMTTObjectIdentifiers -> org.bouncycastle.asn1.isismtt.ISISMTTObjectIdentifiers:
    org.bouncycastle.asn1.ASN1ObjectIdentifier id_isismtt -> id_isismtt
    org.bouncycastle.asn1.ASN1ObjectIdentifier id_isismtt_cp -> id_isismtt_cp
    org.bouncycastle.asn1.ASN1ObjectIdentifier id_isismtt_cp_accredited -> id_isismtt_cp_accredited
    org.bouncycastle.asn1.ASN1ObjectIdentifier id_isismtt_at -> id_isismtt_at
    org.bouncycastle.asn1.ASN1ObjectIdentifier id_isismtt_at_dateOfCertGen -> id_isismtt_at_dateOfCertGen
    org.bouncycastle.asn1.ASN1ObjectIdentifier id_isismtt_at_procuration -> id_isismtt_at_procuration
    org.bouncycastle.asn1.ASN1ObjectIdentifier id_isismtt_at_admission -> id_isismtt_at_admission
    org.bouncycastle.asn1.ASN1ObjectIdentifier id_isismtt_at_monetaryLimit -> id_isismtt_at_monetaryLimit
    org.bouncycastle.asn1.ASN1ObjectIdentifier id_isismtt_at_declarationOfMajority -> id_isismtt_at_declarationOfMajority
    org.bouncycastle.asn1.ASN1ObjectIdentifier id_isismtt_at_iCCSN -> id_isismtt_at_iCCSN
    org.bouncycastle.asn1.ASN1ObjectIdentifier id_isismtt_at_PKReference -> id_isismtt_at_PKReference
    org.bouncycastle.asn1.ASN1ObjectIdentifier id_isismtt_at_restriction -> id_isismtt_at_restriction
    org.bouncycastle.asn1.ASN1ObjectIdentifier id_isismtt_at_retrieveIfAllowed -> id_isismtt_at_retrieveIfAllowed
    org.bouncycastle.asn1.ASN1ObjectIdentifier id_isismtt_at_requestedCertificate -> id_isismtt_at_requestedCertificate
    org.bouncycastle.asn1.ASN1ObjectIdentifier id_isismtt_at_namingAuthorities -> id_isismtt_at_namingAuthorities
    org.bouncycastle.asn1.ASN1ObjectIdentifier id_isismtt_at_certInDirSince -> id_isismtt_at_certInDirSince
    org.bouncycastle.asn1.ASN1ObjectIdentifier id_isismtt_at_certHash -> id_isismtt_at_certHash
    org.bouncycastle.asn1.ASN1ObjectIdentifier id_isismtt_at_nameAtBirth -> id_isismtt_at_nameAtBirth
    org.bouncycastle.asn1.ASN1ObjectIdentifier id_isismtt_at_additionalInformation -> id_isismtt_at_additionalInformation
    org.bouncycastle.asn1.ASN1ObjectIdentifier id_isismtt_at_liabilityLimitationFlag -> id_isismtt_at_liabilityLimitationFlag
org.bouncycastle.asn1.isismtt.ocsp.CertHash -> org.bouncycastle.asn1.isismtt.ocsp.CertHash:
    org.bouncycastle.asn1.x509.AlgorithmIdentifier hashAlgorithm -> hashAlgorithm
    byte[] certificateHash -> certificateHash
    org.bouncycastle.asn1.isismtt.ocsp.CertHash getInstance(java.lang.Object) -> getInstance
    org.bouncycastle.asn1.x509.AlgorithmIdentifier getHashAlgorithm() -> getHashAlgorithm
    byte[] getCertificateHash() -> getCertificateHash
    org.bouncycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
org.bouncycastle.asn1.isismtt.ocsp.RequestedCertificate -> org.bouncycastle.asn1.isismtt.ocsp.RequestedCertificate:
    int certificate -> certificate
    int publicKeyCertificate -> publicKeyCertificate
    int attributeCertificate -> attributeCertificate
    org.bouncycastle.asn1.x509.Certificate cert -> cert
    byte[] publicKeyCert -> publicKeyCert
    byte[] attributeCert -> attributeCert
    org.bouncycastle.asn1.isismtt.ocsp.RequestedCertificate getInstance(java.lang.Object) -> getInstance
    org.bouncycastle.asn1.isismtt.ocsp.RequestedCertificate getInstance(org.bouncycastle.asn1.ASN1TaggedObject,boolean) -> getInstance
    int getType() -> getType
    byte[] getCertificateBytes() -> getCertificateBytes
    org.bouncycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
org.bouncycastle.asn1.isismtt.x509.AdditionalInformationSyntax -> org.bouncycastle.asn1.isismtt.x509.AdditionalInformationSyntax:
    org.bouncycastle.asn1.x500.DirectoryString information -> information
    org.bouncycastle.asn1.isismtt.x509.AdditionalInformationSyntax getInstance(java.lang.Object) -> getInstance
    org.bouncycastle.asn1.x500.DirectoryString getInformation() -> getInformation
    org.bouncycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
org.bouncycastle.asn1.isismtt.x509.AdmissionSyntax -> org.bouncycastle.asn1.isismtt.x509.AdmissionSyntax:
    org.bouncycastle.asn1.x509.GeneralName admissionAuthority -> admissionAuthority
    org.bouncycastle.asn1.ASN1Sequence contentsOfAdmissions -> contentsOfAdmissions
    org.bouncycastle.asn1.isismtt.x509.AdmissionSyntax getInstance(java.lang.Object) -> getInstance
    org.bouncycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
    org.bouncycastle.asn1.x509.GeneralName getAdmissionAuthority() -> getAdmissionAuthority
    org.bouncycastle.asn1.isismtt.x509.Admissions[] getContentsOfAdmissions() -> getContentsOfAdmissions
org.bouncycastle.asn1.isismtt.x509.Admissions -> org.bouncycastle.asn1.isismtt.x509.Admissions:
    org.bouncycastle.asn1.x509.GeneralName admissionAuthority -> admissionAuthority
    org.bouncycastle.asn1.isismtt.x509.NamingAuthority namingAuthority -> namingAuthority
    org.bouncycastle.asn1.ASN1Sequence professionInfos -> professionInfos
    org.bouncycastle.asn1.isismtt.x509.Admissions getInstance(java.lang.Object) -> getInstance
    org.bouncycastle.asn1.x509.GeneralName getAdmissionAuthority() -> getAdmissionAuthority
    org.bouncycastle.asn1.isismtt.x509.NamingAuthority getNamingAuthority() -> getNamingAuthority
    org.bouncycastle.asn1.isismtt.x509.ProfessionInfo[] getProfessionInfos() -> getProfessionInfos
    org.bouncycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
org.bouncycastle.asn1.isismtt.x509.DeclarationOfMajority -> org.bouncycastle.asn1.isismtt.x509.DeclarationOfMajority:
    int notYoungerThan -> notYoungerThan
    int fullAgeAtCountry -> fullAgeAtCountry
    int dateOfBirth -> dateOfBirth
    org.bouncycastle.asn1.ASN1TaggedObject declaration -> declaration
    org.bouncycastle.asn1.isismtt.x509.DeclarationOfMajority getInstance(java.lang.Object) -> getInstance
    org.bouncycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
    int getType() -> getType
    int notYoungerThan() -> notYoungerThan
    org.bouncycastle.asn1.ASN1Sequence fullAgeAtCountry() -> fullAgeAtCountry
    org.bouncycastle.asn1.ASN1GeneralizedTime getDateOfBirth() -> getDateOfBirth
org.bouncycastle.asn1.isismtt.x509.MonetaryLimit -> org.bouncycastle.asn1.isismtt.x509.MonetaryLimit:
    org.bouncycastle.asn1.DERPrintableString currency -> currency
    org.bouncycastle.asn1.ASN1Integer amount -> amount
    org.bouncycastle.asn1.ASN1Integer exponent -> exponent
    org.bouncycastle.asn1.isismtt.x509.MonetaryLimit getInstance(java.lang.Object) -> getInstance
    java.lang.String getCurrency() -> getCurrency
    java.math.BigInteger getAmount() -> getAmount
    java.math.BigInteger getExponent() -> getExponent
    org.bouncycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
org.bouncycastle.asn1.isismtt.x509.NamingAuthority -> org.bouncycastle.asn1.isismtt.x509.NamingAuthority:
    org.bouncycastle.asn1.ASN1ObjectIdentifier id_isismtt_at_namingAuthorities_RechtWirtschaftSteuern -> id_isismtt_at_namingAuthorities_RechtWirtschaftSteuern
    org.bouncycastle.asn1.ASN1ObjectIdentifier namingAuthorityId -> namingAuthorityId
    java.lang.String namingAuthorityUrl -> namingAuthorityUrl
    org.bouncycastle.asn1.x500.DirectoryString namingAuthorityText -> namingAuthorityText
    org.bouncycastle.asn1.isismtt.x509.NamingAuthority getInstance(java.lang.Object) -> getInstance
    org.bouncycastle.asn1.isismtt.x509.NamingAuthority getInstance(org.bouncycastle.asn1.ASN1TaggedObject,boolean) -> getInstance
    org.bouncycastle.asn1.ASN1ObjectIdentifier getNamingAuthorityId() -> getNamingAuthorityId
    org.bouncycastle.asn1.x500.DirectoryString getNamingAuthorityText() -> getNamingAuthorityText
    java.lang.String getNamingAuthorityUrl() -> getNamingAuthorityUrl
    org.bouncycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
org.bouncycastle.asn1.isismtt.x509.ProcurationSyntax -> org.bouncycastle.asn1.isismtt.x509.ProcurationSyntax:
    java.lang.String country -> country
    org.bouncycastle.asn1.x500.DirectoryString typeOfSubstitution -> typeOfSubstitution
    org.bouncycastle.asn1.x509.GeneralName thirdPerson -> thirdPerson
    org.bouncycastle.asn1.x509.IssuerSerial certRef -> certRef
    org.bouncycastle.asn1.isismtt.x509.ProcurationSyntax getInstance(java.lang.Object) -> getInstance
    java.lang.String getCountry() -> getCountry
    org.bouncycastle.asn1.x500.DirectoryString getTypeOfSubstitution() -> getTypeOfSubstitution
    org.bouncycastle.asn1.x509.GeneralName getThirdPerson() -> getThirdPerson
    org.bouncycastle.asn1.x509.IssuerSerial getCertRef() -> getCertRef
    org.bouncycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
org.bouncycastle.asn1.isismtt.x509.ProfessionInfo -> org.bouncycastle.asn1.isismtt.x509.ProfessionInfo:
    org.bouncycastle.asn1.ASN1ObjectIdentifier Rechtsanwltin -> Rechtsanwltin
    org.bouncycastle.asn1.ASN1ObjectIdentifier Rechtsanwalt -> Rechtsanwalt
    org.bouncycastle.asn1.ASN1ObjectIdentifier Rechtsbeistand -> Rechtsbeistand
    org.bouncycastle.asn1.ASN1ObjectIdentifier Steuerberaterin -> Steuerberaterin
    org.bouncycastle.asn1.ASN1ObjectIdentifier Steuerberater -> Steuerberater
    org.bouncycastle.asn1.ASN1ObjectIdentifier Steuerbevollmchtigte -> Steuerbevollmchtigte
    org.bouncycastle.asn1.ASN1ObjectIdentifier Steuerbevollmchtigter -> Steuerbevollmchtigter
    org.bouncycastle.asn1.ASN1ObjectIdentifier Notarin -> Notarin
    org.bouncycastle.asn1.ASN1ObjectIdentifier Notar -> Notar
    org.bouncycastle.asn1.ASN1ObjectIdentifier Notarvertreterin -> Notarvertreterin
    org.bouncycastle.asn1.ASN1ObjectIdentifier Notarvertreter -> Notarvertreter
    org.bouncycastle.asn1.ASN1ObjectIdentifier Notariatsverwalterin -> Notariatsverwalterin
    org.bouncycastle.asn1.ASN1ObjectIdentifier Notariatsverwalter -> Notariatsverwalter
    org.bouncycastle.asn1.ASN1ObjectIdentifier Wirtschaftsprferin -> Wirtschaftsprferin
    org.bouncycastle.asn1.ASN1ObjectIdentifier Wirtschaftsprfer -> Wirtschaftsprfer
    org.bouncycastle.asn1.ASN1ObjectIdentifier VereidigteBuchprferin -> VereidigteBuchprferin
    org.bouncycastle.asn1.ASN1ObjectIdentifier VereidigterBuchprfer -> VereidigterBuchprfer
    org.bouncycastle.asn1.ASN1ObjectIdentifier Patentanwltin -> Patentanwltin
    org.bouncycastle.asn1.ASN1ObjectIdentifier Patentanwalt -> Patentanwalt
    org.bouncycastle.asn1.isismtt.x509.NamingAuthority namingAuthority -> namingAuthority
    org.bouncycastle.asn1.ASN1Sequence professionItems -> professionItems
    org.bouncycastle.asn1.ASN1Sequence professionOIDs -> professionOIDs
    java.lang.String registrationNumber -> registrationNumber
    org.bouncycastle.asn1.ASN1OctetString addProfessionInfo -> addProfessionInfo
    org.bouncycastle.asn1.isismtt.x509.ProfessionInfo getInstance(java.lang.Object) -> getInstance
    org.bouncycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
    org.bouncycastle.asn1.ASN1OctetString getAddProfessionInfo() -> getAddProfessionInfo
    org.bouncycastle.asn1.isismtt.x509.NamingAuthority getNamingAuthority() -> getNamingAuthority
    org.bouncycastle.asn1.x500.DirectoryString[] getProfessionItems() -> getProfessionItems
    org.bouncycastle.asn1.ASN1ObjectIdentifier[] getProfessionOIDs() -> getProfessionOIDs
    java.lang.String getRegistrationNumber() -> getRegistrationNumber
org.bouncycastle.asn1.isismtt.x509.Restriction -> org.bouncycastle.asn1.isismtt.x509.Restriction:
    org.bouncycastle.asn1.x500.DirectoryString restriction -> restriction
    org.bouncycastle.asn1.isismtt.x509.Restriction getInstance(java.lang.Object) -> getInstance
    org.bouncycastle.asn1.x500.DirectoryString getRestriction() -> getRestriction
    org.bouncycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
org.bouncycastle.asn1.kisa.KISAObjectIdentifiers -> org.bouncycastle.asn1.kisa.KISAObjectIdentifiers:
    org.bouncycastle.asn1.ASN1ObjectIdentifier id_seedCBC -> id_seedCBC
    org.bouncycastle.asn1.ASN1ObjectIdentifier id_seedMAC -> id_seedMAC
    org.bouncycastle.asn1.ASN1ObjectIdentifier pbeWithSHA1AndSEED_CBC -> pbeWithSHA1AndSEED_CBC
    org.bouncycastle.asn1.ASN1ObjectIdentifier id_npki_app_cmsSeed_wrap -> id_npki_app_cmsSeed_wrap
    org.bouncycastle.asn1.ASN1ObjectIdentifier id_mod_cms_seed -> id_mod_cms_seed
org.bouncycastle.asn1.microsoft.MicrosoftObjectIdentifiers -> org.bouncycastle.asn1.microsoft.MicrosoftObjectIdentifiers:
    org.bouncycastle.asn1.ASN1ObjectIdentifier microsoft -> microsoft
    org.bouncycastle.asn1.ASN1ObjectIdentifier microsoftCertTemplateV1 -> microsoftCertTemplateV1
    org.bouncycastle.asn1.ASN1ObjectIdentifier microsoftCaVersion -> microsoftCaVersion
    org.bouncycastle.asn1.ASN1ObjectIdentifier microsoftPrevCaCertHash -> microsoftPrevCaCertHash
    org.bouncycastle.asn1.ASN1ObjectIdentifier microsoftCertTemplateV2 -> microsoftCertTemplateV2
    org.bouncycastle.asn1.ASN1ObjectIdentifier microsoftAppPolicies -> microsoftAppPolicies
org.bouncycastle.asn1.misc.CAST5CBCParameters -> org.bouncycastle.asn1.misc.CAST5CBCParameters:
    org.bouncycastle.asn1.ASN1Integer keyLength -> keyLength
    org.bouncycastle.asn1.ASN1OctetString iv -> iv
    org.bouncycastle.asn1.misc.CAST5CBCParameters getInstance(java.lang.Object) -> getInstance
    byte[] getIV() -> getIV
    int getKeyLength() -> getKeyLength
    org.bouncycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
org.bouncycastle.asn1.misc.IDEACBCPar -> org.bouncycastle.asn1.misc.IDEACBCPar:
    org.bouncycastle.asn1.ASN1OctetString iv -> iv
    org.bouncycastle.asn1.misc.IDEACBCPar getInstance(java.lang.Object) -> getInstance
    byte[] getIV() -> getIV
    org.bouncycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
org.bouncycastle.asn1.misc.MiscObjectIdentifiers -> org.bouncycastle.asn1.misc.MiscObjectIdentifiers:
    org.bouncycastle.asn1.ASN1ObjectIdentifier netscape -> netscape
    org.bouncycastle.asn1.ASN1ObjectIdentifier netscapeCertType -> netscapeCertType
    org.bouncycastle.asn1.ASN1ObjectIdentifier netscapeBaseURL -> netscapeBaseURL
    org.bouncycastle.asn1.ASN1ObjectIdentifier netscapeRevocationURL -> netscapeRevocationURL
    org.bouncycastle.asn1.ASN1ObjectIdentifier netscapeCARevocationURL -> netscapeCARevocationURL
    org.bouncycastle.asn1.ASN1ObjectIdentifier netscapeRenewalURL -> netscapeRenewalURL
    org.bouncycastle.asn1.ASN1ObjectIdentifier netscapeCApolicyURL -> netscapeCApolicyURL
    org.bouncycastle.asn1.ASN1ObjectIdentifier netscapeSSLServerName -> netscapeSSLServerName
    org.bouncycastle.asn1.ASN1ObjectIdentifier netscapeCertComment -> netscapeCertComment
    org.bouncycastle.asn1.ASN1ObjectIdentifier verisign -> verisign
    org.bouncycastle.asn1.ASN1ObjectIdentifier verisignCzagExtension -> verisignCzagExtension
    org.bouncycastle.asn1.ASN1ObjectIdentifier verisignDnbDunsNumber -> verisignDnbDunsNumber
    org.bouncycastle.asn1.ASN1ObjectIdentifier novell -> novell
    org.bouncycastle.asn1.ASN1ObjectIdentifier novellSecurityAttribs -> novellSecurityAttribs
    org.bouncycastle.asn1.ASN1ObjectIdentifier entrust -> entrust
    org.bouncycastle.asn1.ASN1ObjectIdentifier entrustVersionExtension -> entrustVersionExtension
org.bouncycastle.asn1.misc.NetscapeCertType -> org.bouncycastle.asn1.misc.NetscapeCertType:
    int sslClient -> sslClient
    int sslServer -> sslServer
    int smime -> smime
    int objectSigning -> objectSigning
    int reserved -> reserved
    int sslCA -> sslCA
    int smimeCA -> smimeCA
    int objectSigningCA -> objectSigningCA
    java.lang.String toString() -> toString
org.bouncycastle.asn1.misc.NetscapeRevocationURL -> org.bouncycastle.asn1.misc.NetscapeRevocationURL:
    java.lang.String toString() -> toString
org.bouncycastle.asn1.misc.VerisignCzagExtension -> org.bouncycastle.asn1.misc.VerisignCzagExtension:
    java.lang.String toString() -> toString
org.bouncycastle.asn1.mozilla.PublicKeyAndChallenge -> org.bouncycastle.asn1.mozilla.PublicKeyAndChallenge:
    org.bouncycastle.asn1.ASN1Sequence pkacSeq -> pkacSeq
    org.bouncycastle.asn1.x509.SubjectPublicKeyInfo spki -> spki
    org.bouncycastle.asn1.DERIA5String challenge -> challenge
    org.bouncycastle.asn1.mozilla.PublicKeyAndChallenge getInstance(java.lang.Object) -> getInstance
    org.bouncycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
    org.bouncycastle.asn1.x509.SubjectPublicKeyInfo getSubjectPublicKeyInfo() -> getSubjectPublicKeyInfo
    org.bouncycastle.asn1.DERIA5String getChallenge() -> getChallenge
org.bouncycastle.asn1.nist.NISTNamedCurves -> org.bouncycastle.asn1.nist.NISTNamedCurves:
    java.util.Hashtable objIds -> objIds
    java.util.Hashtable names -> names
    void defineCurve(java.lang.String,org.bouncycastle.asn1.ASN1ObjectIdentifier) -> defineCurve
    org.bouncycastle.asn1.x9.X9ECParameters getByName(java.lang.String) -> getByName
    org.bouncycastle.asn1.x9.X9ECParameters getByOID(org.bouncycastle.asn1.ASN1ObjectIdentifier) -> getByOID
    org.bouncycastle.asn1.ASN1ObjectIdentifier getOID(java.lang.String) -> getOID
    java.lang.String getName(org.bouncycastle.asn1.ASN1ObjectIdentifier) -> getName
    java.util.Enumeration getNames() -> getNames
org.bouncycastle.asn1.nist.NISTObjectIdentifiers -> org.bouncycastle.asn1.nist.NISTObjectIdentifiers:
    org.bouncycastle.asn1.ASN1ObjectIdentifier nistAlgorithm -> nistAlgorithm
    org.bouncycastle.asn1.ASN1ObjectIdentifier hashAlgs -> hashAlgs
    org.bouncycastle.asn1.ASN1ObjectIdentifier id_sha256 -> id_sha256
    org.bouncycastle.asn1.ASN1ObjectIdentifier id_sha384 -> id_sha384
    org.bouncycastle.asn1.ASN1ObjectIdentifier id_sha512 -> id_sha512
    org.bouncycastle.asn1.ASN1ObjectIdentifier id_sha224 -> id_sha224
    org.bouncycastle.asn1.ASN1ObjectIdentifier id_sha512_224 -> id_sha512_224
    org.bouncycastle.asn1.ASN1ObjectIdentifier id_sha512_256 -> id_sha512_256
    org.bouncycastle.asn1.ASN1ObjectIdentifier aes -> aes
    org.bouncycastle.asn1.ASN1ObjectIdentifier id_aes128_ECB -> id_aes128_ECB
    org.bouncycastle.asn1.ASN1ObjectIdentifier id_aes128_CBC -> id_aes128_CBC
    org.bouncycastle.asn1.ASN1ObjectIdentifier id_aes128_OFB -> id_aes128_OFB
    org.bouncycastle.asn1.ASN1ObjectIdentifier id_aes128_CFB -> id_aes128_CFB
    org.bouncycastle.asn1.ASN1ObjectIdentifier id_aes128_wrap -> id_aes128_wrap
    org.bouncycastle.asn1.ASN1ObjectIdentifier id_aes128_GCM -> id_aes128_GCM
    org.bouncycastle.asn1.ASN1ObjectIdentifier id_aes128_CCM -> id_aes128_CCM
    org.bouncycastle.asn1.ASN1ObjectIdentifier id_aes192_ECB -> id_aes192_ECB
    org.bouncycastle.asn1.ASN1ObjectIdentifier id_aes192_CBC -> id_aes192_CBC
    org.bouncycastle.asn1.ASN1ObjectIdentifier id_aes192_OFB -> id_aes192_OFB
    org.bouncycastle.asn1.ASN1ObjectIdentifier id_aes192_CFB -> id_aes192_CFB
    org.bouncycastle.asn1.ASN1ObjectIdentifier id_aes192_wrap -> id_aes192_wrap
    org.bouncycastle.asn1.ASN1ObjectIdentifier id_aes192_GCM -> id_aes192_GCM
    org.bouncycastle.asn1.ASN1ObjectIdentifier id_aes192_CCM -> id_aes192_CCM
    org.bouncycastle.asn1.ASN1ObjectIdentifier id_aes256_ECB -> id_aes256_ECB
    org.bouncycastle.asn1.ASN1ObjectIdentifier id_aes256_CBC -> id_aes256_CBC
    org.bouncycastle.asn1.ASN1ObjectIdentifier id_aes256_OFB -> id_aes256_OFB
    org.bouncycastle.asn1.ASN1ObjectIdentifier id_aes256_CFB -> id_aes256_CFB
    org.bouncycastle.asn1.ASN1ObjectIdentifier id_aes256_wrap -> id_aes256_wrap
    org.bouncycastle.asn1.ASN1ObjectIdentifier id_aes256_GCM -> id_aes256_GCM
    org.bouncycastle.asn1.ASN1ObjectIdentifier id_aes256_CCM -> id_aes256_CCM
    org.bouncycastle.asn1.ASN1ObjectIdentifier id_dsa_with_sha2 -> id_dsa_with_sha2
    org.bouncycastle.asn1.ASN1ObjectIdentifier dsa_with_sha224 -> dsa_with_sha224
    org.bouncycastle.asn1.ASN1ObjectIdentifier dsa_with_sha256 -> dsa_with_sha256
    org.bouncycastle.asn1.ASN1ObjectIdentifier dsa_with_sha384 -> dsa_with_sha384
    org.bouncycastle.asn1.ASN1ObjectIdentifier dsa_with_sha512 -> dsa_with_sha512
org.bouncycastle.asn1.ntt.NTTObjectIdentifiers -> org.bouncycastle.asn1.ntt.NTTObjectIdentifiers:
    org.bouncycastle.asn1.ASN1ObjectIdentifier id_camellia128_cbc -> id_camellia128_cbc
    org.bouncycastle.asn1.ASN1ObjectIdentifier id_camellia192_cbc -> id_camellia192_cbc
    org.bouncycastle.asn1.ASN1ObjectIdentifier id_camellia256_cbc -> id_camellia256_cbc
    org.bouncycastle.asn1.ASN1ObjectIdentifier id_camellia128_wrap -> id_camellia128_wrap
    org.bouncycastle.asn1.ASN1ObjectIdentifier id_camellia192_wrap -> id_camellia192_wrap
    org.bouncycastle.asn1.ASN1ObjectIdentifier id_camellia256_wrap -> id_camellia256_wrap
org.bouncycastle.asn1.ocsp.BasicOCSPResponse -> org.bouncycastle.asn1.ocsp.BasicOCSPResponse:
    org.bouncycastle.asn1.ocsp.ResponseData tbsResponseData -> tbsResponseData
    org.bouncycastle.asn1.x509.AlgorithmIdentifier signatureAlgorithm -> signatureAlgorithm
    org.bouncycastle.asn1.DERBitString signature -> signature
    org.bouncycastle.asn1.ASN1Sequence certs -> certs
    org.bouncycastle.asn1.ocsp.BasicOCSPResponse getInstance(org.bouncycastle.asn1.ASN1TaggedObject,boolean) -> getInstance
    org.bouncycastle.asn1.ocsp.BasicOCSPResponse getInstance(java.lang.Object) -> getInstance
    org.bouncycastle.asn1.ocsp.ResponseData getTbsResponseData() -> getTbsResponseData
    org.bouncycastle.asn1.x509.AlgorithmIdentifier getSignatureAlgorithm() -> getSignatureAlgorithm
    org.bouncycastle.asn1.DERBitString getSignature() -> getSignature
    org.bouncycastle.asn1.ASN1Sequence getCerts() -> getCerts
    org.bouncycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
org.bouncycastle.asn1.ocsp.CertID -> org.bouncycastle.asn1.ocsp.CertID:
    org.bouncycastle.asn1.x509.AlgorithmIdentifier hashAlgorithm -> hashAlgorithm
    org.bouncycastle.asn1.ASN1OctetString issuerNameHash -> issuerNameHash
    org.bouncycastle.asn1.ASN1OctetString issuerKeyHash -> issuerKeyHash
    org.bouncycastle.asn1.ASN1Integer serialNumber -> serialNumber
    org.bouncycastle.asn1.ocsp.CertID getInstance(org.bouncycastle.asn1.ASN1TaggedObject,boolean) -> getInstance
    org.bouncycastle.asn1.ocsp.CertID getInstance(java.lang.Object) -> getInstance
    org.bouncycastle.asn1.x509.AlgorithmIdentifier getHashAlgorithm() -> getHashAlgorithm
    org.bouncycastle.asn1.ASN1OctetString getIssuerNameHash() -> getIssuerNameHash
    org.bouncycastle.asn1.ASN1OctetString getIssuerKeyHash() -> getIssuerKeyHash
    org.bouncycastle.asn1.ASN1Integer getSerialNumber() -> getSerialNumber
    org.bouncycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
org.bouncycastle.asn1.ocsp.CertStatus -> org.bouncycastle.asn1.ocsp.CertStatus:
    int tagNo -> tagNo
    org.bouncycastle.asn1.ASN1Encodable value -> value
    org.bouncycastle.asn1.ocsp.CertStatus getInstance(java.lang.Object) -> getInstance
    org.bouncycastle.asn1.ocsp.CertStatus getInstance(org.bouncycastle.asn1.ASN1TaggedObject,boolean) -> getInstance
    int getTagNo() -> getTagNo
    org.bouncycastle.asn1.ASN1Encodable getStatus() -> getStatus
    org.bouncycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
org.bouncycastle.asn1.ocsp.CrlID -> org.bouncycastle.asn1.ocsp.CrlID:
    org.bouncycastle.asn1.DERIA5String crlUrl -> crlUrl
    org.bouncycastle.asn1.ASN1Integer crlNum -> crlNum
    org.bouncycastle.asn1.ASN1GeneralizedTime crlTime -> crlTime
    org.bouncycastle.asn1.ocsp.CrlID getInstance(java.lang.Object) -> getInstance
    org.bouncycastle.asn1.DERIA5String getCrlUrl() -> getCrlUrl
    org.bouncycastle.asn1.ASN1Integer getCrlNum() -> getCrlNum
    org.bouncycastle.asn1.ASN1GeneralizedTime getCrlTime() -> getCrlTime
    org.bouncycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
org.bouncycastle.asn1.ocsp.OCSPObjectIdentifiers -> org.bouncycastle.asn1.ocsp.OCSPObjectIdentifiers:
    org.bouncycastle.asn1.ASN1ObjectIdentifier id_pkix_ocsp -> id_pkix_ocsp
    org.bouncycastle.asn1.ASN1ObjectIdentifier id_pkix_ocsp_basic -> id_pkix_ocsp_basic
    org.bouncycastle.asn1.ASN1ObjectIdentifier id_pkix_ocsp_nonce -> id_pkix_ocsp_nonce
    org.bouncycastle.asn1.ASN1ObjectIdentifier id_pkix_ocsp_crl -> id_pkix_ocsp_crl
    org.bouncycastle.asn1.ASN1ObjectIdentifier id_pkix_ocsp_response -> id_pkix_ocsp_response
    org.bouncycastle.asn1.ASN1ObjectIdentifier id_pkix_ocsp_nocheck -> id_pkix_ocsp_nocheck
    org.bouncycastle.asn1.ASN1ObjectIdentifier id_pkix_ocsp_archive_cutoff -> id_pkix_ocsp_archive_cutoff
    org.bouncycastle.asn1.ASN1ObjectIdentifier id_pkix_ocsp_service_locator -> id_pkix_ocsp_service_locator
org.bouncycastle.asn1.ocsp.OCSPRequest -> org.bouncycastle.asn1.ocsp.OCSPRequest:
    org.bouncycastle.asn1.ocsp.TBSRequest tbsRequest -> tbsRequest
    org.bouncycastle.asn1.ocsp.Signature optionalSignature -> optionalSignature
    org.bouncycastle.asn1.ocsp.OCSPRequest getInstance(org.bouncycastle.asn1.ASN1TaggedObject,boolean) -> getInstance
    org.bouncycastle.asn1.ocsp.OCSPRequest getInstance(java.lang.Object) -> getInstance
    org.bouncycastle.asn1.ocsp.TBSRequest getTbsRequest() -> getTbsRequest
    org.bouncycastle.asn1.ocsp.Signature getOptionalSignature() -> getOptionalSignature
    org.bouncycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
org.bouncycastle.asn1.ocsp.OCSPResponse -> org.bouncycastle.asn1.ocsp.OCSPResponse:
    org.bouncycastle.asn1.ocsp.OCSPResponseStatus responseStatus -> responseStatus
    org.bouncycastle.asn1.ocsp.ResponseBytes responseBytes -> responseBytes
    org.bouncycastle.asn1.ocsp.OCSPResponse getInstance(org.bouncycastle.asn1.ASN1TaggedObject,boolean) -> getInstance
    org.bouncycastle.asn1.ocsp.OCSPResponse getInstance(java.lang.Object) -> getInstance
    org.bouncycastle.asn1.ocsp.OCSPResponseStatus getResponseStatus() -> getResponseStatus
    org.bouncycastle.asn1.ocsp.ResponseBytes getResponseBytes() -> getResponseBytes
    org.bouncycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
org.bouncycastle.asn1.ocsp.OCSPResponseStatus -> org.bouncycastle.asn1.ocsp.OCSPResponseStatus:
    int SUCCESSFUL -> SUCCESSFUL
    int MALFORMED_REQUEST -> MALFORMED_REQUEST
    int INTERNAL_ERROR -> INTERNAL_ERROR
    int TRY_LATER -> TRY_LATER
    int SIG_REQUIRED -> SIG_REQUIRED
    int UNAUTHORIZED -> UNAUTHORIZED
    org.bouncycastle.asn1.ASN1Enumerated value -> value
    org.bouncycastle.asn1.ocsp.OCSPResponseStatus getInstance(java.lang.Object) -> getInstance
    java.math.BigInteger getValue() -> getValue
    org.bouncycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
org.bouncycastle.asn1.ocsp.Request -> org.bouncycastle.asn1.ocsp.Request:
    org.bouncycastle.asn1.ocsp.CertID reqCert -> reqCert
    org.bouncycastle.asn1.x509.Extensions singleRequestExtensions -> singleRequestExtensions
    org.bouncycastle.asn1.ocsp.Request getInstance(org.bouncycastle.asn1.ASN1TaggedObject,boolean) -> getInstance
    org.bouncycastle.asn1.ocsp.Request getInstance(java.lang.Object) -> getInstance
    org.bouncycastle.asn1.ocsp.CertID getReqCert() -> getReqCert
    org.bouncycastle.asn1.x509.Extensions getSingleRequestExtensions() -> getSingleRequestExtensions
    org.bouncycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
org.bouncycastle.asn1.ocsp.ResponderID -> org.bouncycastle.asn1.ocsp.ResponderID:
    org.bouncycastle.asn1.ASN1Encodable value -> value
    org.bouncycastle.asn1.ocsp.ResponderID getInstance(java.lang.Object) -> getInstance
    org.bouncycastle.asn1.ocsp.ResponderID getInstance(org.bouncycastle.asn1.ASN1TaggedObject,boolean) -> getInstance
    byte[] getKeyHash() -> getKeyHash
    org.bouncycastle.asn1.x500.X500Name getName() -> getName
    org.bouncycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
org.bouncycastle.asn1.ocsp.ResponseBytes -> org.bouncycastle.asn1.ocsp.ResponseBytes:
    org.bouncycastle.asn1.ASN1ObjectIdentifier responseType -> responseType
    org.bouncycastle.asn1.ASN1OctetString response -> response
    org.bouncycastle.asn1.ocsp.ResponseBytes getInstance(org.bouncycastle.asn1.ASN1TaggedObject,boolean) -> getInstance
    org.bouncycastle.asn1.ocsp.ResponseBytes getInstance(java.lang.Object) -> getInstance
    org.bouncycastle.asn1.ASN1ObjectIdentifier getResponseType() -> getResponseType
    org.bouncycastle.asn1.ASN1OctetString getResponse() -> getResponse
    org.bouncycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
org.bouncycastle.asn1.ocsp.ResponseData -> org.bouncycastle.asn1.ocsp.ResponseData:
    org.bouncycastle.asn1.ASN1Integer V1 -> V1
    boolean versionPresent -> versionPresent
    org.bouncycastle.asn1.ASN1Integer version -> version
    org.bouncycastle.asn1.ocsp.ResponderID responderID -> responderID
    org.bouncycastle.asn1.ASN1GeneralizedTime producedAt -> producedAt
    org.bouncycastle.asn1.ASN1Sequence responses -> responses
    org.bouncycastle.asn1.x509.Extensions responseExtensions -> responseExtensions
    org.bouncycastle.asn1.ocsp.ResponseData getInstance(org.bouncycastle.asn1.ASN1TaggedObject,boolean) -> getInstance
    org.bouncycastle.asn1.ocsp.ResponseData getInstance(java.lang.Object) -> getInstance
    org.bouncycastle.asn1.ASN1Integer getVersion() -> getVersion
    org.bouncycastle.asn1.ocsp.ResponderID getResponderID() -> getResponderID
    org.bouncycastle.asn1.ASN1GeneralizedTime getProducedAt() -> getProducedAt
    org.bouncycastle.asn1.ASN1Sequence getResponses() -> getResponses
    org.bouncycastle.asn1.x509.Extensions getResponseExtensions() -> getResponseExtensions
    org.bouncycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
org.bouncycastle.asn1.ocsp.RevokedInfo -> org.bouncycastle.asn1.ocsp.RevokedInfo:
    org.bouncycastle.asn1.ASN1GeneralizedTime revocationTime -> revocationTime
    org.bouncycastle.asn1.x509.CRLReason revocationReason -> revocationReason
    org.bouncycastle.asn1.ocsp.RevokedInfo getInstance(org.bouncycastle.asn1.ASN1TaggedObject,boolean) -> getInstance
    org.bouncycastle.asn1.ocsp.RevokedInfo getInstance(java.lang.Object) -> getInstance
    org.bouncycastle.asn1.ASN1GeneralizedTime getRevocationTime() -> getRevocationTime
    org.bouncycastle.asn1.x509.CRLReason getRevocationReason() -> getRevocationReason
    org.bouncycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
org.bouncycastle.asn1.ocsp.ServiceLocator -> org.bouncycastle.asn1.ocsp.ServiceLocator:
    org.bouncycastle.asn1.x500.X500Name issuer -> issuer
    org.bouncycastle.asn1.ASN1Primitive locator -> locator
    org.bouncycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
org.bouncycastle.asn1.ocsp.Signature -> org.bouncycastle.asn1.ocsp.Signature:
    org.bouncycastle.asn1.x509.AlgorithmIdentifier signatureAlgorithm -> signatureAlgorithm
    org.bouncycastle.asn1.DERBitString signature -> signature
    org.bouncycastle.asn1.ASN1Sequence certs -> certs
    org.bouncycastle.asn1.ocsp.Signature getInstance(org.bouncycastle.asn1.ASN1TaggedObject,boolean) -> getInstance
    org.bouncycastle.asn1.ocsp.Signature getInstance(java.lang.Object) -> getInstance
    org.bouncycastle.asn1.x509.AlgorithmIdentifier getSignatureAlgorithm() -> getSignatureAlgorithm
    org.bouncycastle.asn1.DERBitString getSignature() -> getSignature
    org.bouncycastle.asn1.ASN1Sequence getCerts() -> getCerts
    org.bouncycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
org.bouncycastle.asn1.ocsp.SingleResponse -> org.bouncycastle.asn1.ocsp.SingleResponse:
    org.bouncycastle.asn1.ocsp.CertID certID -> certID
    org.bouncycastle.asn1.ocsp.CertStatus certStatus -> certStatus
    org.bouncycastle.asn1.ASN1GeneralizedTime thisUpdate -> thisUpdate
    org.bouncycastle.asn1.ASN1GeneralizedTime nextUpdate -> nextUpdate
    org.bouncycastle.asn1.x509.Extensions singleExtensions -> singleExtensions
    org.bouncycastle.asn1.ocsp.SingleResponse getInstance(org.bouncycastle.asn1.ASN1TaggedObject,boolean) -> getInstance
    org.bouncycastle.asn1.ocsp.SingleResponse getInstance(java.lang.Object) -> getInstance
    org.bouncycastle.asn1.ocsp.CertID getCertID() -> getCertID
    org.bouncycastle.asn1.ocsp.CertStatus getCertStatus() -> getCertStatus
    org.bouncycastle.asn1.ASN1GeneralizedTime getThisUpdate() -> getThisUpdate
    org.bouncycastle.asn1.ASN1GeneralizedTime getNextUpdate() -> getNextUpdate
    org.bouncycastle.asn1.x509.Extensions getSingleExtensions() -> getSingleExtensions
    org.bouncycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
org.bouncycastle.asn1.ocsp.TBSRequest -> org.bouncycastle.asn1.ocsp.TBSRequest:
    org.bouncycastle.asn1.ASN1Integer V1 -> V1
    org.bouncycastle.asn1.ASN1Integer version -> version
    org.bouncycastle.asn1.x509.GeneralName requestorName -> requestorName
    org.bouncycastle.asn1.ASN1Sequence requestList -> requestList
    org.bouncycastle.asn1.x509.Extensions requestExtensions -> requestExtensions
    boolean versionSet -> versionSet
    org.bouncycastle.asn1.ocsp.TBSRequest getInstance(org.bouncycastle.asn1.ASN1TaggedObject,boolean) -> getInstance
    org.bouncycastle.asn1.ocsp.TBSRequest getInstance(java.lang.Object) -> getInstance
    org.bouncycastle.asn1.ASN1Integer getVersion() -> getVersion
    org.bouncycastle.asn1.x509.GeneralName getRequestorName() -> getRequestorName
    org.bouncycastle.asn1.ASN1Sequence getRequestList() -> getRequestList
    org.bouncycastle.asn1.x509.Extensions getRequestExtensions() -> getRequestExtensions
    org.bouncycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
org.bouncycastle.asn1.oiw.ElGamalParameter -> org.bouncycastle.asn1.oiw.ElGamalParameter:
    org.bouncycastle.asn1.ASN1Integer p -> p
    org.bouncycastle.asn1.ASN1Integer g -> g
    org.bouncycastle.asn1.oiw.ElGamalParameter getInstance(java.lang.Object) -> getInstance
    java.math.BigInteger getP() -> getP
    java.math.BigInteger getG() -> getG
    org.bouncycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
org.bouncycastle.asn1.oiw.OIWObjectIdentifiers -> org.bouncycastle.asn1.oiw.OIWObjectIdentifiers:
    org.bouncycastle.asn1.ASN1ObjectIdentifier md4WithRSA -> md4WithRSA
    org.bouncycastle.asn1.ASN1ObjectIdentifier md5WithRSA -> md5WithRSA
    org.bouncycastle.asn1.ASN1ObjectIdentifier md4WithRSAEncryption -> md4WithRSAEncryption
    org.bouncycastle.asn1.ASN1ObjectIdentifier desECB -> desECB
    org.bouncycastle.asn1.ASN1ObjectIdentifier desCBC -> desCBC
    org.bouncycastle.asn1.ASN1ObjectIdentifier desOFB -> desOFB
    org.bouncycastle.asn1.ASN1ObjectIdentifier desCFB -> desCFB
    org.bouncycastle.asn1.ASN1ObjectIdentifier desEDE -> desEDE
    org.bouncycastle.asn1.ASN1ObjectIdentifier idSHA1 -> idSHA1
    org.bouncycastle.asn1.ASN1ObjectIdentifier dsaWithSHA1 -> dsaWithSHA1
    org.bouncycastle.asn1.ASN1ObjectIdentifier sha1WithRSA -> sha1WithRSA
    org.bouncycastle.asn1.ASN1ObjectIdentifier elGamalAlgorithm -> elGamalAlgorithm
org.bouncycastle.asn1.pkcs.Attribute -> org.bouncycastle.asn1.pkcs.Attribute:
    org.bouncycastle.asn1.ASN1ObjectIdentifier attrType -> attrType
    org.bouncycastle.asn1.ASN1Set attrValues -> attrValues
    org.bouncycastle.asn1.pkcs.Attribute getInstance(java.lang.Object) -> getInstance
    org.bouncycastle.asn1.ASN1ObjectIdentifier getAttrType() -> getAttrType
    org.bouncycastle.asn1.ASN1Set getAttrValues() -> getAttrValues
    org.bouncycastle.asn1.ASN1Encodable[] getAttributeValues() -> getAttributeValues
    org.bouncycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
org.bouncycastle.asn1.pkcs.AuthenticatedSafe -> org.bouncycastle.asn1.pkcs.AuthenticatedSafe:
    org.bouncycastle.asn1.pkcs.ContentInfo[] info -> info
    boolean isBer -> isBer
    org.bouncycastle.asn1.pkcs.AuthenticatedSafe getInstance(java.lang.Object) -> getInstance
    org.bouncycastle.asn1.pkcs.ContentInfo[] getContentInfo() -> getContentInfo
    org.bouncycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
org.bouncycastle.asn1.pkcs.CRLBag -> org.bouncycastle.asn1.pkcs.CRLBag:
    org.bouncycastle.asn1.ASN1ObjectIdentifier crlId -> crlId
    org.bouncycastle.asn1.ASN1Encodable crlValue -> crlValue
    org.bouncycastle.asn1.pkcs.CRLBag getInstance(java.lang.Object) -> getInstance
    org.bouncycastle.asn1.ASN1ObjectIdentifier getcrlId() -> getcrlId
    org.bouncycastle.asn1.ASN1Encodable getCRLValue() -> getCRLValue
    org.bouncycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
org.bouncycastle.asn1.pkcs.CertBag -> org.bouncycastle.asn1.pkcs.CertBag:
    org.bouncycastle.asn1.ASN1ObjectIdentifier certId -> certId
    org.bouncycastle.asn1.ASN1Encodable certValue -> certValue
    org.bouncycastle.asn1.pkcs.CertBag getInstance(java.lang.Object) -> getInstance
    org.bouncycastle.asn1.ASN1ObjectIdentifier getCertId() -> getCertId
    org.bouncycastle.asn1.ASN1Encodable getCertValue() -> getCertValue
    org.bouncycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
org.bouncycastle.asn1.pkcs.CertificationRequest -> org.bouncycastle.asn1.pkcs.CertificationRequest:
    org.bouncycastle.asn1.pkcs.CertificationRequestInfo reqInfo -> reqInfo
    org.bouncycastle.asn1.x509.AlgorithmIdentifier sigAlgId -> sigAlgId
    org.bouncycastle.asn1.DERBitString sigBits -> sigBits
    org.bouncycastle.asn1.pkcs.CertificationRequest getInstance(java.lang.Object) -> getInstance
    org.bouncycastle.asn1.pkcs.CertificationRequestInfo getCertificationRequestInfo() -> getCertificationRequestInfo
    org.bouncycastle.asn1.x509.AlgorithmIdentifier getSignatureAlgorithm() -> getSignatureAlgorithm
    org.bouncycastle.asn1.DERBitString getSignature() -> getSignature
    org.bouncycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
org.bouncycastle.asn1.pkcs.CertificationRequestInfo -> org.bouncycastle.asn1.pkcs.CertificationRequestInfo:
    org.bouncycastle.asn1.ASN1Integer version -> version
    org.bouncycastle.asn1.x500.X500Name subject -> subject
    org.bouncycastle.asn1.x509.SubjectPublicKeyInfo subjectPKInfo -> subjectPKInfo
    org.bouncycastle.asn1.ASN1Set attributes -> attributes
    org.bouncycastle.asn1.pkcs.CertificationRequestInfo getInstance(java.lang.Object) -> getInstance
    org.bouncycastle.asn1.ASN1Integer getVersion() -> getVersion
    org.bouncycastle.asn1.x500.X500Name getSubject() -> getSubject
    org.bouncycastle.asn1.x509.SubjectPublicKeyInfo getSubjectPublicKeyInfo() -> getSubjectPublicKeyInfo
    org.bouncycastle.asn1.ASN1Set getAttributes() -> getAttributes
    org.bouncycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
org.bouncycastle.asn1.pkcs.ContentInfo -> org.bouncycastle.asn1.pkcs.ContentInfo:
    org.bouncycastle.asn1.ASN1ObjectIdentifier contentType -> contentType
    org.bouncycastle.asn1.ASN1Encodable content -> content
    boolean isBer -> isBer
    org.bouncycastle.asn1.pkcs.ContentInfo getInstance(java.lang.Object) -> getInstance
    org.bouncycastle.asn1.ASN1ObjectIdentifier getContentType() -> getContentType
    org.bouncycastle.asn1.ASN1Encodable getContent() -> getContent
    org.bouncycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
org.bouncycastle.asn1.pkcs.DHParameter -> org.bouncycastle.asn1.pkcs.DHParameter:
    org.bouncycastle.asn1.ASN1Integer p -> p
    org.bouncycastle.asn1.ASN1Integer g -> g
    org.bouncycastle.asn1.ASN1Integer l -> l
    org.bouncycastle.asn1.pkcs.DHParameter getInstance(java.lang.Object) -> getInstance
    java.math.BigInteger getP() -> getP
    java.math.BigInteger getG() -> getG
    java.math.BigInteger getL() -> getL
    org.bouncycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
org.bouncycastle.asn1.pkcs.EncryptedData -> org.bouncycastle.asn1.pkcs.EncryptedData:
    org.bouncycastle.asn1.ASN1Sequence data -> data
    org.bouncycastle.asn1.ASN1ObjectIdentifier bagId -> bagId
    org.bouncycastle.asn1.ASN1Primitive bagValue -> bagValue
    org.bouncycastle.asn1.pkcs.EncryptedData getInstance(java.lang.Object) -> getInstance
    org.bouncycastle.asn1.ASN1ObjectIdentifier getContentType() -> getContentType
    org.bouncycastle.asn1.x509.AlgorithmIdentifier getEncryptionAlgorithm() -> getEncryptionAlgorithm
    org.bouncycastle.asn1.ASN1OctetString getContent() -> getContent
    org.bouncycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
org.bouncycastle.asn1.pkcs.EncryptedPrivateKeyInfo -> org.bouncycastle.asn1.pkcs.EncryptedPrivateKeyInfo:
    org.bouncycastle.asn1.x509.AlgorithmIdentifier algId -> algId
    org.bouncycastle.asn1.ASN1OctetString data -> data
    org.bouncycastle.asn1.pkcs.EncryptedPrivateKeyInfo getInstance(java.lang.Object) -> getInstance
    org.bouncycastle.asn1.x509.AlgorithmIdentifier getEncryptionAlgorithm() -> getEncryptionAlgorithm
    byte[] getEncryptedData() -> getEncryptedData
    org.bouncycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
org.bouncycastle.asn1.pkcs.EncryptionScheme -> org.bouncycastle.asn1.pkcs.EncryptionScheme:
    org.bouncycastle.asn1.x509.AlgorithmIdentifier algId -> algId
    org.bouncycastle.asn1.pkcs.EncryptionScheme getInstance(java.lang.Object) -> getInstance
    org.bouncycastle.asn1.ASN1ObjectIdentifier getAlgorithm() -> getAlgorithm
    org.bouncycastle.asn1.ASN1Encodable getParameters() -> getParameters
    org.bouncycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
org.bouncycastle.asn1.pkcs.IssuerAndSerialNumber -> org.bouncycastle.asn1.pkcs.IssuerAndSerialNumber:
    org.bouncycastle.asn1.x500.X500Name name -> name
    org.bouncycastle.asn1.ASN1Integer certSerialNumber -> certSerialNumber
    org.bouncycastle.asn1.pkcs.IssuerAndSerialNumber getInstance(java.lang.Object) -> getInstance
    org.bouncycastle.asn1.x500.X500Name getName() -> getName
    org.bouncycastle.asn1.ASN1Integer getCertificateSerialNumber() -> getCertificateSerialNumber
    org.bouncycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
org.bouncycastle.asn1.pkcs.KeyDerivationFunc -> org.bouncycastle.asn1.pkcs.KeyDerivationFunc:
    org.bouncycastle.asn1.x509.AlgorithmIdentifier algId -> algId
    org.bouncycastle.asn1.pkcs.KeyDerivationFunc getInstance(java.lang.Object) -> getInstance
    org.bouncycastle.asn1.ASN1ObjectIdentifier getAlgorithm() -> getAlgorithm
    org.bouncycastle.asn1.ASN1Encodable getParameters() -> getParameters
    org.bouncycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
org.bouncycastle.asn1.pkcs.MacData -> org.bouncycastle.asn1.pkcs.MacData:
    java.math.BigInteger ONE -> ONE
    org.bouncycastle.asn1.x509.DigestInfo digInfo -> digInfo
    byte[] salt -> salt
    java.math.BigInteger iterationCount -> iterationCount
    org.bouncycastle.asn1.pkcs.MacData getInstance(java.lang.Object) -> getInstance
    org.bouncycastle.asn1.x509.DigestInfo getMac() -> getMac
    byte[] getSalt() -> getSalt
    java.math.BigInteger getIterationCount() -> getIterationCount
    org.bouncycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
org.bouncycastle.asn1.pkcs.PBEParameter -> org.bouncycastle.asn1.pkcs.PBEParameter:
    org.bouncycastle.asn1.ASN1Integer iterations -> iterations
    org.bouncycastle.asn1.ASN1OctetString salt -> salt
    org.bouncycastle.asn1.pkcs.PBEParameter getInstance(java.lang.Object) -> getInstance
    java.math.BigInteger getIterationCount() -> getIterationCount
    byte[] getSalt() -> getSalt
    org.bouncycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
org.bouncycastle.asn1.pkcs.PBES2Algorithms -> org.bouncycastle.asn1.pkcs.PBES2Algorithms:
    org.bouncycastle.asn1.ASN1ObjectIdentifier objectId -> objectId
    org.bouncycastle.asn1.pkcs.KeyDerivationFunc func -> func
    org.bouncycastle.asn1.pkcs.EncryptionScheme scheme -> scheme
    org.bouncycastle.asn1.ASN1ObjectIdentifier getObjectId() -> getObjectId
    org.bouncycastle.asn1.pkcs.KeyDerivationFunc getKeyDerivationFunc() -> getKeyDerivationFunc
    org.bouncycastle.asn1.pkcs.EncryptionScheme getEncryptionScheme() -> getEncryptionScheme
    org.bouncycastle.asn1.ASN1Primitive getASN1Primitive() -> getASN1Primitive
org.bouncycastle.asn1.pkcs.PBES2Parameters -> org.bouncycastle.asn1.pkcs.PBES2Parameters:
    org.bouncycastle.asn1.pkcs.KeyDerivationFunc func -> func
    org.bouncycastle.asn1.pkcs.EncryptionScheme scheme -> scheme
    org.bouncycastle.asn1.pkcs.PBES2Parameters getInstance(java.lang.Object) -> getInstance
    org.bouncycastle.asn1.pkcs.KeyDerivationFunc getKeyDerivationFunc() -> getKeyDerivationFunc
    org.bouncycastle.asn1.pkcs.EncryptionScheme getEncryptionScheme() -> getEncryptionScheme
    org.bouncycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
org.bouncycastle.asn1.pkcs.PBKDF2Params -> org.bouncycastle.asn1.pkcs.PBKDF2Params:
    org.bouncycastle.asn1.x509.AlgorithmIdentifier algid_hmacWithSHA1 -> algid_hmacWithSHA1
    org.bouncycastle.asn1.ASN1OctetString octStr -> octStr
    org.bouncycastle.asn1.ASN1Integer iterationCount -> iterationCount
    org.bouncycastle.asn1.ASN1Integer keyLength -> keyLength
    org.bouncycastle.asn1.x509.AlgorithmIdentifier prf -> prf
    org.bouncycastle.asn1.pkcs.PBKDF2Params getInstance(java.lang.Object) -> getInstance
    byte[] getSalt() -> getSalt
    java.math.BigInteger getIterationCount() -> getIterationCount
    java.math.BigInteger getKeyLength() -> getKeyLength
    boolean isDefaultPrf() -> isDefaultPrf
    org.bouncycastle.asn1.x509.AlgorithmIdentifier getPrf() -> getPrf
    org.bouncycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
org.bouncycastle.asn1.pkcs.PKCS12PBEParams -> org.bouncycastle.asn1.pkcs.PKCS12PBEParams:
    org.bouncycastle.asn1.ASN1Integer iterations -> iterations
    org.bouncycastle.asn1.ASN1OctetString iv -> iv
    org.bouncycastle.asn1.pkcs.PKCS12PBEParams getInstance(java.lang.Object) -> getInstance
    java.math.BigInteger getIterations() -> getIterations
    byte[] getIV() -> getIV
    org.bouncycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
org.bouncycastle.asn1.pkcs.PKCSObjectIdentifiers -> org.bouncycastle.asn1.pkcs.PKCSObjectIdentifiers:
    org.bouncycastle.asn1.ASN1ObjectIdentifier pkcs_1 -> pkcs_1
    org.bouncycastle.asn1.ASN1ObjectIdentifier rsaEncryption -> rsaEncryption
    org.bouncycastle.asn1.ASN1ObjectIdentifier md2WithRSAEncryption -> md2WithRSAEncryption
    org.bouncycastle.asn1.ASN1ObjectIdentifier md4WithRSAEncryption -> md4WithRSAEncryption
    org.bouncycastle.asn1.ASN1ObjectIdentifier md5WithRSAEncryption -> md5WithRSAEncryption
    org.bouncycastle.asn1.ASN1ObjectIdentifier sha1WithRSAEncryption -> sha1WithRSAEncryption
    org.bouncycastle.asn1.ASN1ObjectIdentifier srsaOAEPEncryptionSET -> srsaOAEPEncryptionSET
    org.bouncycastle.asn1.ASN1ObjectIdentifier id_RSAES_OAEP -> id_RSAES_OAEP
    org.bouncycastle.asn1.ASN1ObjectIdentifier id_mgf1 -> id_mgf1
    org.bouncycastle.asn1.ASN1ObjectIdentifier id_pSpecified -> id_pSpecified
    org.bouncycastle.asn1.ASN1ObjectIdentifier id_RSASSA_PSS -> id_RSASSA_PSS
    org.bouncycastle.asn1.ASN1ObjectIdentifier sha256WithRSAEncryption -> sha256WithRSAEncryption
    org.bouncycastle.asn1.ASN1ObjectIdentifier sha384WithRSAEncryption -> sha384WithRSAEncryption
    org.bouncycastle.asn1.ASN1ObjectIdentifier sha512WithRSAEncryption -> sha512WithRSAEncryption
    org.bouncycastle.asn1.ASN1ObjectIdentifier sha224WithRSAEncryption -> sha224WithRSAEncryption
    org.bouncycastle.asn1.ASN1ObjectIdentifier pkcs_3 -> pkcs_3
    org.bouncycastle.asn1.ASN1ObjectIdentifier dhKeyAgreement -> dhKeyAgreement
    org.bouncycastle.asn1.ASN1ObjectIdentifier pkcs_5 -> pkcs_5
    org.bouncycastle.asn1.ASN1ObjectIdentifier pbeWithMD2AndDES_CBC -> pbeWithMD2AndDES_CBC
    org.bouncycastle.asn1.ASN1ObjectIdentifier pbeWithMD2AndRC2_CBC -> pbeWithMD2AndRC2_CBC
    org.bouncycastle.asn1.ASN1ObjectIdentifier pbeWithMD5AndDES_CBC -> pbeWithMD5AndDES_CBC
    org.bouncycastle.asn1.ASN1ObjectIdentifier pbeWithMD5AndRC2_CBC -> pbeWithMD5AndRC2_CBC
    org.bouncycastle.asn1.ASN1ObjectIdentifier pbeWithSHA1AndDES_CBC -> pbeWithSHA1AndDES_CBC
    org.bouncycastle.asn1.ASN1ObjectIdentifier pbeWithSHA1AndRC2_CBC -> pbeWithSHA1AndRC2_CBC
    org.bouncycastle.asn1.ASN1ObjectIdentifier id_PBES2 -> id_PBES2
    org.bouncycastle.asn1.ASN1ObjectIdentifier id_PBKDF2 -> id_PBKDF2
    org.bouncycastle.asn1.ASN1ObjectIdentifier encryptionAlgorithm -> encryptionAlgorithm
    org.bouncycastle.asn1.ASN1ObjectIdentifier des_EDE3_CBC -> des_EDE3_CBC
    org.bouncycastle.asn1.ASN1ObjectIdentifier RC2_CBC -> RC2_CBC
    org.bouncycastle.asn1.ASN1ObjectIdentifier rc4 -> rc4
    org.bouncycastle.asn1.ASN1ObjectIdentifier digestAlgorithm -> digestAlgorithm
    org.bouncycastle.asn1.ASN1ObjectIdentifier md2 -> md2
    org.bouncycastle.asn1.ASN1ObjectIdentifier md4 -> md4
    org.bouncycastle.asn1.ASN1ObjectIdentifier md5 -> md5
    org.bouncycastle.asn1.ASN1ObjectIdentifier id_hmacWithSHA1 -> id_hmacWithSHA1
    org.bouncycastle.asn1.ASN1ObjectIdentifier id_hmacWithSHA224 -> id_hmacWithSHA224
    org.bouncycastle.asn1.ASN1ObjectIdentifier id_hmacWithSHA256 -> id_hmacWithSHA256
    org.bouncycastle.asn1.ASN1ObjectIdentifier id_hmacWithSHA384 -> id_hmacWithSHA384
    org.bouncycastle.asn1.ASN1ObjectIdentifier id_hmacWithSHA512 -> id_hmacWithSHA512
    org.bouncycastle.asn1.ASN1ObjectIdentifier pkcs_7 -> pkcs_7
    org.bouncycastle.asn1.ASN1ObjectIdentifier data -> data
    org.bouncycastle.asn1.ASN1ObjectIdentifier signedData -> signedData
    org.bouncycastle.asn1.ASN1ObjectIdentifier envelopedData -> envelopedData
    org.bouncycastle.asn1.ASN1ObjectIdentifier signedAndEnvelopedData -> signedAndEnvelopedData
    org.bouncycastle.asn1.ASN1ObjectIdentifier digestedData -> digestedData
    org.bouncycastle.asn1.ASN1ObjectIdentifier encryptedData -> encryptedData
    org.bouncycastle.asn1.ASN1ObjectIdentifier pkcs_9 -> pkcs_9
    org.bouncycastle.asn1.ASN1ObjectIdentifier pkcs_9_at_emailAddress -> pkcs_9_at_emailAddress
    org.bouncycastle.asn1.ASN1ObjectIdentifier pkcs_9_at_unstructuredName -> pkcs_9_at_unstructuredName
    org.bouncycastle.asn1.ASN1ObjectIdentifier pkcs_9_at_contentType -> pkcs_9_at_contentType
    org.bouncycastle.asn1.ASN1ObjectIdentifier pkcs_9_at_messageDigest -> pkcs_9_at_messageDigest
    org.bouncycastle.asn1.ASN1ObjectIdentifier pkcs_9_at_signingTime -> pkcs_9_at_signingTime
    org.bouncycastle.asn1.ASN1ObjectIdentifier pkcs_9_at_counterSignature -> pkcs_9_at_counterSignature
    org.bouncycastle.asn1.ASN1ObjectIdentifier pkcs_9_at_challengePassword -> pkcs_9_at_challengePassword
    org.bouncycastle.asn1.ASN1ObjectIdentifier pkcs_9_at_unstructuredAddress -> pkcs_9_at_unstructuredAddress
    org.bouncycastle.asn1.ASN1ObjectIdentifier pkcs_9_at_extendedCertificateAttributes -> pkcs_9_at_extendedCertificateAttributes
    org.bouncycastle.asn1.ASN1ObjectIdentifier pkcs_9_at_signingDescription -> pkcs_9_at_signingDescription
    org.bouncycastle.asn1.ASN1ObjectIdentifier pkcs_9_at_extensionRequest -> pkcs_9_at_extensionRequest
    org.bouncycastle.asn1.ASN1ObjectIdentifier pkcs_9_at_smimeCapabilities -> pkcs_9_at_smimeCapabilities
    org.bouncycastle.asn1.ASN1ObjectIdentifier id_smime -> id_smime
    org.bouncycastle.asn1.ASN1ObjectIdentifier pkcs_9_at_friendlyName -> pkcs_9_at_friendlyName
    org.bouncycastle.asn1.ASN1ObjectIdentifier pkcs_9_at_localKeyId -> pkcs_9_at_localKeyId
    org.bouncycastle.asn1.ASN1ObjectIdentifier x509certType -> x509certType
    org.bouncycastle.asn1.ASN1ObjectIdentifier certTypes -> certTypes
    org.bouncycastle.asn1.ASN1ObjectIdentifier x509Certificate -> x509Certificate
    org.bouncycastle.asn1.ASN1ObjectIdentifier sdsiCertificate -> sdsiCertificate
    org.bouncycastle.asn1.ASN1ObjectIdentifier crlTypes -> crlTypes
    org.bouncycastle.asn1.ASN1ObjectIdentifier x509Crl -> x509Crl
    org.bouncycastle.asn1.ASN1ObjectIdentifier preferSignedData -> preferSignedData
    org.bouncycastle.asn1.ASN1ObjectIdentifier canNotDecryptAny -> canNotDecryptAny
    org.bouncycastle.asn1.ASN1ObjectIdentifier sMIMECapabilitiesVersions -> sMIMECapabilitiesVersions
    org.bouncycastle.asn1.ASN1ObjectIdentifier id_ct -> id_ct
    org.bouncycastle.asn1.ASN1ObjectIdentifier id_ct_authData -> id_ct_authData
    org.bouncycastle.asn1.ASN1ObjectIdentifier id_ct_TSTInfo -> id_ct_TSTInfo
    org.bouncycastle.asn1.ASN1ObjectIdentifier id_ct_compressedData -> id_ct_compressedData
    org.bouncycastle.asn1.ASN1ObjectIdentifier id_ct_authEnvelopedData -> id_ct_authEnvelopedData
    org.bouncycastle.asn1.ASN1ObjectIdentifier id_ct_timestampedData -> id_ct_timestampedData
    org.bouncycastle.asn1.ASN1ObjectIdentifier id_alg -> id_alg
    org.bouncycastle.asn1.ASN1ObjectIdentifier id_alg_PWRI_KEK -> id_alg_PWRI_KEK
    org.bouncycastle.asn1.ASN1ObjectIdentifier id_cti -> id_cti
    org.bouncycastle.asn1.ASN1ObjectIdentifier id_cti_ets_proofOfOrigin -> id_cti_ets_proofOfOrigin
    org.bouncycastle.asn1.ASN1ObjectIdentifier id_cti_ets_proofOfReceipt -> id_cti_ets_proofOfReceipt
    org.bouncycastle.asn1.ASN1ObjectIdentifier id_cti_ets_proofOfDelivery -> id_cti_ets_proofOfDelivery
    org.bouncycastle.asn1.ASN1ObjectIdentifier id_cti_ets_proofOfSender -> id_cti_ets_proofOfSender
    org.bouncycastle.asn1.ASN1ObjectIdentifier id_cti_ets_proofOfApproval -> id_cti_ets_proofOfApproval
    org.bouncycastle.asn1.ASN1ObjectIdentifier id_cti_ets_proofOfCreation -> id_cti_ets_proofOfCreation
    org.bouncycastle.asn1.ASN1ObjectIdentifier id_aa -> id_aa
    org.bouncycastle.asn1.ASN1ObjectIdentifier id_aa_receiptRequest -> id_aa_receiptRequest
    org.bouncycastle.asn1.ASN1ObjectIdentifier id_aa_contentHint -> id_aa_contentHint
    org.bouncycastle.asn1.ASN1ObjectIdentifier id_aa_msgSigDigest -> id_aa_msgSigDigest
    org.bouncycastle.asn1.ASN1ObjectIdentifier id_aa_contentReference -> id_aa_contentReference
    org.bouncycastle.asn1.ASN1ObjectIdentifier id_aa_encrypKeyPref -> id_aa_encrypKeyPref
    org.bouncycastle.asn1.ASN1ObjectIdentifier id_aa_signingCertificate -> id_aa_signingCertificate
    org.bouncycastle.asn1.ASN1ObjectIdentifier id_aa_signingCertificateV2 -> id_aa_signingCertificateV2
    org.bouncycastle.asn1.ASN1ObjectIdentifier id_aa_contentIdentifier -> id_aa_contentIdentifier
    org.bouncycastle.asn1.ASN1ObjectIdentifier id_aa_signatureTimeStampToken -> id_aa_signatureTimeStampToken
    org.bouncycastle.asn1.ASN1ObjectIdentifier id_aa_ets_sigPolicyId -> id_aa_ets_sigPolicyId
    org.bouncycastle.asn1.ASN1ObjectIdentifier id_aa_ets_commitmentType -> id_aa_ets_commitmentType
    org.bouncycastle.asn1.ASN1ObjectIdentifier id_aa_ets_signerLocation -> id_aa_ets_signerLocation
    org.bouncycastle.asn1.ASN1ObjectIdentifier id_aa_ets_signerAttr -> id_aa_ets_signerAttr
    org.bouncycastle.asn1.ASN1ObjectIdentifier id_aa_ets_otherSigCert -> id_aa_ets_otherSigCert
    org.bouncycastle.asn1.ASN1ObjectIdentifier id_aa_ets_contentTimestamp -> id_aa_ets_contentTimestamp
    org.bouncycastle.asn1.ASN1ObjectIdentifier id_aa_ets_certificateRefs -> id_aa_ets_certificateRefs
    org.bouncycastle.asn1.ASN1ObjectIdentifier id_aa_ets_revocationRefs -> id_aa_ets_revocationRefs
    org.bouncycastle.asn1.ASN1ObjectIdentifier id_aa_ets_certValues -> id_aa_ets_certValues
    org.bouncycastle.asn1.ASN1ObjectIdentifier id_aa_ets_revocationValues -> id_aa_ets_revocationValues
    org.bouncycastle.asn1.ASN1ObjectIdentifier id_aa_ets_escTimeStamp -> id_aa_ets_escTimeStamp
    org.bouncycastle.asn1.ASN1ObjectIdentifier id_aa_ets_certCRLTimestamp -> id_aa_ets_certCRLTimestamp
    org.bouncycastle.asn1.ASN1ObjectIdentifier id_aa_ets_archiveTimestamp -> id_aa_ets_archiveTimestamp
    org.bouncycastle.asn1.ASN1ObjectIdentifier id_aa_sigPolicyId -> id_aa_sigPolicyId
    org.bouncycastle.asn1.ASN1ObjectIdentifier id_aa_commitmentType -> id_aa_commitmentType
    org.bouncycastle.asn1.ASN1ObjectIdentifier id_aa_signerLocation -> id_aa_signerLocation
    org.bouncycastle.asn1.ASN1ObjectIdentifier id_aa_otherSigCert -> id_aa_otherSigCert
    java.lang.String id_spq -> id_spq
    org.bouncycastle.asn1.ASN1ObjectIdentifier id_spq_ets_uri -> id_spq_ets_uri
    org.bouncycastle.asn1.ASN1ObjectIdentifier id_spq_ets_unotice -> id_spq_ets_unotice
    org.bouncycastle.asn1.ASN1ObjectIdentifier pkcs_12 -> pkcs_12
    org.bouncycastle.asn1.ASN1ObjectIdentifier bagtypes -> bagtypes
    org.bouncycastle.asn1.ASN1ObjectIdentifier keyBag -> keyBag
    org.bouncycastle.asn1.ASN1ObjectIdentifier pkcs8ShroudedKeyBag -> pkcs8ShroudedKeyBag
    org.bouncycastle.asn1.ASN1ObjectIdentifier certBag -> certBag
    org.bouncycastle.asn1.ASN1ObjectIdentifier crlBag -> crlBag
    org.bouncycastle.asn1.ASN1ObjectIdentifier secretBag -> secretBag
    org.bouncycastle.asn1.ASN1ObjectIdentifier safeContentsBag -> safeContentsBag
    org.bouncycastle.asn1.ASN1ObjectIdentifier pkcs_12PbeIds -> pkcs_12PbeIds
    org.bouncycastle.asn1.ASN1ObjectIdentifier pbeWithSHAAnd128BitRC4 -> pbeWithSHAAnd128BitRC4
    org.bouncycastle.asn1.ASN1ObjectIdentifier pbeWithSHAAnd40BitRC4 -> pbeWithSHAAnd40BitRC4
    org.bouncycastle.asn1.ASN1ObjectIdentifier pbeWithSHAAnd3_KeyTripleDES_CBC -> pbeWithSHAAnd3_KeyTripleDES_CBC
    org.bouncycastle.asn1.ASN1ObjectIdentifier pbeWithSHAAnd2_KeyTripleDES_CBC -> pbeWithSHAAnd2_KeyTripleDES_CBC
    org.bouncycastle.asn1.ASN1ObjectIdentifier pbeWithSHAAnd128BitRC2_CBC -> pbeWithSHAAnd128BitRC2_CBC
    org.bouncycastle.asn1.ASN1ObjectIdentifier pbeWithSHAAnd40BitRC2_CBC -> pbeWithSHAAnd40BitRC2_CBC
    org.bouncycastle.asn1.ASN1ObjectIdentifier pbewithSHAAnd40BitRC2_CBC -> pbewithSHAAnd40BitRC2_CBC
    org.bouncycastle.asn1.ASN1ObjectIdentifier id_alg_CMS3DESwrap -> id_alg_CMS3DESwrap
    org.bouncycastle.asn1.ASN1ObjectIdentifier id_alg_CMSRC2wrap -> id_alg_CMSRC2wrap
org.bouncycastle.asn1.pkcs.Pfx -> org.bouncycastle.asn1.pkcs.Pfx:
    org.bouncycastle.asn1.pkcs.ContentInfo contentInfo -> contentInfo
    org.bouncycastle.asn1.pkcs.MacData macData -> macData
    org.bouncycastle.asn1.pkcs.Pfx getInstance(java.lang.Object) -> getInstance
    org.bouncycastle.asn1.pkcs.ContentInfo getAuthSafe() -> getAuthSafe
    org.bouncycastle.asn1.pkcs.MacData getMacData() -> getMacData
    org.bouncycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
org.bouncycastle.asn1.pkcs.PrivateKeyInfo -> org.bouncycastle.asn1.pkcs.PrivateKeyInfo:
    org.bouncycastle.asn1.ASN1OctetString privKey -> privKey
    org.bouncycastle.asn1.x509.AlgorithmIdentifier algId -> algId
    org.bouncycastle.asn1.ASN1Set attributes -> attributes
    org.bouncycastle.asn1.pkcs.PrivateKeyInfo getInstance(org.bouncycastle.asn1.ASN1TaggedObject,boolean) -> getInstance
    org.bouncycastle.asn1.pkcs.PrivateKeyInfo getInstance(java.lang.Object) -> getInstance
    org.bouncycastle.asn1.x509.AlgorithmIdentifier getPrivateKeyAlgorithm() -> getPrivateKeyAlgorithm
    org.bouncycastle.asn1.x509.AlgorithmIdentifier getAlgorithmId() -> getAlgorithmId
    org.bouncycastle.asn1.ASN1Encodable parsePrivateKey() -> parsePrivateKey
    org.bouncycastle.asn1.ASN1Primitive getPrivateKey() -> getPrivateKey
    org.bouncycastle.asn1.ASN1Set getAttributes() -> getAttributes
    org.bouncycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
org.bouncycastle.asn1.pkcs.RC2CBCParameter -> org.bouncycastle.asn1.pkcs.RC2CBCParameter:
    org.bouncycastle.asn1.ASN1Integer version -> version
    org.bouncycastle.asn1.ASN1OctetString iv -> iv
    org.bouncycastle.asn1.pkcs.RC2CBCParameter getInstance(java.lang.Object) -> getInstance
    java.math.BigInteger getRC2ParameterVersion() -> getRC2ParameterVersion
    byte[] getIV() -> getIV
    org.bouncycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
org.bouncycastle.asn1.pkcs.RSAESOAEPparams -> org.bouncycastle.asn1.pkcs.RSAESOAEPparams:
    org.bouncycastle.asn1.x509.AlgorithmIdentifier hashAlgorithm -> hashAlgorithm
    org.bouncycastle.asn1.x509.AlgorithmIdentifier maskGenAlgorithm -> maskGenAlgorithm
    org.bouncycastle.asn1.x509.AlgorithmIdentifier pSourceAlgorithm -> pSourceAlgorithm
    org.bouncycastle.asn1.x509.AlgorithmIdentifier DEFAULT_HASH_ALGORITHM -> DEFAULT_HASH_ALGORITHM
    org.bouncycastle.asn1.x509.AlgorithmIdentifier DEFAULT_MASK_GEN_FUNCTION -> DEFAULT_MASK_GEN_FUNCTION
    org.bouncycastle.asn1.x509.AlgorithmIdentifier DEFAULT_P_SOURCE_ALGORITHM -> DEFAULT_P_SOURCE_ALGORITHM
    org.bouncycastle.asn1.pkcs.RSAESOAEPparams getInstance(java.lang.Object) -> getInstance
    org.bouncycastle.asn1.x509.AlgorithmIdentifier getHashAlgorithm() -> getHashAlgorithm
    org.bouncycastle.asn1.x509.AlgorithmIdentifier getMaskGenAlgorithm() -> getMaskGenAlgorithm
    org.bouncycastle.asn1.x509.AlgorithmIdentifier getPSourceAlgorithm() -> getPSourceAlgorithm
    org.bouncycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
org.bouncycastle.asn1.pkcs.RSAPrivateKey -> org.bouncycastle.asn1.pkcs.RSAPrivateKey:
    java.math.BigInteger version -> version
    java.math.BigInteger modulus -> modulus
    java.math.BigInteger publicExponent -> publicExponent
    java.math.BigInteger privateExponent -> privateExponent
    java.math.BigInteger prime1 -> prime1
    java.math.BigInteger prime2 -> prime2
    java.math.BigInteger exponent1 -> exponent1
    java.math.BigInteger exponent2 -> exponent2
    java.math.BigInteger coefficient -> coefficient
    org.bouncycastle.asn1.ASN1Sequence otherPrimeInfos -> otherPrimeInfos
    org.bouncycastle.asn1.pkcs.RSAPrivateKey getInstance(org.bouncycastle.asn1.ASN1TaggedObject,boolean) -> getInstance
    org.bouncycastle.asn1.pkcs.RSAPrivateKey getInstance(java.lang.Object) -> getInstance
    java.math.BigInteger getVersion() -> getVersion
    java.math.BigInteger getModulus() -> getModulus
    java.math.BigInteger getPublicExponent() -> getPublicExponent
    java.math.BigInteger getPrivateExponent() -> getPrivateExponent
    java.math.BigInteger getPrime1() -> getPrime1
    java.math.BigInteger getPrime2() -> getPrime2
    java.math.BigInteger getExponent1() -> getExponent1
    java.math.BigInteger getExponent2() -> getExponent2
    java.math.BigInteger getCoefficient() -> getCoefficient
    org.bouncycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
org.bouncycastle.asn1.pkcs.RSAPrivateKeyStructure -> org.bouncycastle.asn1.pkcs.RSAPrivateKeyStructure:
    int version -> version
    java.math.BigInteger modulus -> modulus
    java.math.BigInteger publicExponent -> publicExponent
    java.math.BigInteger privateExponent -> privateExponent
    java.math.BigInteger prime1 -> prime1
    java.math.BigInteger prime2 -> prime2
    java.math.BigInteger exponent1 -> exponent1
    java.math.BigInteger exponent2 -> exponent2
    java.math.BigInteger coefficient -> coefficient
    org.bouncycastle.asn1.ASN1Sequence otherPrimeInfos -> otherPrimeInfos
    org.bouncycastle.asn1.pkcs.RSAPrivateKeyStructure getInstance(org.bouncycastle.asn1.ASN1TaggedObject,boolean) -> getInstance
    org.bouncycastle.asn1.pkcs.RSAPrivateKeyStructure getInstance(java.lang.Object) -> getInstance
    int getVersion() -> getVersion
    java.math.BigInteger getModulus() -> getModulus
    java.math.BigInteger getPublicExponent() -> getPublicExponent
    java.math.BigInteger getPrivateExponent() -> getPrivateExponent
    java.math.BigInteger getPrime1() -> getPrime1
    java.math.BigInteger getPrime2() -> getPrime2
    java.math.BigInteger getExponent1() -> getExponent1
    java.math.BigInteger getExponent2() -> getExponent2
    java.math.BigInteger getCoefficient() -> getCoefficient
    org.bouncycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
org.bouncycastle.asn1.pkcs.RSAPublicKey -> org.bouncycastle.asn1.pkcs.RSAPublicKey:
    java.math.BigInteger modulus -> modulus
    java.math.BigInteger publicExponent -> publicExponent
    org.bouncycastle.asn1.pkcs.RSAPublicKey getInstance(org.bouncycastle.asn1.ASN1TaggedObject,boolean) -> getInstance
    org.bouncycastle.asn1.pkcs.RSAPublicKey getInstance(java.lang.Object) -> getInstance
    java.math.BigInteger getModulus() -> getModulus
    java.math.BigInteger getPublicExponent() -> getPublicExponent
    org.bouncycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
org.bouncycastle.asn1.pkcs.RSASSAPSSparams -> org.bouncycastle.asn1.pkcs.RSASSAPSSparams:
    org.bouncycastle.asn1.x509.AlgorithmIdentifier hashAlgorithm -> hashAlgorithm
    org.bouncycastle.asn1.x509.AlgorithmIdentifier maskGenAlgorithm -> maskGenAlgorithm
    org.bouncycastle.asn1.ASN1Integer saltLength -> saltLength
    org.bouncycastle.asn1.ASN1Integer trailerField -> trailerField
    org.bouncycastle.asn1.x509.AlgorithmIdentifier DEFAULT_HASH_ALGORITHM -> DEFAULT_HASH_ALGORITHM
    org.bouncycastle.asn1.x509.AlgorithmIdentifier DEFAULT_MASK_GEN_FUNCTION -> DEFAULT_MASK_GEN_FUNCTION
    org.bouncycastle.asn1.ASN1Integer DEFAULT_SALT_LENGTH -> DEFAULT_SALT_LENGTH
    org.bouncycastle.asn1.ASN1Integer DEFAULT_TRAILER_FIELD -> DEFAULT_TRAILER_FIELD
    org.bouncycastle.asn1.pkcs.RSASSAPSSparams getInstance(java.lang.Object) -> getInstance
    org.bouncycastle.asn1.x509.AlgorithmIdentifier getHashAlgorithm() -> getHashAlgorithm
    org.bouncycastle.asn1.x509.AlgorithmIdentifier getMaskGenAlgorithm() -> getMaskGenAlgorithm
    java.math.BigInteger getSaltLength() -> getSaltLength
    java.math.BigInteger getTrailerField() -> getTrailerField
    org.bouncycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
org.bouncycastle.asn1.pkcs.SafeBag -> org.bouncycastle.asn1.pkcs.SafeBag:
    org.bouncycastle.asn1.ASN1ObjectIdentifier bagId -> bagId
    org.bouncycastle.asn1.ASN1Encodable bagValue -> bagValue
    org.bouncycastle.asn1.ASN1Set bagAttributes -> bagAttributes
    org.bouncycastle.asn1.pkcs.SafeBag getInstance(java.lang.Object) -> getInstance
    org.bouncycastle.asn1.ASN1ObjectIdentifier getBagId() -> getBagId
    org.bouncycastle.asn1.ASN1Encodable getBagValue() -> getBagValue
    org.bouncycastle.asn1.ASN1Set getBagAttributes() -> getBagAttributes
    org.bouncycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
org.bouncycastle.asn1.pkcs.SignedData -> org.bouncycastle.asn1.pkcs.SignedData:
    org.bouncycastle.asn1.ASN1Integer version -> version
    org.bouncycastle.asn1.ASN1Set digestAlgorithms -> digestAlgorithms
    org.bouncycastle.asn1.pkcs.ContentInfo contentInfo -> contentInfo
    org.bouncycastle.asn1.ASN1Set certificates -> certificates
    org.bouncycastle.asn1.ASN1Set crls -> crls
    org.bouncycastle.asn1.ASN1Set signerInfos -> signerInfos
    org.bouncycastle.asn1.pkcs.SignedData getInstance(java.lang.Object) -> getInstance
    org.bouncycastle.asn1.ASN1Integer getVersion() -> getVersion
    org.bouncycastle.asn1.ASN1Set getDigestAlgorithms() -> getDigestAlgorithms
    org.bouncycastle.asn1.pkcs.ContentInfo getContentInfo() -> getContentInfo
    org.bouncycastle.asn1.ASN1Set getCertificates() -> getCertificates
    org.bouncycastle.asn1.ASN1Set getCRLs() -> getCRLs
    org.bouncycastle.asn1.ASN1Set getSignerInfos() -> getSignerInfos
    org.bouncycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
org.bouncycastle.asn1.pkcs.SignerInfo -> org.bouncycastle.asn1.pkcs.SignerInfo:
    org.bouncycastle.asn1.ASN1Integer version -> version
    org.bouncycastle.asn1.pkcs.IssuerAndSerialNumber issuerAndSerialNumber -> issuerAndSerialNumber
    org.bouncycastle.asn1.x509.AlgorithmIdentifier digAlgorithm -> digAlgorithm
    org.bouncycastle.asn1.ASN1Set authenticatedAttributes -> authenticatedAttributes
    org.bouncycastle.asn1.x509.AlgorithmIdentifier digEncryptionAlgorithm -> digEncryptionAlgorithm
    org.bouncycastle.asn1.ASN1OctetString encryptedDigest -> encryptedDigest
    org.bouncycastle.asn1.ASN1Set unauthenticatedAttributes -> unauthenticatedAttributes
    org.bouncycastle.asn1.pkcs.SignerInfo getInstance(java.lang.Object) -> getInstance
    org.bouncycastle.asn1.ASN1Integer getVersion() -> getVersion
    org.bouncycastle.asn1.pkcs.IssuerAndSerialNumber getIssuerAndSerialNumber() -> getIssuerAndSerialNumber
    org.bouncycastle.asn1.ASN1Set getAuthenticatedAttributes() -> getAuthenticatedAttributes
    org.bouncycastle.asn1.x509.AlgorithmIdentifier getDigestAlgorithm() -> getDigestAlgorithm
    org.bouncycastle.asn1.ASN1OctetString getEncryptedDigest() -> getEncryptedDigest
    org.bouncycastle.asn1.x509.AlgorithmIdentifier getDigestEncryptionAlgorithm() -> getDigestEncryptionAlgorithm
    org.bouncycastle.asn1.ASN1Set getUnauthenticatedAttributes() -> getUnauthenticatedAttributes
    org.bouncycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
org.bouncycastle.asn1.sec.ECPrivateKey -> org.bouncycastle.asn1.sec.ECPrivateKey:
    org.bouncycastle.asn1.ASN1Sequence seq -> seq
    org.bouncycastle.asn1.sec.ECPrivateKey getInstance(java.lang.Object) -> getInstance
    java.math.BigInteger getKey() -> getKey
    org.bouncycastle.asn1.DERBitString getPublicKey() -> getPublicKey
    org.bouncycastle.asn1.ASN1Primitive getParameters() -> getParameters
    org.bouncycastle.asn1.ASN1Primitive getObjectInTag(int) -> getObjectInTag
    org.bouncycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
org.bouncycastle.asn1.sec.ECPrivateKeyStructure -> org.bouncycastle.asn1.sec.ECPrivateKeyStructure:
    org.bouncycastle.asn1.ASN1Sequence seq -> seq
    java.math.BigInteger getKey() -> getKey
    org.bouncycastle.asn1.DERBitString getPublicKey() -> getPublicKey
    org.bouncycastle.asn1.ASN1Primitive getParameters() -> getParameters
    org.bouncycastle.asn1.ASN1Primitive getObjectInTag(int) -> getObjectInTag
    org.bouncycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
org.bouncycastle.asn1.sec.SECNamedCurves -> org.bouncycastle.asn1.sec.SECNamedCurves:
    org.bouncycastle.asn1.x9.X9ECParametersHolder secp112r1 -> secp112r1
    org.bouncycastle.asn1.x9.X9ECParametersHolder secp112r2 -> secp112r2
    org.bouncycastle.asn1.x9.X9ECParametersHolder secp128r1 -> secp128r1
    org.bouncycastle.asn1.x9.X9ECParametersHolder secp128r2 -> secp128r2
    org.bouncycastle.asn1.x9.X9ECParametersHolder secp160k1 -> secp160k1
    org.bouncycastle.asn1.x9.X9ECParametersHolder secp160r1 -> secp160r1
    org.bouncycastle.asn1.x9.X9ECParametersHolder secp160r2 -> secp160r2
    org.bouncycastle.asn1.x9.X9ECParametersHolder secp192k1 -> secp192k1
    org.bouncycastle.asn1.x9.X9ECParametersHolder secp192r1 -> secp192r1
    org.bouncycastle.asn1.x9.X9ECParametersHolder secp224k1 -> secp224k1
    org.bouncycastle.asn1.x9.X9ECParametersHolder secp224r1 -> secp224r1
    org.bouncycastle.asn1.x9.X9ECParametersHolder secp256k1 -> secp256k1
    org.bouncycastle.asn1.x9.X9ECParametersHolder secp256r1 -> secp256r1
    org.bouncycastle.asn1.x9.X9ECParametersHolder secp384r1 -> secp384r1
    org.bouncycastle.asn1.x9.X9ECParametersHolder secp521r1 -> secp521r1
    org.bouncycastle.asn1.x9.X9ECParametersHolder sect113r1 -> sect113r1
    org.bouncycastle.asn1.x9.X9ECParametersHolder sect113r2 -> sect113r2
    org.bouncycastle.asn1.x9.X9ECParametersHolder sect131r1 -> sect131r1
    org.bouncycastle.asn1.x9.X9ECParametersHolder sect131r2 -> sect131r2
    org.bouncycastle.asn1.x9.X9ECParametersHolder sect163k1 -> sect163k1
    org.bouncycastle.asn1.x9.X9ECParametersHolder sect163r1 -> sect163r1
    org.bouncycastle.asn1.x9.X9ECParametersHolder sect163r2 -> sect163r2
    org.bouncycastle.asn1.x9.X9ECParametersHolder sect193r1 -> sect193r1
    org.bouncycastle.asn1.x9.X9ECParametersHolder sect193r2 -> sect193r2
    org.bouncycastle.asn1.x9.X9ECParametersHolder sect233k1 -> sect233k1
    org.bouncycastle.asn1.x9.X9ECParametersHolder sect233r1 -> sect233r1
    org.bouncycastle.asn1.x9.X9ECParametersHolder sect239k1 -> sect239k1
    org.bouncycastle.asn1.x9.X9ECParametersHolder sect283k1 -> sect283k1
    org.bouncycastle.asn1.x9.X9ECParametersHolder sect283r1 -> sect283r1
    org.bouncycastle.asn1.x9.X9ECParametersHolder sect409k1 -> sect409k1
    org.bouncycastle.asn1.x9.X9ECParametersHolder sect409r1 -> sect409r1
    org.bouncycastle.asn1.x9.X9ECParametersHolder sect571k1 -> sect571k1
    org.bouncycastle.asn1.x9.X9ECParametersHolder sect571r1 -> sect571r1
    java.util.Hashtable objIds -> objIds
    java.util.Hashtable curves -> curves
    java.util.Hashtable names -> names
    org.bouncycastle.math.ec.ECCurve configureCurve(org.bouncycastle.math.ec.ECCurve) -> configureCurve
    org.bouncycastle.math.ec.ECCurve configureCurveGLV(org.bouncycastle.math.ec.ECCurve,org.bouncycastle.math.ec.endo.GLVTypeBParameters) -> configureCurveGLV
    java.math.BigInteger fromHex(java.lang.String) -> fromHex
    void defineCurve(java.lang.String,org.bouncycastle.asn1.ASN1ObjectIdentifier,org.bouncycastle.asn1.x9.X9ECParametersHolder) -> defineCurve
    org.bouncycastle.asn1.x9.X9ECParameters getByName(java.lang.String) -> getByName
    org.bouncycastle.asn1.x9.X9ECParameters getByOID(org.bouncycastle.asn1.ASN1ObjectIdentifier) -> getByOID
    org.bouncycastle.asn1.ASN1ObjectIdentifier getOID(java.lang.String) -> getOID
    java.lang.String getName(org.bouncycastle.asn1.ASN1ObjectIdentifier) -> getName
    java.util.Enumeration getNames() -> getNames
    java.math.BigInteger access$000(java.lang.String) -> access$000
    org.bouncycastle.math.ec.ECCurve access$100(org.bouncycastle.math.ec.ECCurve) -> access$100
    org.bouncycastle.math.ec.ECCurve access$200(org.bouncycastle.math.ec.ECCurve,org.bouncycastle.math.ec.endo.GLVTypeBParameters) -> access$200
org.bouncycastle.asn1.sec.SECNamedCurves$1 -> org.bouncycastle.asn1.sec.SECNamedCurves$1:
    org.bouncycastle.asn1.x9.X9ECParameters createParameters() -> createParameters
org.bouncycastle.asn1.sec.SECNamedCurves$10 -> org.bouncycastle.asn1.sec.SECNamedCurves$10:
    org.bouncycastle.asn1.x9.X9ECParameters createParameters() -> createParameters
org.bouncycastle.asn1.sec.SECNamedCurves$11 -> org.bouncycastle.asn1.sec.SECNamedCurves$11:
    org.bouncycastle.asn1.x9.X9ECParameters createParameters() -> createParameters
org.bouncycastle.asn1.sec.SECNamedCurves$12 -> org.bouncycastle.asn1.sec.SECNamedCurves$12:
    org.bouncycastle.asn1.x9.X9ECParameters createParameters() -> createParameters
org.bouncycastle.asn1.sec.SECNamedCurves$13 -> org.bouncycastle.asn1.sec.SECNamedCurves$13:
    org.bouncycastle.asn1.x9.X9ECParameters createParameters() -> createParameters
org.bouncycastle.asn1.sec.SECNamedCurves$14 -> org.bouncycastle.asn1.sec.SECNamedCurves$14:
    org.bouncycastle.asn1.x9.X9ECParameters createParameters() -> createParameters
org.bouncycastle.asn1.sec.SECNamedCurves$15 -> org.bouncycastle.asn1.sec.SECNamedCurves$15:
    org.bouncycastle.asn1.x9.X9ECParameters createParameters() -> createParameters
org.bouncycastle.asn1.sec.SECNamedCurves$16 -> org.bouncycastle.asn1.sec.SECNamedCurves$16:
    org.bouncycastle.asn1.x9.X9ECParameters createParameters() -> createParameters
org.bouncycastle.asn1.sec.SECNamedCurves$17 -> org.bouncycastle.asn1.sec.SECNamedCurves$17:
    org.bouncycastle.asn1.x9.X9ECParameters createParameters() -> createParameters
org.bouncycastle.asn1.sec.SECNamedCurves$18 -> org.bouncycastle.asn1.sec.SECNamedCurves$18:
    org.bouncycastle.asn1.x9.X9ECParameters createParameters() -> createParameters
org.bouncycastle.asn1.sec.SECNamedCurves$19 -> org.bouncycastle.asn1.sec.SECNamedCurves$19:
    org.bouncycastle.asn1.x9.X9ECParameters createParameters() -> createParameters
org.bouncycastle.asn1.sec.SECNamedCurves$2 -> org.bouncycastle.asn1.sec.SECNamedCurves$2:
    org.bouncycastle.asn1.x9.X9ECParameters createParameters() -> createParameters
org.bouncycastle.asn1.sec.SECNamedCurves$20 -> org.bouncycastle.asn1.sec.SECNamedCurves$20:
    org.bouncycastle.asn1.x9.X9ECParameters createParameters() -> createParameters
org.bouncycastle.asn1.sec.SECNamedCurves$21 -> org.bouncycastle.asn1.sec.SECNamedCurves$21:
    org.bouncycastle.asn1.x9.X9ECParameters createParameters() -> createParameters
org.bouncycastle.asn1.sec.SECNamedCurves$22 -> org.bouncycastle.asn1.sec.SECNamedCurves$22:
    org.bouncycastle.asn1.x9.X9ECParameters createParameters() -> createParameters
org.bouncycastle.asn1.sec.SECNamedCurves$23 -> org.bouncycastle.asn1.sec.SECNamedCurves$23:
    org.bouncycastle.asn1.x9.X9ECParameters createParameters() -> createParameters
org.bouncycastle.asn1.sec.SECNamedCurves$24 -> org.bouncycastle.asn1.sec.SECNamedCurves$24:
    org.bouncycastle.asn1.x9.X9ECParameters createParameters() -> createParameters
org.bouncycastle.asn1.sec.SECNamedCurves$25 -> org.bouncycastle.asn1.sec.SECNamedCurves$25:
    org.bouncycastle.asn1.x9.X9ECParameters createParameters() -> createParameters
org.bouncycastle.asn1.sec.SECNamedCurves$26 -> org.bouncycastle.asn1.sec.SECNamedCurves$26:
    org.bouncycastle.asn1.x9.X9ECParameters createParameters() -> createParameters
org.bouncycastle.asn1.sec.SECNamedCurves$27 -> org.bouncycastle.asn1.sec.SECNamedCurves$27:
    org.bouncycastle.asn1.x9.X9ECParameters createParameters() -> createParameters
org.bouncycastle.asn1.sec.SECNamedCurves$28 -> org.bouncycastle.asn1.sec.SECNamedCurves$28:
    org.bouncycastle.asn1.x9.X9ECParameters createParameters() -> createParameters
org.bouncycastle.asn1.sec.SECNamedCurves$29 -> org.bouncycastle.asn1.sec.SECNamedCurves$29:
    org.bouncycastle.asn1.x9.X9ECParameters createParameters() -> createParameters
org.bouncycastle.asn1.sec.SECNamedCurves$3 -> org.bouncycastle.asn1.sec.SECNamedCurves$3:
    org.bouncycastle.asn1.x9.X9ECParameters createParameters() -> createParameters
org.bouncycastle.asn1.sec.SECNamedCurves$30 -> org.bouncycastle.asn1.sec.SECNamedCurves$30:
    org.bouncycastle.asn1.x9.X9ECParameters createParameters() -> createParameters
org.bouncycastle.asn1.sec.SECNamedCurves$31 -> org.bouncycastle.asn1.sec.SECNamedCurves$31:
    org.bouncycastle.asn1.x9.X9ECParameters createParameters() -> createParameters
org.bouncycastle.asn1.sec.SECNamedCurves$32 -> org.bouncycastle.asn1.sec.SECNamedCurves$32:
    org.bouncycastle.asn1.x9.X9ECParameters createParameters() -> createParameters
org.bouncycastle.asn1.sec.SECNamedCurves$33 -> org.bouncycastle.asn1.sec.SECNamedCurves$33:
    org.bouncycastle.asn1.x9.X9ECParameters createParameters() -> createParameters
org.bouncycastle.asn1.sec.SECNamedCurves$4 -> org.bouncycastle.asn1.sec.SECNamedCurves$4:
    org.bouncycastle.asn1.x9.X9ECParameters createParameters() -> createParameters
org.bouncycastle.asn1.sec.SECNamedCurves$5 -> org.bouncycastle.asn1.sec.SECNamedCurves$5:
    org.bouncycastle.asn1.x9.X9ECParameters createParameters() -> createParameters
org.bouncycastle.asn1.sec.SECNamedCurves$6 -> org.bouncycastle.asn1.sec.SECNamedCurves$6:
    org.bouncycastle.asn1.x9.X9ECParameters createParameters() -> createParameters
org.bouncycastle.asn1.sec.SECNamedCurves$7 -> org.bouncycastle.asn1.sec.SECNamedCurves$7:
    org.bouncycastle.asn1.x9.X9ECParameters createParameters() -> createParameters
org.bouncycastle.asn1.sec.SECNamedCurves$8 -> org.bouncycastle.asn1.sec.SECNamedCurves$8:
    org.bouncycastle.asn1.x9.X9ECParameters createParameters() -> createParameters
org.bouncycastle.asn1.sec.SECNamedCurves$9 -> org.bouncycastle.asn1.sec.SECNamedCurves$9:
    org.bouncycastle.asn1.x9.X9ECParameters createParameters() -> createParameters
org.bouncycastle.asn1.sec.SECObjectIdentifiers -> org.bouncycastle.asn1.sec.SECObjectIdentifiers:
    org.bouncycastle.asn1.ASN1ObjectIdentifier ellipticCurve -> ellipticCurve
    org.bouncycastle.asn1.ASN1ObjectIdentifier sect163k1 -> sect163k1
    org.bouncycastle.asn1.ASN1ObjectIdentifier sect163r1 -> sect163r1
    org.bouncycastle.asn1.ASN1ObjectIdentifier sect239k1 -> sect239k1
    org.bouncycastle.asn1.ASN1ObjectIdentifier sect113r1 -> sect113r1
    org.bouncycastle.asn1.ASN1ObjectIdentifier sect113r2 -> sect113r2
    org.bouncycastle.asn1.ASN1ObjectIdentifier secp112r1 -> secp112r1
    org.bouncycastle.asn1.ASN1ObjectIdentifier secp112r2 -> secp112r2
    org.bouncycastle.asn1.ASN1ObjectIdentifier secp160r1 -> secp160r1
    org.bouncycastle.asn1.ASN1ObjectIdentifier secp160k1 -> secp160k1
    org.bouncycastle.asn1.ASN1ObjectIdentifier secp256k1 -> secp256k1
    org.bouncycastle.asn1.ASN1ObjectIdentifier sect163r2 -> sect163r2
    org.bouncycastle.asn1.ASN1ObjectIdentifier sect283k1 -> sect283k1
    org.bouncycastle.asn1.ASN1ObjectIdentifier sect283r1 -> sect283r1
    org.bouncycastle.asn1.ASN1ObjectIdentifier sect131r1 -> sect131r1
    org.bouncycastle.asn1.ASN1ObjectIdentifier sect131r2 -> sect131r2
    org.bouncycastle.asn1.ASN1ObjectIdentifier sect193r1 -> sect193r1
    org.bouncycastle.asn1.ASN1ObjectIdentifier sect193r2 -> sect193r2
    org.bouncycastle.asn1.ASN1ObjectIdentifier sect233k1 -> sect233k1
    org.bouncycastle.asn1.ASN1ObjectIdentifier sect233r1 -> sect233r1
    org.bouncycastle.asn1.ASN1ObjectIdentifier secp128r1 -> secp128r1
    org.bouncycastle.asn1.ASN1ObjectIdentifier secp128r2 -> secp128r2
    org.bouncycastle.asn1.ASN1ObjectIdentifier secp160r2 -> secp160r2
    org.bouncycastle.asn1.ASN1ObjectIdentifier secp192k1 -> secp192k1
    org.bouncycastle.asn1.ASN1ObjectIdentifier secp224k1 -> secp224k1
    org.bouncycastle.asn1.ASN1ObjectIdentifier secp224r1 -> secp224r1
    org.bouncycastle.asn1.ASN1ObjectIdentifier secp384r1 -> secp384r1
    org.bouncycastle.asn1.ASN1ObjectIdentifier secp521r1 -> secp521r1
    org.bouncycastle.asn1.ASN1ObjectIdentifier sect409k1 -> sect409k1
    org.bouncycastle.asn1.ASN1ObjectIdentifier sect409r1 -> sect409r1
    org.bouncycastle.asn1.ASN1ObjectIdentifier sect571k1 -> sect571k1
    org.bouncycastle.asn1.ASN1ObjectIdentifier sect571r1 -> sect571r1
    org.bouncycastle.asn1.ASN1ObjectIdentifier secp192r1 -> secp192r1
    org.bouncycastle.asn1.ASN1ObjectIdentifier secp256r1 -> secp256r1
org.bouncycastle.asn1.smime.SMIMEAttributes -> org.bouncycastle.asn1.smime.SMIMEAttributes:
    org.bouncycastle.asn1.ASN1ObjectIdentifier smimeCapabilities -> smimeCapabilities
    org.bouncycastle.asn1.ASN1ObjectIdentifier encrypKeyPref -> encrypKeyPref
org.bouncycastle.asn1.smime.SMIMECapabilities -> org.bouncycastle.asn1.smime.SMIMECapabilities:
    org.bouncycastle.asn1.ASN1ObjectIdentifier preferSignedData -> preferSignedData
    org.bouncycastle.asn1.ASN1ObjectIdentifier canNotDecryptAny -> canNotDecryptAny
    org.bouncycastle.asn1.ASN1ObjectIdentifier sMIMECapabilitesVersions -> sMIMECapabilitesVersions
    org.bouncycastle.asn1.ASN1ObjectIdentifier dES_CBC -> dES_CBC
    org.bouncycastle.asn1.ASN1ObjectIdentifier dES_EDE3_CBC -> dES_EDE3_CBC
    org.bouncycastle.asn1.ASN1ObjectIdentifier rC2_CBC -> rC2_CBC
    org.bouncycastle.asn1.ASN1Sequence capabilities -> capabilities
    org.bouncycastle.asn1.smime.SMIMECapabilities getInstance(java.lang.Object) -> getInstance
    java.util.Vector getCapabilities(org.bouncycastle.asn1.ASN1ObjectIdentifier) -> getCapabilities
    org.bouncycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
org.bouncycastle.asn1.smime.SMIMECapabilitiesAttribute -> org.bouncycastle.asn1.smime.SMIMECapabilitiesAttribute:
org.bouncycastle.asn1.smime.SMIMECapability -> org.bouncycastle.asn1.smime.SMIMECapability:
    org.bouncycastle.asn1.ASN1ObjectIdentifier preferSignedData -> preferSignedData
    org.bouncycastle.asn1.ASN1ObjectIdentifier canNotDecryptAny -> canNotDecryptAny
    org.bouncycastle.asn1.ASN1ObjectIdentifier sMIMECapabilitiesVersions -> sMIMECapabilitiesVersions
    org.bouncycastle.asn1.ASN1ObjectIdentifier dES_CBC -> dES_CBC
    org.bouncycastle.asn1.ASN1ObjectIdentifier dES_EDE3_CBC -> dES_EDE3_CBC
    org.bouncycastle.asn1.ASN1ObjectIdentifier rC2_CBC -> rC2_CBC
    org.bouncycastle.asn1.ASN1ObjectIdentifier aES128_CBC -> aES128_CBC
    org.bouncycastle.asn1.ASN1ObjectIdentifier aES192_CBC -> aES192_CBC
    org.bouncycastle.asn1.ASN1ObjectIdentifier aES256_CBC -> aES256_CBC
    org.bouncycastle.asn1.ASN1ObjectIdentifier capabilityID -> capabilityID
    org.bouncycastle.asn1.ASN1Encodable parameters -> parameters
    org.bouncycastle.asn1.smime.SMIMECapability getInstance(java.lang.Object) -> getInstance
    org.bouncycastle.asn1.ASN1ObjectIdentifier getCapabilityID() -> getCapabilityID
    org.bouncycastle.asn1.ASN1Encodable getParameters() -> getParameters
    org.bouncycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
org.bouncycastle.asn1.smime.SMIMECapabilityVector -> org.bouncycastle.asn1.smime.SMIMECapabilityVector:
    org.bouncycastle.asn1.ASN1EncodableVector capabilities -> capabilities
    void addCapability(org.bouncycastle.asn1.ASN1ObjectIdentifier) -> addCapability
    void addCapability(org.bouncycastle.asn1.ASN1ObjectIdentifier,int) -> addCapability
    void addCapability(org.bouncycastle.asn1.ASN1ObjectIdentifier,org.bouncycastle.asn1.ASN1Encodable) -> addCapability
    org.bouncycastle.asn1.ASN1EncodableVector toASN1EncodableVector() -> toASN1EncodableVector
org.bouncycastle.asn1.smime.SMIMEEncryptionKeyPreferenceAttribute -> org.bouncycastle.asn1.smime.SMIMEEncryptionKeyPreferenceAttribute:
org.bouncycastle.asn1.teletrust.TeleTrusTNamedCurves -> org.bouncycastle.asn1.teletrust.TeleTrusTNamedCurves:
    org.bouncycastle.asn1.x9.X9ECParametersHolder brainpoolP160r1 -> brainpoolP160r1
    org.bouncycastle.asn1.x9.X9ECParametersHolder brainpoolP160t1 -> brainpoolP160t1
    org.bouncycastle.asn1.x9.X9ECParametersHolder brainpoolP192r1 -> brainpoolP192r1
    org.bouncycastle.asn1.x9.X9ECParametersHolder brainpoolP192t1 -> brainpoolP192t1
    org.bouncycastle.asn1.x9.X9ECParametersHolder brainpoolP224r1 -> brainpoolP224r1
    org.bouncycastle.asn1.x9.X9ECParametersHolder brainpoolP224t1 -> brainpoolP224t1
    org.bouncycastle.asn1.x9.X9ECParametersHolder brainpoolP256r1 -> brainpoolP256r1
    org.bouncycastle.asn1.x9.X9ECParametersHolder brainpoolP256t1 -> brainpoolP256t1
    org.bouncycastle.asn1.x9.X9ECParametersHolder brainpoolP320r1 -> brainpoolP320r1
    org.bouncycastle.asn1.x9.X9ECParametersHolder brainpoolP320t1 -> brainpoolP320t1
    org.bouncycastle.asn1.x9.X9ECParametersHolder brainpoolP384r1 -> brainpoolP384r1
    org.bouncycastle.asn1.x9.X9ECParametersHolder brainpoolP384t1 -> brainpoolP384t1
    org.bouncycastle.asn1.x9.X9ECParametersHolder brainpoolP512r1 -> brainpoolP512r1
    org.bouncycastle.asn1.x9.X9ECParametersHolder brainpoolP512t1 -> brainpoolP512t1
    java.util.Hashtable objIds -> objIds
    java.util.Hashtable curves -> curves
    java.util.Hashtable names -> names
    org.bouncycastle.math.ec.ECCurve configureCurve(org.bouncycastle.math.ec.ECCurve) -> configureCurve
    void defineCurve(java.lang.String,org.bouncycastle.asn1.ASN1ObjectIdentifier,org.bouncycastle.asn1.x9.X9ECParametersHolder) -> defineCurve
    org.bouncycastle.asn1.x9.X9ECParameters getByName(java.lang.String) -> getByName
    org.bouncycastle.asn1.x9.X9ECParameters getByOID(org.bouncycastle.asn1.ASN1ObjectIdentifier) -> getByOID
    org.bouncycastle.asn1.ASN1ObjectIdentifier getOID(java.lang.String) -> getOID
    java.lang.String getName(org.bouncycastle.asn1.ASN1ObjectIdentifier) -> getName
    java.util.Enumeration getNames() -> getNames
    org.bouncycastle.asn1.ASN1ObjectIdentifier getOID(short,boolean) -> getOID
    org.bouncycastle.math.ec.ECCurve access$000(org.bouncycastle.math.ec.ECCurve) -> access$000
org.bouncycastle.asn1.teletrust.TeleTrusTNamedCurves$1 -> org.bouncycastle.asn1.teletrust.TeleTrusTNamedCurves$1:
    org.bouncycastle.asn1.x9.X9ECParameters createParameters() -> createParameters
org.bouncycastle.asn1.teletrust.TeleTrusTNamedCurves$10 -> org.bouncycastle.asn1.teletrust.TeleTrusTNamedCurves$10:
    org.bouncycastle.asn1.x9.X9ECParameters createParameters() -> createParameters
org.bouncycastle.asn1.teletrust.TeleTrusTNamedCurves$11 -> org.bouncycastle.asn1.teletrust.TeleTrusTNamedCurves$11:
    org.bouncycastle.asn1.x9.X9ECParameters createParameters() -> createParameters
org.bouncycastle.asn1.teletrust.TeleTrusTNamedCurves$12 -> org.bouncycastle.asn1.teletrust.TeleTrusTNamedCurves$12:
    org.bouncycastle.asn1.x9.X9ECParameters createParameters() -> createParameters
org.bouncycastle.asn1.teletrust.TeleTrusTNamedCurves$13 -> org.bouncycastle.asn1.teletrust.TeleTrusTNamedCurves$13:
    org.bouncycastle.asn1.x9.X9ECParameters createParameters() -> createParameters
org.bouncycastle.asn1.teletrust.TeleTrusTNamedCurves$14 -> org.bouncycastle.asn1.teletrust.TeleTrusTNamedCurves$14:
    org.bouncycastle.asn1.x9.X9ECParameters createParameters() -> createParameters
org.bouncycastle.asn1.teletrust.TeleTrusTNamedCurves$2 -> org.bouncycastle.asn1.teletrust.TeleTrusTNamedCurves$2:
    org.bouncycastle.asn1.x9.X9ECParameters createParameters() -> createParameters
org.bouncycastle.asn1.teletrust.TeleTrusTNamedCurves$3 -> org.bouncycastle.asn1.teletrust.TeleTrusTNamedCurves$3:
    org.bouncycastle.asn1.x9.X9ECParameters createParameters() -> createParameters
org.bouncycastle.asn1.teletrust.TeleTrusTNamedCurves$4 -> org.bouncycastle.asn1.teletrust.TeleTrusTNamedCurves$4:
    org.bouncycastle.asn1.x9.X9ECParameters createParameters() -> createParameters
org.bouncycastle.asn1.teletrust.TeleTrusTNamedCurves$5 -> org.bouncycastle.asn1.teletrust.TeleTrusTNamedCurves$5:
    org.bouncycastle.asn1.x9.X9ECParameters createParameters() -> createParameters
org.bouncycastle.asn1.teletrust.TeleTrusTNamedCurves$6 -> org.bouncycastle.asn1.teletrust.TeleTrusTNamedCurves$6:
    org.bouncycastle.asn1.x9.X9ECParameters createParameters() -> createParameters
org.bouncycastle.asn1.teletrust.TeleTrusTNamedCurves$7 -> org.bouncycastle.asn1.teletrust.TeleTrusTNamedCurves$7:
    org.bouncycastle.asn1.x9.X9ECParameters createParameters() -> createParameters
org.bouncycastle.asn1.teletrust.TeleTrusTNamedCurves$8 -> org.bouncycastle.asn1.teletrust.TeleTrusTNamedCurves$8:
    org.bouncycastle.asn1.x9.X9ECParameters createParameters() -> createParameters
org.bouncycastle.asn1.teletrust.TeleTrusTNamedCurves$9 -> org.bouncycastle.asn1.teletrust.TeleTrusTNamedCurves$9:
    org.bouncycastle.asn1.x9.X9ECParameters createParameters() -> createParameters
org.bouncycastle.asn1.teletrust.TeleTrusTObjectIdentifiers -> org.bouncycastle.asn1.teletrust.TeleTrusTObjectIdentifiers:
    org.bouncycastle.asn1.ASN1ObjectIdentifier teleTrusTAlgorithm -> teleTrusTAlgorithm
    org.bouncycastle.asn1.ASN1ObjectIdentifier ripemd160 -> ripemd160
    org.bouncycastle.asn1.ASN1ObjectIdentifier ripemd128 -> ripemd128
    org.bouncycastle.asn1.ASN1ObjectIdentifier ripemd256 -> ripemd256
    org.bouncycastle.asn1.ASN1ObjectIdentifier teleTrusTRSAsignatureAlgorithm -> teleTrusTRSAsignatureAlgorithm
    org.bouncycastle.asn1.ASN1ObjectIdentifier rsaSignatureWithripemd160 -> rsaSignatureWithripemd160
    org.bouncycastle.asn1.ASN1ObjectIdentifier rsaSignatureWithripemd128 -> rsaSignatureWithripemd128
    org.bouncycastle.asn1.ASN1ObjectIdentifier rsaSignatureWithripemd256 -> rsaSignatureWithripemd256
    org.bouncycastle.asn1.ASN1ObjectIdentifier ecSign -> ecSign
    org.bouncycastle.asn1.ASN1ObjectIdentifier ecSignWithSha1 -> ecSignWithSha1
    org.bouncycastle.asn1.ASN1ObjectIdentifier ecSignWithRipemd160 -> ecSignWithRipemd160
    org.bouncycastle.asn1.ASN1ObjectIdentifier ecc_brainpool -> ecc_brainpool
    org.bouncycastle.asn1.ASN1ObjectIdentifier ellipticCurve -> ellipticCurve
    org.bouncycastle.asn1.ASN1ObjectIdentifier versionOne -> versionOne
    org.bouncycastle.asn1.ASN1ObjectIdentifier brainpoolP160r1 -> brainpoolP160r1
    org.bouncycastle.asn1.ASN1ObjectIdentifier brainpoolP160t1 -> brainpoolP160t1
    org.bouncycastle.asn1.ASN1ObjectIdentifier brainpoolP192r1 -> brainpoolP192r1
    org.bouncycastle.asn1.ASN1ObjectIdentifier brainpoolP192t1 -> brainpoolP192t1
    org.bouncycastle.asn1.ASN1ObjectIdentifier brainpoolP224r1 -> brainpoolP224r1
    org.bouncycastle.asn1.ASN1ObjectIdentifier brainpoolP224t1 -> brainpoolP224t1
    org.bouncycastle.asn1.ASN1ObjectIdentifier brainpoolP256r1 -> brainpoolP256r1
    org.bouncycastle.asn1.ASN1ObjectIdentifier brainpoolP256t1 -> brainpoolP256t1
    org.bouncycastle.asn1.ASN1ObjectIdentifier brainpoolP320r1 -> brainpoolP320r1
    org.bouncycastle.asn1.ASN1ObjectIdentifier brainpoolP320t1 -> brainpoolP320t1
    org.bouncycastle.asn1.ASN1ObjectIdentifier brainpoolP384r1 -> brainpoolP384r1
    org.bouncycastle.asn1.ASN1ObjectIdentifier brainpoolP384t1 -> brainpoolP384t1
    org.bouncycastle.asn1.ASN1ObjectIdentifier brainpoolP512r1 -> brainpoolP512r1
    org.bouncycastle.asn1.ASN1ObjectIdentifier brainpoolP512t1 -> brainpoolP512t1
org.bouncycastle.asn1.tsp.Accuracy -> org.bouncycastle.asn1.tsp.Accuracy:
    org.bouncycastle.asn1.ASN1Integer seconds -> seconds
    org.bouncycastle.asn1.ASN1Integer millis -> millis
    org.bouncycastle.asn1.ASN1Integer micros -> micros
    int MIN_MILLIS -> MIN_MILLIS
    int MAX_MILLIS -> MAX_MILLIS
    int MIN_MICROS -> MIN_MICROS
    int MAX_MICROS -> MAX_MICROS
    org.bouncycastle.asn1.tsp.Accuracy getInstance(java.lang.Object) -> getInstance
    org.bouncycastle.asn1.ASN1Integer getSeconds() -> getSeconds
    org.bouncycastle.asn1.ASN1Integer getMillis() -> getMillis
    org.bouncycastle.asn1.ASN1Integer getMicros() -> getMicros
    org.bouncycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
org.bouncycastle.asn1.tsp.MessageImprint -> org.bouncycastle.asn1.tsp.MessageImprint:
    org.bouncycastle.asn1.x509.AlgorithmIdentifier hashAlgorithm -> hashAlgorithm
    byte[] hashedMessage -> hashedMessage
    org.bouncycastle.asn1.tsp.MessageImprint getInstance(java.lang.Object) -> getInstance
    org.bouncycastle.asn1.x509.AlgorithmIdentifier getHashAlgorithm() -> getHashAlgorithm
    byte[] getHashedMessage() -> getHashedMessage
    org.bouncycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
org.bouncycastle.asn1.tsp.TSTInfo -> org.bouncycastle.asn1.tsp.TSTInfo:
    org.bouncycastle.asn1.ASN1Integer version -> version
    org.bouncycastle.asn1.ASN1ObjectIdentifier tsaPolicyId -> tsaPolicyId
    org.bouncycastle.asn1.tsp.MessageImprint messageImprint -> messageImprint
    org.bouncycastle.asn1.ASN1Integer serialNumber -> serialNumber
    org.bouncycastle.asn1.ASN1GeneralizedTime genTime -> genTime
    org.bouncycastle.asn1.tsp.Accuracy accuracy -> accuracy
    org.bouncycastle.asn1.ASN1Boolean ordering -> ordering
    org.bouncycastle.asn1.ASN1Integer nonce -> nonce
    org.bouncycastle.asn1.x509.GeneralName tsa -> tsa
    org.bouncycastle.asn1.x509.Extensions extensions -> extensions
    org.bouncycastle.asn1.tsp.TSTInfo getInstance(java.lang.Object) -> getInstance
    org.bouncycastle.asn1.ASN1Integer getVersion() -> getVersion
    org.bouncycastle.asn1.tsp.MessageImprint getMessageImprint() -> getMessageImprint
    org.bouncycastle.asn1.ASN1ObjectIdentifier getPolicy() -> getPolicy
    org.bouncycastle.asn1.ASN1Integer getSerialNumber() -> getSerialNumber
    org.bouncycastle.asn1.tsp.Accuracy getAccuracy() -> getAccuracy
    org.bouncycastle.asn1.ASN1GeneralizedTime getGenTime() -> getGenTime
    org.bouncycastle.asn1.ASN1Boolean getOrdering() -> getOrdering
    org.bouncycastle.asn1.ASN1Integer getNonce() -> getNonce
    org.bouncycastle.asn1.x509.GeneralName getTsa() -> getTsa
    org.bouncycastle.asn1.x509.Extensions getExtensions() -> getExtensions
    org.bouncycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
org.bouncycastle.asn1.tsp.TimeStampReq -> org.bouncycastle.asn1.tsp.TimeStampReq:
    org.bouncycastle.asn1.ASN1Integer version -> version
    org.bouncycastle.asn1.tsp.MessageImprint messageImprint -> messageImprint
    org.bouncycastle.asn1.ASN1ObjectIdentifier tsaPolicy -> tsaPolicy
    org.bouncycastle.asn1.ASN1Integer nonce -> nonce
    org.bouncycastle.asn1.ASN1Boolean certReq -> certReq
    org.bouncycastle.asn1.x509.Extensions extensions -> extensions
    org.bouncycastle.asn1.tsp.TimeStampReq getInstance(java.lang.Object) -> getInstance
    org.bouncycastle.asn1.ASN1Integer getVersion() -> getVersion
    org.bouncycastle.asn1.tsp.MessageImprint getMessageImprint() -> getMessageImprint
    org.bouncycastle.asn1.ASN1ObjectIdentifier getReqPolicy() -> getReqPolicy
    org.bouncycastle.asn1.ASN1Integer getNonce() -> getNonce
    org.bouncycastle.asn1.ASN1Boolean getCertReq() -> getCertReq
    org.bouncycastle.asn1.x509.Extensions getExtensions() -> getExtensions
    org.bouncycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
org.bouncycastle.asn1.tsp.TimeStampResp -> org.bouncycastle.asn1.tsp.TimeStampResp:
    org.bouncycastle.asn1.cmp.PKIStatusInfo pkiStatusInfo -> pkiStatusInfo
    org.bouncycastle.asn1.cms.ContentInfo timeStampToken -> timeStampToken
    org.bouncycastle.asn1.tsp.TimeStampResp getInstance(java.lang.Object) -> getInstance
    org.bouncycastle.asn1.cmp.PKIStatusInfo getStatus() -> getStatus
    org.bouncycastle.asn1.cms.ContentInfo getTimeStampToken() -> getTimeStampToken
    org.bouncycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
org.bouncycastle.asn1.ua.DSTU4145BinaryField -> org.bouncycastle.asn1.ua.DSTU4145BinaryField:
    int m -> m
    int k -> k
    int j -> j
    int l -> l
    org.bouncycastle.asn1.ua.DSTU4145BinaryField getInstance(java.lang.Object) -> getInstance
    int getM() -> getM
    int getK1() -> getK1
    int getK2() -> getK2
    int getK3() -> getK3
    org.bouncycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
org.bouncycastle.asn1.ua.DSTU4145ECBinary -> org.bouncycastle.asn1.ua.DSTU4145ECBinary:
    java.math.BigInteger version -> version
    org.bouncycastle.asn1.ua.DSTU4145BinaryField f -> f
    org.bouncycastle.asn1.ASN1Integer a -> a
    org.bouncycastle.asn1.ASN1OctetString b -> b
    org.bouncycastle.asn1.ASN1Integer n -> n
    org.bouncycastle.asn1.ASN1OctetString bp -> bp
    org.bouncycastle.asn1.ua.DSTU4145ECBinary getInstance(java.lang.Object) -> getInstance
    org.bouncycastle.asn1.ua.DSTU4145BinaryField getField() -> getField
    java.math.BigInteger getA() -> getA
    byte[] getB() -> getB
    java.math.BigInteger getN() -> getN
    byte[] getG() -> getG
    org.bouncycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
org.bouncycastle.asn1.ua.DSTU4145NamedCurves -> org.bouncycastle.asn1.ua.DSTU4145NamedCurves:
    java.math.BigInteger ZERO -> ZERO
    java.math.BigInteger ONE -> ONE
    org.bouncycastle.crypto.params.ECDomainParameters[] params -> params
    org.bouncycastle.asn1.ASN1ObjectIdentifier[] oids -> oids
    java.lang.String oidBase -> oidBase
    org.bouncycastle.asn1.ASN1ObjectIdentifier[] getOIDs() -> getOIDs
    org.bouncycastle.crypto.params.ECDomainParameters getByOID(org.bouncycastle.asn1.ASN1ObjectIdentifier) -> getByOID
org.bouncycastle.asn1.ua.DSTU4145Params -> org.bouncycastle.asn1.ua.DSTU4145Params:
    byte[] DEFAULT_DKE -> DEFAULT_DKE
    org.bouncycastle.asn1.ASN1ObjectIdentifier namedCurve -> namedCurve
    org.bouncycastle.asn1.ua.DSTU4145ECBinary ecbinary -> ecbinary
    byte[] dke -> dke
    boolean isNamedCurve() -> isNamedCurve
    org.bouncycastle.asn1.ua.DSTU4145ECBinary getECBinary() -> getECBinary
    byte[] getDKE() -> getDKE
    byte[] getDefaultDKE() -> getDefaultDKE
    org.bouncycastle.asn1.ASN1ObjectIdentifier getNamedCurve() -> getNamedCurve
    org.bouncycastle.asn1.ua.DSTU4145Params getInstance(java.lang.Object) -> getInstance
    org.bouncycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
org.bouncycastle.asn1.ua.DSTU4145PointEncoder -> org.bouncycastle.asn1.ua.DSTU4145PointEncoder:
    org.bouncycastle.math.ec.ECFieldElement trace(org.bouncycastle.math.ec.ECFieldElement) -> trace
    org.bouncycastle.math.ec.ECFieldElement solveQuadraticEquation(org.bouncycastle.math.ec.ECCurve,org.bouncycastle.math.ec.ECFieldElement) -> solveQuadraticEquation
    byte[] encodePoint(org.bouncycastle.math.ec.ECPoint) -> encodePoint
    org.bouncycastle.math.ec.ECPoint decodePoint(org.bouncycastle.math.ec.ECCurve,byte[]) -> decodePoint
org.bouncycastle.asn1.ua.DSTU4145PublicKey -> org.bouncycastle.asn1.ua.DSTU4145PublicKey:
    org.bouncycastle.asn1.ASN1OctetString pubKey -> pubKey
    org.bouncycastle.asn1.ua.DSTU4145PublicKey getInstance(java.lang.Object) -> getInstance
    org.bouncycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
org.bouncycastle.asn1.ua.UAObjectIdentifiers -> org.bouncycastle.asn1.ua.UAObjectIdentifiers:
    org.bouncycastle.asn1.ASN1ObjectIdentifier UaOid -> UaOid
    org.bouncycastle.asn1.ASN1ObjectIdentifier dstu4145le -> dstu4145le
    org.bouncycastle.asn1.ASN1ObjectIdentifier dstu4145be -> dstu4145be
org.bouncycastle.asn1.util.ASN1Dump -> org.bouncycastle.asn1.util.ASN1Dump:
    java.lang.String TAB -> TAB
    int SAMPLE_SIZE -> SAMPLE_SIZE
    void _dumpAsString(java.lang.String,boolean,org.bouncycastle.asn1.ASN1Primitive,java.lang.StringBuffer) -> _dumpAsString
    java.lang.String outputApplicationSpecific(java.lang.String,java.lang.String,boolean,org.bouncycastle.asn1.ASN1Primitive,java.lang.String) -> outputApplicationSpecific
    java.lang.String dumpAsString(java.lang.Object) -> dumpAsString
    java.lang.String dumpAsString(java.lang.Object,boolean) -> dumpAsString
    java.lang.String dumpBinaryDataAsString(java.lang.String,byte[]) -> dumpBinaryDataAsString
    java.lang.String calculateAscString(byte[],int,int) -> calculateAscString
org.bouncycastle.asn1.util.DERDump -> org.bouncycastle.asn1.util.DERDump:
    java.lang.String dumpAsString(org.bouncycastle.asn1.ASN1Primitive) -> dumpAsString
    java.lang.String dumpAsString(org.bouncycastle.asn1.ASN1Encodable) -> dumpAsString
org.bouncycastle.asn1.util.Dump -> org.bouncycastle.asn1.util.Dump:
    void main(java.lang.String[]) -> main
org.bouncycastle.asn1.x500.AttributeTypeAndValue -> org.bouncycastle.asn1.x500.AttributeTypeAndValue:
    org.bouncycastle.asn1.ASN1ObjectIdentifier type -> type
    org.bouncycastle.asn1.ASN1Encodable value -> value
    org.bouncycastle.asn1.x500.AttributeTypeAndValue getInstance(java.lang.Object) -> getInstance
    org.bouncycastle.asn1.ASN1ObjectIdentifier getType() -> getType
    org.bouncycastle.asn1.ASN1Encodable getValue() -> getValue
    org.bouncycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
org.bouncycastle.asn1.x500.DirectoryString -> org.bouncycastle.asn1.x500.DirectoryString:
    org.bouncycastle.asn1.ASN1String string -> string
    org.bouncycastle.asn1.x500.DirectoryString getInstance(java.lang.Object) -> getInstance
    org.bouncycastle.asn1.x500.DirectoryString getInstance(org.bouncycastle.asn1.ASN1TaggedObject,boolean) -> getInstance
    java.lang.String getString() -> getString
    java.lang.String toString() -> toString
    org.bouncycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
org.bouncycastle.asn1.x500.RDN -> org.bouncycastle.asn1.x500.RDN:
    org.bouncycastle.asn1.ASN1Set values -> values
    org.bouncycastle.asn1.x500.RDN getInstance(java.lang.Object) -> getInstance
    boolean isMultiValued() -> isMultiValued
    int size() -> size
    org.bouncycastle.asn1.x500.AttributeTypeAndValue getFirst() -> getFirst
    org.bouncycastle.asn1.x500.AttributeTypeAndValue[] getTypesAndValues() -> getTypesAndValues
    org.bouncycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
org.bouncycastle.asn1.x500.X500Name -> org.bouncycastle.asn1.x500.X500Name:
    org.bouncycastle.asn1.x500.X500NameStyle defaultStyle -> defaultStyle
    boolean isHashCodeCalculated -> isHashCodeCalculated
    int hashCodeValue -> hashCodeValue
    org.bouncycastle.asn1.x500.X500NameStyle style -> style
    org.bouncycastle.asn1.x500.RDN[] rdns -> rdns
    org.bouncycastle.asn1.x500.X500Name getInstance(org.bouncycastle.asn1.ASN1TaggedObject,boolean) -> getInstance
    org.bouncycastle.asn1.x500.X500Name getInstance(java.lang.Object) -> getInstance
    org.bouncycastle.asn1.x500.X500Name getInstance(org.bouncycastle.asn1.x500.X500NameStyle,java.lang.Object) -> getInstance
    org.bouncycastle.asn1.x500.RDN[] getRDNs() -> getRDNs
    org.bouncycastle.asn1.ASN1ObjectIdentifier[] getAttributeTypes() -> getAttributeTypes
    org.bouncycastle.asn1.x500.RDN[] getRDNs(org.bouncycastle.asn1.ASN1ObjectIdentifier) -> getRDNs
    org.bouncycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    java.lang.String toString() -> toString
    void setDefaultStyle(org.bouncycastle.asn1.x500.X500NameStyle) -> setDefaultStyle
    org.bouncycastle.asn1.x500.X500NameStyle getDefaultStyle() -> getDefaultStyle
org.bouncycastle.asn1.x500.X500NameBuilder -> org.bouncycastle.asn1.x500.X500NameBuilder:
    org.bouncycastle.asn1.x500.X500NameStyle template -> template
    java.util.Vector rdns -> rdns
    org.bouncycastle.asn1.x500.X500NameBuilder addRDN(org.bouncycastle.asn1.ASN1ObjectIdentifier,java.lang.String) -> addRDN
    org.bouncycastle.asn1.x500.X500NameBuilder addRDN(org.bouncycastle.asn1.ASN1ObjectIdentifier,org.bouncycastle.asn1.ASN1Encodable) -> addRDN
    org.bouncycastle.asn1.x500.X500NameBuilder addRDN(org.bouncycastle.asn1.x500.AttributeTypeAndValue) -> addRDN
    org.bouncycastle.asn1.x500.X500NameBuilder addMultiValuedRDN(org.bouncycastle.asn1.ASN1ObjectIdentifier[],java.lang.String[]) -> addMultiValuedRDN
    org.bouncycastle.asn1.x500.X500NameBuilder addMultiValuedRDN(org.bouncycastle.asn1.ASN1ObjectIdentifier[],org.bouncycastle.asn1.ASN1Encodable[]) -> addMultiValuedRDN
    org.bouncycastle.asn1.x500.X500NameBuilder addMultiValuedRDN(org.bouncycastle.asn1.x500.AttributeTypeAndValue[]) -> addMultiValuedRDN
    org.bouncycastle.asn1.x500.X500Name build() -> build
org.bouncycastle.asn1.x500.X500NameStyle -> org.bouncycastle.asn1.x500.X500NameStyle:
    org.bouncycastle.asn1.ASN1Encodable stringToValue(org.bouncycastle.asn1.ASN1ObjectIdentifier,java.lang.String) -> stringToValue
    org.bouncycastle.asn1.ASN1ObjectIdentifier attrNameToOID(java.lang.String) -> attrNameToOID
    org.bouncycastle.asn1.x500.RDN[] fromString(java.lang.String) -> fromString
    boolean areEqual(org.bouncycastle.asn1.x500.X500Name,org.bouncycastle.asn1.x500.X500Name) -> areEqual
    int calculateHashCode(org.bouncycastle.asn1.x500.X500Name) -> calculateHashCode
    java.lang.String toString(org.bouncycastle.asn1.x500.X500Name) -> toString
    java.lang.String oidToDisplayName(org.bouncycastle.asn1.ASN1ObjectIdentifier) -> oidToDisplayName
    java.lang.String[] oidToAttrNames(org.bouncycastle.asn1.ASN1ObjectIdentifier) -> oidToAttrNames
org.bouncycastle.asn1.x500.style.AbstractX500NameStyle -> org.bouncycastle.asn1.x500.style.AbstractX500NameStyle:
    java.util.Hashtable copyHashTable(java.util.Hashtable) -> copyHashTable
    int calcHashCode(org.bouncycastle.asn1.ASN1Encodable) -> calcHashCode
    int calculateHashCode(org.bouncycastle.asn1.x500.X500Name) -> calculateHashCode
    org.bouncycastle.asn1.ASN1Encodable stringToValue(org.bouncycastle.asn1.ASN1ObjectIdentifier,java.lang.String) -> stringToValue
    org.bouncycastle.asn1.ASN1Encodable encodeStringValue(org.bouncycastle.asn1.ASN1ObjectIdentifier,java.lang.String) -> encodeStringValue
    boolean areEqual(org.bouncycastle.asn1.x500.X500Name,org.bouncycastle.asn1.x500.X500Name) -> areEqual
    boolean foundMatch(boolean,org.bouncycastle.asn1.x500.RDN,org.bouncycastle.asn1.x500.RDN[]) -> foundMatch
    boolean rdnAreEqual(org.bouncycastle.asn1.x500.RDN,org.bouncycastle.asn1.x500.RDN) -> rdnAreEqual
org.bouncycastle.asn1.x500.style.BCStrictStyle -> org.bouncycastle.asn1.x500.style.BCStrictStyle:
    org.bouncycastle.asn1.x500.X500NameStyle INSTANCE -> INSTANCE
    boolean areEqual(org.bouncycastle.asn1.x500.X500Name,org.bouncycastle.asn1.x500.X500Name) -> areEqual
org.bouncycastle.asn1.x500.style.BCStyle -> org.bouncycastle.asn1.x500.style.BCStyle:
    org.bouncycastle.asn1.ASN1ObjectIdentifier C -> C
    org.bouncycastle.asn1.ASN1ObjectIdentifier O -> O
    org.bouncycastle.asn1.ASN1ObjectIdentifier OU -> OU
    org.bouncycastle.asn1.ASN1ObjectIdentifier T -> T
    org.bouncycastle.asn1.ASN1ObjectIdentifier CN -> CN
    org.bouncycastle.asn1.ASN1ObjectIdentifier SN -> SN
    org.bouncycastle.asn1.ASN1ObjectIdentifier STREET -> STREET
    org.bouncycastle.asn1.ASN1ObjectIdentifier SERIALNUMBER -> SERIALNUMBER
    org.bouncycastle.asn1.ASN1ObjectIdentifier L -> L
    org.bouncycastle.asn1.ASN1ObjectIdentifier ST -> ST
    org.bouncycastle.asn1.ASN1ObjectIdentifier SURNAME -> SURNAME
    org.bouncycastle.asn1.ASN1ObjectIdentifier GIVENNAME -> GIVENNAME
    org.bouncycastle.asn1.ASN1ObjectIdentifier INITIALS -> INITIALS
    org.bouncycastle.asn1.ASN1ObjectIdentifier GENERATION -> GENERATION
    org.bouncycastle.asn1.ASN1ObjectIdentifier UNIQUE_IDENTIFIER -> UNIQUE_IDENTIFIER
    org.bouncycastle.asn1.ASN1ObjectIdentifier BUSINESS_CATEGORY -> BUSINESS_CATEGORY
    org.bouncycastle.asn1.ASN1ObjectIdentifier POSTAL_CODE -> POSTAL_CODE
    org.bouncycastle.asn1.ASN1ObjectIdentifier DN_QUALIFIER -> DN_QUALIFIER
    org.bouncycastle.asn1.ASN1ObjectIdentifier PSEUDONYM -> PSEUDONYM
    org.bouncycastle.asn1.ASN1ObjectIdentifier DATE_OF_BIRTH -> DATE_OF_BIRTH
    org.bouncycastle.asn1.ASN1ObjectIdentifier PLACE_OF_BIRTH -> PLACE_OF_BIRTH
    org.bouncycastle.asn1.ASN1ObjectIdentifier GENDER -> GENDER
    org.bouncycastle.asn1.ASN1ObjectIdentifier COUNTRY_OF_CITIZENSHIP -> COUNTRY_OF_CITIZENSHIP
    org.bouncycastle.asn1.ASN1ObjectIdentifier COUNTRY_OF_RESIDENCE -> COUNTRY_OF_RESIDENCE
    org.bouncycastle.asn1.ASN1ObjectIdentifier NAME_AT_BIRTH -> NAME_AT_BIRTH
    org.bouncycastle.asn1.ASN1ObjectIdentifier POSTAL_ADDRESS -> POSTAL_ADDRESS
    org.bouncycastle.asn1.ASN1ObjectIdentifier DMD_NAME -> DMD_NAME
    org.bouncycastle.asn1.ASN1ObjectIdentifier TELEPHONE_NUMBER -> TELEPHONE_NUMBER
    org.bouncycastle.asn1.ASN1ObjectIdentifier NAME -> NAME
    org.bouncycastle.asn1.ASN1ObjectIdentifier EmailAddress -> EmailAddress
    org.bouncycastle.asn1.ASN1ObjectIdentifier UnstructuredName -> UnstructuredName
    org.bouncycastle.asn1.ASN1ObjectIdentifier UnstructuredAddress -> UnstructuredAddress
    org.bouncycastle.asn1.ASN1ObjectIdentifier E -> E
    org.bouncycastle.asn1.ASN1ObjectIdentifier DC -> DC
    org.bouncycastle.asn1.ASN1ObjectIdentifier UID -> UID
    java.util.Hashtable DefaultSymbols -> DefaultSymbols
    java.util.Hashtable DefaultLookUp -> DefaultLookUp
    org.bouncycastle.asn1.x500.X500NameStyle INSTANCE -> INSTANCE
    java.util.Hashtable defaultLookUp -> defaultLookUp
    java.util.Hashtable defaultSymbols -> defaultSymbols
    org.bouncycastle.asn1.ASN1Encodable encodeStringValue(org.bouncycastle.asn1.ASN1ObjectIdentifier,java.lang.String) -> encodeStringValue
    java.lang.String oidToDisplayName(org.bouncycastle.asn1.ASN1ObjectIdentifier) -> oidToDisplayName
    java.lang.String[] oidToAttrNames(org.bouncycastle.asn1.ASN1ObjectIdentifier) -> oidToAttrNames
    org.bouncycastle.asn1.ASN1ObjectIdentifier attrNameToOID(java.lang.String) -> attrNameToOID
    org.bouncycastle.asn1.x500.RDN[] fromString(java.lang.String) -> fromString
    java.lang.String toString(org.bouncycastle.asn1.x500.X500Name) -> toString
org.bouncycastle.asn1.x500.style.IETFUtils -> org.bouncycastle.asn1.x500.style.IETFUtils:
    java.lang.String unescape(java.lang.String) -> unescape
    boolean isHexDigit(char) -> isHexDigit
    int convertHex(char) -> convertHex
    org.bouncycastle.asn1.x500.RDN[] rDNsFromString(java.lang.String,org.bouncycastle.asn1.x500.X500NameStyle) -> rDNsFromString
    java.lang.String[] toValueArray(java.util.Vector) -> toValueArray
    org.bouncycastle.asn1.ASN1ObjectIdentifier[] toOIDArray(java.util.Vector) -> toOIDArray
    java.lang.String[] findAttrNamesForOID(org.bouncycastle.asn1.ASN1ObjectIdentifier,java.util.Hashtable) -> findAttrNamesForOID
    org.bouncycastle.asn1.ASN1ObjectIdentifier decodeAttrName(java.lang.String,java.util.Hashtable) -> decodeAttrName
    org.bouncycastle.asn1.ASN1Encodable valueFromHexString(java.lang.String,int) -> valueFromHexString
    void appendRDN(java.lang.StringBuffer,org.bouncycastle.asn1.x500.RDN,java.util.Hashtable) -> appendRDN
    void appendTypeAndValue(java.lang.StringBuffer,org.bouncycastle.asn1.x500.AttributeTypeAndValue,java.util.Hashtable) -> appendTypeAndValue
    java.lang.String valueToString(org.bouncycastle.asn1.ASN1Encodable) -> valueToString
    java.lang.String bytesToString(byte[]) -> bytesToString
    java.lang.String canonicalize(java.lang.String) -> canonicalize
    org.bouncycastle.asn1.ASN1Primitive decodeObject(java.lang.String) -> decodeObject
    java.lang.String stripInternalSpaces(java.lang.String) -> stripInternalSpaces
    boolean rDNAreEqual(org.bouncycastle.asn1.x500.RDN,org.bouncycastle.asn1.x500.RDN) -> rDNAreEqual
    boolean atvAreEqual(org.bouncycastle.asn1.x500.AttributeTypeAndValue,org.bouncycastle.asn1.x500.AttributeTypeAndValue) -> atvAreEqual
org.bouncycastle.asn1.x500.style.RFC4519Style -> org.bouncycastle.asn1.x500.style.RFC4519Style:
    org.bouncycastle.asn1.ASN1ObjectIdentifier businessCategory -> businessCategory
    org.bouncycastle.asn1.ASN1ObjectIdentifier c -> c
    org.bouncycastle.asn1.ASN1ObjectIdentifier cn -> cn
    org.bouncycastle.asn1.ASN1ObjectIdentifier dc -> dc
    org.bouncycastle.asn1.ASN1ObjectIdentifier description -> description
    org.bouncycastle.asn1.ASN1ObjectIdentifier destinationIndicator -> destinationIndicator
    org.bouncycastle.asn1.ASN1ObjectIdentifier distinguishedName -> distinguishedName
    org.bouncycastle.asn1.ASN1ObjectIdentifier dnQualifier -> dnQualifier
    org.bouncycastle.asn1.ASN1ObjectIdentifier enhancedSearchGuide -> enhancedSearchGuide
    org.bouncycastle.asn1.ASN1ObjectIdentifier facsimileTelephoneNumber -> facsimileTelephoneNumber
    org.bouncycastle.asn1.ASN1ObjectIdentifier generationQualifier -> generationQualifier
    org.bouncycastle.asn1.ASN1ObjectIdentifier givenName -> givenName
    org.bouncycastle.asn1.ASN1ObjectIdentifier houseIdentifier -> houseIdentifier
    org.bouncycastle.asn1.ASN1ObjectIdentifier initials -> initials
    org.bouncycastle.asn1.ASN1ObjectIdentifier internationalISDNNumber -> internationalISDNNumber
    org.bouncycastle.asn1.ASN1ObjectIdentifier l -> l
    org.bouncycastle.asn1.ASN1ObjectIdentifier member -> member
    org.bouncycastle.asn1.ASN1ObjectIdentifier name -> name
    org.bouncycastle.asn1.ASN1ObjectIdentifier o -> o
    org.bouncycastle.asn1.ASN1ObjectIdentifier ou -> ou
    org.bouncycastle.asn1.ASN1ObjectIdentifier owner -> owner
    org.bouncycastle.asn1.ASN1ObjectIdentifier physicalDeliveryOfficeName -> physicalDeliveryOfficeName
    org.bouncycastle.asn1.ASN1ObjectIdentifier postalAddress -> postalAddress
    org.bouncycastle.asn1.ASN1ObjectIdentifier postalCode -> postalCode
    org.bouncycastle.asn1.ASN1ObjectIdentifier postOfficeBox -> postOfficeBox
    org.bouncycastle.asn1.ASN1ObjectIdentifier preferredDeliveryMethod -> preferredDeliveryMethod
    org.bouncycastle.asn1.ASN1ObjectIdentifier registeredAddress -> registeredAddress
    org.bouncycastle.asn1.ASN1ObjectIdentifier roleOccupant -> roleOccupant
    org.bouncycastle.asn1.ASN1ObjectIdentifier searchGuide -> searchGuide
    org.bouncycastle.asn1.ASN1ObjectIdentifier seeAlso -> seeAlso
    org.bouncycastle.asn1.ASN1ObjectIdentifier serialNumber -> serialNumber
    org.bouncycastle.asn1.ASN1ObjectIdentifier sn -> sn
    org.bouncycastle.asn1.ASN1ObjectIdentifier st -> st
    org.bouncycastle.asn1.ASN1ObjectIdentifier street -> street
    org.bouncycastle.asn1.ASN1ObjectIdentifier telephoneNumber -> telephoneNumber
    org.bouncycastle.asn1.ASN1ObjectIdentifier teletexTerminalIdentifier -> teletexTerminalIdentifier
    org.bouncycastle.asn1.ASN1ObjectIdentifier telexNumber -> telexNumber
    org.bouncycastle.asn1.ASN1ObjectIdentifier title -> title
    org.bouncycastle.asn1.ASN1ObjectIdentifier uid -> uid
    org.bouncycastle.asn1.ASN1ObjectIdentifier uniqueMember -> uniqueMember
    org.bouncycastle.asn1.ASN1ObjectIdentifier userPassword -> userPassword
    org.bouncycastle.asn1.ASN1ObjectIdentifier x121Address -> x121Address
    org.bouncycastle.asn1.ASN1ObjectIdentifier x500UniqueIdentifier -> x500UniqueIdentifier
    java.util.Hashtable DefaultSymbols -> DefaultSymbols
    java.util.Hashtable DefaultLookUp -> DefaultLookUp
    org.bouncycastle.asn1.x500.X500NameStyle INSTANCE -> INSTANCE
    java.util.Hashtable defaultLookUp -> defaultLookUp
    java.util.Hashtable defaultSymbols -> defaultSymbols
    org.bouncycastle.asn1.ASN1Encodable encodeStringValue(org.bouncycastle.asn1.ASN1ObjectIdentifier,java.lang.String) -> encodeStringValue
    java.lang.String oidToDisplayName(org.bouncycastle.asn1.ASN1ObjectIdentifier) -> oidToDisplayName
    java.lang.String[] oidToAttrNames(org.bouncycastle.asn1.ASN1ObjectIdentifier) -> oidToAttrNames
    org.bouncycastle.asn1.ASN1ObjectIdentifier attrNameToOID(java.lang.String) -> attrNameToOID
    org.bouncycastle.asn1.x500.RDN[] fromString(java.lang.String) -> fromString
    java.lang.String toString(org.bouncycastle.asn1.x500.X500Name) -> toString
org.bouncycastle.asn1.x500.style.X500NameTokenizer -> org.bouncycastle.asn1.x500.style.X500NameTokenizer:
    java.lang.String value -> value
    int index -> index
    char separator -> separator
    java.lang.StringBuffer buf -> buf
    boolean hasMoreTokens() -> hasMoreTokens
    java.lang.String nextToken() -> nextToken
org.bouncycastle.asn1.x509.AccessDescription -> org.bouncycastle.asn1.x509.AccessDescription:
    org.bouncycastle.asn1.ASN1ObjectIdentifier id_ad_caIssuers -> id_ad_caIssuers
    org.bouncycastle.asn1.ASN1ObjectIdentifier id_ad_ocsp -> id_ad_ocsp
    org.bouncycastle.asn1.ASN1ObjectIdentifier accessMethod -> accessMethod
    org.bouncycastle.asn1.x509.GeneralName accessLocation -> accessLocation
    org.bouncycastle.asn1.x509.AccessDescription getInstance(java.lang.Object) -> getInstance
    org.bouncycastle.asn1.ASN1ObjectIdentifier getAccessMethod() -> getAccessMethod
    org.bouncycastle.asn1.x509.GeneralName getAccessLocation() -> getAccessLocation
    org.bouncycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
    java.lang.String toString() -> toString
org.bouncycastle.asn1.x509.AlgorithmIdentifier -> org.bouncycastle.asn1.x509.AlgorithmIdentifier:
    org.bouncycastle.asn1.ASN1ObjectIdentifier objectId -> objectId
    org.bouncycastle.asn1.ASN1Encodable parameters -> parameters
    boolean parametersDefined -> parametersDefined
    org.bouncycastle.asn1.x509.AlgorithmIdentifier getInstance(org.bouncycastle.asn1.ASN1TaggedObject,boolean) -> getInstance
    org.bouncycastle.asn1.x509.AlgorithmIdentifier getInstance(java.lang.Object) -> getInstance
    org.bouncycastle.asn1.ASN1ObjectIdentifier getAlgorithm() -> getAlgorithm
    org.bouncycastle.asn1.ASN1ObjectIdentifier getObjectId() -> getObjectId
    org.bouncycastle.asn1.ASN1Encodable getParameters() -> getParameters
    org.bouncycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
org.bouncycastle.asn1.x509.AttCertIssuer -> org.bouncycastle.asn1.x509.AttCertIssuer:
    org.bouncycastle.asn1.ASN1Encodable obj -> obj
    org.bouncycastle.asn1.ASN1Primitive choiceObj -> choiceObj
    org.bouncycastle.asn1.x509.AttCertIssuer getInstance(java.lang.Object) -> getInstance
    org.bouncycastle.asn1.x509.AttCertIssuer getInstance(org.bouncycastle.asn1.ASN1TaggedObject,boolean) -> getInstance
    org.bouncycastle.asn1.ASN1Encodable getIssuer() -> getIssuer
    org.bouncycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
org.bouncycastle.asn1.x509.AttCertValidityPeriod -> org.bouncycastle.asn1.x509.AttCertValidityPeriod:
    org.bouncycastle.asn1.ASN1GeneralizedTime notBeforeTime -> notBeforeTime
    org.bouncycastle.asn1.ASN1GeneralizedTime notAfterTime -> notAfterTime
    org.bouncycastle.asn1.x509.AttCertValidityPeriod getInstance(java.lang.Object) -> getInstance
    org.bouncycastle.asn1.ASN1GeneralizedTime getNotBeforeTime() -> getNotBeforeTime
    org.bouncycastle.asn1.ASN1GeneralizedTime getNotAfterTime() -> getNotAfterTime
    org.bouncycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
org.bouncycastle.asn1.x509.Attribute -> org.bouncycastle.asn1.x509.Attribute:
    org.bouncycastle.asn1.ASN1ObjectIdentifier attrType -> attrType
    org.bouncycastle.asn1.ASN1Set attrValues -> attrValues
    org.bouncycastle.asn1.x509.Attribute getInstance(java.lang.Object) -> getInstance
    org.bouncycastle.asn1.ASN1ObjectIdentifier getAttrType() -> getAttrType
    org.bouncycastle.asn1.ASN1Encodable[] getAttributeValues() -> getAttributeValues
    org.bouncycastle.asn1.ASN1Set getAttrValues() -> getAttrValues
    org.bouncycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
org.bouncycastle.asn1.x509.AttributeCertificate -> org.bouncycastle.asn1.x509.AttributeCertificate:
    org.bouncycastle.asn1.x509.AttributeCertificateInfo acinfo -> acinfo
    org.bouncycastle.asn1.x509.AlgorithmIdentifier signatureAlgorithm -> signatureAlgorithm
    org.bouncycastle.asn1.DERBitString signatureValue -> signatureValue
    org.bouncycastle.asn1.x509.AttributeCertificate getInstance(java.lang.Object) -> getInstance
    org.bouncycastle.asn1.x509.AttributeCertificateInfo getAcinfo() -> getAcinfo
    org.bouncycastle.asn1.x509.AlgorithmIdentifier getSignatureAlgorithm() -> getSignatureAlgorithm
    org.bouncycastle.asn1.DERBitString getSignatureValue() -> getSignatureValue
    org.bouncycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
org.bouncycastle.asn1.x509.AttributeCertificateInfo -> org.bouncycastle.asn1.x509.AttributeCertificateInfo:
    org.bouncycastle.asn1.ASN1Integer version -> version
    org.bouncycastle.asn1.x509.Holder holder -> holder
    org.bouncycastle.asn1.x509.AttCertIssuer issuer -> issuer
    org.bouncycastle.asn1.x509.AlgorithmIdentifier signature -> signature
    org.bouncycastle.asn1.ASN1Integer serialNumber -> serialNumber
    org.bouncycastle.asn1.x509.AttCertValidityPeriod attrCertValidityPeriod -> attrCertValidityPeriod
    org.bouncycastle.asn1.ASN1Sequence attributes -> attributes
    org.bouncycastle.asn1.DERBitString issuerUniqueID -> issuerUniqueID
    org.bouncycastle.asn1.x509.Extensions extensions -> extensions
    org.bouncycastle.asn1.x509.AttributeCertificateInfo getInstance(org.bouncycastle.asn1.ASN1TaggedObject,boolean) -> getInstance
    org.bouncycastle.asn1.x509.AttributeCertificateInfo getInstance(java.lang.Object) -> getInstance
    org.bouncycastle.asn1.ASN1Integer getVersion() -> getVersion
    org.bouncycastle.asn1.x509.Holder getHolder() -> getHolder
    org.bouncycastle.asn1.x509.AttCertIssuer getIssuer() -> getIssuer
    org.bouncycastle.asn1.x509.AlgorithmIdentifier getSignature() -> getSignature
    org.bouncycastle.asn1.ASN1Integer getSerialNumber() -> getSerialNumber
    org.bouncycastle.asn1.x509.AttCertValidityPeriod getAttrCertValidityPeriod() -> getAttrCertValidityPeriod
    org.bouncycastle.asn1.ASN1Sequence getAttributes() -> getAttributes
    org.bouncycastle.asn1.DERBitString getIssuerUniqueID() -> getIssuerUniqueID
    org.bouncycastle.asn1.x509.Extensions getExtensions() -> getExtensions
    org.bouncycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
org.bouncycastle.asn1.x509.AuthorityInformationAccess -> org.bouncycastle.asn1.x509.AuthorityInformationAccess:
    org.bouncycastle.asn1.x509.AccessDescription[] descriptions -> descriptions
    org.bouncycastle.asn1.x509.AuthorityInformationAccess getInstance(java.lang.Object) -> getInstance
    org.bouncycastle.asn1.x509.AccessDescription[] getAccessDescriptions() -> getAccessDescriptions
    org.bouncycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
    java.lang.String toString() -> toString
org.bouncycastle.asn1.x509.AuthorityKeyIdentifier -> org.bouncycastle.asn1.x509.AuthorityKeyIdentifier:
    org.bouncycastle.asn1.ASN1OctetString keyidentifier -> keyidentifier
    org.bouncycastle.asn1.x509.GeneralNames certissuer -> certissuer
    org.bouncycastle.asn1.ASN1Integer certserno -> certserno
    org.bouncycastle.asn1.x509.AuthorityKeyIdentifier getInstance(org.bouncycastle.asn1.ASN1TaggedObject,boolean) -> getInstance
    org.bouncycastle.asn1.x509.AuthorityKeyIdentifier getInstance(java.lang.Object) -> getInstance
    org.bouncycastle.asn1.x509.AuthorityKeyIdentifier fromExtensions(org.bouncycastle.asn1.x509.Extensions) -> fromExtensions
    byte[] getKeyIdentifier() -> getKeyIdentifier
    org.bouncycastle.asn1.x509.GeneralNames getAuthorityCertIssuer() -> getAuthorityCertIssuer
    java.math.BigInteger getAuthorityCertSerialNumber() -> getAuthorityCertSerialNumber
    org.bouncycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
    java.lang.String toString() -> toString
org.bouncycastle.asn1.x509.BasicConstraints -> org.bouncycastle.asn1.x509.BasicConstraints:
    org.bouncycastle.asn1.ASN1Boolean cA -> cA
    org.bouncycastle.asn1.ASN1Integer pathLenConstraint -> pathLenConstraint
    org.bouncycastle.asn1.x509.BasicConstraints getInstance(org.bouncycastle.asn1.ASN1TaggedObject,boolean) -> getInstance
    org.bouncycastle.asn1.x509.BasicConstraints getInstance(java.lang.Object) -> getInstance
    org.bouncycastle.asn1.x509.BasicConstraints fromExtensions(org.bouncycastle.asn1.x509.Extensions) -> fromExtensions
    boolean isCA() -> isCA
    java.math.BigInteger getPathLenConstraint() -> getPathLenConstraint
    org.bouncycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
    java.lang.String toString() -> toString
org.bouncycastle.asn1.x509.CRLDistPoint -> org.bouncycastle.asn1.x509.CRLDistPoint:
    org.bouncycastle.asn1.ASN1Sequence seq -> seq
    org.bouncycastle.asn1.x509.CRLDistPoint getInstance(org.bouncycastle.asn1.ASN1TaggedObject,boolean) -> getInstance
    org.bouncycastle.asn1.x509.CRLDistPoint getInstance(java.lang.Object) -> getInstance
    org.bouncycastle.asn1.x509.DistributionPoint[] getDistributionPoints() -> getDistributionPoints
    org.bouncycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
    java.lang.String toString() -> toString
org.bouncycastle.asn1.x509.CRLNumber -> org.bouncycastle.asn1.x509.CRLNumber:
    java.math.BigInteger number -> number
    java.math.BigInteger getCRLNumber() -> getCRLNumber
    java.lang.String toString() -> toString
    org.bouncycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
    org.bouncycastle.asn1.x509.CRLNumber getInstance(java.lang.Object) -> getInstance
org.bouncycastle.asn1.x509.CRLReason -> org.bouncycastle.asn1.x509.CRLReason:
    int UNSPECIFIED -> UNSPECIFIED
    int KEY_COMPROMISE -> KEY_COMPROMISE
    int CA_COMPROMISE -> CA_COMPROMISE
    int AFFILIATION_CHANGED -> AFFILIATION_CHANGED
    int SUPERSEDED -> SUPERSEDED
    int CESSATION_OF_OPERATION -> CESSATION_OF_OPERATION
    int CERTIFICATE_HOLD -> CERTIFICATE_HOLD
    int REMOVE_FROM_CRL -> REMOVE_FROM_CRL
    int PRIVILEGE_WITHDRAWN -> PRIVILEGE_WITHDRAWN
    int AA_COMPROMISE -> AA_COMPROMISE
    int unspecified -> unspecified
    int keyCompromise -> keyCompromise
    int cACompromise -> cACompromise
    int affiliationChanged -> affiliationChanged
    int superseded -> superseded
    int cessationOfOperation -> cessationOfOperation
    int certificateHold -> certificateHold
    int removeFromCRL -> removeFromCRL
    int privilegeWithdrawn -> privilegeWithdrawn
    int aACompromise -> aACompromise
    java.lang.String[] reasonString -> reasonString
    java.util.Hashtable table -> table
    org.bouncycastle.asn1.ASN1Enumerated value -> value
    org.bouncycastle.asn1.x509.CRLReason getInstance(java.lang.Object) -> getInstance
    java.lang.String toString() -> toString
    java.math.BigInteger getValue() -> getValue
    org.bouncycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
    org.bouncycastle.asn1.x509.CRLReason lookup(int) -> lookup
org.bouncycastle.asn1.x509.CertPolicyId -> org.bouncycastle.asn1.x509.CertPolicyId:
    org.bouncycastle.asn1.ASN1ObjectIdentifier id -> id
    org.bouncycastle.asn1.x509.CertPolicyId getInstance(java.lang.Object) -> getInstance
    java.lang.String getId() -> getId
    org.bouncycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
org.bouncycastle.asn1.x509.Certificate -> org.bouncycastle.asn1.x509.Certificate:
    org.bouncycastle.asn1.ASN1Sequence seq -> seq
    org.bouncycastle.asn1.x509.TBSCertificate tbsCert -> tbsCert
    org.bouncycastle.asn1.x509.AlgorithmIdentifier sigAlgId -> sigAlgId
    org.bouncycastle.asn1.DERBitString sig -> sig
    org.bouncycastle.asn1.x509.Certificate getInstance(org.bouncycastle.asn1.ASN1TaggedObject,boolean) -> getInstance
    org.bouncycastle.asn1.x509.Certificate getInstance(java.lang.Object) -> getInstance
    org.bouncycastle.asn1.x509.TBSCertificate getTBSCertificate() -> getTBSCertificate
    org.bouncycastle.asn1.ASN1Integer getVersion() -> getVersion
    int getVersionNumber() -> getVersionNumber
    org.bouncycastle.asn1.ASN1Integer getSerialNumber() -> getSerialNumber
    org.bouncycastle.asn1.x500.X500Name getIssuer() -> getIssuer
    org.bouncycastle.asn1.x509.Time getStartDate() -> getStartDate
    org.bouncycastle.asn1.x509.Time getEndDate() -> getEndDate
    org.bouncycastle.asn1.x500.X500Name getSubject() -> getSubject
    org.bouncycastle.asn1.x509.SubjectPublicKeyInfo getSubjectPublicKeyInfo() -> getSubjectPublicKeyInfo
    org.bouncycastle.asn1.x509.AlgorithmIdentifier getSignatureAlgorithm() -> getSignatureAlgorithm
    org.bouncycastle.asn1.DERBitString getSignature() -> getSignature
    org.bouncycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
org.bouncycastle.asn1.x509.CertificateList -> org.bouncycastle.asn1.x509.CertificateList:
    org.bouncycastle.asn1.x509.TBSCertList tbsCertList -> tbsCertList
    org.bouncycastle.asn1.x509.AlgorithmIdentifier sigAlgId -> sigAlgId
    org.bouncycastle.asn1.DERBitString sig -> sig
    boolean isHashCodeSet -> isHashCodeSet
    int hashCodeValue -> hashCodeValue
    org.bouncycastle.asn1.x509.CertificateList getInstance(org.bouncycastle.asn1.ASN1TaggedObject,boolean) -> getInstance
    org.bouncycastle.asn1.x509.CertificateList getInstance(java.lang.Object) -> getInstance
    org.bouncycastle.asn1.x509.TBSCertList getTBSCertList() -> getTBSCertList
    org.bouncycastle.asn1.x509.TBSCertList$CRLEntry[] getRevokedCertificates() -> getRevokedCertificates
    java.util.Enumeration getRevokedCertificateEnumeration() -> getRevokedCertificateEnumeration
    org.bouncycastle.asn1.x509.AlgorithmIdentifier getSignatureAlgorithm() -> getSignatureAlgorithm
    org.bouncycastle.asn1.DERBitString getSignature() -> getSignature
    int getVersionNumber() -> getVersionNumber
    org.bouncycastle.asn1.x500.X500Name getIssuer() -> getIssuer
    org.bouncycastle.asn1.x509.Time getThisUpdate() -> getThisUpdate
    org.bouncycastle.asn1.x509.Time getNextUpdate() -> getNextUpdate
    org.bouncycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
    int hashCode() -> hashCode
org.bouncycastle.asn1.x509.CertificatePair -> org.bouncycastle.asn1.x509.CertificatePair:
    org.bouncycastle.asn1.x509.Certificate forward -> forward
    org.bouncycastle.asn1.x509.Certificate reverse -> reverse
    org.bouncycastle.asn1.x509.CertificatePair getInstance(java.lang.Object) -> getInstance
    org.bouncycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
    org.bouncycastle.asn1.x509.Certificate getForward() -> getForward
    org.bouncycastle.asn1.x509.Certificate getReverse() -> getReverse
org.bouncycastle.asn1.x509.CertificatePolicies -> org.bouncycastle.asn1.x509.CertificatePolicies:
    org.bouncycastle.asn1.x509.PolicyInformation[] policyInformation -> policyInformation
    org.bouncycastle.asn1.x509.CertificatePolicies getInstance(java.lang.Object) -> getInstance
    org.bouncycastle.asn1.x509.CertificatePolicies getInstance(org.bouncycastle.asn1.ASN1TaggedObject,boolean) -> getInstance
    org.bouncycastle.asn1.x509.CertificatePolicies fromExtensions(org.bouncycastle.asn1.x509.Extensions) -> fromExtensions
    org.bouncycastle.asn1.x509.PolicyInformation[] getPolicyInformation() -> getPolicyInformation
    org.bouncycastle.asn1.x509.PolicyInformation getPolicyInformation(org.bouncycastle.asn1.ASN1ObjectIdentifier) -> getPolicyInformation
    org.bouncycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
    java.lang.String toString() -> toString
org.bouncycastle.asn1.x509.DSAParameter -> org.bouncycastle.asn1.x509.DSAParameter:
    org.bouncycastle.asn1.ASN1Integer p -> p
    org.bouncycastle.asn1.ASN1Integer q -> q
    org.bouncycastle.asn1.ASN1Integer g -> g
    org.bouncycastle.asn1.x509.DSAParameter getInstance(org.bouncycastle.asn1.ASN1TaggedObject,boolean) -> getInstance
    org.bouncycastle.asn1.x509.DSAParameter getInstance(java.lang.Object) -> getInstance
    java.math.BigInteger getP() -> getP
    java.math.BigInteger getQ() -> getQ
    java.math.BigInteger getG() -> getG
    org.bouncycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
org.bouncycastle.asn1.x509.DigestInfo -> org.bouncycastle.asn1.x509.DigestInfo:
    byte[] digest -> digest
    org.bouncycastle.asn1.x509.AlgorithmIdentifier algId -> algId
    org.bouncycastle.asn1.x509.DigestInfo getInstance(org.bouncycastle.asn1.ASN1TaggedObject,boolean) -> getInstance
    org.bouncycastle.asn1.x509.DigestInfo getInstance(java.lang.Object) -> getInstance
    org.bouncycastle.asn1.x509.AlgorithmIdentifier getAlgorithmId() -> getAlgorithmId
    byte[] getDigest() -> getDigest
    org.bouncycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
org.bouncycastle.asn1.x509.DisplayText -> org.bouncycastle.asn1.x509.DisplayText:
    int CONTENT_TYPE_IA5STRING -> CONTENT_TYPE_IA5STRING
    int CONTENT_TYPE_BMPSTRING -> CONTENT_TYPE_BMPSTRING
    int CONTENT_TYPE_UTF8STRING -> CONTENT_TYPE_UTF8STRING
    int CONTENT_TYPE_VISIBLESTRING -> CONTENT_TYPE_VISIBLESTRING
    int DISPLAY_TEXT_MAXIMUM_SIZE -> DISPLAY_TEXT_MAXIMUM_SIZE
    int contentType -> contentType
    org.bouncycastle.asn1.ASN1String contents -> contents
    org.bouncycastle.asn1.x509.DisplayText getInstance(java.lang.Object) -> getInstance
    org.bouncycastle.asn1.x509.DisplayText getInstance(org.bouncycastle.asn1.ASN1TaggedObject,boolean) -> getInstance
    org.bouncycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
    java.lang.String getString() -> getString
org.bouncycastle.asn1.x509.DistributionPoint -> org.bouncycastle.asn1.x509.DistributionPoint:
    org.bouncycastle.asn1.x509.DistributionPointName distributionPoint -> distributionPoint
    org.bouncycastle.asn1.x509.ReasonFlags reasons -> reasons
    org.bouncycastle.asn1.x509.GeneralNames cRLIssuer -> cRLIssuer
    org.bouncycastle.asn1.x509.DistributionPoint getInstance(org.bouncycastle.asn1.ASN1TaggedObject,boolean) -> getInstance
    org.bouncycastle.asn1.x509.DistributionPoint getInstance(java.lang.Object) -> getInstance
    org.bouncycastle.asn1.x509.DistributionPointName getDistributionPoint() -> getDistributionPoint
    org.bouncycastle.asn1.x509.ReasonFlags getReasons() -> getReasons
    org.bouncycastle.asn1.x509.GeneralNames getCRLIssuer() -> getCRLIssuer
    org.bouncycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
    java.lang.String toString() -> toString
    void appendObject(java.lang.StringBuffer,java.lang.String,java.lang.String,java.lang.String) -> appendObject
org.bouncycastle.asn1.x509.DistributionPointName -> org.bouncycastle.asn1.x509.DistributionPointName:
    org.bouncycastle.asn1.ASN1Encodable name -> name
    int type -> type
    int FULL_NAME -> FULL_NAME
    int NAME_RELATIVE_TO_CRL_ISSUER -> NAME_RELATIVE_TO_CRL_ISSUER
    org.bouncycastle.asn1.x509.DistributionPointName getInstance(org.bouncycastle.asn1.ASN1TaggedObject,boolean) -> getInstance
    org.bouncycastle.asn1.x509.DistributionPointName getInstance(java.lang.Object) -> getInstance
    int getType() -> getType
    org.bouncycastle.asn1.ASN1Encodable getName() -> getName
    org.bouncycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
    java.lang.String toString() -> toString
    void appendObject(java.lang.StringBuffer,java.lang.String,java.lang.String,java.lang.String) -> appendObject
org.bouncycastle.asn1.x509.ExtendedKeyUsage -> org.bouncycastle.asn1.x509.ExtendedKeyUsage:
    java.util.Hashtable usageTable -> usageTable
    org.bouncycastle.asn1.ASN1Sequence seq -> seq
    org.bouncycastle.asn1.x509.ExtendedKeyUsage getInstance(org.bouncycastle.asn1.ASN1TaggedObject,boolean) -> getInstance
    org.bouncycastle.asn1.x509.ExtendedKeyUsage getInstance(java.lang.Object) -> getInstance
    org.bouncycastle.asn1.x509.ExtendedKeyUsage fromExtensions(org.bouncycastle.asn1.x509.Extensions) -> fromExtensions
    boolean hasKeyPurposeId(org.bouncycastle.asn1.x509.KeyPurposeId) -> hasKeyPurposeId
    org.bouncycastle.asn1.x509.KeyPurposeId[] getUsages() -> getUsages
    int size() -> size
    org.bouncycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
org.bouncycastle.asn1.x509.Extension -> org.bouncycastle.asn1.x509.Extension:
    org.bouncycastle.asn1.ASN1ObjectIdentifier subjectDirectoryAttributes -> subjectDirectoryAttributes
    org.bouncycastle.asn1.ASN1ObjectIdentifier subjectKeyIdentifier -> subjectKeyIdentifier
    org.bouncycastle.asn1.ASN1ObjectIdentifier keyUsage -> keyUsage
    org.bouncycastle.asn1.ASN1ObjectIdentifier privateKeyUsagePeriod -> privateKeyUsagePeriod
    org.bouncycastle.asn1.ASN1ObjectIdentifier subjectAlternativeName -> subjectAlternativeName
    org.bouncycastle.asn1.ASN1ObjectIdentifier issuerAlternativeName -> issuerAlternativeName
    org.bouncycastle.asn1.ASN1ObjectIdentifier basicConstraints -> basicConstraints
    org.bouncycastle.asn1.ASN1ObjectIdentifier cRLNumber -> cRLNumber
    org.bouncycastle.asn1.ASN1ObjectIdentifier reasonCode -> reasonCode
    org.bouncycastle.asn1.ASN1ObjectIdentifier instructionCode -> instructionCode
    org.bouncycastle.asn1.ASN1ObjectIdentifier invalidityDate -> invalidityDate
    org.bouncycastle.asn1.ASN1ObjectIdentifier deltaCRLIndicator -> deltaCRLIndicator
    org.bouncycastle.asn1.ASN1ObjectIdentifier issuingDistributionPoint -> issuingDistributionPoint
    org.bouncycastle.asn1.ASN1ObjectIdentifier certificateIssuer -> certificateIssuer
    org.bouncycastle.asn1.ASN1ObjectIdentifier nameConstraints -> nameConstraints
    org.bouncycastle.asn1.ASN1ObjectIdentifier cRLDistributionPoints -> cRLDistributionPoints
    org.bouncycastle.asn1.ASN1ObjectIdentifier certificatePolicies -> certificatePolicies
    org.bouncycastle.asn1.ASN1ObjectIdentifier policyMappings -> policyMappings
    org.bouncycastle.asn1.ASN1ObjectIdentifier authorityKeyIdentifier -> authorityKeyIdentifier
    org.bouncycastle.asn1.ASN1ObjectIdentifier policyConstraints -> policyConstraints
    org.bouncycastle.asn1.ASN1ObjectIdentifier extendedKeyUsage -> extendedKeyUsage
    org.bouncycastle.asn1.ASN1ObjectIdentifier freshestCRL -> freshestCRL
    org.bouncycastle.asn1.ASN1ObjectIdentifier inhibitAnyPolicy -> inhibitAnyPolicy
    org.bouncycastle.asn1.ASN1ObjectIdentifier authorityInfoAccess -> authorityInfoAccess
    org.bouncycastle.asn1.ASN1ObjectIdentifier subjectInfoAccess -> subjectInfoAccess
    org.bouncycastle.asn1.ASN1ObjectIdentifier logoType -> logoType
    org.bouncycastle.asn1.ASN1ObjectIdentifier biometricInfo -> biometricInfo
    org.bouncycastle.asn1.ASN1ObjectIdentifier qCStatements -> qCStatements
    org.bouncycastle.asn1.ASN1ObjectIdentifier auditIdentity -> auditIdentity
    org.bouncycastle.asn1.ASN1ObjectIdentifier noRevAvail -> noRevAvail
    org.bouncycastle.asn1.ASN1ObjectIdentifier targetInformation -> targetInformation
    org.bouncycastle.asn1.ASN1ObjectIdentifier extnId -> extnId
    boolean critical -> critical
    org.bouncycastle.asn1.ASN1OctetString value -> value
    org.bouncycastle.asn1.x509.Extension getInstance(java.lang.Object) -> getInstance
    org.bouncycastle.asn1.ASN1ObjectIdentifier getExtnId() -> getExtnId
    boolean isCritical() -> isCritical
    org.bouncycastle.asn1.ASN1OctetString getExtnValue() -> getExtnValue
    org.bouncycastle.asn1.ASN1Encodable getParsedValue() -> getParsedValue
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    org.bouncycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
    org.bouncycastle.asn1.ASN1Primitive convertValueToObject(org.bouncycastle.asn1.x509.Extension) -> convertValueToObject
org.bouncycastle.asn1.x509.Extensions -> org.bouncycastle.asn1.x509.Extensions:
    java.util.Hashtable extensions -> extensions
    java.util.Vector ordering -> ordering
    org.bouncycastle.asn1.x509.Extensions getInstance(org.bouncycastle.asn1.ASN1TaggedObject,boolean) -> getInstance
    org.bouncycastle.asn1.x509.Extensions getInstance(java.lang.Object) -> getInstance
    java.util.Enumeration oids() -> oids
    org.bouncycastle.asn1.x509.Extension getExtension(org.bouncycastle.asn1.ASN1ObjectIdentifier) -> getExtension
    org.bouncycastle.asn1.ASN1Encodable getExtensionParsedValue(org.bouncycastle.asn1.ASN1ObjectIdentifier) -> getExtensionParsedValue
    org.bouncycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
    boolean equivalent(org.bouncycastle.asn1.x509.Extensions) -> equivalent
    org.bouncycastle.asn1.ASN1ObjectIdentifier[] getExtensionOIDs() -> getExtensionOIDs
    org.bouncycastle.asn1.ASN1ObjectIdentifier[] getNonCriticalExtensionOIDs() -> getNonCriticalExtensionOIDs
    org.bouncycastle.asn1.ASN1ObjectIdentifier[] getCriticalExtensionOIDs() -> getCriticalExtensionOIDs
    org.bouncycastle.asn1.ASN1ObjectIdentifier[] getExtensionOIDs(boolean) -> getExtensionOIDs
    org.bouncycastle.asn1.ASN1ObjectIdentifier[] toOidArray(java.util.Vector) -> toOidArray
org.bouncycastle.asn1.x509.ExtensionsGenerator -> org.bouncycastle.asn1.x509.ExtensionsGenerator:
    java.util.Hashtable extensions -> extensions
    java.util.Vector extOrdering -> extOrdering
    void reset() -> reset
    void addExtension(org.bouncycastle.asn1.ASN1ObjectIdentifier,boolean,org.bouncycastle.asn1.ASN1Encodable) -> addExtension
    void addExtension(org.bouncycastle.asn1.ASN1ObjectIdentifier,boolean,byte[]) -> addExtension
    boolean isEmpty() -> isEmpty
    org.bouncycastle.asn1.x509.Extensions generate() -> generate
org.bouncycastle.asn1.x509.GeneralName -> org.bouncycastle.asn1.x509.GeneralName:
    int otherName -> otherName
    int rfc822Name -> rfc822Name
    int dNSName -> dNSName
    int x400Address -> x400Address
    int directoryName -> directoryName
    int ediPartyName -> ediPartyName
    int uniformResourceIdentifier -> uniformResourceIdentifier
    int iPAddress -> iPAddress
    int registeredID -> registeredID
    org.bouncycastle.asn1.ASN1Encodable obj -> obj
    int tag -> tag
    org.bouncycastle.asn1.x509.GeneralName getInstance(java.lang.Object) -> getInstance
    org.bouncycastle.asn1.x509.GeneralName getInstance(org.bouncycastle.asn1.ASN1TaggedObject,boolean) -> getInstance
    int getTagNo() -> getTagNo
    org.bouncycastle.asn1.ASN1Encodable getName() -> getName
    java.lang.String toString() -> toString
    byte[] toGeneralNameEncoding(java.lang.String) -> toGeneralNameEncoding
    void parseIPv4Mask(java.lang.String,byte[],int) -> parseIPv4Mask
    void parseIPv4(java.lang.String,byte[],int) -> parseIPv4
    int[] parseMask(java.lang.String) -> parseMask
    void copyInts(int[],byte[],int) -> copyInts
    int[] parseIPv6(java.lang.String) -> parseIPv6
    org.bouncycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
org.bouncycastle.asn1.x509.GeneralNames -> org.bouncycastle.asn1.x509.GeneralNames:
    org.bouncycastle.asn1.x509.GeneralName[] names -> names
    org.bouncycastle.asn1.x509.GeneralNames getInstance(java.lang.Object) -> getInstance
    org.bouncycastle.asn1.x509.GeneralNames getInstance(org.bouncycastle.asn1.ASN1TaggedObject,boolean) -> getInstance
    org.bouncycastle.asn1.x509.GeneralNames fromExtensions(org.bouncycastle.asn1.x509.Extensions,org.bouncycastle.asn1.ASN1ObjectIdentifier) -> fromExtensions
    org.bouncycastle.asn1.x509.GeneralName[] getNames() -> getNames
    org.bouncycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
    java.lang.String toString() -> toString
org.bouncycastle.asn1.x509.GeneralNamesBuilder -> org.bouncycastle.asn1.x509.GeneralNamesBuilder:
    java.util.Vector names -> names
    org.bouncycastle.asn1.x509.GeneralNamesBuilder addNames(org.bouncycastle.asn1.x509.GeneralNames) -> addNames
    org.bouncycastle.asn1.x509.GeneralNamesBuilder addName(org.bouncycastle.asn1.x509.GeneralName) -> addName
    org.bouncycastle.asn1.x509.GeneralNames build() -> build
org.bouncycastle.asn1.x509.GeneralSubtree -> org.bouncycastle.asn1.x509.GeneralSubtree:
    java.math.BigInteger ZERO -> ZERO
    org.bouncycastle.asn1.x509.GeneralName base -> base
    org.bouncycastle.asn1.ASN1Integer minimum -> minimum
    org.bouncycastle.asn1.ASN1Integer maximum -> maximum
    org.bouncycastle.asn1.x509.GeneralSubtree getInstance(org.bouncycastle.asn1.ASN1TaggedObject,boolean) -> getInstance
    org.bouncycastle.asn1.x509.GeneralSubtree getInstance(java.lang.Object) -> getInstance
    org.bouncycastle.asn1.x509.GeneralName getBase() -> getBase
    java.math.BigInteger getMinimum() -> getMinimum
    java.math.BigInteger getMaximum() -> getMaximum
    org.bouncycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
org.bouncycastle.asn1.x509.Holder -> org.bouncycastle.asn1.x509.Holder:
    int V1_CERTIFICATE_HOLDER -> V1_CERTIFICATE_HOLDER
    int V2_CERTIFICATE_HOLDER -> V2_CERTIFICATE_HOLDER
    org.bouncycastle.asn1.x509.IssuerSerial baseCertificateID -> baseCertificateID
    org.bouncycastle.asn1.x509.GeneralNames entityName -> entityName
    org.bouncycastle.asn1.x509.ObjectDigestInfo objectDigestInfo -> objectDigestInfo
    int version -> version
    org.bouncycastle.asn1.x509.Holder getInstance(java.lang.Object) -> getInstance
    int getVersion() -> getVersion
    org.bouncycastle.asn1.x509.IssuerSerial getBaseCertificateID() -> getBaseCertificateID
    org.bouncycastle.asn1.x509.GeneralNames getEntityName() -> getEntityName
    org.bouncycastle.asn1.x509.ObjectDigestInfo getObjectDigestInfo() -> getObjectDigestInfo
    org.bouncycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
org.bouncycastle.asn1.x509.IetfAttrSyntax -> org.bouncycastle.asn1.x509.IetfAttrSyntax:
    int VALUE_OCTETS -> VALUE_OCTETS
    int VALUE_OID -> VALUE_OID
    int VALUE_UTF8 -> VALUE_UTF8
    org.bouncycastle.asn1.x509.GeneralNames policyAuthority -> policyAuthority
    java.util.Vector values -> values
    int valueChoice -> valueChoice
    org.bouncycastle.asn1.x509.IetfAttrSyntax getInstance(java.lang.Object) -> getInstance
    org.bouncycastle.asn1.x509.GeneralNames getPolicyAuthority() -> getPolicyAuthority
    int getValueType() -> getValueType
    java.lang.Object[] getValues() -> getValues
    org.bouncycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
org.bouncycastle.asn1.x509.IssuerSerial -> org.bouncycastle.asn1.x509.IssuerSerial:
    org.bouncycastle.asn1.x509.GeneralNames issuer -> issuer
    org.bouncycastle.asn1.ASN1Integer serial -> serial
    org.bouncycastle.asn1.DERBitString issuerUID -> issuerUID
    org.bouncycastle.asn1.x509.IssuerSerial getInstance(java.lang.Object) -> getInstance
    org.bouncycastle.asn1.x509.IssuerSerial getInstance(org.bouncycastle.asn1.ASN1TaggedObject,boolean) -> getInstance
    org.bouncycastle.asn1.x509.GeneralNames getIssuer() -> getIssuer
    org.bouncycastle.asn1.ASN1Integer getSerial() -> getSerial
    org.bouncycastle.asn1.DERBitString getIssuerUID() -> getIssuerUID
    org.bouncycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
org.bouncycastle.asn1.x509.IssuingDistributionPoint -> org.bouncycastle.asn1.x509.IssuingDistributionPoint:
    org.bouncycastle.asn1.x509.DistributionPointName distributionPoint -> distributionPoint
    boolean onlyContainsUserCerts -> onlyContainsUserCerts
    boolean onlyContainsCACerts -> onlyContainsCACerts
    org.bouncycastle.asn1.x509.ReasonFlags onlySomeReasons -> onlySomeReasons
    boolean indirectCRL -> indirectCRL
    boolean onlyContainsAttributeCerts -> onlyContainsAttributeCerts
    org.bouncycastle.asn1.ASN1Sequence seq -> seq
    org.bouncycastle.asn1.x509.IssuingDistributionPoint getInstance(org.bouncycastle.asn1.ASN1TaggedObject,boolean) -> getInstance
    org.bouncycastle.asn1.x509.IssuingDistributionPoint getInstance(java.lang.Object) -> getInstance
    boolean onlyContainsUserCerts() -> onlyContainsUserCerts
    boolean onlyContainsCACerts() -> onlyContainsCACerts
    boolean isIndirectCRL() -> isIndirectCRL
    boolean onlyContainsAttributeCerts() -> onlyContainsAttributeCerts
    org.bouncycastle.asn1.x509.DistributionPointName getDistributionPoint() -> getDistributionPoint
    org.bouncycastle.asn1.x509.ReasonFlags getOnlySomeReasons() -> getOnlySomeReasons
    org.bouncycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
    java.lang.String toString() -> toString
    void appendObject(java.lang.StringBuffer,java.lang.String,java.lang.String,java.lang.String) -> appendObject
    java.lang.String booleanToString(boolean) -> booleanToString
org.bouncycastle.asn1.x509.KeyPurposeId -> org.bouncycastle.asn1.x509.KeyPurposeId:
    org.bouncycastle.asn1.ASN1ObjectIdentifier id_kp -> id_kp
    org.bouncycastle.asn1.x509.KeyPurposeId anyExtendedKeyUsage -> anyExtendedKeyUsage
    org.bouncycastle.asn1.x509.KeyPurposeId id_kp_serverAuth -> id_kp_serverAuth
    org.bouncycastle.asn1.x509.KeyPurposeId id_kp_clientAuth -> id_kp_clientAuth
    org.bouncycastle.asn1.x509.KeyPurposeId id_kp_codeSigning -> id_kp_codeSigning
    org.bouncycastle.asn1.x509.KeyPurposeId id_kp_emailProtection -> id_kp_emailProtection
    org.bouncycastle.asn1.x509.KeyPurposeId id_kp_ipsecEndSystem -> id_kp_ipsecEndSystem
    org.bouncycastle.asn1.x509.KeyPurposeId id_kp_ipsecTunnel -> id_kp_ipsecTunnel
    org.bouncycastle.asn1.x509.KeyPurposeId id_kp_ipsecUser -> id_kp_ipsecUser
    org.bouncycastle.asn1.x509.KeyPurposeId id_kp_timeStamping -> id_kp_timeStamping
    org.bouncycastle.asn1.x509.KeyPurposeId id_kp_OCSPSigning -> id_kp_OCSPSigning
    org.bouncycastle.asn1.x509.KeyPurposeId id_kp_dvcs -> id_kp_dvcs
    org.bouncycastle.asn1.x509.KeyPurposeId id_kp_sbgpCertAAServerAuth -> id_kp_sbgpCertAAServerAuth
    org.bouncycastle.asn1.x509.KeyPurposeId id_kp_scvp_responder -> id_kp_scvp_responder
    org.bouncycastle.asn1.x509.KeyPurposeId id_kp_eapOverPPP -> id_kp_eapOverPPP
    org.bouncycastle.asn1.x509.KeyPurposeId id_kp_eapOverLAN -> id_kp_eapOverLAN
    org.bouncycastle.asn1.x509.KeyPurposeId id_kp_scvpServer -> id_kp_scvpServer
    org.bouncycastle.asn1.x509.KeyPurposeId id_kp_scvpClient -> id_kp_scvpClient
    org.bouncycastle.asn1.x509.KeyPurposeId id_kp_ipsecIKE -> id_kp_ipsecIKE
    org.bouncycastle.asn1.x509.KeyPurposeId id_kp_capwapAC -> id_kp_capwapAC
    org.bouncycastle.asn1.x509.KeyPurposeId id_kp_capwapWTP -> id_kp_capwapWTP
    org.bouncycastle.asn1.x509.KeyPurposeId id_kp_smartcardlogon -> id_kp_smartcardlogon
    org.bouncycastle.asn1.ASN1ObjectIdentifier id -> id
    org.bouncycastle.asn1.x509.KeyPurposeId getInstance(java.lang.Object) -> getInstance
    org.bouncycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
    java.lang.String getId() -> getId
org.bouncycastle.asn1.x509.KeyUsage -> org.bouncycastle.asn1.x509.KeyUsage:
    int digitalSignature -> digitalSignature
    int nonRepudiation -> nonRepudiation
    int keyEncipherment -> keyEncipherment
    int dataEncipherment -> dataEncipherment
    int keyAgreement -> keyAgreement
    int keyCertSign -> keyCertSign
    int cRLSign -> cRLSign
    int encipherOnly -> encipherOnly
    int decipherOnly -> decipherOnly
    org.bouncycastle.asn1.DERBitString bitString -> bitString
    org.bouncycastle.asn1.x509.KeyUsage getInstance(java.lang.Object) -> getInstance
    org.bouncycastle.asn1.x509.KeyUsage fromExtensions(org.bouncycastle.asn1.x509.Extensions) -> fromExtensions
    boolean hasUsages(int) -> hasUsages
    byte[] getBytes() -> getBytes
    int getPadBits() -> getPadBits
    java.lang.String toString() -> toString
    org.bouncycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
org.bouncycastle.asn1.x509.NameConstraints -> org.bouncycastle.asn1.x509.NameConstraints:
    org.bouncycastle.asn1.x509.GeneralSubtree[] permitted -> permitted
    org.bouncycastle.asn1.x509.GeneralSubtree[] excluded -> excluded
    org.bouncycastle.asn1.x509.NameConstraints getInstance(java.lang.Object) -> getInstance
    org.bouncycastle.asn1.x509.GeneralSubtree[] createArray(org.bouncycastle.asn1.ASN1Sequence) -> createArray
    org.bouncycastle.asn1.x509.GeneralSubtree[] getPermittedSubtrees() -> getPermittedSubtrees
    org.bouncycastle.asn1.x509.GeneralSubtree[] getExcludedSubtrees() -> getExcludedSubtrees
    org.bouncycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
org.bouncycastle.asn1.x509.NoticeReference -> org.bouncycastle.asn1.x509.NoticeReference:
    org.bouncycastle.asn1.x509.DisplayText organization -> organization
    org.bouncycastle.asn1.ASN1Sequence noticeNumbers -> noticeNumbers
    org.bouncycastle.asn1.ASN1EncodableVector convertVector(java.util.Vector) -> convertVector
    org.bouncycastle.asn1.x509.NoticeReference getInstance(java.lang.Object) -> getInstance
    org.bouncycastle.asn1.x509.DisplayText getOrganization() -> getOrganization
    org.bouncycastle.asn1.ASN1Integer[] getNoticeNumbers() -> getNoticeNumbers
    org.bouncycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
org.bouncycastle.asn1.x509.ObjectDigestInfo -> org.bouncycastle.asn1.x509.ObjectDigestInfo:
    int publicKey -> publicKey
    int publicKeyCert -> publicKeyCert
    int otherObjectDigest -> otherObjectDigest
    org.bouncycastle.asn1.ASN1Enumerated digestedObjectType -> digestedObjectType
    org.bouncycastle.asn1.ASN1ObjectIdentifier otherObjectTypeID -> otherObjectTypeID
    org.bouncycastle.asn1.x509.AlgorithmIdentifier digestAlgorithm -> digestAlgorithm
    org.bouncycastle.asn1.DERBitString objectDigest -> objectDigest
    org.bouncycastle.asn1.x509.ObjectDigestInfo getInstance(java.lang.Object) -> getInstance
    org.bouncycastle.asn1.x509.ObjectDigestInfo getInstance(org.bouncycastle.asn1.ASN1TaggedObject,boolean) -> getInstance
    org.bouncycastle.asn1.ASN1Enumerated getDigestedObjectType() -> getDigestedObjectType
    org.bouncycastle.asn1.ASN1ObjectIdentifier getOtherObjectTypeID() -> getOtherObjectTypeID
    org.bouncycastle.asn1.x509.AlgorithmIdentifier getDigestAlgorithm() -> getDigestAlgorithm
    org.bouncycastle.asn1.DERBitString getObjectDigest() -> getObjectDigest
    org.bouncycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
org.bouncycastle.asn1.x509.PolicyConstraints -> org.bouncycastle.asn1.x509.PolicyConstraints:
    java.math.BigInteger requireExplicitPolicyMapping -> requireExplicitPolicyMapping
    java.math.BigInteger inhibitPolicyMapping -> inhibitPolicyMapping
    org.bouncycastle.asn1.x509.PolicyConstraints getInstance(java.lang.Object) -> getInstance
    org.bouncycastle.asn1.x509.PolicyConstraints fromExtensions(org.bouncycastle.asn1.x509.Extensions) -> fromExtensions
    java.math.BigInteger getRequireExplicitPolicyMapping() -> getRequireExplicitPolicyMapping
    java.math.BigInteger getInhibitPolicyMapping() -> getInhibitPolicyMapping
    org.bouncycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
org.bouncycastle.asn1.x509.PolicyInformation -> org.bouncycastle.asn1.x509.PolicyInformation:
    org.bouncycastle.asn1.ASN1ObjectIdentifier policyIdentifier -> policyIdentifier
    org.bouncycastle.asn1.ASN1Sequence policyQualifiers -> policyQualifiers
    org.bouncycastle.asn1.x509.PolicyInformation getInstance(java.lang.Object) -> getInstance
    org.bouncycastle.asn1.ASN1ObjectIdentifier getPolicyIdentifier() -> getPolicyIdentifier
    org.bouncycastle.asn1.ASN1Sequence getPolicyQualifiers() -> getPolicyQualifiers
    org.bouncycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
org.bouncycastle.asn1.x509.PolicyMappings -> org.bouncycastle.asn1.x509.PolicyMappings:
    org.bouncycastle.asn1.ASN1Sequence seq -> seq
    org.bouncycastle.asn1.x509.PolicyMappings getInstance(java.lang.Object) -> getInstance
    org.bouncycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
org.bouncycastle.asn1.x509.PolicyQualifierId -> org.bouncycastle.asn1.x509.PolicyQualifierId:
    java.lang.String id_qt -> id_qt
    org.bouncycastle.asn1.x509.PolicyQualifierId id_qt_cps -> id_qt_cps
    org.bouncycastle.asn1.x509.PolicyQualifierId id_qt_unotice -> id_qt_unotice
org.bouncycastle.asn1.x509.PolicyQualifierInfo -> org.bouncycastle.asn1.x509.PolicyQualifierInfo:
    org.bouncycastle.asn1.ASN1ObjectIdentifier policyQualifierId -> policyQualifierId
    org.bouncycastle.asn1.ASN1Encodable qualifier -> qualifier
    org.bouncycastle.asn1.x509.PolicyQualifierInfo getInstance(java.lang.Object) -> getInstance
    org.bouncycastle.asn1.ASN1ObjectIdentifier getPolicyQualifierId() -> getPolicyQualifierId
    org.bouncycastle.asn1.ASN1Encodable getQualifier() -> getQualifier
    org.bouncycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
org.bouncycastle.asn1.x509.PrivateKeyUsagePeriod -> org.bouncycastle.asn1.x509.PrivateKeyUsagePeriod:
    org.bouncycastle.asn1.ASN1GeneralizedTime _notBefore -> _notBefore
    org.bouncycastle.asn1.ASN1GeneralizedTime _notAfter -> _notAfter
    org.bouncycastle.asn1.x509.PrivateKeyUsagePeriod getInstance(java.lang.Object) -> getInstance
    org.bouncycastle.asn1.ASN1GeneralizedTime getNotBefore() -> getNotBefore
    org.bouncycastle.asn1.ASN1GeneralizedTime getNotAfter() -> getNotAfter
    org.bouncycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
org.bouncycastle.asn1.x509.RSAPublicKeyStructure -> org.bouncycastle.asn1.x509.RSAPublicKeyStructure:
    java.math.BigInteger modulus -> modulus
    java.math.BigInteger publicExponent -> publicExponent
    org.bouncycastle.asn1.x509.RSAPublicKeyStructure getInstance(org.bouncycastle.asn1.ASN1TaggedObject,boolean) -> getInstance
    org.bouncycastle.asn1.x509.RSAPublicKeyStructure getInstance(java.lang.Object) -> getInstance
    java.math.BigInteger getModulus() -> getModulus
    java.math.BigInteger getPublicExponent() -> getPublicExponent
    org.bouncycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
org.bouncycastle.asn1.x509.ReasonFlags -> org.bouncycastle.asn1.x509.ReasonFlags:
    int UNUSED -> UNUSED
    int KEY_COMPROMISE -> KEY_COMPROMISE
    int CA_COMPROMISE -> CA_COMPROMISE
    int AFFILIATION_CHANGED -> AFFILIATION_CHANGED
    int SUPERSEDED -> SUPERSEDED
    int CESSATION_OF_OPERATION -> CESSATION_OF_OPERATION
    int CERTIFICATE_HOLD -> CERTIFICATE_HOLD
    int PRIVILEGE_WITHDRAWN -> PRIVILEGE_WITHDRAWN
    int AA_COMPROMISE -> AA_COMPROMISE
    int unused -> unused
    int keyCompromise -> keyCompromise
    int cACompromise -> cACompromise
    int affiliationChanged -> affiliationChanged
    int superseded -> superseded
    int cessationOfOperation -> cessationOfOperation
    int certificateHold -> certificateHold
    int privilegeWithdrawn -> privilegeWithdrawn
    int aACompromise -> aACompromise
org.bouncycastle.asn1.x509.RoleSyntax -> org.bouncycastle.asn1.x509.RoleSyntax:
    org.bouncycastle.asn1.x509.GeneralNames roleAuthority -> roleAuthority
    org.bouncycastle.asn1.x509.GeneralName roleName -> roleName
    org.bouncycastle.asn1.x509.RoleSyntax getInstance(java.lang.Object) -> getInstance
    org.bouncycastle.asn1.x509.GeneralNames getRoleAuthority() -> getRoleAuthority
    org.bouncycastle.asn1.x509.GeneralName getRoleName() -> getRoleName
    java.lang.String getRoleNameAsString() -> getRoleNameAsString
    java.lang.String[] getRoleAuthorityAsString() -> getRoleAuthorityAsString
    org.bouncycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
    java.lang.String toString() -> toString
org.bouncycastle.asn1.x509.SubjectDirectoryAttributes -> org.bouncycastle.asn1.x509.SubjectDirectoryAttributes:
    java.util.Vector attributes -> attributes
    org.bouncycastle.asn1.x509.SubjectDirectoryAttributes getInstance(java.lang.Object) -> getInstance
    org.bouncycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
    java.util.Vector getAttributes() -> getAttributes
org.bouncycastle.asn1.x509.SubjectKeyIdentifier -> org.bouncycastle.asn1.x509.SubjectKeyIdentifier:
    byte[] keyidentifier -> keyidentifier
    org.bouncycastle.asn1.x509.SubjectKeyIdentifier getInstance(org.bouncycastle.asn1.ASN1TaggedObject,boolean) -> getInstance
    org.bouncycastle.asn1.x509.SubjectKeyIdentifier getInstance(java.lang.Object) -> getInstance
    org.bouncycastle.asn1.x509.SubjectKeyIdentifier fromExtensions(org.bouncycastle.asn1.x509.Extensions) -> fromExtensions
    byte[] getKeyIdentifier() -> getKeyIdentifier
    org.bouncycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
org.bouncycastle.asn1.x509.SubjectPublicKeyInfo -> org.bouncycastle.asn1.x509.SubjectPublicKeyInfo:
    org.bouncycastle.asn1.x509.AlgorithmIdentifier algId -> algId
    org.bouncycastle.asn1.DERBitString keyData -> keyData
    org.bouncycastle.asn1.x509.SubjectPublicKeyInfo getInstance(org.bouncycastle.asn1.ASN1TaggedObject,boolean) -> getInstance
    org.bouncycastle.asn1.x509.SubjectPublicKeyInfo getInstance(java.lang.Object) -> getInstance
    org.bouncycastle.asn1.x509.AlgorithmIdentifier getAlgorithm() -> getAlgorithm
    org.bouncycastle.asn1.x509.AlgorithmIdentifier getAlgorithmId() -> getAlgorithmId
    org.bouncycastle.asn1.ASN1Primitive parsePublicKey() -> parsePublicKey
    org.bouncycastle.asn1.ASN1Primitive getPublicKey() -> getPublicKey
    org.bouncycastle.asn1.DERBitString getPublicKeyData() -> getPublicKeyData
    org.bouncycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
org.bouncycastle.asn1.x509.TBSCertList -> org.bouncycastle.asn1.x509.TBSCertList:
    org.bouncycastle.asn1.ASN1Integer version -> version
    org.bouncycastle.asn1.x509.AlgorithmIdentifier signature -> signature
    org.bouncycastle.asn1.x500.X500Name issuer -> issuer
    org.bouncycastle.asn1.x509.Time thisUpdate -> thisUpdate
    org.bouncycastle.asn1.x509.Time nextUpdate -> nextUpdate
    org.bouncycastle.asn1.ASN1Sequence revokedCertificates -> revokedCertificates
    org.bouncycastle.asn1.x509.Extensions crlExtensions -> crlExtensions
    org.bouncycastle.asn1.x509.TBSCertList getInstance(org.bouncycastle.asn1.ASN1TaggedObject,boolean) -> getInstance
    org.bouncycastle.asn1.x509.TBSCertList getInstance(java.lang.Object) -> getInstance
    int getVersionNumber() -> getVersionNumber
    org.bouncycastle.asn1.ASN1Integer getVersion() -> getVersion
    org.bouncycastle.asn1.x509.AlgorithmIdentifier getSignature() -> getSignature
    org.bouncycastle.asn1.x500.X500Name getIssuer() -> getIssuer
    org.bouncycastle.asn1.x509.Time getThisUpdate() -> getThisUpdate
    org.bouncycastle.asn1.x509.Time getNextUpdate() -> getNextUpdate
    org.bouncycastle.asn1.x509.TBSCertList$CRLEntry[] getRevokedCertificates() -> getRevokedCertificates
    java.util.Enumeration getRevokedCertificateEnumeration() -> getRevokedCertificateEnumeration
    org.bouncycastle.asn1.x509.Extensions getExtensions() -> getExtensions
    org.bouncycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
org.bouncycastle.asn1.x509.TBSCertList$1 -> org.bouncycastle.asn1.x509.TBSCertList$1:
org.bouncycastle.asn1.x509.TBSCertList$CRLEntry -> org.bouncycastle.asn1.x509.TBSCertList$CRLEntry:
    org.bouncycastle.asn1.ASN1Sequence seq -> seq
    org.bouncycastle.asn1.x509.Extensions crlEntryExtensions -> crlEntryExtensions
    org.bouncycastle.asn1.x509.TBSCertList$CRLEntry getInstance(java.lang.Object) -> getInstance
    org.bouncycastle.asn1.ASN1Integer getUserCertificate() -> getUserCertificate
    org.bouncycastle.asn1.x509.Time getRevocationDate() -> getRevocationDate
    org.bouncycastle.asn1.x509.Extensions getExtensions() -> getExtensions
    org.bouncycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
    boolean hasExtensions() -> hasExtensions
org.bouncycastle.asn1.x509.TBSCertList$EmptyEnumeration -> org.bouncycastle.asn1.x509.TBSCertList$EmptyEnumeration:
    org.bouncycastle.asn1.x509.TBSCertList this$0 -> this$0
    boolean hasMoreElements() -> hasMoreElements
    java.lang.Object nextElement() -> nextElement
org.bouncycastle.asn1.x509.TBSCertList$RevokedCertificatesEnumeration -> org.bouncycastle.asn1.x509.TBSCertList$RevokedCertificatesEnumeration:
    java.util.Enumeration en -> en
    org.bouncycastle.asn1.x509.TBSCertList this$0 -> this$0
    boolean hasMoreElements() -> hasMoreElements
    java.lang.Object nextElement() -> nextElement
org.bouncycastle.asn1.x509.TBSCertificate -> org.bouncycastle.asn1.x509.TBSCertificate:
    org.bouncycastle.asn1.ASN1Sequence seq -> seq
    org.bouncycastle.asn1.ASN1Integer version -> version
    org.bouncycastle.asn1.ASN1Integer serialNumber -> serialNumber
    org.bouncycastle.asn1.x509.AlgorithmIdentifier signature -> signature
    org.bouncycastle.asn1.x500.X500Name issuer -> issuer
    org.bouncycastle.asn1.x509.Time startDate -> startDate
    org.bouncycastle.asn1.x509.Time endDate -> endDate
    org.bouncycastle.asn1.x500.X500Name subject -> subject
    org.bouncycastle.asn1.x509.SubjectPublicKeyInfo subjectPublicKeyInfo -> subjectPublicKeyInfo
    org.bouncycastle.asn1.DERBitString issuerUniqueId -> issuerUniqueId
    org.bouncycastle.asn1.DERBitString subjectUniqueId -> subjectUniqueId
    org.bouncycastle.asn1.x509.Extensions extensions -> extensions
    org.bouncycastle.asn1.x509.TBSCertificate getInstance(org.bouncycastle.asn1.ASN1TaggedObject,boolean) -> getInstance
    org.bouncycastle.asn1.x509.TBSCertificate getInstance(java.lang.Object) -> getInstance
    int getVersionNumber() -> getVersionNumber
    org.bouncycastle.asn1.ASN1Integer getVersion() -> getVersion
    org.bouncycastle.asn1.ASN1Integer getSerialNumber() -> getSerialNumber
    org.bouncycastle.asn1.x509.AlgorithmIdentifier getSignature() -> getSignature
    org.bouncycastle.asn1.x500.X500Name getIssuer() -> getIssuer
    org.bouncycastle.asn1.x509.Time getStartDate() -> getStartDate
    org.bouncycastle.asn1.x509.Time getEndDate() -> getEndDate
    org.bouncycastle.asn1.x500.X500Name getSubject() -> getSubject
    org.bouncycastle.asn1.x509.SubjectPublicKeyInfo getSubjectPublicKeyInfo() -> getSubjectPublicKeyInfo
    org.bouncycastle.asn1.DERBitString getIssuerUniqueId() -> getIssuerUniqueId
    org.bouncycastle.asn1.DERBitString getSubjectUniqueId() -> getSubjectUniqueId
    org.bouncycastle.asn1.x509.Extensions getExtensions() -> getExtensions
    org.bouncycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
org.bouncycastle.asn1.x509.TBSCertificateStructure -> org.bouncycastle.asn1.x509.TBSCertificateStructure:
    org.bouncycastle.asn1.ASN1Sequence seq -> seq
    org.bouncycastle.asn1.ASN1Integer version -> version
    org.bouncycastle.asn1.ASN1Integer serialNumber -> serialNumber
    org.bouncycastle.asn1.x509.AlgorithmIdentifier signature -> signature
    org.bouncycastle.asn1.x500.X500Name issuer -> issuer
    org.bouncycastle.asn1.x509.Time startDate -> startDate
    org.bouncycastle.asn1.x509.Time endDate -> endDate
    org.bouncycastle.asn1.x500.X500Name subject -> subject
    org.bouncycastle.asn1.x509.SubjectPublicKeyInfo subjectPublicKeyInfo -> subjectPublicKeyInfo
    org.bouncycastle.asn1.DERBitString issuerUniqueId -> issuerUniqueId
    org.bouncycastle.asn1.DERBitString subjectUniqueId -> subjectUniqueId
    org.bouncycastle.asn1.x509.X509Extensions extensions -> extensions
    org.bouncycastle.asn1.x509.TBSCertificateStructure getInstance(org.bouncycastle.asn1.ASN1TaggedObject,boolean) -> getInstance
    org.bouncycastle.asn1.x509.TBSCertificateStructure getInstance(java.lang.Object) -> getInstance
    int getVersion() -> getVersion
    org.bouncycastle.asn1.ASN1Integer getVersionNumber() -> getVersionNumber
    org.bouncycastle.asn1.ASN1Integer getSerialNumber() -> getSerialNumber
    org.bouncycastle.asn1.x509.AlgorithmIdentifier getSignature() -> getSignature
    org.bouncycastle.asn1.x500.X500Name getIssuer() -> getIssuer
    org.bouncycastle.asn1.x509.Time getStartDate() -> getStartDate
    org.bouncycastle.asn1.x509.Time getEndDate() -> getEndDate
    org.bouncycastle.asn1.x500.X500Name getSubject() -> getSubject
    org.bouncycastle.asn1.x509.SubjectPublicKeyInfo getSubjectPublicKeyInfo() -> getSubjectPublicKeyInfo
    org.bouncycastle.asn1.DERBitString getIssuerUniqueId() -> getIssuerUniqueId
    org.bouncycastle.asn1.DERBitString getSubjectUniqueId() -> getSubjectUniqueId
    org.bouncycastle.asn1.x509.X509Extensions getExtensions() -> getExtensions
    org.bouncycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
org.bouncycastle.asn1.x509.Target -> org.bouncycastle.asn1.x509.Target:
    int targetName -> targetName
    int targetGroup -> targetGroup
    org.bouncycastle.asn1.x509.GeneralName targName -> targName
    org.bouncycastle.asn1.x509.GeneralName targGroup -> targGroup
    org.bouncycastle.asn1.x509.Target getInstance(java.lang.Object) -> getInstance
    org.bouncycastle.asn1.x509.GeneralName getTargetGroup() -> getTargetGroup
    org.bouncycastle.asn1.x509.GeneralName getTargetName() -> getTargetName
    org.bouncycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
org.bouncycastle.asn1.x509.TargetInformation -> org.bouncycastle.asn1.x509.TargetInformation:
    org.bouncycastle.asn1.ASN1Sequence targets -> targets
    org.bouncycastle.asn1.x509.TargetInformation getInstance(java.lang.Object) -> getInstance
    org.bouncycastle.asn1.x509.Targets[] getTargetsObjects() -> getTargetsObjects
    org.bouncycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
org.bouncycastle.asn1.x509.Targets -> org.bouncycastle.asn1.x509.Targets:
    org.bouncycastle.asn1.ASN1Sequence targets -> targets
    org.bouncycastle.asn1.x509.Targets getInstance(java.lang.Object) -> getInstance
    org.bouncycastle.asn1.x509.Target[] getTargets() -> getTargets
    org.bouncycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
org.bouncycastle.asn1.x509.Time -> org.bouncycastle.asn1.x509.Time:
    org.bouncycastle.asn1.ASN1Primitive time -> time
    org.bouncycastle.asn1.x509.Time getInstance(org.bouncycastle.asn1.ASN1TaggedObject,boolean) -> getInstance
    org.bouncycastle.asn1.x509.Time getInstance(java.lang.Object) -> getInstance
    java.lang.String getTime() -> getTime
    java.util.Date getDate() -> getDate
    org.bouncycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
    java.lang.String toString() -> toString
org.bouncycastle.asn1.x509.UserNotice -> org.bouncycastle.asn1.x509.UserNotice:
    org.bouncycastle.asn1.x509.NoticeReference noticeRef -> noticeRef
    org.bouncycastle.asn1.x509.DisplayText explicitText -> explicitText
    org.bouncycastle.asn1.x509.UserNotice getInstance(java.lang.Object) -> getInstance
    org.bouncycastle.asn1.x509.NoticeReference getNoticeRef() -> getNoticeRef
    org.bouncycastle.asn1.x509.DisplayText getExplicitText() -> getExplicitText
    org.bouncycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
org.bouncycastle.asn1.x509.V1TBSCertificateGenerator -> org.bouncycastle.asn1.x509.V1TBSCertificateGenerator:
    org.bouncycastle.asn1.DERTaggedObject version -> version
    org.bouncycastle.asn1.ASN1Integer serialNumber -> serialNumber
    org.bouncycastle.asn1.x509.AlgorithmIdentifier signature -> signature
    org.bouncycastle.asn1.x500.X500Name issuer -> issuer
    org.bouncycastle.asn1.x509.Time startDate -> startDate
    org.bouncycastle.asn1.x509.Time endDate -> endDate
    org.bouncycastle.asn1.x500.X500Name subject -> subject
    org.bouncycastle.asn1.x509.SubjectPublicKeyInfo subjectPublicKeyInfo -> subjectPublicKeyInfo
    void setSerialNumber(org.bouncycastle.asn1.ASN1Integer) -> setSerialNumber
    void setSignature(org.bouncycastle.asn1.x509.AlgorithmIdentifier) -> setSignature
    void setIssuer(org.bouncycastle.asn1.x509.X509Name) -> setIssuer
    void setIssuer(org.bouncycastle.asn1.x500.X500Name) -> setIssuer
    void setStartDate(org.bouncycastle.asn1.x509.Time) -> setStartDate
    void setStartDate(org.bouncycastle.asn1.ASN1UTCTime) -> setStartDate
    void setEndDate(org.bouncycastle.asn1.x509.Time) -> setEndDate
    void setEndDate(org.bouncycastle.asn1.ASN1UTCTime) -> setEndDate
    void setSubject(org.bouncycastle.asn1.x509.X509Name) -> setSubject
    void setSubject(org.bouncycastle.asn1.x500.X500Name) -> setSubject
    void setSubjectPublicKeyInfo(org.bouncycastle.asn1.x509.SubjectPublicKeyInfo) -> setSubjectPublicKeyInfo
    org.bouncycastle.asn1.x509.TBSCertificate generateTBSCertificate() -> generateTBSCertificate
org.bouncycastle.asn1.x509.V2AttributeCertificateInfoGenerator -> org.bouncycastle.asn1.x509.V2AttributeCertificateInfoGenerator:
    org.bouncycastle.asn1.ASN1Integer version -> version
    org.bouncycastle.asn1.x509.Holder holder -> holder
    org.bouncycastle.asn1.x509.AttCertIssuer issuer -> issuer
    org.bouncycastle.asn1.x509.AlgorithmIdentifier signature -> signature
    org.bouncycastle.asn1.ASN1Integer serialNumber -> serialNumber
    org.bouncycastle.asn1.ASN1EncodableVector attributes -> attributes
    org.bouncycastle.asn1.DERBitString issuerUniqueID -> issuerUniqueID
    org.bouncycastle.asn1.x509.Extensions extensions -> extensions
    org.bouncycastle.asn1.ASN1GeneralizedTime startDate -> startDate
    org.bouncycastle.asn1.ASN1GeneralizedTime endDate -> endDate
    void setHolder(org.bouncycastle.asn1.x509.Holder) -> setHolder
    void addAttribute(java.lang.String,org.bouncycastle.asn1.ASN1Encodable) -> addAttribute
    void addAttribute(org.bouncycastle.asn1.x509.Attribute) -> addAttribute
    void setSerialNumber(org.bouncycastle.asn1.ASN1Integer) -> setSerialNumber
    void setSignature(org.bouncycastle.asn1.x509.AlgorithmIdentifier) -> setSignature
    void setIssuer(org.bouncycastle.asn1.x509.AttCertIssuer) -> setIssuer
    void setStartDate(org.bouncycastle.asn1.ASN1GeneralizedTime) -> setStartDate
    void setEndDate(org.bouncycastle.asn1.ASN1GeneralizedTime) -> setEndDate
    void setIssuerUniqueID(org.bouncycastle.asn1.DERBitString) -> setIssuerUniqueID
    void setExtensions(org.bouncycastle.asn1.x509.X509Extensions) -> setExtensions
    void setExtensions(org.bouncycastle.asn1.x509.Extensions) -> setExtensions
    org.bouncycastle.asn1.x509.AttributeCertificateInfo generateAttributeCertificateInfo() -> generateAttributeCertificateInfo
org.bouncycastle.asn1.x509.V2Form -> org.bouncycastle.asn1.x509.V2Form:
    org.bouncycastle.asn1.x509.GeneralNames issuerName -> issuerName
    org.bouncycastle.asn1.x509.IssuerSerial baseCertificateID -> baseCertificateID
    org.bouncycastle.asn1.x509.ObjectDigestInfo objectDigestInfo -> objectDigestInfo
    org.bouncycastle.asn1.x509.V2Form getInstance(org.bouncycastle.asn1.ASN1TaggedObject,boolean) -> getInstance
    org.bouncycastle.asn1.x509.V2Form getInstance(java.lang.Object) -> getInstance
    org.bouncycastle.asn1.x509.GeneralNames getIssuerName() -> getIssuerName
    org.bouncycastle.asn1.x509.IssuerSerial getBaseCertificateID() -> getBaseCertificateID
    org.bouncycastle.asn1.x509.ObjectDigestInfo getObjectDigestInfo() -> getObjectDigestInfo
    org.bouncycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
org.bouncycastle.asn1.x509.V2TBSCertListGenerator -> org.bouncycastle.asn1.x509.V2TBSCertListGenerator:
    org.bouncycastle.asn1.ASN1Integer version -> version
    org.bouncycastle.asn1.x509.AlgorithmIdentifier signature -> signature
    org.bouncycastle.asn1.x500.X500Name issuer -> issuer
    org.bouncycastle.asn1.x509.Time thisUpdate -> thisUpdate
    org.bouncycastle.asn1.x509.Time nextUpdate -> nextUpdate
    org.bouncycastle.asn1.x509.Extensions extensions -> extensions
    org.bouncycastle.asn1.ASN1EncodableVector crlentries -> crlentries
    org.bouncycastle.asn1.ASN1Sequence[] reasons -> reasons
    void setSignature(org.bouncycastle.asn1.x509.AlgorithmIdentifier) -> setSignature
    void setIssuer(org.bouncycastle.asn1.x509.X509Name) -> setIssuer
    void setIssuer(org.bouncycastle.asn1.x500.X500Name) -> setIssuer
    void setThisUpdate(org.bouncycastle.asn1.ASN1UTCTime) -> setThisUpdate
    void setNextUpdate(org.bouncycastle.asn1.ASN1UTCTime) -> setNextUpdate
    void setThisUpdate(org.bouncycastle.asn1.x509.Time) -> setThisUpdate
    void setNextUpdate(org.bouncycastle.asn1.x509.Time) -> setNextUpdate
    void addCRLEntry(org.bouncycastle.asn1.ASN1Sequence) -> addCRLEntry
    void addCRLEntry(org.bouncycastle.asn1.ASN1Integer,org.bouncycastle.asn1.ASN1UTCTime,int) -> addCRLEntry
    void addCRLEntry(org.bouncycastle.asn1.ASN1Integer,org.bouncycastle.asn1.x509.Time,int) -> addCRLEntry
    void addCRLEntry(org.bouncycastle.asn1.ASN1Integer,org.bouncycastle.asn1.x509.Time,int,org.bouncycastle.asn1.ASN1GeneralizedTime) -> addCRLEntry
    void internalAddCRLEntry(org.bouncycastle.asn1.ASN1Integer,org.bouncycastle.asn1.x509.Time,org.bouncycastle.asn1.ASN1Sequence) -> internalAddCRLEntry
    void addCRLEntry(org.bouncycastle.asn1.ASN1Integer,org.bouncycastle.asn1.x509.Time,org.bouncycastle.asn1.x509.Extensions) -> addCRLEntry
    void setExtensions(org.bouncycastle.asn1.x509.X509Extensions) -> setExtensions
    void setExtensions(org.bouncycastle.asn1.x509.Extensions) -> setExtensions
    org.bouncycastle.asn1.x509.TBSCertList generateTBSCertList() -> generateTBSCertList
    org.bouncycastle.asn1.ASN1Sequence createReasonExtension(int) -> createReasonExtension
    org.bouncycastle.asn1.ASN1Sequence createInvalidityDateExtension(org.bouncycastle.asn1.ASN1GeneralizedTime) -> createInvalidityDateExtension
org.bouncycastle.asn1.x509.V3TBSCertificateGenerator -> org.bouncycastle.asn1.x509.V3TBSCertificateGenerator:
    org.bouncycastle.asn1.DERTaggedObject version -> version
    org.bouncycastle.asn1.ASN1Integer serialNumber -> serialNumber
    org.bouncycastle.asn1.x509.AlgorithmIdentifier signature -> signature
    org.bouncycastle.asn1.x500.X500Name issuer -> issuer
    org.bouncycastle.asn1.x509.Time startDate -> startDate
    org.bouncycastle.asn1.x509.Time endDate -> endDate
    org.bouncycastle.asn1.x500.X500Name subject -> subject
    org.bouncycastle.asn1.x509.SubjectPublicKeyInfo subjectPublicKeyInfo -> subjectPublicKeyInfo
    org.bouncycastle.asn1.x509.Extensions extensions -> extensions
    boolean altNamePresentAndCritical -> altNamePresentAndCritical
    org.bouncycastle.asn1.DERBitString issuerUniqueID -> issuerUniqueID
    org.bouncycastle.asn1.DERBitString subjectUniqueID -> subjectUniqueID
    void setSerialNumber(org.bouncycastle.asn1.ASN1Integer) -> setSerialNumber
    void setSignature(org.bouncycastle.asn1.x509.AlgorithmIdentifier) -> setSignature
    void setIssuer(org.bouncycastle.asn1.x509.X509Name) -> setIssuer
    void setIssuer(org.bouncycastle.asn1.x500.X500Name) -> setIssuer
    void setStartDate(org.bouncycastle.asn1.ASN1UTCTime) -> setStartDate
    void setStartDate(org.bouncycastle.asn1.x509.Time) -> setStartDate
    void setEndDate(org.bouncycastle.asn1.ASN1UTCTime) -> setEndDate
    void setEndDate(org.bouncycastle.asn1.x509.Time) -> setEndDate
    void setSubject(org.bouncycastle.asn1.x509.X509Name) -> setSubject
    void setSubject(org.bouncycastle.asn1.x500.X500Name) -> setSubject
    void setIssuerUniqueID(org.bouncycastle.asn1.DERBitString) -> setIssuerUniqueID
    void setSubjectUniqueID(org.bouncycastle.asn1.DERBitString) -> setSubjectUniqueID
    void setSubjectPublicKeyInfo(org.bouncycastle.asn1.x509.SubjectPublicKeyInfo) -> setSubjectPublicKeyInfo
    void setExtensions(org.bouncycastle.asn1.x509.X509Extensions) -> setExtensions
    void setExtensions(org.bouncycastle.asn1.x509.Extensions) -> setExtensions
    org.bouncycastle.asn1.x509.TBSCertificate generateTBSCertificate() -> generateTBSCertificate
org.bouncycastle.asn1.x509.X509AttributeIdentifiers -> org.bouncycastle.asn1.x509.X509AttributeIdentifiers:
    org.bouncycastle.asn1.ASN1ObjectIdentifier RoleSyntax -> RoleSyntax
    org.bouncycastle.asn1.ASN1ObjectIdentifier id_pe_ac_auditIdentity -> id_pe_ac_auditIdentity
    org.bouncycastle.asn1.ASN1ObjectIdentifier id_pe_aaControls -> id_pe_aaControls
    org.bouncycastle.asn1.ASN1ObjectIdentifier id_pe_ac_proxying -> id_pe_ac_proxying
    org.bouncycastle.asn1.ASN1ObjectIdentifier id_ce_targetInformation -> id_ce_targetInformation
    org.bouncycastle.asn1.ASN1ObjectIdentifier id_aca -> id_aca
    org.bouncycastle.asn1.ASN1ObjectIdentifier id_aca_authenticationInfo -> id_aca_authenticationInfo
    org.bouncycastle.asn1.ASN1ObjectIdentifier id_aca_accessIdentity -> id_aca_accessIdentity
    org.bouncycastle.asn1.ASN1ObjectIdentifier id_aca_chargingIdentity -> id_aca_chargingIdentity
    org.bouncycastle.asn1.ASN1ObjectIdentifier id_aca_group -> id_aca_group
    org.bouncycastle.asn1.ASN1ObjectIdentifier id_aca_encAttrs -> id_aca_encAttrs
    org.bouncycastle.asn1.ASN1ObjectIdentifier id_at_role -> id_at_role
    org.bouncycastle.asn1.ASN1ObjectIdentifier id_at_clearance -> id_at_clearance
org.bouncycastle.asn1.x509.X509CertificateStructure -> org.bouncycastle.asn1.x509.X509CertificateStructure:
    org.bouncycastle.asn1.ASN1Sequence seq -> seq
    org.bouncycastle.asn1.x509.TBSCertificateStructure tbsCert -> tbsCert
    org.bouncycastle.asn1.x509.AlgorithmIdentifier sigAlgId -> sigAlgId
    org.bouncycastle.asn1.DERBitString sig -> sig
    org.bouncycastle.asn1.x509.X509CertificateStructure getInstance(org.bouncycastle.asn1.ASN1TaggedObject,boolean) -> getInstance
    org.bouncycastle.asn1.x509.X509CertificateStructure getInstance(java.lang.Object) -> getInstance
    org.bouncycastle.asn1.x509.TBSCertificateStructure getTBSCertificate() -> getTBSCertificate
    int getVersion() -> getVersion
    org.bouncycastle.asn1.ASN1Integer getSerialNumber() -> getSerialNumber
    org.bouncycastle.asn1.x500.X500Name getIssuer() -> getIssuer
    org.bouncycastle.asn1.x509.Time getStartDate() -> getStartDate
    org.bouncycastle.asn1.x509.Time getEndDate() -> getEndDate
    org.bouncycastle.asn1.x500.X500Name getSubject() -> getSubject
    org.bouncycastle.asn1.x509.SubjectPublicKeyInfo getSubjectPublicKeyInfo() -> getSubjectPublicKeyInfo
    org.bouncycastle.asn1.x509.AlgorithmIdentifier getSignatureAlgorithm() -> getSignatureAlgorithm
    org.bouncycastle.asn1.DERBitString getSignature() -> getSignature
    org.bouncycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
org.bouncycastle.asn1.x509.X509DefaultEntryConverter -> org.bouncycastle.asn1.x509.X509DefaultEntryConverter:
    org.bouncycastle.asn1.ASN1Primitive getConvertedValue(org.bouncycastle.asn1.ASN1ObjectIdentifier,java.lang.String) -> getConvertedValue
org.bouncycastle.asn1.x509.X509Extension -> org.bouncycastle.asn1.x509.X509Extension:
    org.bouncycastle.asn1.ASN1ObjectIdentifier subjectDirectoryAttributes -> subjectDirectoryAttributes
    org.bouncycastle.asn1.ASN1ObjectIdentifier subjectKeyIdentifier -> subjectKeyIdentifier
    org.bouncycastle.asn1.ASN1ObjectIdentifier keyUsage -> keyUsage
    org.bouncycastle.asn1.ASN1ObjectIdentifier privateKeyUsagePeriod -> privateKeyUsagePeriod
    org.bouncycastle.asn1.ASN1ObjectIdentifier subjectAlternativeName -> subjectAlternativeName
    org.bouncycastle.asn1.ASN1ObjectIdentifier issuerAlternativeName -> issuerAlternativeName
    org.bouncycastle.asn1.ASN1ObjectIdentifier basicConstraints -> basicConstraints
    org.bouncycastle.asn1.ASN1ObjectIdentifier cRLNumber -> cRLNumber
    org.bouncycastle.asn1.ASN1ObjectIdentifier reasonCode -> reasonCode
    org.bouncycastle.asn1.ASN1ObjectIdentifier instructionCode -> instructionCode
    org.bouncycastle.asn1.ASN1ObjectIdentifier invalidityDate -> invalidityDate
    org.bouncycastle.asn1.ASN1ObjectIdentifier deltaCRLIndicator -> deltaCRLIndicator
    org.bouncycastle.asn1.ASN1ObjectIdentifier issuingDistributionPoint -> issuingDistributionPoint
    org.bouncycastle.asn1.ASN1ObjectIdentifier certificateIssuer -> certificateIssuer
    org.bouncycastle.asn1.ASN1ObjectIdentifier nameConstraints -> nameConstraints
    org.bouncycastle.asn1.ASN1ObjectIdentifier cRLDistributionPoints -> cRLDistributionPoints
    org.bouncycastle.asn1.ASN1ObjectIdentifier certificatePolicies -> certificatePolicies
    org.bouncycastle.asn1.ASN1ObjectIdentifier policyMappings -> policyMappings
    org.bouncycastle.asn1.ASN1ObjectIdentifier authorityKeyIdentifier -> authorityKeyIdentifier
    org.bouncycastle.asn1.ASN1ObjectIdentifier policyConstraints -> policyConstraints
    org.bouncycastle.asn1.ASN1ObjectIdentifier extendedKeyUsage -> extendedKeyUsage
    org.bouncycastle.asn1.ASN1ObjectIdentifier freshestCRL -> freshestCRL
    org.bouncycastle.asn1.ASN1ObjectIdentifier inhibitAnyPolicy -> inhibitAnyPolicy
    org.bouncycastle.asn1.ASN1ObjectIdentifier authorityInfoAccess -> authorityInfoAccess
    org.bouncycastle.asn1.ASN1ObjectIdentifier subjectInfoAccess -> subjectInfoAccess
    org.bouncycastle.asn1.ASN1ObjectIdentifier logoType -> logoType
    org.bouncycastle.asn1.ASN1ObjectIdentifier biometricInfo -> biometricInfo
    org.bouncycastle.asn1.ASN1ObjectIdentifier qCStatements -> qCStatements
    org.bouncycastle.asn1.ASN1ObjectIdentifier auditIdentity -> auditIdentity
    org.bouncycastle.asn1.ASN1ObjectIdentifier noRevAvail -> noRevAvail
    org.bouncycastle.asn1.ASN1ObjectIdentifier targetInformation -> targetInformation
    boolean critical -> critical
    org.bouncycastle.asn1.ASN1OctetString value -> value
    boolean isCritical() -> isCritical
    org.bouncycastle.asn1.ASN1OctetString getValue() -> getValue
    org.bouncycastle.asn1.ASN1Encodable getParsedValue() -> getParsedValue
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    org.bouncycastle.asn1.ASN1Primitive convertValueToObject(org.bouncycastle.asn1.x509.X509Extension) -> convertValueToObject
org.bouncycastle.asn1.x509.X509Extensions -> org.bouncycastle.asn1.x509.X509Extensions:
    org.bouncycastle.asn1.ASN1ObjectIdentifier SubjectDirectoryAttributes -> SubjectDirectoryAttributes
    org.bouncycastle.asn1.ASN1ObjectIdentifier SubjectKeyIdentifier -> SubjectKeyIdentifier
    org.bouncycastle.asn1.ASN1ObjectIdentifier KeyUsage -> KeyUsage
    org.bouncycastle.asn1.ASN1ObjectIdentifier PrivateKeyUsagePeriod -> PrivateKeyUsagePeriod
    org.bouncycastle.asn1.ASN1ObjectIdentifier SubjectAlternativeName -> SubjectAlternativeName
    org.bouncycastle.asn1.ASN1ObjectIdentifier IssuerAlternativeName -> IssuerAlternativeName
    org.bouncycastle.asn1.ASN1ObjectIdentifier BasicConstraints -> BasicConstraints
    org.bouncycastle.asn1.ASN1ObjectIdentifier CRLNumber -> CRLNumber
    org.bouncycastle.asn1.ASN1ObjectIdentifier ReasonCode -> ReasonCode
    org.bouncycastle.asn1.ASN1ObjectIdentifier InstructionCode -> InstructionCode
    org.bouncycastle.asn1.ASN1ObjectIdentifier InvalidityDate -> InvalidityDate
    org.bouncycastle.asn1.ASN1ObjectIdentifier DeltaCRLIndicator -> DeltaCRLIndicator
    org.bouncycastle.asn1.ASN1ObjectIdentifier IssuingDistributionPoint -> IssuingDistributionPoint
    org.bouncycastle.asn1.ASN1ObjectIdentifier CertificateIssuer -> CertificateIssuer
    org.bouncycastle.asn1.ASN1ObjectIdentifier NameConstraints -> NameConstraints
    org.bouncycastle.asn1.ASN1ObjectIdentifier CRLDistributionPoints -> CRLDistributionPoints
    org.bouncycastle.asn1.ASN1ObjectIdentifier CertificatePolicies -> CertificatePolicies
    org.bouncycastle.asn1.ASN1ObjectIdentifier PolicyMappings -> PolicyMappings
    org.bouncycastle.asn1.ASN1ObjectIdentifier AuthorityKeyIdentifier -> AuthorityKeyIdentifier
    org.bouncycastle.asn1.ASN1ObjectIdentifier PolicyConstraints -> PolicyConstraints
    org.bouncycastle.asn1.ASN1ObjectIdentifier ExtendedKeyUsage -> ExtendedKeyUsage
    org.bouncycastle.asn1.ASN1ObjectIdentifier FreshestCRL -> FreshestCRL
    org.bouncycastle.asn1.ASN1ObjectIdentifier InhibitAnyPolicy -> InhibitAnyPolicy
    org.bouncycastle.asn1.ASN1ObjectIdentifier AuthorityInfoAccess -> AuthorityInfoAccess
    org.bouncycastle.asn1.ASN1ObjectIdentifier SubjectInfoAccess -> SubjectInfoAccess
    org.bouncycastle.asn1.ASN1ObjectIdentifier LogoType -> LogoType
    org.bouncycastle.asn1.ASN1ObjectIdentifier BiometricInfo -> BiometricInfo
    org.bouncycastle.asn1.ASN1ObjectIdentifier QCStatements -> QCStatements
    org.bouncycastle.asn1.ASN1ObjectIdentifier AuditIdentity -> AuditIdentity
    org.bouncycastle.asn1.ASN1ObjectIdentifier NoRevAvail -> NoRevAvail
    org.bouncycastle.asn1.ASN1ObjectIdentifier TargetInformation -> TargetInformation
    java.util.Hashtable extensions -> extensions
    java.util.Vector ordering -> ordering
    org.bouncycastle.asn1.x509.X509Extensions getInstance(org.bouncycastle.asn1.ASN1TaggedObject,boolean) -> getInstance
    org.bouncycastle.asn1.x509.X509Extensions getInstance(java.lang.Object) -> getInstance
    java.util.Enumeration oids() -> oids
    org.bouncycastle.asn1.x509.X509Extension getExtension(org.bouncycastle.asn1.ASN1ObjectIdentifier) -> getExtension
    org.bouncycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
    boolean equivalent(org.bouncycastle.asn1.x509.X509Extensions) -> equivalent
    org.bouncycastle.asn1.ASN1ObjectIdentifier[] getExtensionOIDs() -> getExtensionOIDs
    org.bouncycastle.asn1.ASN1ObjectIdentifier[] getNonCriticalExtensionOIDs() -> getNonCriticalExtensionOIDs
    org.bouncycastle.asn1.ASN1ObjectIdentifier[] getCriticalExtensionOIDs() -> getCriticalExtensionOIDs
    org.bouncycastle.asn1.ASN1ObjectIdentifier[] getExtensionOIDs(boolean) -> getExtensionOIDs
    org.bouncycastle.asn1.ASN1ObjectIdentifier[] toOidArray(java.util.Vector) -> toOidArray
org.bouncycastle.asn1.x509.X509ExtensionsGenerator -> org.bouncycastle.asn1.x509.X509ExtensionsGenerator:
    java.util.Hashtable extensions -> extensions
    java.util.Vector extOrdering -> extOrdering
    void reset() -> reset
    void addExtension(org.bouncycastle.asn1.ASN1ObjectIdentifier,boolean,org.bouncycastle.asn1.ASN1Encodable) -> addExtension
    void addExtension(org.bouncycastle.asn1.ASN1ObjectIdentifier,boolean,byte[]) -> addExtension
    boolean isEmpty() -> isEmpty
    org.bouncycastle.asn1.x509.X509Extensions generate() -> generate
org.bouncycastle.asn1.x509.X509Name -> org.bouncycastle.asn1.x509.X509Name:
    org.bouncycastle.asn1.ASN1ObjectIdentifier C -> C
    org.bouncycastle.asn1.ASN1ObjectIdentifier O -> O
    org.bouncycastle.asn1.ASN1ObjectIdentifier OU -> OU
    org.bouncycastle.asn1.ASN1ObjectIdentifier T -> T
    org.bouncycastle.asn1.ASN1ObjectIdentifier CN -> CN
    org.bouncycastle.asn1.ASN1ObjectIdentifier SN -> SN
    org.bouncycastle.asn1.ASN1ObjectIdentifier STREET -> STREET
    org.bouncycastle.asn1.ASN1ObjectIdentifier SERIALNUMBER -> SERIALNUMBER
    org.bouncycastle.asn1.ASN1ObjectIdentifier L -> L
    org.bouncycastle.asn1.ASN1ObjectIdentifier ST -> ST
    org.bouncycastle.asn1.ASN1ObjectIdentifier SURNAME -> SURNAME
    org.bouncycastle.asn1.ASN1ObjectIdentifier GIVENNAME -> GIVENNAME
    org.bouncycastle.asn1.ASN1ObjectIdentifier INITIALS -> INITIALS
    org.bouncycastle.asn1.ASN1ObjectIdentifier GENERATION -> GENERATION
    org.bouncycastle.asn1.ASN1ObjectIdentifier UNIQUE_IDENTIFIER -> UNIQUE_IDENTIFIER
    org.bouncycastle.asn1.ASN1ObjectIdentifier BUSINESS_CATEGORY -> BUSINESS_CATEGORY
    org.bouncycastle.asn1.ASN1ObjectIdentifier POSTAL_CODE -> POSTAL_CODE
    org.bouncycastle.asn1.ASN1ObjectIdentifier DN_QUALIFIER -> DN_QUALIFIER
    org.bouncycastle.asn1.ASN1ObjectIdentifier PSEUDONYM -> PSEUDONYM
    org.bouncycastle.asn1.ASN1ObjectIdentifier DATE_OF_BIRTH -> DATE_OF_BIRTH
    org.bouncycastle.asn1.ASN1ObjectIdentifier PLACE_OF_BIRTH -> PLACE_OF_BIRTH
    org.bouncycastle.asn1.ASN1ObjectIdentifier GENDER -> GENDER
    org.bouncycastle.asn1.ASN1ObjectIdentifier COUNTRY_OF_CITIZENSHIP -> COUNTRY_OF_CITIZENSHIP
    org.bouncycastle.asn1.ASN1ObjectIdentifier COUNTRY_OF_RESIDENCE -> COUNTRY_OF_RESIDENCE
    org.bouncycastle.asn1.ASN1ObjectIdentifier NAME_AT_BIRTH -> NAME_AT_BIRTH
    org.bouncycastle.asn1.ASN1ObjectIdentifier POSTAL_ADDRESS -> POSTAL_ADDRESS
    org.bouncycastle.asn1.ASN1ObjectIdentifier DMD_NAME -> DMD_NAME
    org.bouncycastle.asn1.ASN1ObjectIdentifier TELEPHONE_NUMBER -> TELEPHONE_NUMBER
    org.bouncycastle.asn1.ASN1ObjectIdentifier NAME -> NAME
    org.bouncycastle.asn1.ASN1ObjectIdentifier EmailAddress -> EmailAddress
    org.bouncycastle.asn1.ASN1ObjectIdentifier UnstructuredName -> UnstructuredName
    org.bouncycastle.asn1.ASN1ObjectIdentifier UnstructuredAddress -> UnstructuredAddress
    org.bouncycastle.asn1.ASN1ObjectIdentifier E -> E
    org.bouncycastle.asn1.ASN1ObjectIdentifier DC -> DC
    org.bouncycastle.asn1.ASN1ObjectIdentifier UID -> UID
    boolean DefaultReverse -> DefaultReverse
    java.util.Hashtable DefaultSymbols -> DefaultSymbols
    java.util.Hashtable RFC2253Symbols -> RFC2253Symbols
    java.util.Hashtable RFC1779Symbols -> RFC1779Symbols
    java.util.Hashtable DefaultLookUp -> DefaultLookUp
    java.util.Hashtable OIDLookUp -> OIDLookUp
    java.util.Hashtable SymbolLookUp -> SymbolLookUp
    java.lang.Boolean TRUE -> TRUE
    java.lang.Boolean FALSE -> FALSE
    org.bouncycastle.asn1.x509.X509NameEntryConverter converter -> converter
    java.util.Vector ordering -> ordering
    java.util.Vector values -> values
    java.util.Vector added -> added
    org.bouncycastle.asn1.ASN1Sequence seq -> seq
    boolean isHashCodeCalculated -> isHashCodeCalculated
    int hashCodeValue -> hashCodeValue
    org.bouncycastle.asn1.x509.X509Name getInstance(org.bouncycastle.asn1.ASN1TaggedObject,boolean) -> getInstance
    org.bouncycastle.asn1.x509.X509Name getInstance(java.lang.Object) -> getInstance
    org.bouncycastle.asn1.ASN1ObjectIdentifier decodeOID(java.lang.String,java.util.Hashtable) -> decodeOID
    java.lang.String unescape(java.lang.String) -> unescape
    void addEntry(java.util.Hashtable,java.lang.String,java.lang.Boolean) -> addEntry
    java.util.Vector getOIDs() -> getOIDs
    java.util.Vector getValues() -> getValues
    java.util.Vector getValues(org.bouncycastle.asn1.ASN1ObjectIdentifier) -> getValues
    org.bouncycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
    boolean equals(java.lang.Object,boolean) -> equals
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    boolean equivalentStrings(java.lang.String,java.lang.String) -> equivalentStrings
    java.lang.String canonicalize(java.lang.String) -> canonicalize
    org.bouncycastle.asn1.ASN1Primitive decodeObject(java.lang.String) -> decodeObject
    java.lang.String stripInternalSpaces(java.lang.String) -> stripInternalSpaces
    void appendValue(java.lang.StringBuffer,java.util.Hashtable,org.bouncycastle.asn1.ASN1ObjectIdentifier,java.lang.String) -> appendValue
    java.lang.String toString(boolean,java.util.Hashtable) -> toString
    java.lang.String bytesToString(byte[]) -> bytesToString
    java.lang.String toString() -> toString
org.bouncycastle.asn1.x509.X509NameEntryConverter -> org.bouncycastle.asn1.x509.X509NameEntryConverter:
    org.bouncycastle.asn1.ASN1Primitive convertHexEncoded(java.lang.String,int) -> convertHexEncoded
    boolean canBePrintable(java.lang.String) -> canBePrintable
    org.bouncycastle.asn1.ASN1Primitive getConvertedValue(org.bouncycastle.asn1.ASN1ObjectIdentifier,java.lang.String) -> getConvertedValue
org.bouncycastle.asn1.x509.X509NameTokenizer -> org.bouncycastle.asn1.x509.X509NameTokenizer:
    java.lang.String value -> value
    int index -> index
    char separator -> separator
    java.lang.StringBuffer buf -> buf
    boolean hasMoreTokens() -> hasMoreTokens
    java.lang.String nextToken() -> nextToken
org.bouncycastle.asn1.x509.X509ObjectIdentifiers -> org.bouncycastle.asn1.x509.X509ObjectIdentifiers:
    org.bouncycastle.asn1.ASN1ObjectIdentifier commonName -> commonName
    org.bouncycastle.asn1.ASN1ObjectIdentifier countryName -> countryName
    org.bouncycastle.asn1.ASN1ObjectIdentifier localityName -> localityName
    org.bouncycastle.asn1.ASN1ObjectIdentifier stateOrProvinceName -> stateOrProvinceName
    org.bouncycastle.asn1.ASN1ObjectIdentifier organization -> organization
    org.bouncycastle.asn1.ASN1ObjectIdentifier organizationalUnitName -> organizationalUnitName
    org.bouncycastle.asn1.ASN1ObjectIdentifier id_at_telephoneNumber -> id_at_telephoneNumber
    org.bouncycastle.asn1.ASN1ObjectIdentifier id_at_name -> id_at_name
    org.bouncycastle.asn1.ASN1ObjectIdentifier id_SHA1 -> id_SHA1
    org.bouncycastle.asn1.ASN1ObjectIdentifier ripemd160 -> ripemd160
    org.bouncycastle.asn1.ASN1ObjectIdentifier ripemd160WithRSAEncryption -> ripemd160WithRSAEncryption
    org.bouncycastle.asn1.ASN1ObjectIdentifier id_ea_rsa -> id_ea_rsa
    org.bouncycastle.asn1.ASN1ObjectIdentifier id_pkix -> id_pkix
    org.bouncycastle.asn1.ASN1ObjectIdentifier id_pe -> id_pe
    org.bouncycastle.asn1.ASN1ObjectIdentifier id_ce -> id_ce
    org.bouncycastle.asn1.ASN1ObjectIdentifier id_ad -> id_ad
    org.bouncycastle.asn1.ASN1ObjectIdentifier id_ad_caIssuers -> id_ad_caIssuers
    org.bouncycastle.asn1.ASN1ObjectIdentifier id_ad_ocsp -> id_ad_ocsp
    org.bouncycastle.asn1.ASN1ObjectIdentifier ocspAccessMethod -> ocspAccessMethod
    org.bouncycastle.asn1.ASN1ObjectIdentifier crlAccessMethod -> crlAccessMethod
org.bouncycastle.asn1.x509.qualified.BiometricData -> org.bouncycastle.asn1.x509.qualified.BiometricData:
    org.bouncycastle.asn1.x509.qualified.TypeOfBiometricData typeOfBiometricData -> typeOfBiometricData
    org.bouncycastle.asn1.x509.AlgorithmIdentifier hashAlgorithm -> hashAlgorithm
    org.bouncycastle.asn1.ASN1OctetString biometricDataHash -> biometricDataHash
    org.bouncycastle.asn1.DERIA5String sourceDataUri -> sourceDataUri
    org.bouncycastle.asn1.x509.qualified.BiometricData getInstance(java.lang.Object) -> getInstance
    org.bouncycastle.asn1.x509.qualified.TypeOfBiometricData getTypeOfBiometricData() -> getTypeOfBiometricData
    org.bouncycastle.asn1.x509.AlgorithmIdentifier getHashAlgorithm() -> getHashAlgorithm
    org.bouncycastle.asn1.ASN1OctetString getBiometricDataHash() -> getBiometricDataHash
    org.bouncycastle.asn1.DERIA5String getSourceDataUri() -> getSourceDataUri
    org.bouncycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
org.bouncycastle.asn1.x509.qualified.ETSIQCObjectIdentifiers -> org.bouncycastle.asn1.x509.qualified.ETSIQCObjectIdentifiers:
    org.bouncycastle.asn1.ASN1ObjectIdentifier id_etsi_qcs_QcCompliance -> id_etsi_qcs_QcCompliance
    org.bouncycastle.asn1.ASN1ObjectIdentifier id_etsi_qcs_LimiteValue -> id_etsi_qcs_LimiteValue
    org.bouncycastle.asn1.ASN1ObjectIdentifier id_etsi_qcs_RetentionPeriod -> id_etsi_qcs_RetentionPeriod
    org.bouncycastle.asn1.ASN1ObjectIdentifier id_etsi_qcs_QcSSCD -> id_etsi_qcs_QcSSCD
org.bouncycastle.asn1.x509.qualified.Iso4217CurrencyCode -> org.bouncycastle.asn1.x509.qualified.Iso4217CurrencyCode:
    int ALPHABETIC_MAXSIZE -> ALPHABETIC_MAXSIZE
    int NUMERIC_MINSIZE -> NUMERIC_MINSIZE
    int NUMERIC_MAXSIZE -> NUMERIC_MAXSIZE
    org.bouncycastle.asn1.ASN1Encodable obj -> obj
    int numeric -> numeric
    org.bouncycastle.asn1.x509.qualified.Iso4217CurrencyCode getInstance(java.lang.Object) -> getInstance
    boolean isAlphabetic() -> isAlphabetic
    java.lang.String getAlphabetic() -> getAlphabetic
    int getNumeric() -> getNumeric
    org.bouncycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
org.bouncycastle.asn1.x509.qualified.MonetaryValue -> org.bouncycastle.asn1.x509.qualified.MonetaryValue:
    org.bouncycastle.asn1.x509.qualified.Iso4217CurrencyCode currency -> currency
    org.bouncycastle.asn1.ASN1Integer amount -> amount
    org.bouncycastle.asn1.ASN1Integer exponent -> exponent
    org.bouncycastle.asn1.x509.qualified.MonetaryValue getInstance(java.lang.Object) -> getInstance
    org.bouncycastle.asn1.x509.qualified.Iso4217CurrencyCode getCurrency() -> getCurrency
    java.math.BigInteger getAmount() -> getAmount
    java.math.BigInteger getExponent() -> getExponent
    org.bouncycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
org.bouncycastle.asn1.x509.qualified.QCStatement -> org.bouncycastle.asn1.x509.qualified.QCStatement:
    org.bouncycastle.asn1.ASN1ObjectIdentifier qcStatementId -> qcStatementId
    org.bouncycastle.asn1.ASN1Encodable qcStatementInfo -> qcStatementInfo
    org.bouncycastle.asn1.x509.qualified.QCStatement getInstance(java.lang.Object) -> getInstance
    org.bouncycastle.asn1.ASN1ObjectIdentifier getStatementId() -> getStatementId
    org.bouncycastle.asn1.ASN1Encodable getStatementInfo() -> getStatementInfo
    org.bouncycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
org.bouncycastle.asn1.x509.qualified.RFC3739QCObjectIdentifiers -> org.bouncycastle.asn1.x509.qualified.RFC3739QCObjectIdentifiers:
    org.bouncycastle.asn1.ASN1ObjectIdentifier id_qcs_pkixQCSyntax_v1 -> id_qcs_pkixQCSyntax_v1
    org.bouncycastle.asn1.ASN1ObjectIdentifier id_qcs_pkixQCSyntax_v2 -> id_qcs_pkixQCSyntax_v2
org.bouncycastle.asn1.x509.qualified.SemanticsInformation -> org.bouncycastle.asn1.x509.qualified.SemanticsInformation:
    org.bouncycastle.asn1.ASN1ObjectIdentifier semanticsIdentifier -> semanticsIdentifier
    org.bouncycastle.asn1.x509.GeneralName[] nameRegistrationAuthorities -> nameRegistrationAuthorities
    org.bouncycastle.asn1.x509.qualified.SemanticsInformation getInstance(java.lang.Object) -> getInstance
    org.bouncycastle.asn1.ASN1ObjectIdentifier getSemanticsIdentifier() -> getSemanticsIdentifier
    org.bouncycastle.asn1.x509.GeneralName[] getNameRegistrationAuthorities() -> getNameRegistrationAuthorities
    org.bouncycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
org.bouncycastle.asn1.x509.qualified.TypeOfBiometricData -> org.bouncycastle.asn1.x509.qualified.TypeOfBiometricData:
    int PICTURE -> PICTURE
    int HANDWRITTEN_SIGNATURE -> HANDWRITTEN_SIGNATURE
    org.bouncycastle.asn1.ASN1Encodable obj -> obj
    org.bouncycastle.asn1.x509.qualified.TypeOfBiometricData getInstance(java.lang.Object) -> getInstance
    boolean isPredefined() -> isPredefined
    int getPredefinedBiometricType() -> getPredefinedBiometricType
    org.bouncycastle.asn1.ASN1ObjectIdentifier getBiometricDataOid() -> getBiometricDataOid
    org.bouncycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
org.bouncycastle.asn1.x509.sigi.NameOrPseudonym -> org.bouncycastle.asn1.x509.sigi.NameOrPseudonym:
    org.bouncycastle.asn1.x500.DirectoryString pseudonym -> pseudonym
    org.bouncycastle.asn1.x500.DirectoryString surname -> surname
    org.bouncycastle.asn1.ASN1Sequence givenName -> givenName
    org.bouncycastle.asn1.x509.sigi.NameOrPseudonym getInstance(java.lang.Object) -> getInstance
    org.bouncycastle.asn1.x500.DirectoryString getPseudonym() -> getPseudonym
    org.bouncycastle.asn1.x500.DirectoryString getSurname() -> getSurname
    org.bouncycastle.asn1.x500.DirectoryString[] getGivenName() -> getGivenName
    org.bouncycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
org.bouncycastle.asn1.x509.sigi.PersonalData -> org.bouncycastle.asn1.x509.sigi.PersonalData:
    org.bouncycastle.asn1.x509.sigi.NameOrPseudonym nameOrPseudonym -> nameOrPseudonym
    java.math.BigInteger nameDistinguisher -> nameDistinguisher
    org.bouncycastle.asn1.ASN1GeneralizedTime dateOfBirth -> dateOfBirth
    org.bouncycastle.asn1.x500.DirectoryString placeOfBirth -> placeOfBirth
    java.lang.String gender -> gender
    org.bouncycastle.asn1.x500.DirectoryString postalAddress -> postalAddress
    org.bouncycastle.asn1.x509.sigi.PersonalData getInstance(java.lang.Object) -> getInstance
    org.bouncycastle.asn1.x509.sigi.NameOrPseudonym getNameOrPseudonym() -> getNameOrPseudonym
    java.math.BigInteger getNameDistinguisher() -> getNameDistinguisher
    org.bouncycastle.asn1.ASN1GeneralizedTime getDateOfBirth() -> getDateOfBirth
    org.bouncycastle.asn1.x500.DirectoryString getPlaceOfBirth() -> getPlaceOfBirth
    java.lang.String getGender() -> getGender
    org.bouncycastle.asn1.x500.DirectoryString getPostalAddress() -> getPostalAddress
    org.bouncycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
org.bouncycastle.asn1.x509.sigi.SigIObjectIdentifiers -> org.bouncycastle.asn1.x509.sigi.SigIObjectIdentifiers:
    org.bouncycastle.asn1.ASN1ObjectIdentifier id_sigi -> id_sigi
    org.bouncycastle.asn1.ASN1ObjectIdentifier id_sigi_kp -> id_sigi_kp
    org.bouncycastle.asn1.ASN1ObjectIdentifier id_sigi_cp -> id_sigi_cp
    org.bouncycastle.asn1.ASN1ObjectIdentifier id_sigi_on -> id_sigi_on
    org.bouncycastle.asn1.ASN1ObjectIdentifier id_sigi_kp_directoryService -> id_sigi_kp_directoryService
    org.bouncycastle.asn1.ASN1ObjectIdentifier id_sigi_on_personalData -> id_sigi_on_personalData
    org.bouncycastle.asn1.ASN1ObjectIdentifier id_sigi_cp_sigconform -> id_sigi_cp_sigconform
org.bouncycastle.asn1.x9.DHDomainParameters -> org.bouncycastle.asn1.x9.DHDomainParameters:
    org.bouncycastle.asn1.ASN1Integer p -> p
    org.bouncycastle.asn1.ASN1Integer g -> g
    org.bouncycastle.asn1.ASN1Integer q -> q
    org.bouncycastle.asn1.ASN1Integer j -> j
    org.bouncycastle.asn1.x9.DHValidationParms validationParms -> validationParms
    org.bouncycastle.asn1.x9.DHDomainParameters getInstance(org.bouncycastle.asn1.ASN1TaggedObject,boolean) -> getInstance
    org.bouncycastle.asn1.x9.DHDomainParameters getInstance(java.lang.Object) -> getInstance
    org.bouncycastle.asn1.ASN1Encodable getNext(java.util.Enumeration) -> getNext
    org.bouncycastle.asn1.ASN1Integer getP() -> getP
    org.bouncycastle.asn1.ASN1Integer getG() -> getG
    org.bouncycastle.asn1.ASN1Integer getQ() -> getQ
    org.bouncycastle.asn1.ASN1Integer getJ() -> getJ
    org.bouncycastle.asn1.x9.DHValidationParms getValidationParms() -> getValidationParms
    org.bouncycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
org.bouncycastle.asn1.x9.DHPublicKey -> org.bouncycastle.asn1.x9.DHPublicKey:
    org.bouncycastle.asn1.ASN1Integer y -> y
    org.bouncycastle.asn1.x9.DHPublicKey getInstance(org.bouncycastle.asn1.ASN1TaggedObject,boolean) -> getInstance
    org.bouncycastle.asn1.x9.DHPublicKey getInstance(java.lang.Object) -> getInstance
    org.bouncycastle.asn1.ASN1Integer getY() -> getY
    org.bouncycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
org.bouncycastle.asn1.x9.DHValidationParms -> org.bouncycastle.asn1.x9.DHValidationParms:
    org.bouncycastle.asn1.DERBitString seed -> seed
    org.bouncycastle.asn1.ASN1Integer pgenCounter -> pgenCounter
    org.bouncycastle.asn1.x9.DHValidationParms getInstance(org.bouncycastle.asn1.ASN1TaggedObject,boolean) -> getInstance
    org.bouncycastle.asn1.x9.DHValidationParms getInstance(java.lang.Object) -> getInstance
    org.bouncycastle.asn1.DERBitString getSeed() -> getSeed
    org.bouncycastle.asn1.ASN1Integer getPgenCounter() -> getPgenCounter
    org.bouncycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
org.bouncycastle.asn1.x9.ECNamedCurveTable -> org.bouncycastle.asn1.x9.ECNamedCurveTable:
    org.bouncycastle.asn1.x9.X9ECParameters getByName(java.lang.String) -> getByName
    org.bouncycastle.asn1.ASN1ObjectIdentifier getOID(java.lang.String) -> getOID
    org.bouncycastle.asn1.x9.X9ECParameters getByOID(org.bouncycastle.asn1.ASN1ObjectIdentifier) -> getByOID
    java.util.Enumeration getNames() -> getNames
    void addEnumeration(java.util.Vector,java.util.Enumeration) -> addEnumeration
org.bouncycastle.asn1.x9.KeySpecificInfo -> org.bouncycastle.asn1.x9.KeySpecificInfo:
    org.bouncycastle.asn1.ASN1ObjectIdentifier algorithm -> algorithm
    org.bouncycastle.asn1.ASN1OctetString counter -> counter
    org.bouncycastle.asn1.ASN1ObjectIdentifier getAlgorithm() -> getAlgorithm
    org.bouncycastle.asn1.ASN1OctetString getCounter() -> getCounter
    org.bouncycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
org.bouncycastle.asn1.x9.OtherInfo -> org.bouncycastle.asn1.x9.OtherInfo:
    org.bouncycastle.asn1.x9.KeySpecificInfo keyInfo -> keyInfo
    org.bouncycastle.asn1.ASN1OctetString partyAInfo -> partyAInfo
    org.bouncycastle.asn1.ASN1OctetString suppPubInfo -> suppPubInfo
    org.bouncycastle.asn1.x9.KeySpecificInfo getKeyInfo() -> getKeyInfo
    org.bouncycastle.asn1.ASN1OctetString getPartyAInfo() -> getPartyAInfo
    org.bouncycastle.asn1.ASN1OctetString getSuppPubInfo() -> getSuppPubInfo
    org.bouncycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
org.bouncycastle.asn1.x9.X962NamedCurves -> org.bouncycastle.asn1.x9.X962NamedCurves:
    org.bouncycastle.asn1.x9.X9ECParametersHolder prime192v1 -> prime192v1
    org.bouncycastle.asn1.x9.X9ECParametersHolder prime192v2 -> prime192v2
    org.bouncycastle.asn1.x9.X9ECParametersHolder prime192v3 -> prime192v3
    org.bouncycastle.asn1.x9.X9ECParametersHolder prime239v1 -> prime239v1
    org.bouncycastle.asn1.x9.X9ECParametersHolder prime239v2 -> prime239v2
    org.bouncycastle.asn1.x9.X9ECParametersHolder prime239v3 -> prime239v3
    org.bouncycastle.asn1.x9.X9ECParametersHolder prime256v1 -> prime256v1
    org.bouncycastle.asn1.x9.X9ECParametersHolder c2pnb163v1 -> c2pnb163v1
    org.bouncycastle.asn1.x9.X9ECParametersHolder c2pnb163v2 -> c2pnb163v2
    org.bouncycastle.asn1.x9.X9ECParametersHolder c2pnb163v3 -> c2pnb163v3
    org.bouncycastle.asn1.x9.X9ECParametersHolder c2pnb176w1 -> c2pnb176w1
    org.bouncycastle.asn1.x9.X9ECParametersHolder c2tnb191v1 -> c2tnb191v1
    org.bouncycastle.asn1.x9.X9ECParametersHolder c2tnb191v2 -> c2tnb191v2
    org.bouncycastle.asn1.x9.X9ECParametersHolder c2tnb191v3 -> c2tnb191v3
    org.bouncycastle.asn1.x9.X9ECParametersHolder c2pnb208w1 -> c2pnb208w1
    org.bouncycastle.asn1.x9.X9ECParametersHolder c2tnb239v1 -> c2tnb239v1
    org.bouncycastle.asn1.x9.X9ECParametersHolder c2tnb239v2 -> c2tnb239v2
    org.bouncycastle.asn1.x9.X9ECParametersHolder c2tnb239v3 -> c2tnb239v3
    org.bouncycastle.asn1.x9.X9ECParametersHolder c2pnb272w1 -> c2pnb272w1
    org.bouncycastle.asn1.x9.X9ECParametersHolder c2pnb304w1 -> c2pnb304w1
    org.bouncycastle.asn1.x9.X9ECParametersHolder c2tnb359v1 -> c2tnb359v1
    org.bouncycastle.asn1.x9.X9ECParametersHolder c2pnb368w1 -> c2pnb368w1
    org.bouncycastle.asn1.x9.X9ECParametersHolder c2tnb431r1 -> c2tnb431r1
    java.util.Hashtable objIds -> objIds
    java.util.Hashtable curves -> curves
    java.util.Hashtable names -> names
    void defineCurve(java.lang.String,org.bouncycastle.asn1.ASN1ObjectIdentifier,org.bouncycastle.asn1.x9.X9ECParametersHolder) -> defineCurve
    org.bouncycastle.asn1.x9.X9ECParameters getByName(java.lang.String) -> getByName
    org.bouncycastle.asn1.x9.X9ECParameters getByOID(org.bouncycastle.asn1.ASN1ObjectIdentifier) -> getByOID
    org.bouncycastle.asn1.ASN1ObjectIdentifier getOID(java.lang.String) -> getOID
    java.lang.String getName(org.bouncycastle.asn1.ASN1ObjectIdentifier) -> getName
    java.util.Enumeration getNames() -> getNames
org.bouncycastle.asn1.x9.X962NamedCurves$1 -> org.bouncycastle.asn1.x9.X962NamedCurves$1:
    org.bouncycastle.asn1.x9.X9ECParameters createParameters() -> createParameters
org.bouncycastle.asn1.x9.X962NamedCurves$10 -> org.bouncycastle.asn1.x9.X962NamedCurves$10:
    org.bouncycastle.asn1.x9.X9ECParameters createParameters() -> createParameters
org.bouncycastle.asn1.x9.X962NamedCurves$11 -> org.bouncycastle.asn1.x9.X962NamedCurves$11:
    org.bouncycastle.asn1.x9.X9ECParameters createParameters() -> createParameters
org.bouncycastle.asn1.x9.X962NamedCurves$12 -> org.bouncycastle.asn1.x9.X962NamedCurves$12:
    org.bouncycastle.asn1.x9.X9ECParameters createParameters() -> createParameters
org.bouncycastle.asn1.x9.X962NamedCurves$13 -> org.bouncycastle.asn1.x9.X962NamedCurves$13:
    org.bouncycastle.asn1.x9.X9ECParameters createParameters() -> createParameters
org.bouncycastle.asn1.x9.X962NamedCurves$14 -> org.bouncycastle.asn1.x9.X962NamedCurves$14:
    org.bouncycastle.asn1.x9.X9ECParameters createParameters() -> createParameters
org.bouncycastle.asn1.x9.X962NamedCurves$15 -> org.bouncycastle.asn1.x9.X962NamedCurves$15:
    org.bouncycastle.asn1.x9.X9ECParameters createParameters() -> createParameters
org.bouncycastle.asn1.x9.X962NamedCurves$16 -> org.bouncycastle.asn1.x9.X962NamedCurves$16:
    org.bouncycastle.asn1.x9.X9ECParameters createParameters() -> createParameters
org.bouncycastle.asn1.x9.X962NamedCurves$17 -> org.bouncycastle.asn1.x9.X962NamedCurves$17:
    org.bouncycastle.asn1.x9.X9ECParameters createParameters() -> createParameters
org.bouncycastle.asn1.x9.X962NamedCurves$18 -> org.bouncycastle.asn1.x9.X962NamedCurves$18:
    org.bouncycastle.asn1.x9.X9ECParameters createParameters() -> createParameters
org.bouncycastle.asn1.x9.X962NamedCurves$19 -> org.bouncycastle.asn1.x9.X962NamedCurves$19:
    org.bouncycastle.asn1.x9.X9ECParameters createParameters() -> createParameters
org.bouncycastle.asn1.x9.X962NamedCurves$2 -> org.bouncycastle.asn1.x9.X962NamedCurves$2:
    org.bouncycastle.asn1.x9.X9ECParameters createParameters() -> createParameters
org.bouncycastle.asn1.x9.X962NamedCurves$20 -> org.bouncycastle.asn1.x9.X962NamedCurves$20:
    org.bouncycastle.asn1.x9.X9ECParameters createParameters() -> createParameters
org.bouncycastle.asn1.x9.X962NamedCurves$21 -> org.bouncycastle.asn1.x9.X962NamedCurves$21:
    org.bouncycastle.asn1.x9.X9ECParameters createParameters() -> createParameters
org.bouncycastle.asn1.x9.X962NamedCurves$22 -> org.bouncycastle.asn1.x9.X962NamedCurves$22:
    org.bouncycastle.asn1.x9.X9ECParameters createParameters() -> createParameters
org.bouncycastle.asn1.x9.X962NamedCurves$23 -> org.bouncycastle.asn1.x9.X962NamedCurves$23:
    org.bouncycastle.asn1.x9.X9ECParameters createParameters() -> createParameters
org.bouncycastle.asn1.x9.X962NamedCurves$3 -> org.bouncycastle.asn1.x9.X962NamedCurves$3:
    org.bouncycastle.asn1.x9.X9ECParameters createParameters() -> createParameters
org.bouncycastle.asn1.x9.X962NamedCurves$4 -> org.bouncycastle.asn1.x9.X962NamedCurves$4:
    org.bouncycastle.asn1.x9.X9ECParameters createParameters() -> createParameters
org.bouncycastle.asn1.x9.X962NamedCurves$5 -> org.bouncycastle.asn1.x9.X962NamedCurves$5:
    org.bouncycastle.asn1.x9.X9ECParameters createParameters() -> createParameters
org.bouncycastle.asn1.x9.X962NamedCurves$6 -> org.bouncycastle.asn1.x9.X962NamedCurves$6:
    org.bouncycastle.asn1.x9.X9ECParameters createParameters() -> createParameters
org.bouncycastle.asn1.x9.X962NamedCurves$7 -> org.bouncycastle.asn1.x9.X962NamedCurves$7:
    org.bouncycastle.asn1.x9.X9ECParameters createParameters() -> createParameters
org.bouncycastle.asn1.x9.X962NamedCurves$8 -> org.bouncycastle.asn1.x9.X962NamedCurves$8:
    org.bouncycastle.asn1.x9.X9ECParameters createParameters() -> createParameters
org.bouncycastle.asn1.x9.X962NamedCurves$9 -> org.bouncycastle.asn1.x9.X962NamedCurves$9:
    org.bouncycastle.asn1.x9.X9ECParameters createParameters() -> createParameters
org.bouncycastle.asn1.x9.X962Parameters -> org.bouncycastle.asn1.x9.X962Parameters:
    org.bouncycastle.asn1.ASN1Primitive params -> params
    org.bouncycastle.asn1.x9.X962Parameters getInstance(java.lang.Object) -> getInstance
    org.bouncycastle.asn1.x9.X962Parameters getInstance(org.bouncycastle.asn1.ASN1TaggedObject,boolean) -> getInstance
    boolean isNamedCurve() -> isNamedCurve
    boolean isImplicitlyCA() -> isImplicitlyCA
    org.bouncycastle.asn1.ASN1Primitive getParameters() -> getParameters
    org.bouncycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
org.bouncycastle.asn1.x9.X9Curve -> org.bouncycastle.asn1.x9.X9Curve:
    org.bouncycastle.math.ec.ECCurve curve -> curve
    byte[] seed -> seed
    org.bouncycastle.asn1.ASN1ObjectIdentifier fieldIdentifier -> fieldIdentifier
    void setFieldIdentifier() -> setFieldIdentifier
    org.bouncycastle.math.ec.ECCurve getCurve() -> getCurve
    byte[] getSeed() -> getSeed
    org.bouncycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
org.bouncycastle.asn1.x9.X9ECParameters -> org.bouncycastle.asn1.x9.X9ECParameters:
    java.math.BigInteger ONE -> ONE
    org.bouncycastle.asn1.x9.X9FieldID fieldID -> fieldID
    org.bouncycastle.math.ec.ECCurve curve -> curve
    org.bouncycastle.math.ec.ECPoint g -> g
    java.math.BigInteger n -> n
    java.math.BigInteger h -> h
    byte[] seed -> seed
    org.bouncycastle.asn1.x9.X9ECParameters getInstance(java.lang.Object) -> getInstance
    org.bouncycastle.math.ec.ECCurve getCurve() -> getCurve
    org.bouncycastle.math.ec.ECPoint getG() -> getG
    java.math.BigInteger getN() -> getN
    java.math.BigInteger getH() -> getH
    byte[] getSeed() -> getSeed
    org.bouncycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
org.bouncycastle.asn1.x9.X9ECParametersHolder -> org.bouncycastle.asn1.x9.X9ECParametersHolder:
    org.bouncycastle.asn1.x9.X9ECParameters params -> params
    org.bouncycastle.asn1.x9.X9ECParameters getParameters() -> getParameters
    org.bouncycastle.asn1.x9.X9ECParameters createParameters() -> createParameters
org.bouncycastle.asn1.x9.X9ECPoint -> org.bouncycastle.asn1.x9.X9ECPoint:
    org.bouncycastle.math.ec.ECPoint p -> p
    org.bouncycastle.math.ec.ECPoint getPoint() -> getPoint
    org.bouncycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
org.bouncycastle.asn1.x9.X9FieldElement -> org.bouncycastle.asn1.x9.X9FieldElement:
    org.bouncycastle.math.ec.ECFieldElement f -> f
    org.bouncycastle.asn1.x9.X9IntegerConverter converter -> converter
    org.bouncycastle.math.ec.ECFieldElement getValue() -> getValue
    org.bouncycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
org.bouncycastle.asn1.x9.X9FieldID -> org.bouncycastle.asn1.x9.X9FieldID:
    org.bouncycastle.asn1.ASN1ObjectIdentifier id -> id
    org.bouncycastle.asn1.ASN1Primitive parameters -> parameters
    org.bouncycastle.asn1.x9.X9FieldID getInstance(java.lang.Object) -> getInstance
    org.bouncycastle.asn1.ASN1ObjectIdentifier getIdentifier() -> getIdentifier
    org.bouncycastle.asn1.ASN1Primitive getParameters() -> getParameters
    org.bouncycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
org.bouncycastle.asn1.x9.X9IntegerConverter -> org.bouncycastle.asn1.x9.X9IntegerConverter:
    int getByteLength(org.bouncycastle.math.ec.ECCurve) -> getByteLength
    int getByteLength(org.bouncycastle.math.ec.ECFieldElement) -> getByteLength
    byte[] integerToBytes(java.math.BigInteger,int) -> integerToBytes
org.bouncycastle.asn1.x9.X9ObjectIdentifiers -> org.bouncycastle.asn1.x9.X9ObjectIdentifiers:
    org.bouncycastle.asn1.ASN1ObjectIdentifier ansi_X9_62 -> ansi_X9_62
    org.bouncycastle.asn1.ASN1ObjectIdentifier id_fieldType -> id_fieldType
    org.bouncycastle.asn1.ASN1ObjectIdentifier prime_field -> prime_field
    org.bouncycastle.asn1.ASN1ObjectIdentifier characteristic_two_field -> characteristic_two_field
    org.bouncycastle.asn1.ASN1ObjectIdentifier gnBasis -> gnBasis
    org.bouncycastle.asn1.ASN1ObjectIdentifier tpBasis -> tpBasis
    org.bouncycastle.asn1.ASN1ObjectIdentifier ppBasis -> ppBasis
    org.bouncycastle.asn1.ASN1ObjectIdentifier id_ecSigType -> id_ecSigType
    org.bouncycastle.asn1.ASN1ObjectIdentifier ecdsa_with_SHA1 -> ecdsa_with_SHA1
    org.bouncycastle.asn1.ASN1ObjectIdentifier id_publicKeyType -> id_publicKeyType
    org.bouncycastle.asn1.ASN1ObjectIdentifier id_ecPublicKey -> id_ecPublicKey
    org.bouncycastle.asn1.ASN1ObjectIdentifier ecdsa_with_SHA2 -> ecdsa_with_SHA2
    org.bouncycastle.asn1.ASN1ObjectIdentifier ecdsa_with_SHA224 -> ecdsa_with_SHA224
    org.bouncycastle.asn1.ASN1ObjectIdentifier ecdsa_with_SHA256 -> ecdsa_with_SHA256
    org.bouncycastle.asn1.ASN1ObjectIdentifier ecdsa_with_SHA384 -> ecdsa_with_SHA384
    org.bouncycastle.asn1.ASN1ObjectIdentifier ecdsa_with_SHA512 -> ecdsa_with_SHA512
    org.bouncycastle.asn1.ASN1ObjectIdentifier ellipticCurve -> ellipticCurve
    org.bouncycastle.asn1.ASN1ObjectIdentifier cTwoCurve -> cTwoCurve
    org.bouncycastle.asn1.ASN1ObjectIdentifier c2pnb163v1 -> c2pnb163v1
    org.bouncycastle.asn1.ASN1ObjectIdentifier c2pnb163v2 -> c2pnb163v2
    org.bouncycastle.asn1.ASN1ObjectIdentifier c2pnb163v3 -> c2pnb163v3
    org.bouncycastle.asn1.ASN1ObjectIdentifier c2pnb176w1 -> c2pnb176w1
    org.bouncycastle.asn1.ASN1ObjectIdentifier c2tnb191v1 -> c2tnb191v1
    org.bouncycastle.asn1.ASN1ObjectIdentifier c2tnb191v2 -> c2tnb191v2
    org.bouncycastle.asn1.ASN1ObjectIdentifier c2tnb191v3 -> c2tnb191v3
    org.bouncycastle.asn1.ASN1ObjectIdentifier c2onb191v4 -> c2onb191v4
    org.bouncycastle.asn1.ASN1ObjectIdentifier c2onb191v5 -> c2onb191v5
    org.bouncycastle.asn1.ASN1ObjectIdentifier c2pnb208w1 -> c2pnb208w1
    org.bouncycastle.asn1.ASN1ObjectIdentifier c2tnb239v1 -> c2tnb239v1
    org.bouncycastle.asn1.ASN1ObjectIdentifier c2tnb239v2 -> c2tnb239v2
    org.bouncycastle.asn1.ASN1ObjectIdentifier c2tnb239v3 -> c2tnb239v3
    org.bouncycastle.asn1.ASN1ObjectIdentifier c2onb239v4 -> c2onb239v4
    org.bouncycastle.asn1.ASN1ObjectIdentifier c2onb239v5 -> c2onb239v5
    org.bouncycastle.asn1.ASN1ObjectIdentifier c2pnb272w1 -> c2pnb272w1
    org.bouncycastle.asn1.ASN1ObjectIdentifier c2pnb304w1 -> c2pnb304w1
    org.bouncycastle.asn1.ASN1ObjectIdentifier c2tnb359v1 -> c2tnb359v1
    org.bouncycastle.asn1.ASN1ObjectIdentifier c2pnb368w1 -> c2pnb368w1
    org.bouncycastle.asn1.ASN1ObjectIdentifier c2tnb431r1 -> c2tnb431r1
    org.bouncycastle.asn1.ASN1ObjectIdentifier primeCurve -> primeCurve
    org.bouncycastle.asn1.ASN1ObjectIdentifier prime192v1 -> prime192v1
    org.bouncycastle.asn1.ASN1ObjectIdentifier prime192v2 -> prime192v2
    org.bouncycastle.asn1.ASN1ObjectIdentifier prime192v3 -> prime192v3
    org.bouncycastle.asn1.ASN1ObjectIdentifier prime239v1 -> prime239v1
    org.bouncycastle.asn1.ASN1ObjectIdentifier prime239v2 -> prime239v2
    org.bouncycastle.asn1.ASN1ObjectIdentifier prime239v3 -> prime239v3
    org.bouncycastle.asn1.ASN1ObjectIdentifier prime256v1 -> prime256v1
    org.bouncycastle.asn1.ASN1ObjectIdentifier id_dsa -> id_dsa
    org.bouncycastle.asn1.ASN1ObjectIdentifier id_dsa_with_sha1 -> id_dsa_with_sha1
    org.bouncycastle.asn1.ASN1ObjectIdentifier x9_63_scheme -> x9_63_scheme
    org.bouncycastle.asn1.ASN1ObjectIdentifier dhSinglePass_stdDH_sha1kdf_scheme -> dhSinglePass_stdDH_sha1kdf_scheme
    org.bouncycastle.asn1.ASN1ObjectIdentifier dhSinglePass_cofactorDH_sha1kdf_scheme -> dhSinglePass_cofactorDH_sha1kdf_scheme
    org.bouncycastle.asn1.ASN1ObjectIdentifier mqvSinglePass_sha1kdf_scheme -> mqvSinglePass_sha1kdf_scheme
    org.bouncycastle.asn1.ASN1ObjectIdentifier ansi_X9_42 -> ansi_X9_42
    org.bouncycastle.asn1.ASN1ObjectIdentifier dhpublicnumber -> dhpublicnumber
    org.bouncycastle.asn1.ASN1ObjectIdentifier x9_42_schemes -> x9_42_schemes
    org.bouncycastle.asn1.ASN1ObjectIdentifier dhStatic -> dhStatic
    org.bouncycastle.asn1.ASN1ObjectIdentifier dhEphem -> dhEphem
    org.bouncycastle.asn1.ASN1ObjectIdentifier dhOneFlow -> dhOneFlow
    org.bouncycastle.asn1.ASN1ObjectIdentifier dhHybrid1 -> dhHybrid1
    org.bouncycastle.asn1.ASN1ObjectIdentifier dhHybrid2 -> dhHybrid2
    org.bouncycastle.asn1.ASN1ObjectIdentifier dhHybridOneFlow -> dhHybridOneFlow
    org.bouncycastle.asn1.ASN1ObjectIdentifier mqv2 -> mqv2
    org.bouncycastle.asn1.ASN1ObjectIdentifier mqv1 -> mqv1
org.bouncycastle.crypto.AsymmetricBlockCipher -> org.bouncycastle.crypto.AsymmetricBlockCipher:
    void init(boolean,org.bouncycastle.crypto.CipherParameters) -> init
    int getInputBlockSize() -> getInputBlockSize
    int getOutputBlockSize() -> getOutputBlockSize
    byte[] processBlock(byte[],int,int) -> processBlock
org.bouncycastle.crypto.AsymmetricCipherKeyPair -> org.bouncycastle.crypto.AsymmetricCipherKeyPair:
    org.bouncycastle.crypto.params.AsymmetricKeyParameter publicParam -> publicParam
    org.bouncycastle.crypto.params.AsymmetricKeyParameter privateParam -> privateParam
    org.bouncycastle.crypto.params.AsymmetricKeyParameter getPublic() -> getPublic
    org.bouncycastle.crypto.params.AsymmetricKeyParameter getPrivate() -> getPrivate
org.bouncycastle.crypto.AsymmetricCipherKeyPairGenerator -> org.bouncycastle.crypto.AsymmetricCipherKeyPairGenerator:
    void init(org.bouncycastle.crypto.KeyGenerationParameters) -> init
    org.bouncycastle.crypto.AsymmetricCipherKeyPair generateKeyPair() -> generateKeyPair
org.bouncycastle.crypto.BasicAgreement -> org.bouncycastle.crypto.BasicAgreement:
    void init(org.bouncycastle.crypto.CipherParameters) -> init
    int getFieldSize() -> getFieldSize
    java.math.BigInteger calculateAgreement(org.bouncycastle.crypto.CipherParameters) -> calculateAgreement
org.bouncycastle.crypto.BlockCipher -> org.bouncycastle.crypto.BlockCipher:
    void init(boolean,org.bouncycastle.crypto.CipherParameters) -> init
    java.lang.String getAlgorithmName() -> getAlgorithmName
    int getBlockSize() -> getBlockSize
    int processBlock(byte[],int,byte[],int) -> processBlock
    void reset() -> reset
org.bouncycastle.crypto.BufferedAsymmetricBlockCipher -> org.bouncycastle.crypto.BufferedAsymmetricBlockCipher:
    byte[] buf -> buf
    int bufOff -> bufOff
    org.bouncycastle.crypto.AsymmetricBlockCipher cipher -> cipher
    org.bouncycastle.crypto.AsymmetricBlockCipher getUnderlyingCipher() -> getUnderlyingCipher
    int getBufferPosition() -> getBufferPosition
    void init(boolean,org.bouncycastle.crypto.CipherParameters) -> init
    int getInputBlockSize() -> getInputBlockSize
    int getOutputBlockSize() -> getOutputBlockSize
    void processByte(byte) -> processByte
    void processBytes(byte[],int,int) -> processBytes
    byte[] doFinal() -> doFinal
    void reset() -> reset
org.bouncycastle.crypto.BufferedBlockCipher -> org.bouncycastle.crypto.BufferedBlockCipher:
    byte[] buf -> buf
    int bufOff -> bufOff
    boolean forEncryption -> forEncryption
    org.bouncycastle.crypto.BlockCipher cipher -> cipher
    boolean partialBlockOkay -> partialBlockOkay
    boolean pgpCFB -> pgpCFB
    org.bouncycastle.crypto.BlockCipher getUnderlyingCipher() -> getUnderlyingCipher
    void init(boolean,org.bouncycastle.crypto.CipherParameters) -> init
    int getBlockSize() -> getBlockSize
    int getUpdateOutputSize(int) -> getUpdateOutputSize
    int getOutputSize(int) -> getOutputSize
    int processByte(byte,byte[],int) -> processByte
    int processBytes(byte[],int,int,byte[],int) -> processBytes
    int doFinal(byte[],int) -> doFinal
    void reset() -> reset
org.bouncycastle.crypto.CipherKeyGenerator -> org.bouncycastle.crypto.CipherKeyGenerator:
    java.security.SecureRandom random -> random
    int strength -> strength
    void init(org.bouncycastle.crypto.KeyGenerationParameters) -> init
    byte[] generateKey() -> generateKey
org.bouncycastle.crypto.CipherParameters -> org.bouncycastle.crypto.CipherParameters:
org.bouncycastle.crypto.Commitment -> org.bouncycastle.crypto.Commitment:
    byte[] secret -> secret
    byte[] commitment -> commitment
    byte[] getSecret() -> getSecret
    byte[] getCommitment() -> getCommitment
org.bouncycastle.crypto.Committer -> org.bouncycastle.crypto.Committer:
    org.bouncycastle.crypto.Commitment commit(byte[]) -> commit
    boolean isRevealed(org.bouncycastle.crypto.Commitment,byte[]) -> isRevealed
org.bouncycastle.crypto.CryptoException -> org.bouncycastle.crypto.CryptoException:
    java.lang.Throwable cause -> cause
    java.lang.Throwable getCause() -> getCause
org.bouncycastle.crypto.DSA -> org.bouncycastle.crypto.DSA:
    void init(boolean,org.bouncycastle.crypto.CipherParameters) -> init
    java.math.BigInteger[] generateSignature(byte[]) -> generateSignature
    boolean verifySignature(byte[],java.math.BigInteger,java.math.BigInteger) -> verifySignature
org.bouncycastle.crypto.DataLengthException -> org.bouncycastle.crypto.DataLengthException:
org.bouncycastle.crypto.DerivationFunction -> org.bouncycastle.crypto.DerivationFunction:
    void init(org.bouncycastle.crypto.DerivationParameters) -> init
    int generateBytes(byte[],int,int) -> generateBytes
org.bouncycastle.crypto.DerivationParameters -> org.bouncycastle.crypto.DerivationParameters:
org.bouncycastle.crypto.Digest -> org.bouncycastle.crypto.Digest:
    java.lang.String getAlgorithmName() -> getAlgorithmName
    int getDigestSize() -> getDigestSize
    void update(byte) -> update
    void update(byte[],int,int) -> update
    int doFinal(byte[],int) -> doFinal
    void reset() -> reset
org.bouncycastle.crypto.DigestDerivationFunction -> org.bouncycastle.crypto.DigestDerivationFunction:
    org.bouncycastle.crypto.Digest getDigest() -> getDigest
org.bouncycastle.crypto.EphemeralKeyPair -> org.bouncycastle.crypto.EphemeralKeyPair:
    org.bouncycastle.crypto.AsymmetricCipherKeyPair keyPair -> keyPair
    org.bouncycastle.crypto.KeyEncoder publicKeyEncoder -> publicKeyEncoder
    org.bouncycastle.crypto.AsymmetricCipherKeyPair getKeyPair() -> getKeyPair
    byte[] getEncodedPublicKey() -> getEncodedPublicKey
org.bouncycastle.crypto.ExtendedDigest -> org.bouncycastle.crypto.ExtendedDigest:
    int getByteLength() -> getByteLength
org.bouncycastle.crypto.InvalidCipherTextException -> org.bouncycastle.crypto.InvalidCipherTextException:
org.bouncycastle.crypto.KeyEncapsulation -> org.bouncycastle.crypto.KeyEncapsulation:
    void init(org.bouncycastle.crypto.CipherParameters) -> init
    org.bouncycastle.crypto.CipherParameters encrypt(byte[],int,int) -> encrypt
    org.bouncycastle.crypto.CipherParameters decrypt(byte[],int,int,int) -> decrypt
org.bouncycastle.crypto.KeyEncoder -> org.bouncycastle.crypto.KeyEncoder:
    byte[] getEncoded(org.bouncycastle.crypto.params.AsymmetricKeyParameter) -> getEncoded
org.bouncycastle.crypto.KeyGenerationParameters -> org.bouncycastle.crypto.KeyGenerationParameters:
    java.security.SecureRandom random -> random
    int strength -> strength
    java.security.SecureRandom getRandom() -> getRandom
    int getStrength() -> getStrength
org.bouncycastle.crypto.KeyParser -> org.bouncycastle.crypto.KeyParser:
    org.bouncycastle.crypto.params.AsymmetricKeyParameter readKey(java.io.InputStream) -> readKey
org.bouncycastle.crypto.Mac -> org.bouncycastle.crypto.Mac:
    void init(org.bouncycastle.crypto.CipherParameters) -> init
    java.lang.String getAlgorithmName() -> getAlgorithmName
    int getMacSize() -> getMacSize
    void update(byte) -> update
    void update(byte[],int,int) -> update
    int doFinal(byte[],int) -> doFinal
    void reset() -> reset
org.bouncycastle.crypto.MacDerivationFunction -> org.bouncycastle.crypto.MacDerivationFunction:
    org.bouncycastle.crypto.Mac getMac() -> getMac
org.bouncycastle.crypto.MaxBytesExceededException -> org.bouncycastle.crypto.MaxBytesExceededException:
org.bouncycastle.crypto.OutputLengthException -> org.bouncycastle.crypto.OutputLengthException:
org.bouncycastle.crypto.PBEParametersGenerator -> org.bouncycastle.crypto.PBEParametersGenerator:
    byte[] password -> password
    byte[] salt -> salt
    int iterationCount -> iterationCount
    void init(byte[],byte[],int) -> init
    byte[] getPassword() -> getPassword
    byte[] getSalt() -> getSalt
    int getIterationCount() -> getIterationCount
    org.bouncycastle.crypto.CipherParameters generateDerivedParameters(int) -> generateDerivedParameters
    org.bouncycastle.crypto.CipherParameters generateDerivedParameters(int,int) -> generateDerivedParameters
    org.bouncycastle.crypto.CipherParameters generateDerivedMacParameters(int) -> generateDerivedMacParameters
    byte[] PKCS5PasswordToBytes(char[]) -> PKCS5PasswordToBytes
    byte[] PKCS5PasswordToUTF8Bytes(char[]) -> PKCS5PasswordToUTF8Bytes
    byte[] PKCS12PasswordToBytes(char[]) -> PKCS12PasswordToBytes
org.bouncycastle.crypto.RuntimeCryptoException -> org.bouncycastle.crypto.RuntimeCryptoException:
org.bouncycastle.crypto.Signer -> org.bouncycastle.crypto.Signer:
    void init(boolean,org.bouncycastle.crypto.CipherParameters) -> init
    void update(byte) -> update
    void update(byte[],int,int) -> update
    byte[] generateSignature() -> generateSignature
    boolean verifySignature(byte[]) -> verifySignature
    void reset() -> reset
org.bouncycastle.crypto.SignerWithRecovery -> org.bouncycastle.crypto.SignerWithRecovery:
    boolean hasFullMessage() -> hasFullMessage
    byte[] getRecoveredMessage() -> getRecoveredMessage
    void updateWithRecoveredMessage(byte[]) -> updateWithRecoveredMessage
org.bouncycastle.crypto.SkippingCipher -> org.bouncycastle.crypto.SkippingCipher:
    long skip(long) -> skip
    long seekTo(long) -> seekTo
    long getPosition() -> getPosition
org.bouncycastle.crypto.SkippingStreamCipher -> org.bouncycastle.crypto.SkippingStreamCipher:
org.bouncycastle.crypto.StreamBlockCipher -> org.bouncycastle.crypto.StreamBlockCipher:
    org.bouncycastle.crypto.BlockCipher cipher -> cipher
    org.bouncycastle.crypto.BlockCipher getUnderlyingCipher() -> getUnderlyingCipher
    byte returnByte(byte) -> returnByte
    int processBytes(byte[],int,int,byte[],int) -> processBytes
    byte calculateByte(byte) -> calculateByte
org.bouncycastle.crypto.StreamCipher -> org.bouncycastle.crypto.StreamCipher:
    void init(boolean,org.bouncycastle.crypto.CipherParameters) -> init
    java.lang.String getAlgorithmName() -> getAlgorithmName
    byte returnByte(byte) -> returnByte
    int processBytes(byte[],int,int,byte[],int) -> processBytes
    void reset() -> reset
org.bouncycastle.crypto.Wrapper -> org.bouncycastle.crypto.Wrapper:
    void init(boolean,org.bouncycastle.crypto.CipherParameters) -> init
    java.lang.String getAlgorithmName() -> getAlgorithmName
    byte[] wrap(byte[],int,int) -> wrap
    byte[] unwrap(byte[],int,int) -> unwrap
org.bouncycastle.crypto.agreement.DHAgreement -> org.bouncycastle.crypto.agreement.DHAgreement:
    org.bouncycastle.crypto.params.DHPrivateKeyParameters key -> key
    org.bouncycastle.crypto.params.DHParameters dhParams -> dhParams
    java.math.BigInteger privateValue -> privateValue
    java.security.SecureRandom random -> random
    void init(org.bouncycastle.crypto.CipherParameters) -> init
    java.math.BigInteger calculateMessage() -> calculateMessage
    java.math.BigInteger calculateAgreement(org.bouncycastle.crypto.params.DHPublicKeyParameters,java.math.BigInteger) -> calculateAgreement
org.bouncycastle.crypto.agreement.DHBasicAgreement -> org.bouncycastle.crypto.agreement.DHBasicAgreement:
    org.bouncycastle.crypto.params.DHPrivateKeyParameters key -> key
    org.bouncycastle.crypto.params.DHParameters dhParams -> dhParams
    void init(org.bouncycastle.crypto.CipherParameters) -> init
    int getFieldSize() -> getFieldSize
    java.math.BigInteger calculateAgreement(org.bouncycastle.crypto.CipherParameters) -> calculateAgreement
org.bouncycastle.crypto.agreement.DHStandardGroups -> org.bouncycastle.crypto.agreement.DHStandardGroups:
    java.lang.String rfc2409_768_p -> rfc2409_768_p
    java.lang.String rfc2409_768_g -> rfc2409_768_g
    org.bouncycastle.crypto.params.DHParameters rfc2409_768 -> rfc2409_768
    java.lang.String rfc2409_1024_p -> rfc2409_1024_p
    java.lang.String rfc2409_1024_g -> rfc2409_1024_g
    org.bouncycastle.crypto.params.DHParameters rfc2409_1024 -> rfc2409_1024
    java.lang.String rfc3526_1536_p -> rfc3526_1536_p
    java.lang.String rfc3526_1536_g -> rfc3526_1536_g
    org.bouncycastle.crypto.params.DHParameters rfc3526_1536 -> rfc3526_1536
    java.lang.String rfc3526_2048_p -> rfc3526_2048_p
    java.lang.String rfc3526_2048_g -> rfc3526_2048_g
    org.bouncycastle.crypto.params.DHParameters rfc3526_2048 -> rfc3526_2048
    java.lang.String rfc3526_3072_p -> rfc3526_3072_p
    java.lang.String rfc3526_3072_g -> rfc3526_3072_g
    org.bouncycastle.crypto.params.DHParameters rfc3526_3072 -> rfc3526_3072
    java.lang.String rfc3526_4096_p -> rfc3526_4096_p
    java.lang.String rfc3526_4096_g -> rfc3526_4096_g
    org.bouncycastle.crypto.params.DHParameters rfc3526_4096 -> rfc3526_4096
    java.lang.String rfc3526_6144_p -> rfc3526_6144_p
    java.lang.String rfc3526_6144_g -> rfc3526_6144_g
    org.bouncycastle.crypto.params.DHParameters rfc3526_6144 -> rfc3526_6144
    java.lang.String rfc3526_8192_p -> rfc3526_8192_p
    java.lang.String rfc3526_8192_g -> rfc3526_8192_g
    org.bouncycastle.crypto.params.DHParameters rfc3526_8192 -> rfc3526_8192
    org.bouncycastle.crypto.params.DHParameters rfc4306_768 -> rfc4306_768
    org.bouncycastle.crypto.params.DHParameters rfc4306_1024 -> rfc4306_1024
    java.lang.String rfc5114_1024_160_p -> rfc5114_1024_160_p
    java.lang.String rfc5114_1024_160_g -> rfc5114_1024_160_g
    java.lang.String rfc5114_1024_160_q -> rfc5114_1024_160_q
    org.bouncycastle.crypto.params.DHParameters rfc5114_1024_160 -> rfc5114_1024_160
    java.lang.String rfc5114_2048_224_p -> rfc5114_2048_224_p
    java.lang.String rfc5114_2048_224_g -> rfc5114_2048_224_g
    java.lang.String rfc5114_2048_224_q -> rfc5114_2048_224_q
    org.bouncycastle.crypto.params.DHParameters rfc5114_2048_224 -> rfc5114_2048_224
    java.lang.String rfc5114_2048_256_p -> rfc5114_2048_256_p
    java.lang.String rfc5114_2048_256_g -> rfc5114_2048_256_g
    java.lang.String rfc5114_2048_256_q -> rfc5114_2048_256_q
    org.bouncycastle.crypto.params.DHParameters rfc5114_2048_256 -> rfc5114_2048_256
    org.bouncycastle.crypto.params.DHParameters rfc5996_768 -> rfc5996_768
    org.bouncycastle.crypto.params.DHParameters rfc5996_1024 -> rfc5996_1024
    org.bouncycastle.crypto.params.DHParameters fromPG(java.lang.String,java.lang.String) -> fromPG
    org.bouncycastle.crypto.params.DHParameters fromPGQ(java.lang.String,java.lang.String,java.lang.String) -> fromPGQ
org.bouncycastle.crypto.agreement.ECDHBasicAgreement -> org.bouncycastle.crypto.agreement.ECDHBasicAgreement:
    org.bouncycastle.crypto.params.ECPrivateKeyParameters key -> key
    void init(org.bouncycastle.crypto.CipherParameters) -> init
    int getFieldSize() -> getFieldSize
    java.math.BigInteger calculateAgreement(org.bouncycastle.crypto.CipherParameters) -> calculateAgreement
org.bouncycastle.crypto.agreement.ECDHCBasicAgreement -> org.bouncycastle.crypto.agreement.ECDHCBasicAgreement:
    org.bouncycastle.crypto.params.ECPrivateKeyParameters key -> key
    void init(org.bouncycastle.crypto.CipherParameters) -> init
    int getFieldSize() -> getFieldSize
    java.math.BigInteger calculateAgreement(org.bouncycastle.crypto.CipherParameters) -> calculateAgreement
org.bouncycastle.crypto.agreement.ECMQVBasicAgreement -> org.bouncycastle.crypto.agreement.ECMQVBasicAgreement:
    org.bouncycastle.crypto.params.MQVPrivateParameters privParams -> privParams
    void init(org.bouncycastle.crypto.CipherParameters) -> init
    int getFieldSize() -> getFieldSize
    java.math.BigInteger calculateAgreement(org.bouncycastle.crypto.CipherParameters) -> calculateAgreement
    org.bouncycastle.math.ec.ECPoint calculateMqvAgreement(org.bouncycastle.crypto.params.ECDomainParameters,org.bouncycastle.crypto.params.ECPrivateKeyParameters,org.bouncycastle.crypto.params.ECPrivateKeyParameters,org.bouncycastle.crypto.params.ECPublicKeyParameters,org.bouncycastle.crypto.params.ECPublicKeyParameters,org.bouncycastle.crypto.params.ECPublicKeyParameters) -> calculateMqvAgreement
org.bouncycastle.crypto.agreement.jpake.JPAKEParticipant -> org.bouncycastle.crypto.agreement.jpake.JPAKEParticipant:
    int STATE_INITIALIZED -> STATE_INITIALIZED
    int STATE_ROUND_1_CREATED -> STATE_ROUND_1_CREATED
    int STATE_ROUND_1_VALIDATED -> STATE_ROUND_1_VALIDATED
    int STATE_ROUND_2_CREATED -> STATE_ROUND_2_CREATED
    int STATE_ROUND_2_VALIDATED -> STATE_ROUND_2_VALIDATED
    int STATE_KEY_CALCULATED -> STATE_KEY_CALCULATED
    int STATE_ROUND_3_CREATED -> STATE_ROUND_3_CREATED
    int STATE_ROUND_3_VALIDATED -> STATE_ROUND_3_VALIDATED
    java.lang.String participantId -> participantId
    char[] password -> password
    org.bouncycastle.crypto.Digest digest -> digest
    java.security.SecureRandom random -> random
    java.math.BigInteger p -> p
    java.math.BigInteger q -> q
    java.math.BigInteger g -> g
    java.lang.String partnerParticipantId -> partnerParticipantId
    java.math.BigInteger x1 -> x1
    java.math.BigInteger x2 -> x2
    java.math.BigInteger gx1 -> gx1
    java.math.BigInteger gx2 -> gx2
    java.math.BigInteger gx3 -> gx3
    java.math.BigInteger gx4 -> gx4
    java.math.BigInteger b -> b
    int state -> state
    int getState() -> getState
    org.bouncycastle.crypto.agreement.jpake.JPAKERound1Payload createRound1PayloadToSend() -> createRound1PayloadToSend
    void validateRound1PayloadReceived(org.bouncycastle.crypto.agreement.jpake.JPAKERound1Payload) -> validateRound1PayloadReceived
    org.bouncycastle.crypto.agreement.jpake.JPAKERound2Payload createRound2PayloadToSend() -> createRound2PayloadToSend
    void validateRound2PayloadReceived(org.bouncycastle.crypto.agreement.jpake.JPAKERound2Payload) -> validateRound2PayloadReceived
    java.math.BigInteger calculateKeyingMaterial() -> calculateKeyingMaterial
    org.bouncycastle.crypto.agreement.jpake.JPAKERound3Payload createRound3PayloadToSend(java.math.BigInteger) -> createRound3PayloadToSend
    void validateRound3PayloadReceived(org.bouncycastle.crypto.agreement.jpake.JPAKERound3Payload,java.math.BigInteger) -> validateRound3PayloadReceived
org.bouncycastle.crypto.agreement.jpake.JPAKEPrimeOrderGroup -> org.bouncycastle.crypto.agreement.jpake.JPAKEPrimeOrderGroup:
    java.math.BigInteger p -> p
    java.math.BigInteger q -> q
    java.math.BigInteger g -> g
    java.math.BigInteger getP() -> getP
    java.math.BigInteger getQ() -> getQ
    java.math.BigInteger getG() -> getG
org.bouncycastle.crypto.agreement.jpake.JPAKEPrimeOrderGroups -> org.bouncycastle.crypto.agreement.jpake.JPAKEPrimeOrderGroups:
    org.bouncycastle.crypto.agreement.jpake.JPAKEPrimeOrderGroup SUN_JCE_1024 -> SUN_JCE_1024
    org.bouncycastle.crypto.agreement.jpake.JPAKEPrimeOrderGroup NIST_2048 -> NIST_2048
    org.bouncycastle.crypto.agreement.jpake.JPAKEPrimeOrderGroup NIST_3072 -> NIST_3072
org.bouncycastle.crypto.agreement.jpake.JPAKERound1Payload -> org.bouncycastle.crypto.agreement.jpake.JPAKERound1Payload:
    java.lang.String participantId -> participantId
    java.math.BigInteger gx1 -> gx1
    java.math.BigInteger gx2 -> gx2
    java.math.BigInteger[] knowledgeProofForX1 -> knowledgeProofForX1
    java.math.BigInteger[] knowledgeProofForX2 -> knowledgeProofForX2
    java.lang.String getParticipantId() -> getParticipantId
    java.math.BigInteger getGx1() -> getGx1
    java.math.BigInteger getGx2() -> getGx2
    java.math.BigInteger[] getKnowledgeProofForX1() -> getKnowledgeProofForX1
    java.math.BigInteger[] getKnowledgeProofForX2() -> getKnowledgeProofForX2
org.bouncycastle.crypto.agreement.jpake.JPAKERound2Payload -> org.bouncycastle.crypto.agreement.jpake.JPAKERound2Payload:
    java.lang.String participantId -> participantId
    java.math.BigInteger a -> a
    java.math.BigInteger[] knowledgeProofForX2s -> knowledgeProofForX2s
    java.lang.String getParticipantId() -> getParticipantId
    java.math.BigInteger getA() -> getA
    java.math.BigInteger[] getKnowledgeProofForX2s() -> getKnowledgeProofForX2s
org.bouncycastle.crypto.agreement.jpake.JPAKERound3Payload -> org.bouncycastle.crypto.agreement.jpake.JPAKERound3Payload:
    java.lang.String participantId -> participantId
    java.math.BigInteger macTag -> macTag
    java.lang.String getParticipantId() -> getParticipantId
    java.math.BigInteger getMacTag() -> getMacTag
org.bouncycastle.crypto.agreement.jpake.JPAKEUtil -> org.bouncycastle.crypto.agreement.jpake.JPAKEUtil:
    java.math.BigInteger ZERO -> ZERO
    java.math.BigInteger ONE -> ONE
    java.math.BigInteger generateX1(java.math.BigInteger,java.security.SecureRandom) -> generateX1
    java.math.BigInteger generateX2(java.math.BigInteger,java.security.SecureRandom) -> generateX2
    java.math.BigInteger calculateS(char[]) -> calculateS
    java.math.BigInteger calculateGx(java.math.BigInteger,java.math.BigInteger,java.math.BigInteger) -> calculateGx
    java.math.BigInteger calculateGA(java.math.BigInteger,java.math.BigInteger,java.math.BigInteger,java.math.BigInteger) -> calculateGA
    java.math.BigInteger calculateX2s(java.math.BigInteger,java.math.BigInteger,java.math.BigInteger) -> calculateX2s
    java.math.BigInteger calculateA(java.math.BigInteger,java.math.BigInteger,java.math.BigInteger,java.math.BigInteger) -> calculateA
    java.math.BigInteger[] calculateZeroKnowledgeProof(java.math.BigInteger,java.math.BigInteger,java.math.BigInteger,java.math.BigInteger,java.math.BigInteger,java.lang.String,org.bouncycastle.crypto.Digest,java.security.SecureRandom) -> calculateZeroKnowledgeProof
    java.math.BigInteger calculateHashForZeroKnowledgeProof(java.math.BigInteger,java.math.BigInteger,java.math.BigInteger,java.lang.String,org.bouncycastle.crypto.Digest) -> calculateHashForZeroKnowledgeProof
    void validateGx4(java.math.BigInteger) -> validateGx4
    void validateGa(java.math.BigInteger) -> validateGa
    void validateZeroKnowledgeProof(java.math.BigInteger,java.math.BigInteger,java.math.BigInteger,java.math.BigInteger,java.math.BigInteger[],java.lang.String,org.bouncycastle.crypto.Digest) -> validateZeroKnowledgeProof
    java.math.BigInteger calculateKeyingMaterial(java.math.BigInteger,java.math.BigInteger,java.math.BigInteger,java.math.BigInteger,java.math.BigInteger,java.math.BigInteger) -> calculateKeyingMaterial
    void validateParticipantIdsDiffer(java.lang.String,java.lang.String) -> validateParticipantIdsDiffer
    void validateParticipantIdsEqual(java.lang.String,java.lang.String) -> validateParticipantIdsEqual
    void validateNotNull(java.lang.Object,java.lang.String) -> validateNotNull
    java.math.BigInteger calculateMacTag(java.lang.String,java.lang.String,java.math.BigInteger,java.math.BigInteger,java.math.BigInteger,java.math.BigInteger,java.math.BigInteger,org.bouncycastle.crypto.Digest) -> calculateMacTag
    byte[] calculateMacKey(java.math.BigInteger,org.bouncycastle.crypto.Digest) -> calculateMacKey
    void validateMacTag(java.lang.String,java.lang.String,java.math.BigInteger,java.math.BigInteger,java.math.BigInteger,java.math.BigInteger,java.math.BigInteger,org.bouncycastle.crypto.Digest,java.math.BigInteger) -> validateMacTag
    void updateDigest(org.bouncycastle.crypto.Digest,java.math.BigInteger) -> updateDigest
    void updateDigestIncludingSize(org.bouncycastle.crypto.Digest,java.math.BigInteger) -> updateDigestIncludingSize
    void updateDigest(org.bouncycastle.crypto.Digest,java.lang.String) -> updateDigest
    void updateDigestIncludingSize(org.bouncycastle.crypto.Digest,java.lang.String) -> updateDigestIncludingSize
    void updateMac(org.bouncycastle.crypto.Mac,java.math.BigInteger) -> updateMac
    void updateMac(org.bouncycastle.crypto.Mac,java.lang.String) -> updateMac
    byte[] intToByteArray(int) -> intToByteArray
org.bouncycastle.crypto.agreement.kdf.DHKDFParameters -> org.bouncycastle.crypto.agreement.kdf.DHKDFParameters:
    org.bouncycastle.asn1.ASN1ObjectIdentifier algorithm -> algorithm
    int keySize -> keySize
    byte[] z -> z
    byte[] extraInfo -> extraInfo
    org.bouncycastle.asn1.ASN1ObjectIdentifier getAlgorithm() -> getAlgorithm
    int getKeySize() -> getKeySize
    byte[] getZ() -> getZ
    byte[] getExtraInfo() -> getExtraInfo
org.bouncycastle.crypto.agreement.kdf.DHKEKGenerator -> org.bouncycastle.crypto.agreement.kdf.DHKEKGenerator:
    org.bouncycastle.crypto.Digest digest -> digest
    org.bouncycastle.asn1.ASN1ObjectIdentifier algorithm -> algorithm
    int keySize -> keySize
    byte[] z -> z
    byte[] partyAInfo -> partyAInfo
    void init(org.bouncycastle.crypto.DerivationParameters) -> init
    org.bouncycastle.crypto.Digest getDigest() -> getDigest
    int generateBytes(byte[],int,int) -> generateBytes
org.bouncycastle.crypto.agreement.kdf.ECDHKEKGenerator -> org.bouncycastle.crypto.agreement.kdf.ECDHKEKGenerator:
    org.bouncycastle.crypto.DigestDerivationFunction kdf -> kdf
    org.bouncycastle.asn1.ASN1ObjectIdentifier algorithm -> algorithm
    int keySize -> keySize
    byte[] z -> z
    void init(org.bouncycastle.crypto.DerivationParameters) -> init
    org.bouncycastle.crypto.Digest getDigest() -> getDigest
    int generateBytes(byte[],int,int) -> generateBytes
org.bouncycastle.crypto.agreement.srp.SRP6Client -> org.bouncycastle.crypto.agreement.srp.SRP6Client:
    java.math.BigInteger N -> N
    java.math.BigInteger g -> g
    java.math.BigInteger a -> a
    java.math.BigInteger A -> A
    java.math.BigInteger B -> B
    java.math.BigInteger x -> x
    java.math.BigInteger u -> u
    java.math.BigInteger S -> S
    java.math.BigInteger M1 -> M1
    java.math.BigInteger M2 -> M2
    java.math.BigInteger Key -> Key
    org.bouncycastle.crypto.Digest digest -> digest
    java.security.SecureRandom random -> random
    void init(java.math.BigInteger,java.math.BigInteger,org.bouncycastle.crypto.Digest,java.security.SecureRandom) -> init
    java.math.BigInteger generateClientCredentials(byte[],byte[],byte[]) -> generateClientCredentials
    java.math.BigInteger calculateSecret(java.math.BigInteger) -> calculateSecret
    java.math.BigInteger selectPrivateValue() -> selectPrivateValue
    java.math.BigInteger calculateS() -> calculateS
    java.math.BigInteger calculateClientEvidenceMessage() -> calculateClientEvidenceMessage
    boolean verifyServerEvidenceMessage(java.math.BigInteger) -> verifyServerEvidenceMessage
    java.math.BigInteger calculateSessionKey() -> calculateSessionKey
org.bouncycastle.crypto.agreement.srp.SRP6Server -> org.bouncycastle.crypto.agreement.srp.SRP6Server:
    java.math.BigInteger N -> N
    java.math.BigInteger g -> g
    java.math.BigInteger v -> v
    java.security.SecureRandom random -> random
    org.bouncycastle.crypto.Digest digest -> digest
    java.math.BigInteger A -> A
    java.math.BigInteger b -> b
    java.math.BigInteger B -> B
    java.math.BigInteger u -> u
    java.math.BigInteger S -> S
    java.math.BigInteger M1 -> M1
    java.math.BigInteger M2 -> M2
    java.math.BigInteger Key -> Key
    void init(java.math.BigInteger,java.math.BigInteger,java.math.BigInteger,org.bouncycastle.crypto.Digest,java.security.SecureRandom) -> init
    java.math.BigInteger generateServerCredentials() -> generateServerCredentials
    java.math.BigInteger calculateSecret(java.math.BigInteger) -> calculateSecret
    java.math.BigInteger selectPrivateValue() -> selectPrivateValue
    java.math.BigInteger calculateS() -> calculateS
    boolean verifyClientEvidenceMessage(java.math.BigInteger) -> verifyClientEvidenceMessage
    java.math.BigInteger calculateServerEvidenceMessage() -> calculateServerEvidenceMessage
    java.math.BigInteger calculateSessionKey() -> calculateSessionKey
org.bouncycastle.crypto.agreement.srp.SRP6Util -> org.bouncycastle.crypto.agreement.srp.SRP6Util:
    java.math.BigInteger ZERO -> ZERO
    java.math.BigInteger ONE -> ONE
    java.math.BigInteger calculateK(org.bouncycastle.crypto.Digest,java.math.BigInteger,java.math.BigInteger) -> calculateK
    java.math.BigInteger calculateU(org.bouncycastle.crypto.Digest,java.math.BigInteger,java.math.BigInteger,java.math.BigInteger) -> calculateU
    java.math.BigInteger calculateX(org.bouncycastle.crypto.Digest,java.math.BigInteger,byte[],byte[],byte[]) -> calculateX
    java.math.BigInteger generatePrivateValue(org.bouncycastle.crypto.Digest,java.math.BigInteger,java.math.BigInteger,java.security.SecureRandom) -> generatePrivateValue
    java.math.BigInteger validatePublicValue(java.math.BigInteger,java.math.BigInteger) -> validatePublicValue
    java.math.BigInteger calculateM1(org.bouncycastle.crypto.Digest,java.math.BigInteger,java.math.BigInteger,java.math.BigInteger,java.math.BigInteger) -> calculateM1
    java.math.BigInteger calculateM2(org.bouncycastle.crypto.Digest,java.math.BigInteger,java.math.BigInteger,java.math.BigInteger,java.math.BigInteger) -> calculateM2
    java.math.BigInteger calculateKey(org.bouncycastle.crypto.Digest,java.math.BigInteger,java.math.BigInteger) -> calculateKey
    java.math.BigInteger hashPaddedTriplet(org.bouncycastle.crypto.Digest,java.math.BigInteger,java.math.BigInteger,java.math.BigInteger,java.math.BigInteger) -> hashPaddedTriplet
    java.math.BigInteger hashPaddedPair(org.bouncycastle.crypto.Digest,java.math.BigInteger,java.math.BigInteger,java.math.BigInteger) -> hashPaddedPair
    byte[] getPadded(java.math.BigInteger,int) -> getPadded
org.bouncycastle.crypto.agreement.srp.SRP6VerifierGenerator -> org.bouncycastle.crypto.agreement.srp.SRP6VerifierGenerator:
    java.math.BigInteger N -> N
    java.math.BigInteger g -> g
    org.bouncycastle.crypto.Digest digest -> digest
    void init(java.math.BigInteger,java.math.BigInteger,org.bouncycastle.crypto.Digest) -> init
    java.math.BigInteger generateVerifier(byte[],byte[],byte[]) -> generateVerifier
org.bouncycastle.crypto.commitments.GeneralHashCommitter -> org.bouncycastle.crypto.commitments.GeneralHashCommitter:
    org.bouncycastle.crypto.Digest digest -> digest
    int byteLength -> byteLength
    java.security.SecureRandom random -> random
    org.bouncycastle.crypto.Commitment commit(byte[]) -> commit
    boolean isRevealed(org.bouncycastle.crypto.Commitment,byte[]) -> isRevealed
    byte[] calculateCommitment(byte[],byte[]) -> calculateCommitment
org.bouncycastle.crypto.commitments.HashCommitter -> org.bouncycastle.crypto.commitments.HashCommitter:
    org.bouncycastle.crypto.Digest digest -> digest
    int byteLength -> byteLength
    java.security.SecureRandom random -> random
    org.bouncycastle.crypto.Commitment commit(byte[]) -> commit
    boolean isRevealed(org.bouncycastle.crypto.Commitment,byte[]) -> isRevealed
    byte[] calculateCommitment(byte[],byte[]) -> calculateCommitment
org.bouncycastle.crypto.digests.EncodableDigest -> org.bouncycastle.crypto.digests.EncodableDigest:
    byte[] getEncodedState() -> getEncodedState
org.bouncycastle.crypto.digests.GOST3411Digest -> org.bouncycastle.crypto.digests.GOST3411Digest:
    int DIGEST_LENGTH -> DIGEST_LENGTH
    byte[] H -> H
    byte[] L -> L
    byte[] M -> M
    byte[] Sum -> Sum
    byte[][] C -> C
    byte[] xBuf -> xBuf
    int xBufOff -> xBufOff
    long byteCount -> byteCount
    org.bouncycastle.crypto.BlockCipher cipher -> cipher
    byte[] sBox -> sBox
    byte[] K -> K
    byte[] a -> a
    short[] wS -> wS
    short[] w_S -> w_S
    byte[] S -> S
    byte[] U -> U
    byte[] V -> V
    byte[] W -> W
    byte[] C2 -> C2
    java.lang.String getAlgorithmName() -> getAlgorithmName
    int getDigestSize() -> getDigestSize
    void update(byte) -> update
    void update(byte[],int,int) -> update
    byte[] P(byte[]) -> P
    byte[] A(byte[]) -> A
    void E(byte[],byte[],int,byte[],int) -> E
    void fw(byte[]) -> fw
    void processBlock(byte[],int) -> processBlock
    void finish() -> finish
    int doFinal(byte[],int) -> doFinal
    void reset() -> reset
    void sumByteArray(byte[]) -> sumByteArray
    void cpyBytesToShort(byte[],short[]) -> cpyBytesToShort
    void cpyShortToBytes(short[],byte[]) -> cpyShortToBytes
    int getByteLength() -> getByteLength
    org.bouncycastle.util.Memoable copy() -> copy
    void reset(org.bouncycastle.util.Memoable) -> reset
org.bouncycastle.crypto.digests.GeneralDigest -> org.bouncycastle.crypto.digests.GeneralDigest:
    int BYTE_LENGTH -> BYTE_LENGTH
    byte[] xBuf -> xBuf
    int xBufOff -> xBufOff
    long byteCount -> byteCount
    void copyIn(org.bouncycastle.crypto.digests.GeneralDigest) -> copyIn
    void update(byte) -> update
    void update(byte[],int,int) -> update
    void finish() -> finish
    void reset() -> reset
    void populateState(byte[]) -> populateState
    int getByteLength() -> getByteLength
    void processWord(byte[],int) -> processWord
    void processLength(long) -> processLength
    void processBlock() -> processBlock
org.bouncycastle.crypto.digests.LongDigest -> org.bouncycastle.crypto.digests.LongDigest:
    int BYTE_LENGTH -> BYTE_LENGTH
    byte[] xBuf -> xBuf
    int xBufOff -> xBufOff
    long byteCount1 -> byteCount1
    long byteCount2 -> byteCount2
    long H1 -> H1
    long H2 -> H2
    long H3 -> H3
    long H4 -> H4
    long H5 -> H5
    long H6 -> H6
    long H7 -> H7
    long H8 -> H8
    long[] W -> W
    int wOff -> wOff
    long[] K -> K
    void copyIn(org.bouncycastle.crypto.digests.LongDigest) -> copyIn
    void populateState(byte[]) -> populateState
    void restoreState(byte[]) -> restoreState
    int getEncodedStateSize() -> getEncodedStateSize
    void update(byte) -> update
    void update(byte[],int,int) -> update
    void finish() -> finish
    void reset() -> reset
    int getByteLength() -> getByteLength
    void processWord(byte[],int) -> processWord
    void adjustByteCounts() -> adjustByteCounts
    void processLength(long,long) -> processLength
    void processBlock() -> processBlock
    long Ch(long,long,long) -> Ch
    long Maj(long,long,long) -> Maj
    long Sum0(long) -> Sum0
    long Sum1(long) -> Sum1
    long Sigma0(long) -> Sigma0
    long Sigma1(long) -> Sigma1
org.bouncycastle.crypto.digests.MD2Digest -> org.bouncycastle.crypto.digests.MD2Digest:
    int DIGEST_LENGTH -> DIGEST_LENGTH
    byte[] X -> X
    int xOff -> xOff
    byte[] M -> M
    int mOff -> mOff
    byte[] C -> C
    int COff -> COff
    byte[] S -> S
    void copyIn(org.bouncycastle.crypto.digests.MD2Digest) -> copyIn
    java.lang.String getAlgorithmName() -> getAlgorithmName
    int getDigestSize() -> getDigestSize
    int doFinal(byte[],int) -> doFinal
    void reset() -> reset
    void update(byte) -> update
    void update(byte[],int,int) -> update
    void processCheckSum(byte[]) -> processCheckSum
    void processBlock(byte[]) -> processBlock
    int getByteLength() -> getByteLength
    org.bouncycastle.util.Memoable copy() -> copy
    void reset(org.bouncycastle.util.Memoable) -> reset
org.bouncycastle.crypto.digests.MD4Digest -> org.bouncycastle.crypto.digests.MD4Digest:
    int DIGEST_LENGTH -> DIGEST_LENGTH
    int H1 -> H1
    int H2 -> H2
    int H3 -> H3
    int H4 -> H4
    int[] X -> X
    int xOff -> xOff
    int S11 -> S11
    int S12 -> S12
    int S13 -> S13
    int S14 -> S14
    int S21 -> S21
    int S22 -> S22
    int S23 -> S23
    int S24 -> S24
    int S31 -> S31
    int S32 -> S32
    int S33 -> S33
    int S34 -> S34
    void copyIn(org.bouncycastle.crypto.digests.MD4Digest) -> copyIn
    java.lang.String getAlgorithmName() -> getAlgorithmName
    int getDigestSize() -> getDigestSize
    void processWord(byte[],int) -> processWord
    void processLength(long) -> processLength
    void unpackWord(int,byte[],int) -> unpackWord
    int doFinal(byte[],int) -> doFinal
    void reset() -> reset
    int rotateLeft(int,int) -> rotateLeft
    int F(int,int,int) -> F
    int G(int,int,int) -> G
    int H(int,int,int) -> H
    void processBlock() -> processBlock
    org.bouncycastle.util.Memoable copy() -> copy
    void reset(org.bouncycastle.util.Memoable) -> reset
org.bouncycastle.crypto.digests.MD5Digest -> org.bouncycastle.crypto.digests.MD5Digest:
    int DIGEST_LENGTH -> DIGEST_LENGTH
    int H1 -> H1
    int H2 -> H2
    int H3 -> H3
    int H4 -> H4
    int[] X -> X
    int xOff -> xOff
    int S11 -> S11
    int S12 -> S12
    int S13 -> S13
    int S14 -> S14
    int S21 -> S21
    int S22 -> S22
    int S23 -> S23
    int S24 -> S24
    int S31 -> S31
    int S32 -> S32
    int S33 -> S33
    int S34 -> S34
    int S41 -> S41
    int S42 -> S42
    int S43 -> S43
    int S44 -> S44
    void copyIn(org.bouncycastle.crypto.digests.MD5Digest) -> copyIn
    java.lang.String getAlgorithmName() -> getAlgorithmName
    int getDigestSize() -> getDigestSize
    void processWord(byte[],int) -> processWord
    void processLength(long) -> processLength
    void unpackWord(int,byte[],int) -> unpackWord
    int doFinal(byte[],int) -> doFinal
    void reset() -> reset
    int rotateLeft(int,int) -> rotateLeft
    int F(int,int,int) -> F
    int G(int,int,int) -> G
    int H(int,int,int) -> H
    int K(int,int,int) -> K
    void processBlock() -> processBlock
    org.bouncycastle.util.Memoable copy() -> copy
    void reset(org.bouncycastle.util.Memoable) -> reset
org.bouncycastle.crypto.digests.NonMemoableDigest -> org.bouncycastle.crypto.digests.NonMemoableDigest:
    org.bouncycastle.crypto.ExtendedDigest baseDigest -> baseDigest
    java.lang.String getAlgorithmName() -> getAlgorithmName
    int getDigestSize() -> getDigestSize
    void update(byte) -> update
    void update(byte[],int,int) -> update
    int doFinal(byte[],int) -> doFinal
    void reset() -> reset
    int getByteLength() -> getByteLength
org.bouncycastle.crypto.digests.NullDigest -> org.bouncycastle.crypto.digests.NullDigest:
    java.io.ByteArrayOutputStream bOut -> bOut
    java.lang.String getAlgorithmName() -> getAlgorithmName
    int getDigestSize() -> getDigestSize
    void update(byte) -> update
    void update(byte[],int,int) -> update
    int doFinal(byte[],int) -> doFinal
    void reset() -> reset
org.bouncycastle.crypto.digests.RIPEMD128Digest -> org.bouncycastle.crypto.digests.RIPEMD128Digest:
    int DIGEST_LENGTH -> DIGEST_LENGTH
    int H0 -> H0
    int H1 -> H1
    int H2 -> H2
    int H3 -> H3
    int[] X -> X
    int xOff -> xOff
    void copyIn(org.bouncycastle.crypto.digests.RIPEMD128Digest) -> copyIn
    java.lang.String getAlgorithmName() -> getAlgorithmName
    int getDigestSize() -> getDigestSize
    void processWord(byte[],int) -> processWord
    void processLength(long) -> processLength
    void unpackWord(int,byte[],int) -> unpackWord
    int doFinal(byte[],int) -> doFinal
    void reset() -> reset
    int RL(int,int) -> RL
    int f1(int,int,int) -> f1
    int f2(int,int,int) -> f2
    int f3(int,int,int) -> f3
    int f4(int,int,int) -> f4
    int F1(int,int,int,int,int,int) -> F1
    int F2(int,int,int,int,int,int) -> F2
    int F3(int,int,int,int,int,int) -> F3
    int F4(int,int,int,int,int,int) -> F4
    int FF1(int,int,int,int,int,int) -> FF1
    int FF2(int,int,int,int,int,int) -> FF2
    int FF3(int,int,int,int,int,int) -> FF3
    int FF4(int,int,int,int,int,int) -> FF4
    void processBlock() -> processBlock
    org.bouncycastle.util.Memoable copy() -> copy
    void reset(org.bouncycastle.util.Memoable) -> reset
org.bouncycastle.crypto.digests.RIPEMD160Digest -> org.bouncycastle.crypto.digests.RIPEMD160Digest:
    int DIGEST_LENGTH -> DIGEST_LENGTH
    int H0 -> H0
    int H1 -> H1
    int H2 -> H2
    int H3 -> H3
    int H4 -> H4
    int[] X -> X
    int xOff -> xOff
    void copyIn(org.bouncycastle.crypto.digests.RIPEMD160Digest) -> copyIn
    java.lang.String getAlgorithmName() -> getAlgorithmName
    int getDigestSize() -> getDigestSize
    void processWord(byte[],int) -> processWord
    void processLength(long) -> processLength
    void unpackWord(int,byte[],int) -> unpackWord
    int doFinal(byte[],int) -> doFinal
    void reset() -> reset
    int RL(int,int) -> RL
    int f1(int,int,int) -> f1
    int f2(int,int,int) -> f2
    int f3(int,int,int) -> f3
    int f4(int,int,int) -> f4
    int f5(int,int,int) -> f5
    void processBlock() -> processBlock
    org.bouncycastle.util.Memoable copy() -> copy
    void reset(org.bouncycastle.util.Memoable) -> reset
org.bouncycastle.crypto.digests.RIPEMD256Digest -> org.bouncycastle.crypto.digests.RIPEMD256Digest:
    int DIGEST_LENGTH -> DIGEST_LENGTH
    int H0 -> H0
    int H1 -> H1
    int H2 -> H2
    int H3 -> H3
    int H4 -> H4
    int H5 -> H5
    int H6 -> H6
    int H7 -> H7
    int[] X -> X
    int xOff -> xOff
    void copyIn(org.bouncycastle.crypto.digests.RIPEMD256Digest) -> copyIn
    java.lang.String getAlgorithmName() -> getAlgorithmName
    int getDigestSize() -> getDigestSize
    void processWord(byte[],int) -> processWord
    void processLength(long) -> processLength
    void unpackWord(int,byte[],int) -> unpackWord
    int doFinal(byte[],int) -> doFinal
    void reset() -> reset
    int RL(int,int) -> RL
    int f1(int,int,int) -> f1
    int f2(int,int,int) -> f2
    int f3(int,int,int) -> f3
    int f4(int,int,int) -> f4
    int F1(int,int,int,int,int,int) -> F1
    int F2(int,int,int,int,int,int) -> F2
    int F3(int,int,int,int,int,int) -> F3
    int F4(int,int,int,int,int,int) -> F4
    int FF1(int,int,int,int,int,int) -> FF1
    int FF2(int,int,int,int,int,int) -> FF2
    int FF3(int,int,int,int,int,int) -> FF3
    int FF4(int,int,int,int,int,int) -> FF4
    void processBlock() -> processBlock
    org.bouncycastle.util.Memoable copy() -> copy
    void reset(org.bouncycastle.util.Memoable) -> reset
org.bouncycastle.crypto.digests.RIPEMD320Digest -> org.bouncycastle.crypto.digests.RIPEMD320Digest:
    int DIGEST_LENGTH -> DIGEST_LENGTH
    int H0 -> H0
    int H1 -> H1
    int H2 -> H2
    int H3 -> H3
    int H4 -> H4
    int H5 -> H5
    int H6 -> H6
    int H7 -> H7
    int H8 -> H8
    int H9 -> H9
    int[] X -> X
    int xOff -> xOff
    void doCopy(org.bouncycastle.crypto.digests.RIPEMD320Digest) -> doCopy
    java.lang.String getAlgorithmName() -> getAlgorithmName
    int getDigestSize() -> getDigestSize
    void processWord(byte[],int) -> processWord
    void processLength(long) -> processLength
    void unpackWord(int,byte[],int) -> unpackWord
    int doFinal(byte[],int) -> doFinal
    void reset() -> reset
    int RL(int,int) -> RL
    int f1(int,int,int) -> f1
    int f2(int,int,int) -> f2
    int f3(int,int,int) -> f3
    int f4(int,int,int) -> f4
    int f5(int,int,int) -> f5
    void processBlock() -> processBlock
    org.bouncycastle.util.Memoable copy() -> copy
    void reset(org.bouncycastle.util.Memoable) -> reset
org.bouncycastle.crypto.digests.SHA1Digest -> org.bouncycastle.crypto.digests.SHA1Digest:
    int DIGEST_LENGTH -> DIGEST_LENGTH
    int H1 -> H1
    int H2 -> H2
    int H3 -> H3
    int H4 -> H4
    int H5 -> H5
    int[] X -> X
    int xOff -> xOff
    int Y1 -> Y1
    int Y2 -> Y2
    int Y3 -> Y3
    int Y4 -> Y4
    void copyIn(org.bouncycastle.crypto.digests.SHA1Digest) -> copyIn
    java.lang.String getAlgorithmName() -> getAlgorithmName
    int getDigestSize() -> getDigestSize
    void processWord(byte[],int) -> processWord
    void processLength(long) -> processLength
    int doFinal(byte[],int) -> doFinal
    void reset() -> reset
    int f(int,int,int) -> f
    int h(int,int,int) -> h
    int g(int,int,int) -> g
    void processBlock() -> processBlock
    org.bouncycastle.util.Memoable copy() -> copy
    void reset(org.bouncycastle.util.Memoable) -> reset
    byte[] getEncodedState() -> getEncodedState
org.bouncycastle.crypto.digests.SHA224Digest -> org.bouncycastle.crypto.digests.SHA224Digest:
    int DIGEST_LENGTH -> DIGEST_LENGTH
    int H1 -> H1
    int H2 -> H2
    int H3 -> H3
    int H4 -> H4
    int H5 -> H5
    int H6 -> H6
    int H7 -> H7
    int H8 -> H8
    int[] X -> X
    int xOff -> xOff
    int[] K -> K
    void doCopy(org.bouncycastle.crypto.digests.SHA224Digest) -> doCopy
    java.lang.String getAlgorithmName() -> getAlgorithmName
    int getDigestSize() -> getDigestSize
    void processWord(byte[],int) -> processWord
    void processLength(long) -> processLength
    int doFinal(byte[],int) -> doFinal
    void reset() -> reset
    void processBlock() -> processBlock
    int Ch(int,int,int) -> Ch
    int Maj(int,int,int) -> Maj
    int Sum0(int) -> Sum0
    int Sum1(int) -> Sum1
    int Theta0(int) -> Theta0
    int Theta1(int) -> Theta1
    org.bouncycastle.util.Memoable copy() -> copy
    void reset(org.bouncycastle.util.Memoable) -> reset
    byte[] getEncodedState() -> getEncodedState
org.bouncycastle.crypto.digests.SHA256Digest -> org.bouncycastle.crypto.digests.SHA256Digest:
    int DIGEST_LENGTH -> DIGEST_LENGTH
    int H1 -> H1
    int H2 -> H2
    int H3 -> H3
    int H4 -> H4
    int H5 -> H5
    int H6 -> H6
    int H7 -> H7
    int H8 -> H8
    int[] X -> X
    int xOff -> xOff
    int[] K -> K
    void copyIn(org.bouncycastle.crypto.digests.SHA256Digest) -> copyIn
    java.lang.String getAlgorithmName() -> getAlgorithmName
    int getDigestSize() -> getDigestSize
    void processWord(byte[],int) -> processWord
    void processLength(long) -> processLength
    int doFinal(byte[],int) -> doFinal
    void reset() -> reset
    void processBlock() -> processBlock
    int Ch(int,int,int) -> Ch
    int Maj(int,int,int) -> Maj
    int Sum0(int) -> Sum0
    int Sum1(int) -> Sum1
    int Theta0(int) -> Theta0
    int Theta1(int) -> Theta1
    org.bouncycastle.util.Memoable copy() -> copy
    void reset(org.bouncycastle.util.Memoable) -> reset
    byte[] getEncodedState() -> getEncodedState
org.bouncycastle.crypto.digests.SHA384Digest -> org.bouncycastle.crypto.digests.SHA384Digest:
    int DIGEST_LENGTH -> DIGEST_LENGTH
    java.lang.String getAlgorithmName() -> getAlgorithmName
    int getDigestSize() -> getDigestSize
    int doFinal(byte[],int) -> doFinal
    void reset() -> reset
    org.bouncycastle.util.Memoable copy() -> copy
    void reset(org.bouncycastle.util.Memoable) -> reset
    byte[] getEncodedState() -> getEncodedState
org.bouncycastle.crypto.digests.SHA3Digest -> org.bouncycastle.crypto.digests.SHA3Digest:
    long[] KeccakRoundConstants -> KeccakRoundConstants
    int[] KeccakRhoOffsets -> KeccakRhoOffsets
    byte[] state -> state
    byte[] dataQueue -> dataQueue
    int rate -> rate
    int bitsInQueue -> bitsInQueue
    int fixedOutputLength -> fixedOutputLength
    boolean squeezing -> squeezing
    int bitsAvailableForSqueezing -> bitsAvailableForSqueezing
    byte[] chunk -> chunk
    byte[] oneByte -> oneByte
    long[] C -> C
    long[] tempA -> tempA
    long[] chiC -> chiC
    long[] keccakInitializeRoundConstants() -> keccakInitializeRoundConstants
    boolean LFSR86540(byte[]) -> LFSR86540
    int[] keccakInitializeRhoOffsets() -> keccakInitializeRhoOffsets
    void clearDataQueueSection(int,int) -> clearDataQueueSection
    java.lang.String getAlgorithmName() -> getAlgorithmName
    int getDigestSize() -> getDigestSize
    void update(byte) -> update
    void update(byte[],int,int) -> update
    int doFinal(byte[],int) -> doFinal
    void reset() -> reset
    int getByteLength() -> getByteLength
    void init(int) -> init
    void doUpdate(byte[],int,long) -> doUpdate
    void initSponge(int,int) -> initSponge
    void absorbQueue() -> absorbQueue
    void absorb(byte[],int,long) -> absorb
    void padAndSwitchToSqueezingPhase() -> padAndSwitchToSqueezingPhase
    void squeeze(byte[],int,long) -> squeeze
    void fromBytesToWords(long[],byte[]) -> fromBytesToWords
    void fromWordsToBytes(byte[],long[]) -> fromWordsToBytes
    void keccakPermutation(byte[]) -> keccakPermutation
    void keccakPermutationAfterXor(byte[],byte[],int) -> keccakPermutationAfterXor
    void keccakPermutationOnWords(long[]) -> keccakPermutationOnWords
    void theta(long[]) -> theta
    void rho(long[]) -> rho
    void pi(long[]) -> pi
    void chi(long[]) -> chi
    void iota(long[],int) -> iota
    void KeccakAbsorb(byte[],byte[],int) -> KeccakAbsorb
    void KeccakExtract1024bits(byte[],byte[]) -> KeccakExtract1024bits
    void KeccakExtract(byte[],byte[],int) -> KeccakExtract
org.bouncycastle.crypto.digests.SHA512Digest -> org.bouncycastle.crypto.digests.SHA512Digest:
    int DIGEST_LENGTH -> DIGEST_LENGTH
    java.lang.String getAlgorithmName() -> getAlgorithmName
    int getDigestSize() -> getDigestSize
    int doFinal(byte[],int) -> doFinal
    void reset() -> reset
    org.bouncycastle.util.Memoable copy() -> copy
    void reset(org.bouncycastle.util.Memoable) -> reset
    byte[] getEncodedState() -> getEncodedState
org.bouncycastle.crypto.digests.SHA512tDigest -> org.bouncycastle.crypto.digests.SHA512tDigest:
    int digestLength -> digestLength
    long H1t -> H1t
    long H2t -> H2t
    long H3t -> H3t
    long H4t -> H4t
    long H5t -> H5t
    long H6t -> H6t
    long H7t -> H7t
    long H8t -> H8t
    int readDigestLength(byte[]) -> readDigestLength
    java.lang.String getAlgorithmName() -> getAlgorithmName
    int getDigestSize() -> getDigestSize
    int doFinal(byte[],int) -> doFinal
    void reset() -> reset
    void tIvGenerate(int) -> tIvGenerate
    void longToBigEndian(long,byte[],int,int) -> longToBigEndian
    void intToBigEndian(int,byte[],int,int) -> intToBigEndian
    org.bouncycastle.util.Memoable copy() -> copy
    void reset(org.bouncycastle.util.Memoable) -> reset
    byte[] getEncodedState() -> getEncodedState
org.bouncycastle.crypto.digests.SM3Digest -> org.bouncycastle.crypto.digests.SM3Digest:
    int DIGEST_LENGTH -> DIGEST_LENGTH
    int BLOCK_SIZE -> BLOCK_SIZE
    int[] V -> V
    int[] inwords -> inwords
    int xOff -> xOff
    int[] W -> W
    int[] W1 -> W1
    int[] T -> T
    void copyIn(org.bouncycastle.crypto.digests.SM3Digest) -> copyIn
    java.lang.String getAlgorithmName() -> getAlgorithmName
    int getDigestSize() -> getDigestSize
    org.bouncycastle.util.Memoable copy() -> copy
    void reset(org.bouncycastle.util.Memoable) -> reset
    void reset() -> reset
    int doFinal(byte[],int) -> doFinal
    void processWord(byte[],int) -> processWord
    void processLength(long) -> processLength
    int P0(int) -> P0
    int P1(int) -> P1
    int FF0(int,int,int) -> FF0
    int FF1(int,int,int) -> FF1
    int GG0(int,int,int) -> GG0
    int GG1(int,int,int) -> GG1
    void processBlock() -> processBlock
org.bouncycastle.crypto.digests.ShortenedDigest -> org.bouncycastle.crypto.digests.ShortenedDigest:
    org.bouncycastle.crypto.ExtendedDigest baseDigest -> baseDigest
    int length -> length
    java.lang.String getAlgorithmName() -> getAlgorithmName
    int getDigestSize() -> getDigestSize
    void update(byte) -> update
    void update(byte[],int,int) -> update
    int doFinal(byte[],int) -> doFinal
    void reset() -> reset
    int getByteLength() -> getByteLength
org.bouncycastle.crypto.digests.SkeinDigest -> org.bouncycastle.crypto.digests.SkeinDigest:
    int SKEIN_256 -> SKEIN_256
    int SKEIN_512 -> SKEIN_512
    int SKEIN_1024 -> SKEIN_1024
    org.bouncycastle.crypto.digests.SkeinEngine engine -> engine
    void reset(org.bouncycastle.util.Memoable) -> reset
    org.bouncycastle.util.Memoable copy() -> copy
    java.lang.String getAlgorithmName() -> getAlgorithmName
    int getDigestSize() -> getDigestSize
    int getByteLength() -> getByteLength
    void init(org.bouncycastle.crypto.params.SkeinParameters) -> init
    void reset() -> reset
    void update(byte) -> update
    void update(byte[],int,int) -> update
    int doFinal(byte[],int) -> doFinal
org.bouncycastle.crypto.digests.SkeinEngine -> org.bouncycastle.crypto.digests.SkeinEngine:
    int SKEIN_256 -> SKEIN_256
    int SKEIN_512 -> SKEIN_512
    int SKEIN_1024 -> SKEIN_1024
    int PARAM_TYPE_KEY -> PARAM_TYPE_KEY
    int PARAM_TYPE_CONFIG -> PARAM_TYPE_CONFIG
    int PARAM_TYPE_MESSAGE -> PARAM_TYPE_MESSAGE
    int PARAM_TYPE_OUTPUT -> PARAM_TYPE_OUTPUT
    java.util.Hashtable INITIAL_STATES -> INITIAL_STATES
    org.bouncycastle.crypto.engines.ThreefishEngine threefish -> threefish
    int outputSizeBytes -> outputSizeBytes
    long[] chain -> chain
    long[] initialState -> initialState
    byte[] key -> key
    org.bouncycastle.crypto.digests.SkeinEngine$Parameter[] preMessageParameters -> preMessageParameters
    org.bouncycastle.crypto.digests.SkeinEngine$Parameter[] postMessageParameters -> postMessageParameters
    org.bouncycastle.crypto.digests.SkeinEngine$UBI ubi -> ubi
    byte[] singleByte -> singleByte
    void initialState(int,int,long[]) -> initialState
    java.lang.Integer variantIdentifier(int,int) -> variantIdentifier
    void copyIn(org.bouncycastle.crypto.digests.SkeinEngine) -> copyIn
    org.bouncycastle.crypto.digests.SkeinEngine$Parameter[] clone(org.bouncycastle.crypto.digests.SkeinEngine$Parameter[],org.bouncycastle.crypto.digests.SkeinEngine$Parameter[]) -> clone
    org.bouncycastle.util.Memoable copy() -> copy
    void reset(org.bouncycastle.util.Memoable) -> reset
    int getOutputSize() -> getOutputSize
    int getBlockSize() -> getBlockSize
    void init(org.bouncycastle.crypto.params.SkeinParameters) -> init
    void initParams(java.util.Hashtable) -> initParams
    void sort(org.bouncycastle.crypto.digests.SkeinEngine$Parameter[]) -> sort
    void createInitialState() -> createInitialState
    void reset() -> reset
    void ubiComplete(int,byte[]) -> ubiComplete
    void ubiInit(int) -> ubiInit
    void ubiFinal() -> ubiFinal
    void checkInitialised() -> checkInitialised
    void update(byte) -> update
    void update(byte[],int,int) -> update
    int doFinal(byte[],int) -> doFinal
    void output(long,byte[],int,int) -> output
org.bouncycastle.crypto.digests.SkeinEngine$Configuration -> org.bouncycastle.crypto.digests.SkeinEngine$Configuration:
    byte[] bytes -> bytes
    byte[] getBytes() -> getBytes
org.bouncycastle.crypto.digests.SkeinEngine$Parameter -> org.bouncycastle.crypto.digests.SkeinEngine$Parameter:
    int type -> type
    byte[] value -> value
    int getType() -> getType
    byte[] getValue() -> getValue
org.bouncycastle.crypto.digests.SkeinEngine$UBI -> org.bouncycastle.crypto.digests.SkeinEngine$UBI:
    org.bouncycastle.crypto.digests.SkeinEngine$UbiTweak tweak -> tweak
    byte[] currentBlock -> currentBlock
    int currentOffset -> currentOffset
    long[] message -> message
    org.bouncycastle.crypto.digests.SkeinEngine this$0 -> this$0
    void reset(org.bouncycastle.crypto.digests.SkeinEngine$UBI) -> reset
    void reset(int) -> reset
    void update(byte[],int,int,long[]) -> update
    void processBlock(long[]) -> processBlock
    void doFinal(long[]) -> doFinal
org.bouncycastle.crypto.digests.SkeinEngine$UbiTweak -> org.bouncycastle.crypto.digests.SkeinEngine$UbiTweak:
    long LOW_RANGE -> LOW_RANGE
    long T1_FINAL -> T1_FINAL
    long T1_FIRST -> T1_FIRST
    long[] tweak -> tweak
    boolean extendedPosition -> extendedPosition
    void reset(org.bouncycastle.crypto.digests.SkeinEngine$UbiTweak) -> reset
    void reset() -> reset
    void setType(int) -> setType
    int getType() -> getType
    void setFirst(boolean) -> setFirst
    boolean isFirst() -> isFirst
    void setFinal(boolean) -> setFinal
    boolean isFinal() -> isFinal
    void advancePosition(int) -> advancePosition
    long[] getWords() -> getWords
    java.lang.String toString() -> toString
org.bouncycastle.crypto.digests.TigerDigest -> org.bouncycastle.crypto.digests.TigerDigest:
    int BYTE_LENGTH -> BYTE_LENGTH
    long[] t1 -> t1
    long[] t2 -> t2
    long[] t3 -> t3
    long[] t4 -> t4
    int DIGEST_LENGTH -> DIGEST_LENGTH
    long a -> a
    long b -> b
    long c -> c
    long byteCount -> byteCount
    byte[] buf -> buf
    int bOff -> bOff
    long[] x -> x
    int xOff -> xOff
    java.lang.String getAlgorithmName() -> getAlgorithmName
    int getDigestSize() -> getDigestSize
    void processWord(byte[],int) -> processWord
    void update(byte) -> update
    void update(byte[],int,int) -> update
    void roundABC(long,long) -> roundABC
    void roundBCA(long,long) -> roundBCA
    void roundCAB(long,long) -> roundCAB
    void keySchedule() -> keySchedule
    void processBlock() -> processBlock
    void unpackWord(long,byte[],int) -> unpackWord
    void processLength(long) -> processLength
    void finish() -> finish
    int doFinal(byte[],int) -> doFinal
    void reset() -> reset
    int getByteLength() -> getByteLength
    org.bouncycastle.util.Memoable copy() -> copy
    void reset(org.bouncycastle.util.Memoable) -> reset
org.bouncycastle.crypto.digests.WhirlpoolDigest -> org.bouncycastle.crypto.digests.WhirlpoolDigest:
    int BYTE_LENGTH -> BYTE_LENGTH
    int DIGEST_LENGTH_BYTES -> DIGEST_LENGTH_BYTES
    int ROUNDS -> ROUNDS
    int REDUCTION_POLYNOMIAL -> REDUCTION_POLYNOMIAL
    int[] SBOX -> SBOX
    long[] C0 -> C0
    long[] C1 -> C1
    long[] C2 -> C2
    long[] C3 -> C3
    long[] C4 -> C4
    long[] C5 -> C5
    long[] C6 -> C6
    long[] C7 -> C7
    long[] _rc -> _rc
    int BITCOUNT_ARRAY_SIZE -> BITCOUNT_ARRAY_SIZE
    byte[] _buffer -> _buffer
    int _bufferPos -> _bufferPos
    short[] _bitCount -> _bitCount
    long[] _hash -> _hash
    long[] _K -> _K
    long[] _L -> _L
    long[] _block -> _block
    long[] _state -> _state
    short[] EIGHT -> EIGHT
    long packIntoLong(int,int,int,int,int,int,int,int) -> packIntoLong
    int maskWithReductionPolynomial(int) -> maskWithReductionPolynomial
    java.lang.String getAlgorithmName() -> getAlgorithmName
    int getDigestSize() -> getDigestSize
    int doFinal(byte[],int) -> doFinal
    void reset() -> reset
    void processFilledBuffer(byte[],int) -> processFilledBuffer
    long bytesToLongFromBuffer(byte[],int) -> bytesToLongFromBuffer
    void convertLongToByteArray(long,byte[],int) -> convertLongToByteArray
    void processBlock() -> processBlock
    void update(byte) -> update
    void increment() -> increment
    void update(byte[],int,int) -> update
    void finish() -> finish
    byte[] copyBitLength() -> copyBitLength
    int getByteLength() -> getByteLength
    org.bouncycastle.util.Memoable copy() -> copy
    void reset(org.bouncycastle.util.Memoable) -> reset
org.bouncycastle.crypto.ec.CustomNamedCurves -> org.bouncycastle.crypto.ec.CustomNamedCurves:
    org.bouncycastle.asn1.x9.X9ECParametersHolder curve25519 -> curve25519
    org.bouncycastle.asn1.x9.X9ECParametersHolder secp192k1 -> secp192k1
    org.bouncycastle.asn1.x9.X9ECParametersHolder secp192r1 -> secp192r1
    org.bouncycastle.asn1.x9.X9ECParametersHolder secp224k1 -> secp224k1
    org.bouncycastle.asn1.x9.X9ECParametersHolder secp224r1 -> secp224r1
    org.bouncycastle.asn1.x9.X9ECParametersHolder secp256k1 -> secp256k1
    org.bouncycastle.asn1.x9.X9ECParametersHolder secp256r1 -> secp256r1
    org.bouncycastle.asn1.x9.X9ECParametersHolder secp384r1 -> secp384r1
    org.bouncycastle.asn1.x9.X9ECParametersHolder secp521r1 -> secp521r1
    java.util.Hashtable nameToCurve -> nameToCurve
    java.util.Hashtable nameToOID -> nameToOID
    java.util.Hashtable oidToCurve -> oidToCurve
    java.util.Hashtable oidToName -> oidToName
    org.bouncycastle.math.ec.ECCurve configureCurve(org.bouncycastle.math.ec.ECCurve) -> configureCurve
    org.bouncycastle.math.ec.ECCurve configureCurveGLV(org.bouncycastle.math.ec.ECCurve,org.bouncycastle.math.ec.endo.GLVTypeBParameters) -> configureCurveGLV
    void defineCurve(java.lang.String,org.bouncycastle.asn1.x9.X9ECParametersHolder) -> defineCurve
    void defineCurveWithOID(java.lang.String,org.bouncycastle.asn1.ASN1ObjectIdentifier,org.bouncycastle.asn1.x9.X9ECParametersHolder) -> defineCurveWithOID
    void defineCurveAlias(java.lang.String,org.bouncycastle.asn1.ASN1ObjectIdentifier) -> defineCurveAlias
    org.bouncycastle.asn1.x9.X9ECParameters getByName(java.lang.String) -> getByName
    org.bouncycastle.asn1.x9.X9ECParameters getByOID(org.bouncycastle.asn1.ASN1ObjectIdentifier) -> getByOID
    org.bouncycastle.asn1.ASN1ObjectIdentifier getOID(java.lang.String) -> getOID
    java.lang.String getName(org.bouncycastle.asn1.ASN1ObjectIdentifier) -> getName
    java.util.Enumeration getNames() -> getNames
    org.bouncycastle.math.ec.ECCurve access$000(org.bouncycastle.math.ec.ECCurve) -> access$000
    org.bouncycastle.math.ec.ECCurve access$100(org.bouncycastle.math.ec.ECCurve,org.bouncycastle.math.ec.endo.GLVTypeBParameters) -> access$100
org.bouncycastle.crypto.ec.CustomNamedCurves$1 -> org.bouncycastle.crypto.ec.CustomNamedCurves$1:
    org.bouncycastle.asn1.x9.X9ECParameters createParameters() -> createParameters
org.bouncycastle.crypto.ec.CustomNamedCurves$2 -> org.bouncycastle.crypto.ec.CustomNamedCurves$2:
    org.bouncycastle.asn1.x9.X9ECParameters createParameters() -> createParameters
org.bouncycastle.crypto.ec.CustomNamedCurves$3 -> org.bouncycastle.crypto.ec.CustomNamedCurves$3:
    org.bouncycastle.asn1.x9.X9ECParameters createParameters() -> createParameters
org.bouncycastle.crypto.ec.CustomNamedCurves$4 -> org.bouncycastle.crypto.ec.CustomNamedCurves$4:
    org.bouncycastle.asn1.x9.X9ECParameters createParameters() -> createParameters
org.bouncycastle.crypto.ec.CustomNamedCurves$5 -> org.bouncycastle.crypto.ec.CustomNamedCurves$5:
    org.bouncycastle.asn1.x9.X9ECParameters createParameters() -> createParameters
org.bouncycastle.crypto.ec.CustomNamedCurves$6 -> org.bouncycastle.crypto.ec.CustomNamedCurves$6:
    org.bouncycastle.asn1.x9.X9ECParameters createParameters() -> createParameters
org.bouncycastle.crypto.ec.CustomNamedCurves$7 -> org.bouncycastle.crypto.ec.CustomNamedCurves$7:
    org.bouncycastle.asn1.x9.X9ECParameters createParameters() -> createParameters
org.bouncycastle.crypto.ec.CustomNamedCurves$8 -> org.bouncycastle.crypto.ec.CustomNamedCurves$8:
    org.bouncycastle.asn1.x9.X9ECParameters createParameters() -> createParameters
org.bouncycastle.crypto.ec.CustomNamedCurves$9 -> org.bouncycastle.crypto.ec.CustomNamedCurves$9:
    org.bouncycastle.asn1.x9.X9ECParameters createParameters() -> createParameters
org.bouncycastle.crypto.ec.ECDecryptor -> org.bouncycastle.crypto.ec.ECDecryptor:
    void init(org.bouncycastle.crypto.CipherParameters) -> init
    org.bouncycastle.math.ec.ECPoint decrypt(org.bouncycastle.crypto.ec.ECPair) -> decrypt
org.bouncycastle.crypto.ec.ECElGamalDecryptor -> org.bouncycastle.crypto.ec.ECElGamalDecryptor:
    org.bouncycastle.crypto.params.ECPrivateKeyParameters key -> key
    void init(org.bouncycastle.crypto.CipherParameters) -> init
    org.bouncycastle.math.ec.ECPoint decrypt(org.bouncycastle.crypto.ec.ECPair) -> decrypt
org.bouncycastle.crypto.ec.ECElGamalEncryptor -> org.bouncycastle.crypto.ec.ECElGamalEncryptor:
    org.bouncycastle.crypto.params.ECPublicKeyParameters key -> key
    java.security.SecureRandom random -> random
    void init(org.bouncycastle.crypto.CipherParameters) -> init
    org.bouncycastle.crypto.ec.ECPair encrypt(org.bouncycastle.math.ec.ECPoint) -> encrypt
    org.bouncycastle.math.ec.ECMultiplier createBasePointMultiplier() -> createBasePointMultiplier
org.bouncycastle.crypto.ec.ECEncryptor -> org.bouncycastle.crypto.ec.ECEncryptor:
    void init(org.bouncycastle.crypto.CipherParameters) -> init
    org.bouncycastle.crypto.ec.ECPair encrypt(org.bouncycastle.math.ec.ECPoint) -> encrypt
org.bouncycastle.crypto.ec.ECFixedTransform -> org.bouncycastle.crypto.ec.ECFixedTransform:
    org.bouncycastle.crypto.params.ECPublicKeyParameters key -> key
    java.math.BigInteger k -> k
    void init(org.bouncycastle.crypto.CipherParameters) -> init
    org.bouncycastle.crypto.ec.ECPair transform(org.bouncycastle.crypto.ec.ECPair) -> transform
    java.math.BigInteger getTransformValue() -> getTransformValue
    org.bouncycastle.math.ec.ECMultiplier createBasePointMultiplier() -> createBasePointMultiplier
org.bouncycastle.crypto.ec.ECNewPublicKeyTransform -> org.bouncycastle.crypto.ec.ECNewPublicKeyTransform:
    org.bouncycastle.crypto.params.ECPublicKeyParameters key -> key
    java.security.SecureRandom random -> random
    void init(org.bouncycastle.crypto.CipherParameters) -> init
    org.bouncycastle.crypto.ec.ECPair transform(org.bouncycastle.crypto.ec.ECPair) -> transform
    org.bouncycastle.math.ec.ECMultiplier createBasePointMultiplier() -> createBasePointMultiplier
org.bouncycastle.crypto.ec.ECNewRandomnessTransform -> org.bouncycastle.crypto.ec.ECNewRandomnessTransform:
    org.bouncycastle.crypto.params.ECPublicKeyParameters key -> key
    java.security.SecureRandom random -> random
    java.math.BigInteger lastK -> lastK
    void init(org.bouncycastle.crypto.CipherParameters) -> init
    org.bouncycastle.crypto.ec.ECPair transform(org.bouncycastle.crypto.ec.ECPair) -> transform
    java.math.BigInteger getTransformValue() -> getTransformValue
    org.bouncycastle.math.ec.ECMultiplier createBasePointMultiplier() -> createBasePointMultiplier
org.bouncycastle.crypto.ec.ECPair -> org.bouncycastle.crypto.ec.ECPair:
    org.bouncycastle.math.ec.ECPoint x -> x
    org.bouncycastle.math.ec.ECPoint y -> y
    org.bouncycastle.math.ec.ECPoint getX() -> getX
    org.bouncycastle.math.ec.ECPoint getY() -> getY
    boolean equals(org.bouncycastle.crypto.ec.ECPair) -> equals
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
org.bouncycastle.crypto.ec.ECPairFactorTransform -> org.bouncycastle.crypto.ec.ECPairFactorTransform:
    java.math.BigInteger getTransformValue() -> getTransformValue
org.bouncycastle.crypto.ec.ECPairTransform -> org.bouncycastle.crypto.ec.ECPairTransform:
    void init(org.bouncycastle.crypto.CipherParameters) -> init
    org.bouncycastle.crypto.ec.ECPair transform(org.bouncycastle.crypto.ec.ECPair) -> transform
org.bouncycastle.crypto.ec.ECUtil -> org.bouncycastle.crypto.ec.ECUtil:
    java.math.BigInteger generateK(java.math.BigInteger,java.security.SecureRandom) -> generateK
org.bouncycastle.crypto.encodings.ISO9796d1Encoding -> org.bouncycastle.crypto.encodings.ISO9796d1Encoding:
    java.math.BigInteger SIXTEEN -> SIXTEEN
    java.math.BigInteger SIX -> SIX
    byte[] shadows -> shadows
    byte[] inverse -> inverse
    org.bouncycastle.crypto.AsymmetricBlockCipher engine -> engine
    boolean forEncryption -> forEncryption
    int bitSize -> bitSize
    int padBits -> padBits
    java.math.BigInteger modulus -> modulus
    org.bouncycastle.crypto.AsymmetricBlockCipher getUnderlyingCipher() -> getUnderlyingCipher
    void init(boolean,org.bouncycastle.crypto.CipherParameters) -> init
    int getInputBlockSize() -> getInputBlockSize
    int getOutputBlockSize() -> getOutputBlockSize
    void setPadBits(int) -> setPadBits
    int getPadBits() -> getPadBits
    byte[] processBlock(byte[],int,int) -> processBlock
    byte[] encodeBlock(byte[],int,int) -> encodeBlock
    byte[] decodeBlock(byte[],int,int) -> decodeBlock
    byte[] convertOutputDecryptOnly(java.math.BigInteger) -> convertOutputDecryptOnly
org.bouncycastle.crypto.encodings.OAEPEncoding -> org.bouncycastle.crypto.encodings.OAEPEncoding:
    byte[] defHash -> defHash
    org.bouncycastle.crypto.Digest mgf1Hash -> mgf1Hash
    org.bouncycastle.crypto.AsymmetricBlockCipher engine -> engine
    java.security.SecureRandom random -> random
    boolean forEncryption -> forEncryption
    org.bouncycastle.crypto.AsymmetricBlockCipher getUnderlyingCipher() -> getUnderlyingCipher
    void init(boolean,org.bouncycastle.crypto.CipherParameters) -> init
    int getInputBlockSize() -> getInputBlockSize
    int getOutputBlockSize() -> getOutputBlockSize
    byte[] processBlock(byte[],int,int) -> processBlock
    byte[] encodeBlock(byte[],int,int) -> encodeBlock
    byte[] decodeBlock(byte[],int,int) -> decodeBlock
    void ItoOSP(int,byte[]) -> ItoOSP
    byte[] maskGeneratorFunction1(byte[],int,int,int) -> maskGeneratorFunction1
org.bouncycastle.crypto.encodings.PKCS1Encoding -> org.bouncycastle.crypto.encodings.PKCS1Encoding:
    java.lang.String STRICT_LENGTH_ENABLED_PROPERTY -> STRICT_LENGTH_ENABLED_PROPERTY
    int HEADER_LENGTH -> HEADER_LENGTH
    java.security.SecureRandom random -> random
    org.bouncycastle.crypto.AsymmetricBlockCipher engine -> engine
    boolean forEncryption -> forEncryption
    boolean forPrivateKey -> forPrivateKey
    boolean useStrictLength -> useStrictLength
    int pLen -> pLen
    byte[] fallback -> fallback
    boolean useStrict() -> useStrict
    org.bouncycastle.crypto.AsymmetricBlockCipher getUnderlyingCipher() -> getUnderlyingCipher
    void init(boolean,org.bouncycastle.crypto.CipherParameters) -> init
    int getInputBlockSize() -> getInputBlockSize
    int getOutputBlockSize() -> getOutputBlockSize
    byte[] processBlock(byte[],int,int) -> processBlock
    byte[] encodeBlock(byte[],int,int) -> encodeBlock
    int checkPkcs1Encoding(byte[],int) -> checkPkcs1Encoding
    byte[] decodeBlockOrRandom(byte[],int,int) -> decodeBlockOrRandom
    byte[] decodeBlock(byte[],int,int) -> decodeBlock
org.bouncycastle.crypto.encodings.PKCS1Encoding$1 -> org.bouncycastle.crypto.encodings.PKCS1Encoding$1:
    org.bouncycastle.crypto.encodings.PKCS1Encoding this$0 -> this$0
    java.lang.Object run() -> run
org.bouncycastle.crypto.engines.AESEngine -> org.bouncycastle.crypto.engines.AESEngine:
    byte[] S -> S
    byte[] Si -> Si
    int[] rcon -> rcon
    int[] T0 -> T0
    int[] Tinv0 -> Tinv0
    int m1 -> m1
    int m2 -> m2
    int m3 -> m3
    int ROUNDS -> ROUNDS
    int[][] WorkingKey -> WorkingKey
    int C0 -> C0
    int C1 -> C1
    int C2 -> C2
    int C3 -> C3
    boolean forEncryption -> forEncryption
    int BLOCK_SIZE -> BLOCK_SIZE
    int shift(int,int) -> shift
    int FFmulX(int) -> FFmulX
    int inv_mcol(int) -> inv_mcol
    int subWord(int) -> subWord
    int[][] generateWorkingKey(byte[],boolean) -> generateWorkingKey
    void init(boolean,org.bouncycastle.crypto.CipherParameters) -> init
    java.lang.String getAlgorithmName() -> getAlgorithmName
    int getBlockSize() -> getBlockSize
    int processBlock(byte[],int,byte[],int) -> processBlock
    void reset() -> reset
    void unpackBlock(byte[],int) -> unpackBlock
    void packBlock(byte[],int) -> packBlock
    void encryptBlock(int[][]) -> encryptBlock
    void decryptBlock(int[][]) -> decryptBlock
org.bouncycastle.crypto.engines.AESFastEngine -> org.bouncycastle.crypto.engines.AESFastEngine:
    byte[] S -> S
    byte[] Si -> Si
    int[] rcon -> rcon
    int[] T -> T
    int[] Tinv -> Tinv
    int m1 -> m1
    int m2 -> m2
    int m3 -> m3
    int ROUNDS -> ROUNDS
    int[][] WorkingKey -> WorkingKey
    int C0 -> C0
    int C1 -> C1
    int C2 -> C2
    int C3 -> C3
    boolean forEncryption -> forEncryption
    int BLOCK_SIZE -> BLOCK_SIZE
    int shift(int,int) -> shift
    int FFmulX(int) -> FFmulX
    int inv_mcol(int) -> inv_mcol
    int subWord(int) -> subWord
    int[][] generateWorkingKey(byte[],boolean) -> generateWorkingKey
    void init(boolean,org.bouncycastle.crypto.CipherParameters) -> init
    java.lang.String getAlgorithmName() -> getAlgorithmName
    int getBlockSize() -> getBlockSize
    int processBlock(byte[],int,byte[],int) -> processBlock
    void reset() -> reset
    void unpackBlock(byte[],int) -> unpackBlock
    void packBlock(byte[],int) -> packBlock
    void encryptBlock(int[][]) -> encryptBlock
    void decryptBlock(int[][]) -> decryptBlock
org.bouncycastle.crypto.engines.AESLightEngine -> org.bouncycastle.crypto.engines.AESLightEngine:
    byte[] S -> S
    byte[] Si -> Si
    int[] rcon -> rcon
    int m1 -> m1
    int m2 -> m2
    int m3 -> m3
    int ROUNDS -> ROUNDS
    int[][] WorkingKey -> WorkingKey
    int C0 -> C0
    int C1 -> C1
    int C2 -> C2
    int C3 -> C3
    boolean forEncryption -> forEncryption
    int BLOCK_SIZE -> BLOCK_SIZE
    int shift(int,int) -> shift
    int FFmulX(int) -> FFmulX
    int mcol(int) -> mcol
    int inv_mcol(int) -> inv_mcol
    int subWord(int) -> subWord
    int[][] generateWorkingKey(byte[],boolean) -> generateWorkingKey
    void init(boolean,org.bouncycastle.crypto.CipherParameters) -> init
    java.lang.String getAlgorithmName() -> getAlgorithmName
    int getBlockSize() -> getBlockSize
    int processBlock(byte[],int,byte[],int) -> processBlock
    void reset() -> reset
    void unpackBlock(byte[],int) -> unpackBlock
    void packBlock(byte[],int) -> packBlock
    void encryptBlock(int[][]) -> encryptBlock
    void decryptBlock(int[][]) -> decryptBlock
org.bouncycastle.crypto.engines.AESWrapEngine -> org.bouncycastle.crypto.engines.AESWrapEngine:
org.bouncycastle.crypto.engines.AESWrapPadEngine -> org.bouncycastle.crypto.engines.AESWrapPadEngine:
org.bouncycastle.crypto.engines.BlowfishEngine -> org.bouncycastle.crypto.engines.BlowfishEngine:
    int[] KP -> KP
    int[] KS0 -> KS0
    int[] KS1 -> KS1
    int[] KS2 -> KS2
    int[] KS3 -> KS3
    int ROUNDS -> ROUNDS
    int BLOCK_SIZE -> BLOCK_SIZE
    int SBOX_SK -> SBOX_SK
    int P_SZ -> P_SZ
    int[] S0 -> S0
    int[] S1 -> S1
    int[] S2 -> S2
    int[] S3 -> S3
    int[] P -> P
    boolean encrypting -> encrypting
    byte[] workingKey -> workingKey
    void init(boolean,org.bouncycastle.crypto.CipherParameters) -> init
    java.lang.String getAlgorithmName() -> getAlgorithmName
    int processBlock(byte[],int,byte[],int) -> processBlock
    void reset() -> reset
    int getBlockSize() -> getBlockSize
    int F(int) -> F
    void processTable(int,int,int[]) -> processTable
    void setKey(byte[]) -> setKey
    void encryptBlock(byte[],int,byte[],int) -> encryptBlock
    void decryptBlock(byte[],int,byte[],int) -> decryptBlock
    int BytesTo32bits(byte[],int) -> BytesTo32bits
    void Bits32ToBytes(int,byte[],int) -> Bits32ToBytes
org.bouncycastle.crypto.engines.CAST5Engine -> org.bouncycastle.crypto.engines.CAST5Engine:
    int M32 -> M32
    int[] S1 -> S1
    int[] S2 -> S2
    int[] S3 -> S3
    int[] S4 -> S4
    int[] S5 -> S5
    int[] S6 -> S6
    int[] S7 -> S7
    int[] S8 -> S8
    int MAX_ROUNDS -> MAX_ROUNDS
    int RED_ROUNDS -> RED_ROUNDS
    int BLOCK_SIZE -> BLOCK_SIZE
    int[] _Kr -> _Kr
    int[] _Km -> _Km
    boolean _encrypting -> _encrypting
    byte[] _workingKey -> _workingKey
    int _rounds -> _rounds
    void init(boolean,org.bouncycastle.crypto.CipherParameters) -> init
    java.lang.String getAlgorithmName() -> getAlgorithmName
    int processBlock(byte[],int,byte[],int) -> processBlock
    void reset() -> reset
    int getBlockSize() -> getBlockSize
    void setKey(byte[]) -> setKey
    int encryptBlock(byte[],int,byte[],int) -> encryptBlock
    int decryptBlock(byte[],int,byte[],int) -> decryptBlock
    int F1(int,int,int) -> F1
    int F2(int,int,int) -> F2
    int F3(int,int,int) -> F3
    void CAST_Encipher(int,int,int[]) -> CAST_Encipher
    void CAST_Decipher(int,int,int[]) -> CAST_Decipher
    void Bits32ToInts(int,int[],int) -> Bits32ToInts
    int IntsTo32bits(int[],int) -> IntsTo32bits
    void Bits32ToBytes(int,byte[],int) -> Bits32ToBytes
    int BytesTo32bits(byte[],int) -> BytesTo32bits
org.bouncycastle.crypto.engines.CAST6Engine -> org.bouncycastle.crypto.engines.CAST6Engine:
    int ROUNDS -> ROUNDS
    int BLOCK_SIZE -> BLOCK_SIZE
    int[] _Kr -> _Kr
    int[] _Km -> _Km
    int[] _Tr -> _Tr
    int[] _Tm -> _Tm
    int[] _workingKey -> _workingKey
    java.lang.String getAlgorithmName() -> getAlgorithmName
    void reset() -> reset
    int getBlockSize() -> getBlockSize
    void setKey(byte[]) -> setKey
    int encryptBlock(byte[],int,byte[],int) -> encryptBlock
    int decryptBlock(byte[],int,byte[],int) -> decryptBlock
    void CAST_Encipher(int,int,int,int,int[]) -> CAST_Encipher
    void CAST_Decipher(int,int,int,int,int[]) -> CAST_Decipher
org.bouncycastle.crypto.engines.CamelliaEngine -> org.bouncycastle.crypto.engines.CamelliaEngine:
    boolean initialised -> initialised
    boolean _keyIs128 -> _keyIs128
    int BLOCK_SIZE -> BLOCK_SIZE
    int MASK8 -> MASK8
    int[] subkey -> subkey
    int[] kw -> kw
    int[] ke -> ke
    int[] state -> state
    int[] SIGMA -> SIGMA
    int[] SBOX1_1110 -> SBOX1_1110
    int[] SBOX4_4404 -> SBOX4_4404
    int[] SBOX2_0222 -> SBOX2_0222
    int[] SBOX3_3033 -> SBOX3_3033
    int rightRotate(int,int) -> rightRotate
    int leftRotate(int,int) -> leftRotate
    void roldq(int,int[],int,int[],int) -> roldq
    void decroldq(int,int[],int,int[],int) -> decroldq
    void roldqo32(int,int[],int,int[],int) -> roldqo32
    void decroldqo32(int,int[],int,int[],int) -> decroldqo32
    int bytes2int(byte[],int) -> bytes2int
    void int2bytes(int,byte[],int) -> int2bytes
    void camelliaF2(int[],int[],int) -> camelliaF2
    void camelliaFLs(int[],int[],int) -> camelliaFLs
    void setKey(boolean,byte[]) -> setKey
    int processBlock128(byte[],int,byte[],int) -> processBlock128
    int processBlock192or256(byte[],int,byte[],int) -> processBlock192or256
    void init(boolean,org.bouncycastle.crypto.CipherParameters) -> init
    java.lang.String getAlgorithmName() -> getAlgorithmName
    int getBlockSize() -> getBlockSize
    int processBlock(byte[],int,byte[],int) -> processBlock
    void reset() -> reset
org.bouncycastle.crypto.engines.CamelliaLightEngine -> org.bouncycastle.crypto.engines.CamelliaLightEngine:
    int BLOCK_SIZE -> BLOCK_SIZE
    int MASK8 -> MASK8
    boolean initialized -> initialized
    boolean _keyis128 -> _keyis128
    int[] subkey -> subkey
    int[] kw -> kw
    int[] ke -> ke
    int[] state -> state
    int[] SIGMA -> SIGMA
    byte[] SBOX1 -> SBOX1
    int rightRotate(int,int) -> rightRotate
    int leftRotate(int,int) -> leftRotate
    void roldq(int,int[],int,int[],int) -> roldq
    void decroldq(int,int[],int,int[],int) -> decroldq
    void roldqo32(int,int[],int,int[],int) -> roldqo32
    void decroldqo32(int,int[],int,int[],int) -> decroldqo32
    int bytes2int(byte[],int) -> bytes2int
    void int2bytes(int,byte[],int) -> int2bytes
    byte lRot8(byte,int) -> lRot8
    int sbox2(int) -> sbox2
    int sbox3(int) -> sbox3
    int sbox4(int) -> sbox4
    void camelliaF2(int[],int[],int) -> camelliaF2
    void camelliaFLs(int[],int[],int) -> camelliaFLs
    void setKey(boolean,byte[]) -> setKey
    int processBlock128(byte[],int,byte[],int) -> processBlock128
    int processBlock192or256(byte[],int,byte[],int) -> processBlock192or256
    java.lang.String getAlgorithmName() -> getAlgorithmName
    int getBlockSize() -> getBlockSize
    void init(boolean,org.bouncycastle.crypto.CipherParameters) -> init
    int processBlock(byte[],int,byte[],int) -> processBlock
    void reset() -> reset
org.bouncycastle.crypto.engines.CamelliaWrapEngine -> org.bouncycastle.crypto.engines.CamelliaWrapEngine:
org.bouncycastle.crypto.engines.ChaChaEngine -> org.bouncycastle.crypto.engines.ChaChaEngine:
    java.lang.String getAlgorithmName() -> getAlgorithmName
    void advanceCounter() -> advanceCounter
    void retreatCounter() -> retreatCounter
    long getCounter() -> getCounter
    void resetCounter() -> resetCounter
    void setKey(byte[],byte[]) -> setKey
    void generateKeyStream(byte[]) -> generateKeyStream
    void chachaCore(int,int[],int[]) -> chachaCore
org.bouncycastle.crypto.engines.CramerShoupCiphertext -> org.bouncycastle.crypto.engines.CramerShoupCiphertext:
    java.math.BigInteger u1 -> u1
    java.math.BigInteger u2 -> u2
    java.math.BigInteger e -> e
    java.math.BigInteger v -> v
    java.math.BigInteger getU1() -> getU1
    void setU1(java.math.BigInteger) -> setU1
    java.math.BigInteger getU2() -> getU2
    void setU2(java.math.BigInteger) -> setU2
    java.math.BigInteger getE() -> getE
    void setE(java.math.BigInteger) -> setE
    java.math.BigInteger getV() -> getV
    void setV(java.math.BigInteger) -> setV
    java.lang.String toString() -> toString
    byte[] toByteArray() -> toByteArray
    byte[] intToByteArray(int) -> intToByteArray
    int byteArrayToInt(byte[]) -> byteArrayToInt
org.bouncycastle.crypto.engines.CramerShoupCoreEngine -> org.bouncycastle.crypto.engines.CramerShoupCoreEngine:
    java.math.BigInteger ONE -> ONE
    org.bouncycastle.crypto.params.CramerShoupKeyParameters key -> key
    java.security.SecureRandom random -> random
    boolean forEncryption -> forEncryption
    java.lang.String label -> label
    void init(boolean,org.bouncycastle.crypto.CipherParameters,java.lang.String) -> init
    void init(boolean,org.bouncycastle.crypto.CipherParameters) -> init
    int getInputBlockSize() -> getInputBlockSize
    int getOutputBlockSize() -> getOutputBlockSize
    java.math.BigInteger convertInput(byte[],int,int) -> convertInput
    byte[] convertOutput(java.math.BigInteger) -> convertOutput
    org.bouncycastle.crypto.engines.CramerShoupCiphertext encryptBlock(java.math.BigInteger) -> encryptBlock
    java.math.BigInteger decryptBlock(org.bouncycastle.crypto.engines.CramerShoupCiphertext) -> decryptBlock
    java.math.BigInteger generateRandomElement(java.math.BigInteger,java.security.SecureRandom) -> generateRandomElement
    boolean isValidMessage(java.math.BigInteger,java.math.BigInteger) -> isValidMessage
    java.security.SecureRandom initSecureRandom(boolean,java.security.SecureRandom) -> initSecureRandom
org.bouncycastle.crypto.engines.CramerShoupCoreEngine$CramerShoupCiphertextException -> org.bouncycastle.crypto.engines.CramerShoupCoreEngine$CramerShoupCiphertextException:
    long serialVersionUID -> serialVersionUID
org.bouncycastle.crypto.engines.DESEngine -> org.bouncycastle.crypto.engines.DESEngine:
    int BLOCK_SIZE -> BLOCK_SIZE
    int[] workingKey -> workingKey
    short[] bytebit -> bytebit
    int[] bigbyte -> bigbyte
    byte[] pc1 -> pc1
    byte[] totrot -> totrot
    byte[] pc2 -> pc2
    int[] SP1 -> SP1
    int[] SP2 -> SP2
    int[] SP3 -> SP3
    int[] SP4 -> SP4
    int[] SP5 -> SP5
    int[] SP6 -> SP6
    int[] SP7 -> SP7
    int[] SP8 -> SP8
    void init(boolean,org.bouncycastle.crypto.CipherParameters) -> init
    java.lang.String getAlgorithmName() -> getAlgorithmName
    int getBlockSize() -> getBlockSize
    int processBlock(byte[],int,byte[],int) -> processBlock
    void reset() -> reset
    int[] generateWorkingKey(boolean,byte[]) -> generateWorkingKey
    void desFunc(int[],byte[],int,byte[],int) -> desFunc
org.bouncycastle.crypto.engines.DESedeEngine -> org.bouncycastle.crypto.engines.DESedeEngine:
    int BLOCK_SIZE -> BLOCK_SIZE
    int[] workingKey1 -> workingKey1
    int[] workingKey2 -> workingKey2
    int[] workingKey3 -> workingKey3
    boolean forEncryption -> forEncryption
    void init(boolean,org.bouncycastle.crypto.CipherParameters) -> init
    java.lang.String getAlgorithmName() -> getAlgorithmName
    int getBlockSize() -> getBlockSize
    int processBlock(byte[],int,byte[],int) -> processBlock
    void reset() -> reset
org.bouncycastle.crypto.engines.DESedeWrapEngine -> org.bouncycastle.crypto.engines.DESedeWrapEngine:
    org.bouncycastle.crypto.modes.CBCBlockCipher engine -> engine
    org.bouncycastle.crypto.params.KeyParameter param -> param
    org.bouncycastle.crypto.params.ParametersWithIV paramPlusIV -> paramPlusIV
    byte[] iv -> iv
    boolean forWrapping -> forWrapping
    byte[] IV2 -> IV2
    org.bouncycastle.crypto.Digest sha1 -> sha1
    byte[] digest -> digest
    void init(boolean,org.bouncycastle.crypto.CipherParameters) -> init
    java.lang.String getAlgorithmName() -> getAlgorithmName
    byte[] wrap(byte[],int,int) -> wrap
    byte[] unwrap(byte[],int,int) -> unwrap
    byte[] calculateCMSKeyChecksum(byte[]) -> calculateCMSKeyChecksum
    boolean checkCMSKeyChecksum(byte[],byte[]) -> checkCMSKeyChecksum
    byte[] reverse(byte[]) -> reverse
org.bouncycastle.crypto.engines.ElGamalEngine -> org.bouncycastle.crypto.engines.ElGamalEngine:
    org.bouncycastle.crypto.params.ElGamalKeyParameters key -> key
    java.security.SecureRandom random -> random
    boolean forEncryption -> forEncryption
    int bitSize -> bitSize
    java.math.BigInteger ZERO -> ZERO
    java.math.BigInteger ONE -> ONE
    java.math.BigInteger TWO -> TWO
    void init(boolean,org.bouncycastle.crypto.CipherParameters) -> init
    int getInputBlockSize() -> getInputBlockSize
    int getOutputBlockSize() -> getOutputBlockSize
    byte[] processBlock(byte[],int,int) -> processBlock
org.bouncycastle.crypto.engines.GOST28147Engine -> org.bouncycastle.crypto.engines.GOST28147Engine:
    int BLOCK_SIZE -> BLOCK_SIZE
    int[] workingKey -> workingKey
    boolean forEncryption -> forEncryption
    byte[] S -> S
    byte[] Sbox_Default -> Sbox_Default
    byte[] ESbox_Test -> ESbox_Test
    byte[] ESbox_A -> ESbox_A
    byte[] ESbox_B -> ESbox_B
    byte[] ESbox_C -> ESbox_C
    byte[] ESbox_D -> ESbox_D
    byte[] DSbox_Test -> DSbox_Test
    byte[] DSbox_A -> DSbox_A
    java.util.Hashtable sBoxes -> sBoxes
    void addSBox(java.lang.String,byte[]) -> addSBox
    void init(boolean,org.bouncycastle.crypto.CipherParameters) -> init
    java.lang.String getAlgorithmName() -> getAlgorithmName
    int getBlockSize() -> getBlockSize
    int processBlock(byte[],int,byte[],int) -> processBlock
    void reset() -> reset
    int[] generateWorkingKey(boolean,byte[]) -> generateWorkingKey
    int GOST28147_mainStep(int,int) -> GOST28147_mainStep
    void GOST28147Func(int[],byte[],int,byte[],int) -> GOST28147Func
    int bytesToint(byte[],int) -> bytesToint
    void intTobytes(int,byte[],int) -> intTobytes
    byte[] getSBox(java.lang.String) -> getSBox
org.bouncycastle.crypto.engines.Grain128Engine -> org.bouncycastle.crypto.engines.Grain128Engine:
    int STATE_SIZE -> STATE_SIZE
    byte[] workingKey -> workingKey
    byte[] workingIV -> workingIV
    byte[] out -> out
    int[] lfsr -> lfsr
    int[] nfsr -> nfsr
    int output -> output
    int index -> index
    boolean initialised -> initialised
    java.lang.String getAlgorithmName() -> getAlgorithmName
    void init(boolean,org.bouncycastle.crypto.CipherParameters) -> init
    void initGrain() -> initGrain
    int getOutputNFSR() -> getOutputNFSR
    int getOutputLFSR() -> getOutputLFSR
    int getOutput() -> getOutput
    int[] shift(int[],int) -> shift
    void setKey(byte[],byte[]) -> setKey
    int processBytes(byte[],int,int,byte[],int) -> processBytes
    void reset() -> reset
    void oneRound() -> oneRound
    byte returnByte(byte) -> returnByte
    byte getKeyStream() -> getKeyStream
org.bouncycastle.crypto.engines.Grainv1Engine -> org.bouncycastle.crypto.engines.Grainv1Engine:
    int STATE_SIZE -> STATE_SIZE
    byte[] workingKey -> workingKey
    byte[] workingIV -> workingIV
    byte[] out -> out
    int[] lfsr -> lfsr
    int[] nfsr -> nfsr
    int output -> output
    int index -> index
    boolean initialised -> initialised
    java.lang.String getAlgorithmName() -> getAlgorithmName
    void init(boolean,org.bouncycastle.crypto.CipherParameters) -> init
    void initGrain() -> initGrain
    int getOutputNFSR() -> getOutputNFSR
    int getOutputLFSR() -> getOutputLFSR
    int getOutput() -> getOutput
    int[] shift(int[],int) -> shift
    void setKey(byte[],byte[]) -> setKey
    int processBytes(byte[],int,int,byte[],int) -> processBytes
    void reset() -> reset
    void oneRound() -> oneRound
    byte returnByte(byte) -> returnByte
    byte getKeyStream() -> getKeyStream
org.bouncycastle.crypto.engines.HC128Engine -> org.bouncycastle.crypto.engines.HC128Engine:
    int[] p -> p
    int[] q -> q
    int cnt -> cnt
    byte[] key -> key
    byte[] iv -> iv
    boolean initialised -> initialised
    byte[] buf -> buf
    int idx -> idx
    int f1(int) -> f1
    int f2(int) -> f2
    int g1(int,int,int) -> g1
    int g2(int,int,int) -> g2
    int rotateLeft(int,int) -> rotateLeft
    int rotateRight(int,int) -> rotateRight
    int h1(int) -> h1
    int h2(int) -> h2
    int mod1024(int) -> mod1024
    int mod512(int) -> mod512
    int dim(int,int) -> dim
    int step() -> step
    void init() -> init
    java.lang.String getAlgorithmName() -> getAlgorithmName
    void init(boolean,org.bouncycastle.crypto.CipherParameters) -> init
    byte getByte() -> getByte
    int processBytes(byte[],int,int,byte[],int) -> processBytes
    void reset() -> reset
    byte returnByte(byte) -> returnByte
org.bouncycastle.crypto.engines.HC256Engine -> org.bouncycastle.crypto.engines.HC256Engine:
    int[] p -> p
    int[] q -> q
    int cnt -> cnt
    byte[] key -> key
    byte[] iv -> iv
    boolean initialised -> initialised
    byte[] buf -> buf
    int idx -> idx
    int step() -> step
    void init() -> init
    java.lang.String getAlgorithmName() -> getAlgorithmName
    void init(boolean,org.bouncycastle.crypto.CipherParameters) -> init
    byte getByte() -> getByte
    int processBytes(byte[],int,int,byte[],int) -> processBytes
    void reset() -> reset
    byte returnByte(byte) -> returnByte
    int rotateRight(int,int) -> rotateRight
org.bouncycastle.crypto.engines.IDEAEngine -> org.bouncycastle.crypto.engines.IDEAEngine:
    int BLOCK_SIZE -> BLOCK_SIZE
    int[] workingKey -> workingKey
    int MASK -> MASK
    int BASE -> BASE
    void init(boolean,org.bouncycastle.crypto.CipherParameters) -> init
    java.lang.String getAlgorithmName() -> getAlgorithmName
    int getBlockSize() -> getBlockSize
    int processBlock(byte[],int,byte[],int) -> processBlock
    void reset() -> reset
    int bytesToWord(byte[],int) -> bytesToWord
    void wordToBytes(int,byte[],int) -> wordToBytes
    int mul(int,int) -> mul
    void ideaFunc(int[],byte[],int,byte[],int) -> ideaFunc
    int[] expandKey(byte[]) -> expandKey
    int mulInv(int) -> mulInv
    int addInv(int) -> addInv
    int[] invertKey(int[]) -> invertKey
    int[] generateWorkingKey(boolean,byte[]) -> generateWorkingKey
org.bouncycastle.crypto.engines.IESEngine -> org.bouncycastle.crypto.engines.IESEngine:
    org.bouncycastle.crypto.BasicAgreement agree -> agree
    org.bouncycastle.crypto.DerivationFunction kdf -> kdf
    org.bouncycastle.crypto.Mac mac -> mac
    org.bouncycastle.crypto.BufferedBlockCipher cipher -> cipher
    byte[] macBuf -> macBuf
    boolean forEncryption -> forEncryption
    org.bouncycastle.crypto.CipherParameters privParam -> privParam
    org.bouncycastle.crypto.CipherParameters pubParam -> pubParam
    org.bouncycastle.crypto.params.IESParameters param -> param
    byte[] V -> V
    org.bouncycastle.crypto.generators.EphemeralKeyPairGenerator keyPairGenerator -> keyPairGenerator
    org.bouncycastle.crypto.KeyParser keyParser -> keyParser
    byte[] IV -> IV
    void init(boolean,org.bouncycastle.crypto.CipherParameters,org.bouncycastle.crypto.CipherParameters,org.bouncycastle.crypto.CipherParameters) -> init
    void init(org.bouncycastle.crypto.params.AsymmetricKeyParameter,org.bouncycastle.crypto.CipherParameters,org.bouncycastle.crypto.generators.EphemeralKeyPairGenerator) -> init
    void init(org.bouncycastle.crypto.params.AsymmetricKeyParameter,org.bouncycastle.crypto.CipherParameters,org.bouncycastle.crypto.KeyParser) -> init
    void extractParams(org.bouncycastle.crypto.CipherParameters) -> extractParams
    org.bouncycastle.crypto.BufferedBlockCipher getCipher() -> getCipher
    org.bouncycastle.crypto.Mac getMac() -> getMac
    byte[] encryptBlock(byte[],int,int) -> encryptBlock
    byte[] decryptBlock(byte[],int,int) -> decryptBlock
    byte[] processBlock(byte[],int,int) -> processBlock
org.bouncycastle.crypto.engines.ISAACEngine -> org.bouncycastle.crypto.engines.ISAACEngine:
    int sizeL -> sizeL
    int stateArraySize -> stateArraySize
    int[] engineState -> engineState
    int[] results -> results
    int a -> a
    int b -> b
    int c -> c
    int index -> index
    byte[] keyStream -> keyStream
    byte[] workingKey -> workingKey
    boolean initialised -> initialised
    void init(boolean,org.bouncycastle.crypto.CipherParameters) -> init
    byte returnByte(byte) -> returnByte
    int processBytes(byte[],int,int,byte[],int) -> processBytes
    java.lang.String getAlgorithmName() -> getAlgorithmName
    void reset() -> reset
    void setKey(byte[]) -> setKey
    void isaac() -> isaac
    void mix(int[]) -> mix
org.bouncycastle.crypto.engines.NaccacheSternEngine -> org.bouncycastle.crypto.engines.NaccacheSternEngine:
    boolean forEncryption -> forEncryption
    org.bouncycastle.crypto.params.NaccacheSternKeyParameters key -> key
    java.util.Vector[] lookup -> lookup
    boolean debug -> debug
    java.math.BigInteger ZERO -> ZERO
    java.math.BigInteger ONE -> ONE
    void init(boolean,org.bouncycastle.crypto.CipherParameters) -> init
    void setDebug(boolean) -> setDebug
    int getInputBlockSize() -> getInputBlockSize
    int getOutputBlockSize() -> getOutputBlockSize
    byte[] processBlock(byte[],int,int) -> processBlock
    byte[] encrypt(java.math.BigInteger) -> encrypt
    byte[] addCryptedBlocks(byte[],byte[]) -> addCryptedBlocks
    byte[] processData(byte[]) -> processData
    java.math.BigInteger chineseRemainder(java.util.Vector,java.util.Vector) -> chineseRemainder
org.bouncycastle.crypto.engines.NoekeonEngine -> org.bouncycastle.crypto.engines.NoekeonEngine:
    int genericSize -> genericSize
    int[] nullVector -> nullVector
    int[] roundConstants -> roundConstants
    int[] state -> state
    int[] subKeys -> subKeys
    int[] decryptKeys -> decryptKeys
    boolean _initialised -> _initialised
    boolean _forEncryption -> _forEncryption
    java.lang.String getAlgorithmName() -> getAlgorithmName
    int getBlockSize() -> getBlockSize
    void init(boolean,org.bouncycastle.crypto.CipherParameters) -> init
    int processBlock(byte[],int,byte[],int) -> processBlock
    void reset() -> reset
    void setKey(byte[]) -> setKey
    int encryptBlock(byte[],int,byte[],int) -> encryptBlock
    int decryptBlock(byte[],int,byte[],int) -> decryptBlock
    void gamma(int[]) -> gamma
    void theta(int[],int[]) -> theta
    void pi1(int[]) -> pi1
    void pi2(int[]) -> pi2
    int bytesToIntBig(byte[],int) -> bytesToIntBig
    void intToBytesBig(int,byte[],int) -> intToBytesBig
    int rotl(int,int) -> rotl
org.bouncycastle.crypto.engines.NullEngine -> org.bouncycastle.crypto.engines.NullEngine:
    boolean initialised -> initialised
    int DEFAULT_BLOCK_SIZE -> DEFAULT_BLOCK_SIZE
    int blockSize -> blockSize
    void init(boolean,org.bouncycastle.crypto.CipherParameters) -> init
    java.lang.String getAlgorithmName() -> getAlgorithmName
    int getBlockSize() -> getBlockSize
    int processBlock(byte[],int,byte[],int) -> processBlock
    void reset() -> reset
org.bouncycastle.crypto.engines.RC2Engine -> org.bouncycastle.crypto.engines.RC2Engine:
    byte[] piTable -> piTable
    int BLOCK_SIZE -> BLOCK_SIZE
    int[] workingKey -> workingKey
    boolean encrypting -> encrypting
    int[] generateWorkingKey(byte[],int) -> generateWorkingKey
    void init(boolean,org.bouncycastle.crypto.CipherParameters) -> init
    void reset() -> reset
    java.lang.String getAlgorithmName() -> getAlgorithmName
    int getBlockSize() -> getBlockSize
    int processBlock(byte[],int,byte[],int) -> processBlock
    int rotateWordLeft(int,int) -> rotateWordLeft
    void encryptBlock(byte[],int,byte[],int) -> encryptBlock
    void decryptBlock(byte[],int,byte[],int) -> decryptBlock
org.bouncycastle.crypto.engines.RC2WrapEngine -> org.bouncycastle.crypto.engines.RC2WrapEngine:
    org.bouncycastle.crypto.modes.CBCBlockCipher engine -> engine
    org.bouncycastle.crypto.CipherParameters param -> param
    org.bouncycastle.crypto.params.ParametersWithIV paramPlusIV -> paramPlusIV
    byte[] iv -> iv
    boolean forWrapping -> forWrapping
    java.security.SecureRandom sr -> sr
    byte[] IV2 -> IV2
    org.bouncycastle.crypto.Digest sha1 -> sha1
    byte[] digest -> digest
    void init(boolean,org.bouncycastle.crypto.CipherParameters) -> init
    java.lang.String getAlgorithmName() -> getAlgorithmName
    byte[] wrap(byte[],int,int) -> wrap
    byte[] unwrap(byte[],int,int) -> unwrap
    byte[] calculateCMSKeyChecksum(byte[]) -> calculateCMSKeyChecksum
    boolean checkCMSKeyChecksum(byte[],byte[]) -> checkCMSKeyChecksum
org.bouncycastle.crypto.engines.RC4Engine -> org.bouncycastle.crypto.engines.RC4Engine:
    int STATE_LENGTH -> STATE_LENGTH
    byte[] engineState -> engineState
    int x -> x
    int y -> y
    byte[] workingKey -> workingKey
    void init(boolean,org.bouncycastle.crypto.CipherParameters) -> init
    java.lang.String getAlgorithmName() -> getAlgorithmName
    byte returnByte(byte) -> returnByte
    int processBytes(byte[],int,int,byte[],int) -> processBytes
    void reset() -> reset
    void setKey(byte[]) -> setKey
org.bouncycastle.crypto.engines.RC532Engine -> org.bouncycastle.crypto.engines.RC532Engine:
    int _noRounds -> _noRounds
    int[] _S -> _S
    int P32 -> P32
    int Q32 -> Q32
    boolean forEncryption -> forEncryption
    java.lang.String getAlgorithmName() -> getAlgorithmName
    int getBlockSize() -> getBlockSize
    void init(boolean,org.bouncycastle.crypto.CipherParameters) -> init
    int processBlock(byte[],int,byte[],int) -> processBlock
    void reset() -> reset
    void setKey(byte[]) -> setKey
    int encryptBlock(byte[],int,byte[],int) -> encryptBlock
    int decryptBlock(byte[],int,byte[],int) -> decryptBlock
    int rotateLeft(int,int) -> rotateLeft
    int rotateRight(int,int) -> rotateRight
    int bytesToWord(byte[],int) -> bytesToWord
    void wordToBytes(int,byte[],int) -> wordToBytes
org.bouncycastle.crypto.engines.RC564Engine -> org.bouncycastle.crypto.engines.RC564Engine:
    int wordSize -> wordSize
    int bytesPerWord -> bytesPerWord
    int _noRounds -> _noRounds
    long[] _S -> _S
    long P64 -> P64
    long Q64 -> Q64
    boolean forEncryption -> forEncryption
    java.lang.String getAlgorithmName() -> getAlgorithmName
    int getBlockSize() -> getBlockSize
    void init(boolean,org.bouncycastle.crypto.CipherParameters) -> init
    int processBlock(byte[],int,byte[],int) -> processBlock
    void reset() -> reset
    void setKey(byte[]) -> setKey
    int encryptBlock(byte[],int,byte[],int) -> encryptBlock
    int decryptBlock(byte[],int,byte[],int) -> decryptBlock
    long rotateLeft(long,long) -> rotateLeft
    long rotateRight(long,long) -> rotateRight
    long bytesToWord(byte[],int) -> bytesToWord
    void wordToBytes(long,byte[],int) -> wordToBytes
org.bouncycastle.crypto.engines.RC6Engine -> org.bouncycastle.crypto.engines.RC6Engine:
    int wordSize -> wordSize
    int bytesPerWord -> bytesPerWord
    int _noRounds -> _noRounds
    int[] _S -> _S
    int P32 -> P32
    int Q32 -> Q32
    int LGW -> LGW
    boolean forEncryption -> forEncryption
    java.lang.String getAlgorithmName() -> getAlgorithmName
    int getBlockSize() -> getBlockSize
    void init(boolean,org.bouncycastle.crypto.CipherParameters) -> init
    int processBlock(byte[],int,byte[],int) -> processBlock
    void reset() -> reset
    void setKey(byte[]) -> setKey
    int encryptBlock(byte[],int,byte[],int) -> encryptBlock
    int decryptBlock(byte[],int,byte[],int) -> decryptBlock
    int rotateLeft(int,int) -> rotateLeft
    int rotateRight(int,int) -> rotateRight
    int bytesToWord(byte[],int) -> bytesToWord
    void wordToBytes(int,byte[],int) -> wordToBytes
org.bouncycastle.crypto.engines.RFC3211WrapEngine -> org.bouncycastle.crypto.engines.RFC3211WrapEngine:
    org.bouncycastle.crypto.modes.CBCBlockCipher engine -> engine
    org.bouncycastle.crypto.params.ParametersWithIV param -> param
    boolean forWrapping -> forWrapping
    java.security.SecureRandom rand -> rand
    void init(boolean,org.bouncycastle.crypto.CipherParameters) -> init
    java.lang.String getAlgorithmName() -> getAlgorithmName
    byte[] wrap(byte[],int,int) -> wrap
    byte[] unwrap(byte[],int,int) -> unwrap
org.bouncycastle.crypto.engines.RFC3394WrapEngine -> org.bouncycastle.crypto.engines.RFC3394WrapEngine:
    org.bouncycastle.crypto.BlockCipher engine -> engine
    org.bouncycastle.crypto.params.KeyParameter param -> param
    boolean forWrapping -> forWrapping
    byte[] iv -> iv
    void init(boolean,org.bouncycastle.crypto.CipherParameters) -> init
    java.lang.String getAlgorithmName() -> getAlgorithmName
    byte[] wrap(byte[],int,int) -> wrap
    byte[] unwrap(byte[],int,int) -> unwrap
org.bouncycastle.crypto.engines.RFC5649WrapEngine -> org.bouncycastle.crypto.engines.RFC5649WrapEngine:
    org.bouncycastle.crypto.BlockCipher engine -> engine
    org.bouncycastle.crypto.params.KeyParameter param -> param
    boolean forWrapping -> forWrapping
    byte[] highOrderIV -> highOrderIV
    byte[] preIV -> preIV
    byte[] extractedAIV -> extractedAIV
    void init(boolean,org.bouncycastle.crypto.CipherParameters) -> init
    java.lang.String getAlgorithmName() -> getAlgorithmName
    byte[] padPlaintext(byte[]) -> padPlaintext
    byte[] wrap(byte[],int,int) -> wrap
    byte[] unwrap(byte[],int,int) -> unwrap
    byte[] rfc3394UnwrapNoIvCheck(byte[],int,int) -> rfc3394UnwrapNoIvCheck
org.bouncycastle.crypto.engines.RSABlindedEngine -> org.bouncycastle.crypto.engines.RSABlindedEngine:
    java.math.BigInteger ONE -> ONE
    org.bouncycastle.crypto.engines.RSACoreEngine core -> core
    org.bouncycastle.crypto.params.RSAKeyParameters key -> key
    java.security.SecureRandom random -> random
    void init(boolean,org.bouncycastle.crypto.CipherParameters) -> init
    int getInputBlockSize() -> getInputBlockSize
    int getOutputBlockSize() -> getOutputBlockSize
    byte[] processBlock(byte[],int,int) -> processBlock
org.bouncycastle.crypto.engines.RSABlindingEngine -> org.bouncycastle.crypto.engines.RSABlindingEngine:
    org.bouncycastle.crypto.engines.RSACoreEngine core -> core
    org.bouncycastle.crypto.params.RSAKeyParameters key -> key
    java.math.BigInteger blindingFactor -> blindingFactor
    boolean forEncryption -> forEncryption
    void init(boolean,org.bouncycastle.crypto.CipherParameters) -> init
    int getInputBlockSize() -> getInputBlockSize
    int getOutputBlockSize() -> getOutputBlockSize
    byte[] processBlock(byte[],int,int) -> processBlock
    java.math.BigInteger blindMessage(java.math.BigInteger) -> blindMessage
    java.math.BigInteger unblindMessage(java.math.BigInteger) -> unblindMessage
org.bouncycastle.crypto.engines.RSACoreEngine -> org.bouncycastle.crypto.engines.RSACoreEngine:
    org.bouncycastle.crypto.params.RSAKeyParameters key -> key
    boolean forEncryption -> forEncryption
    void init(boolean,org.bouncycastle.crypto.CipherParameters) -> init
    int getInputBlockSize() -> getInputBlockSize
    int getOutputBlockSize() -> getOutputBlockSize
    java.math.BigInteger convertInput(byte[],int,int) -> convertInput
    byte[] convertOutput(java.math.BigInteger) -> convertOutput
    java.math.BigInteger processBlock(java.math.BigInteger) -> processBlock
org.bouncycastle.crypto.engines.RSAEngine -> org.bouncycastle.crypto.engines.RSAEngine:
    org.bouncycastle.crypto.engines.RSACoreEngine core -> core
    void init(boolean,org.bouncycastle.crypto.CipherParameters) -> init
    int getInputBlockSize() -> getInputBlockSize
    int getOutputBlockSize() -> getOutputBlockSize
    byte[] processBlock(byte[],int,int) -> processBlock
org.bouncycastle.crypto.engines.RijndaelEngine -> org.bouncycastle.crypto.engines.RijndaelEngine:
    int MAXROUNDS -> MAXROUNDS
    int MAXKC -> MAXKC
    byte[] logtable -> logtable
    byte[] aLogtable -> aLogtable
    byte[] S -> S
    byte[] Si -> Si
    int[] rcon -> rcon
    byte[][] shifts0 -> shifts0
    byte[][] shifts1 -> shifts1
    int BC -> BC
    long BC_MASK -> BC_MASK
    int ROUNDS -> ROUNDS
    int blockBits -> blockBits
    long[][] workingKey -> workingKey
    long A0 -> A0
    long A1 -> A1
    long A2 -> A2
    long A3 -> A3
    boolean forEncryption -> forEncryption
    byte[] shifts0SC -> shifts0SC
    byte[] shifts1SC -> shifts1SC
    byte mul0x2(int) -> mul0x2
    byte mul0x3(int) -> mul0x3
    byte mul0x9(int) -> mul0x9
    byte mul0xb(int) -> mul0xb
    byte mul0xd(int) -> mul0xd
    byte mul0xe(int) -> mul0xe
    void KeyAddition(long[]) -> KeyAddition
    long shift(long,int) -> shift
    void ShiftRow(byte[]) -> ShiftRow
    long applyS(long,byte[]) -> applyS
    void Substitution(byte[]) -> Substitution
    void MixColumn() -> MixColumn
    void InvMixColumn() -> InvMixColumn
    long[][] generateWorkingKey(byte[]) -> generateWorkingKey
    void init(boolean,org.bouncycastle.crypto.CipherParameters) -> init
    java.lang.String getAlgorithmName() -> getAlgorithmName
    int getBlockSize() -> getBlockSize
    int processBlock(byte[],int,byte[],int) -> processBlock
    void reset() -> reset
    void unpackBlock(byte[],int) -> unpackBlock
    void packBlock(byte[],int) -> packBlock
    void encryptBlock(long[][]) -> encryptBlock
    void decryptBlock(long[][]) -> decryptBlock
org.bouncycastle.crypto.engines.SEEDEngine -> org.bouncycastle.crypto.engines.SEEDEngine:
    int BLOCK_SIZE -> BLOCK_SIZE
    int[] SS0 -> SS0
    int[] SS1 -> SS1
    int[] SS2 -> SS2
    int[] SS3 -> SS3
    int[] KC -> KC
    int[] wKey -> wKey
    boolean forEncryption -> forEncryption
    void init(boolean,org.bouncycastle.crypto.CipherParameters) -> init
    java.lang.String getAlgorithmName() -> getAlgorithmName
    int getBlockSize() -> getBlockSize
    int processBlock(byte[],int,byte[],int) -> processBlock
    void reset() -> reset
    int[] createWorkingKey(byte[]) -> createWorkingKey
    int extractW1(long) -> extractW1
    int extractW0(long) -> extractW0
    long rotateLeft8(long) -> rotateLeft8
    long rotateRight8(long) -> rotateRight8
    long bytesToLong(byte[],int) -> bytesToLong
    void longToBytes(byte[],int,long) -> longToBytes
    int G(int) -> G
    long F(int,int,long) -> F
    int phaseCalc1(int,int,int,int) -> phaseCalc1
    int phaseCalc2(int,int,int,int) -> phaseCalc2
org.bouncycastle.crypto.engines.SEEDWrapEngine -> org.bouncycastle.crypto.engines.SEEDWrapEngine:
org.bouncycastle.crypto.engines.Salsa20Engine -> org.bouncycastle.crypto.engines.Salsa20Engine:
    int DEFAULT_ROUNDS -> DEFAULT_ROUNDS
    int STATE_SIZE -> STATE_SIZE
    byte[] sigma -> sigma
    byte[] tau -> tau
    int rounds -> rounds
    int index -> index
    int[] engineState -> engineState
    int[] x -> x
    byte[] keyStream -> keyStream
    boolean initialised -> initialised
    int cW0 -> cW0
    int cW1 -> cW1
    int cW2 -> cW2
    void init(boolean,org.bouncycastle.crypto.CipherParameters) -> init
    int getNonceSize() -> getNonceSize
    java.lang.String getAlgorithmName() -> getAlgorithmName
    byte returnByte(byte) -> returnByte
    void advanceCounter() -> advanceCounter
    void retreatCounter() -> retreatCounter
    int processBytes(byte[],int,int,byte[],int) -> processBytes
    long skip(long) -> skip
    long seekTo(long) -> seekTo
    long getPosition() -> getPosition
    void reset() -> reset
    long getCounter() -> getCounter
    void resetCounter() -> resetCounter
    void setKey(byte[],byte[]) -> setKey
    void generateKeyStream(byte[]) -> generateKeyStream
    void salsaCore(int,int[],int[]) -> salsaCore
    int rotl(int,int) -> rotl
    void resetLimitCounter() -> resetLimitCounter
    boolean limitExceeded() -> limitExceeded
    boolean limitExceeded(int) -> limitExceeded
org.bouncycastle.crypto.engines.SerpentEngine -> org.bouncycastle.crypto.engines.SerpentEngine:
    int BLOCK_SIZE -> BLOCK_SIZE
    int ROUNDS -> ROUNDS
    int PHI -> PHI
    boolean encrypting -> encrypting
    int[] wKey -> wKey
    int X0 -> X0
    int X1 -> X1
    int X2 -> X2
    int X3 -> X3
    void init(boolean,org.bouncycastle.crypto.CipherParameters) -> init
    java.lang.String getAlgorithmName() -> getAlgorithmName
    int getBlockSize() -> getBlockSize
    int processBlock(byte[],int,byte[],int) -> processBlock
    void reset() -> reset
    int[] makeWorkingKey(byte[]) -> makeWorkingKey
    int rotateLeft(int,int) -> rotateLeft
    int rotateRight(int,int) -> rotateRight
    int bytesToWord(byte[],int) -> bytesToWord
    void wordToBytes(int,byte[],int) -> wordToBytes
    void encryptBlock(byte[],int,byte[],int) -> encryptBlock
    void decryptBlock(byte[],int,byte[],int) -> decryptBlock
    void sb0(int,int,int,int) -> sb0
    void ib0(int,int,int,int) -> ib0
    void sb1(int,int,int,int) -> sb1
    void ib1(int,int,int,int) -> ib1
    void sb2(int,int,int,int) -> sb2
    void ib2(int,int,int,int) -> ib2
    void sb3(int,int,int,int) -> sb3
    void ib3(int,int,int,int) -> ib3
    void sb4(int,int,int,int) -> sb4
    void ib4(int,int,int,int) -> ib4
    void sb5(int,int,int,int) -> sb5
    void ib5(int,int,int,int) -> ib5
    void sb6(int,int,int,int) -> sb6
    void ib6(int,int,int,int) -> ib6
    void sb7(int,int,int,int) -> sb7
    void ib7(int,int,int,int) -> ib7
    void LT() -> LT
    void inverseLT() -> inverseLT
org.bouncycastle.crypto.engines.Shacal2Engine -> org.bouncycastle.crypto.engines.Shacal2Engine:
    int[] K -> K
    int BLOCK_SIZE -> BLOCK_SIZE
    boolean forEncryption -> forEncryption
    int ROUNDS -> ROUNDS
    int[] workingKey -> workingKey
    void reset() -> reset
    java.lang.String getAlgorithmName() -> getAlgorithmName
    int getBlockSize() -> getBlockSize
    void init(boolean,org.bouncycastle.crypto.CipherParameters) -> init
    void setKey(byte[]) -> setKey
    void encryptBlock(byte[],int,byte[],int) -> encryptBlock
    void decryptBlock(byte[],int,byte[],int) -> decryptBlock
    int processBlock(byte[],int,byte[],int) -> processBlock
    void bytes2ints(byte[],int[],int,int) -> bytes2ints
    void ints2bytes(int[],byte[],int) -> ints2bytes
org.bouncycastle.crypto.engines.SkipjackEngine -> org.bouncycastle.crypto.engines.SkipjackEngine:
    int BLOCK_SIZE -> BLOCK_SIZE
    short[] ftable -> ftable
    int[] key0 -> key0
    int[] key1 -> key1
    int[] key2 -> key2
    int[] key3 -> key3
    boolean encrypting -> encrypting
    void init(boolean,org.bouncycastle.crypto.CipherParameters) -> init
    java.lang.String getAlgorithmName() -> getAlgorithmName
    int getBlockSize() -> getBlockSize
    int processBlock(byte[],int,byte[],int) -> processBlock
    void reset() -> reset
    int g(int,int) -> g
    int encryptBlock(byte[],int,byte[],int) -> encryptBlock
    int h(int,int) -> h
    int decryptBlock(byte[],int,byte[],int) -> decryptBlock
org.bouncycastle.crypto.engines.TEAEngine -> org.bouncycastle.crypto.engines.TEAEngine:
    int rounds -> rounds
    int block_size -> block_size
    int delta -> delta
    int d_sum -> d_sum
    int _a -> _a
    int _b -> _b
    int _c -> _c
    int _d -> _d
    boolean _initialised -> _initialised
    boolean _forEncryption -> _forEncryption
    java.lang.String getAlgorithmName() -> getAlgorithmName
    int getBlockSize() -> getBlockSize
    void init(boolean,org.bouncycastle.crypto.CipherParameters) -> init
    int processBlock(byte[],int,byte[],int) -> processBlock
    void reset() -> reset
    void setKey(byte[]) -> setKey
    int encryptBlock(byte[],int,byte[],int) -> encryptBlock
    int decryptBlock(byte[],int,byte[],int) -> decryptBlock
    int bytesToInt(byte[],int) -> bytesToInt
    void unpackInt(int,byte[],int) -> unpackInt
org.bouncycastle.crypto.engines.ThreefishEngine -> org.bouncycastle.crypto.engines.ThreefishEngine:
    int BLOCKSIZE_256 -> BLOCKSIZE_256
    int BLOCKSIZE_512 -> BLOCKSIZE_512
    int BLOCKSIZE_1024 -> BLOCKSIZE_1024
    int TWEAK_SIZE_BYTES -> TWEAK_SIZE_BYTES
    int TWEAK_SIZE_WORDS -> TWEAK_SIZE_WORDS
    int ROUNDS_256 -> ROUNDS_256
    int ROUNDS_512 -> ROUNDS_512
    int ROUNDS_1024 -> ROUNDS_1024
    int MAX_ROUNDS -> MAX_ROUNDS
    long C_240 -> C_240
    int[] MOD9 -> MOD9
    int[] MOD17 -> MOD17
    int[] MOD5 -> MOD5
    int[] MOD3 -> MOD3
    int blocksizeBytes -> blocksizeBytes
    int blocksizeWords -> blocksizeWords
    long[] currentBlock -> currentBlock
    long[] t -> t
    long[] kw -> kw
    org.bouncycastle.crypto.engines.ThreefishEngine$ThreefishCipher cipher -> cipher
    boolean forEncryption -> forEncryption
    void init(boolean,org.bouncycastle.crypto.CipherParameters) -> init
    void init(boolean,long[],long[]) -> init
    void setKey(long[]) -> setKey
    void setTweak(long[]) -> setTweak
    java.lang.String getAlgorithmName() -> getAlgorithmName
    int getBlockSize() -> getBlockSize
    void reset() -> reset
    int processBlock(byte[],int,byte[],int) -> processBlock
    int processBlock(long[],long[]) -> processBlock
    long bytesToWord(byte[],int) -> bytesToWord
    void wordToBytes(long,byte[],int) -> wordToBytes
    long rotlXor(long,int,long) -> rotlXor
    long xorRotr(long,int,long) -> xorRotr
    int[] access$000() -> access$000
    int[] access$100() -> access$100
    int[] access$200() -> access$200
    int[] access$300() -> access$300
org.bouncycastle.crypto.engines.ThreefishEngine$Threefish1024Cipher -> org.bouncycastle.crypto.engines.ThreefishEngine$Threefish1024Cipher:
    int ROTATION_0_0 -> ROTATION_0_0
    int ROTATION_0_1 -> ROTATION_0_1
    int ROTATION_0_2 -> ROTATION_0_2
    int ROTATION_0_3 -> ROTATION_0_3
    int ROTATION_0_4 -> ROTATION_0_4
    int ROTATION_0_5 -> ROTATION_0_5
    int ROTATION_0_6 -> ROTATION_0_6
    int ROTATION_0_7 -> ROTATION_0_7
    int ROTATION_1_0 -> ROTATION_1_0
    int ROTATION_1_1 -> ROTATION_1_1
    int ROTATION_1_2 -> ROTATION_1_2
    int ROTATION_1_3 -> ROTATION_1_3
    int ROTATION_1_4 -> ROTATION_1_4
    int ROTATION_1_5 -> ROTATION_1_5
    int ROTATION_1_6 -> ROTATION_1_6
    int ROTATION_1_7 -> ROTATION_1_7
    int ROTATION_2_0 -> ROTATION_2_0
    int ROTATION_2_1 -> ROTATION_2_1
    int ROTATION_2_2 -> ROTATION_2_2
    int ROTATION_2_3 -> ROTATION_2_3
    int ROTATION_2_4 -> ROTATION_2_4
    int ROTATION_2_5 -> ROTATION_2_5
    int ROTATION_2_6 -> ROTATION_2_6
    int ROTATION_2_7 -> ROTATION_2_7
    int ROTATION_3_0 -> ROTATION_3_0
    int ROTATION_3_1 -> ROTATION_3_1
    int ROTATION_3_2 -> ROTATION_3_2
    int ROTATION_3_3 -> ROTATION_3_3
    int ROTATION_3_4 -> ROTATION_3_4
    int ROTATION_3_5 -> ROTATION_3_5
    int ROTATION_3_6 -> ROTATION_3_6
    int ROTATION_3_7 -> ROTATION_3_7
    int ROTATION_4_0 -> ROTATION_4_0
    int ROTATION_4_1 -> ROTATION_4_1
    int ROTATION_4_2 -> ROTATION_4_2
    int ROTATION_4_3 -> ROTATION_4_3
    int ROTATION_4_4 -> ROTATION_4_4
    int ROTATION_4_5 -> ROTATION_4_5
    int ROTATION_4_6 -> ROTATION_4_6
    int ROTATION_4_7 -> ROTATION_4_7
    int ROTATION_5_0 -> ROTATION_5_0
    int ROTATION_5_1 -> ROTATION_5_1
    int ROTATION_5_2 -> ROTATION_5_2
    int ROTATION_5_3 -> ROTATION_5_3
    int ROTATION_5_4 -> ROTATION_5_4
    int ROTATION_5_5 -> ROTATION_5_5
    int ROTATION_5_6 -> ROTATION_5_6
    int ROTATION_5_7 -> ROTATION_5_7
    int ROTATION_6_0 -> ROTATION_6_0
    int ROTATION_6_1 -> ROTATION_6_1
    int ROTATION_6_2 -> ROTATION_6_2
    int ROTATION_6_3 -> ROTATION_6_3
    int ROTATION_6_4 -> ROTATION_6_4
    int ROTATION_6_5 -> ROTATION_6_5
    int ROTATION_6_6 -> ROTATION_6_6
    int ROTATION_6_7 -> ROTATION_6_7
    int ROTATION_7_0 -> ROTATION_7_0
    int ROTATION_7_1 -> ROTATION_7_1
    int ROTATION_7_2 -> ROTATION_7_2
    int ROTATION_7_3 -> ROTATION_7_3
    int ROTATION_7_4 -> ROTATION_7_4
    int ROTATION_7_5 -> ROTATION_7_5
    int ROTATION_7_6 -> ROTATION_7_6
    int ROTATION_7_7 -> ROTATION_7_7
    void encryptBlock(long[],long[]) -> encryptBlock
    void decryptBlock(long[],long[]) -> decryptBlock
org.bouncycastle.crypto.engines.ThreefishEngine$Threefish256Cipher -> org.bouncycastle.crypto.engines.ThreefishEngine$Threefish256Cipher:
    int ROTATION_0_0 -> ROTATION_0_0
    int ROTATION_0_1 -> ROTATION_0_1
    int ROTATION_1_0 -> ROTATION_1_0
    int ROTATION_1_1 -> ROTATION_1_1
    int ROTATION_2_0 -> ROTATION_2_0
    int ROTATION_2_1 -> ROTATION_2_1
    int ROTATION_3_0 -> ROTATION_3_0
    int ROTATION_3_1 -> ROTATION_3_1
    int ROTATION_4_0 -> ROTATION_4_0
    int ROTATION_4_1 -> ROTATION_4_1
    int ROTATION_5_0 -> ROTATION_5_0
    int ROTATION_5_1 -> ROTATION_5_1
    int ROTATION_6_0 -> ROTATION_6_0
    int ROTATION_6_1 -> ROTATION_6_1
    int ROTATION_7_0 -> ROTATION_7_0
    int ROTATION_7_1 -> ROTATION_7_1
    void encryptBlock(long[],long[]) -> encryptBlock
    void decryptBlock(long[],long[]) -> decryptBlock
org.bouncycastle.crypto.engines.ThreefishEngine$Threefish512Cipher -> org.bouncycastle.crypto.engines.ThreefishEngine$Threefish512Cipher:
    int ROTATION_0_0 -> ROTATION_0_0
    int ROTATION_0_1 -> ROTATION_0_1
    int ROTATION_0_2 -> ROTATION_0_2
    int ROTATION_0_3 -> ROTATION_0_3
    int ROTATION_1_0 -> ROTATION_1_0
    int ROTATION_1_1 -> ROTATION_1_1
    int ROTATION_1_2 -> ROTATION_1_2
    int ROTATION_1_3 -> ROTATION_1_3
    int ROTATION_2_0 -> ROTATION_2_0
    int ROTATION_2_1 -> ROTATION_2_1
    int ROTATION_2_2 -> ROTATION_2_2
    int ROTATION_2_3 -> ROTATION_2_3
    int ROTATION_3_0 -> ROTATION_3_0
    int ROTATION_3_1 -> ROTATION_3_1
    int ROTATION_3_2 -> ROTATION_3_2
    int ROTATION_3_3 -> ROTATION_3_3
    int ROTATION_4_0 -> ROTATION_4_0
    int ROTATION_4_1 -> ROTATION_4_1
    int ROTATION_4_2 -> ROTATION_4_2
    int ROTATION_4_3 -> ROTATION_4_3
    int ROTATION_5_0 -> ROTATION_5_0
    int ROTATION_5_1 -> ROTATION_5_1
    int ROTATION_5_2 -> ROTATION_5_2
    int ROTATION_5_3 -> ROTATION_5_3
    int ROTATION_6_0 -> ROTATION_6_0
    int ROTATION_6_1 -> ROTATION_6_1
    int ROTATION_6_2 -> ROTATION_6_2
    int ROTATION_6_3 -> ROTATION_6_3
    int ROTATION_7_0 -> ROTATION_7_0
    int ROTATION_7_1 -> ROTATION_7_1
    int ROTATION_7_2 -> ROTATION_7_2
    int ROTATION_7_3 -> ROTATION_7_3
    void encryptBlock(long[],long[]) -> encryptBlock
    void decryptBlock(long[],long[]) -> decryptBlock
org.bouncycastle.crypto.engines.ThreefishEngine$ThreefishCipher -> org.bouncycastle.crypto.engines.ThreefishEngine$ThreefishCipher:
    long[] t -> t
    long[] kw -> kw
    void encryptBlock(long[],long[]) -> encryptBlock
    void decryptBlock(long[],long[]) -> decryptBlock
org.bouncycastle.crypto.engines.TwofishEngine -> org.bouncycastle.crypto.engines.TwofishEngine:
    byte[][] P -> P
    int P_00 -> P_00
    int P_01 -> P_01
    int P_02 -> P_02
    int P_03 -> P_03
    int P_04 -> P_04
    int P_10 -> P_10
    int P_11 -> P_11
    int P_12 -> P_12
    int P_13 -> P_13
    int P_14 -> P_14
    int P_20 -> P_20
    int P_21 -> P_21
    int P_22 -> P_22
    int P_23 -> P_23
    int P_24 -> P_24
    int P_30 -> P_30
    int P_31 -> P_31
    int P_32 -> P_32
    int P_33 -> P_33
    int P_34 -> P_34
    int GF256_FDBK -> GF256_FDBK
    int GF256_FDBK_2 -> GF256_FDBK_2
    int GF256_FDBK_4 -> GF256_FDBK_4
    int RS_GF_FDBK -> RS_GF_FDBK
    int ROUNDS -> ROUNDS
    int MAX_ROUNDS -> MAX_ROUNDS
    int BLOCK_SIZE -> BLOCK_SIZE
    int MAX_KEY_BITS -> MAX_KEY_BITS
    int INPUT_WHITEN -> INPUT_WHITEN
    int OUTPUT_WHITEN -> OUTPUT_WHITEN
    int ROUND_SUBKEYS -> ROUND_SUBKEYS
    int TOTAL_SUBKEYS -> TOTAL_SUBKEYS
    int SK_STEP -> SK_STEP
    int SK_BUMP -> SK_BUMP
    int SK_ROTL -> SK_ROTL
    boolean encrypting -> encrypting
    int[] gMDS0 -> gMDS0
    int[] gMDS1 -> gMDS1
    int[] gMDS2 -> gMDS2
    int[] gMDS3 -> gMDS3
    int[] gSubKeys -> gSubKeys
    int[] gSBox -> gSBox
    int k64Cnt -> k64Cnt
    byte[] workingKey -> workingKey
    void init(boolean,org.bouncycastle.crypto.CipherParameters) -> init
    java.lang.String getAlgorithmName() -> getAlgorithmName
    int processBlock(byte[],int,byte[],int) -> processBlock
    void reset() -> reset
    int getBlockSize() -> getBlockSize
    void setKey(byte[]) -> setKey
    void encryptBlock(byte[],int,byte[],int) -> encryptBlock
    void decryptBlock(byte[],int,byte[],int) -> decryptBlock
    int F32(int,int[]) -> F32
    int RS_MDS_Encode(int,int) -> RS_MDS_Encode
    int RS_rem(int) -> RS_rem
    int LFSR1(int) -> LFSR1
    int LFSR2(int) -> LFSR2
    int Mx_X(int) -> Mx_X
    int Mx_Y(int) -> Mx_Y
    int b0(int) -> b0
    int b1(int) -> b1
    int b2(int) -> b2
    int b3(int) -> b3
    int Fe32_0(int) -> Fe32_0
    int Fe32_3(int) -> Fe32_3
    int BytesTo32Bits(byte[],int) -> BytesTo32Bits
    void Bits32ToBytes(int,byte[],int) -> Bits32ToBytes
org.bouncycastle.crypto.engines.VMPCEngine -> org.bouncycastle.crypto.engines.VMPCEngine:
    byte n -> n
    byte[] P -> P
    byte s -> s
    byte[] workingIV -> workingIV
    byte[] workingKey -> workingKey
    java.lang.String getAlgorithmName() -> getAlgorithmName
    void init(boolean,org.bouncycastle.crypto.CipherParameters) -> init
    void initKey(byte[],byte[]) -> initKey
    int processBytes(byte[],int,int,byte[],int) -> processBytes
    void reset() -> reset
    byte returnByte(byte) -> returnByte
org.bouncycastle.crypto.engines.VMPCKSA3Engine -> org.bouncycastle.crypto.engines.VMPCKSA3Engine:
    java.lang.String getAlgorithmName() -> getAlgorithmName
    void initKey(byte[],byte[]) -> initKey
org.bouncycastle.crypto.engines.XSalsa20Engine -> org.bouncycastle.crypto.engines.XSalsa20Engine:
    java.lang.String getAlgorithmName() -> getAlgorithmName
    int getNonceSize() -> getNonceSize
    void setKey(byte[],byte[]) -> setKey
org.bouncycastle.crypto.engines.XTEAEngine -> org.bouncycastle.crypto.engines.XTEAEngine:
    int rounds -> rounds
    int block_size -> block_size
    int delta -> delta
    int[] _S -> _S
    int[] _sum0 -> _sum0
    int[] _sum1 -> _sum1
    boolean _initialised -> _initialised
    boolean _forEncryption -> _forEncryption
    java.lang.String getAlgorithmName() -> getAlgorithmName
    int getBlockSize() -> getBlockSize
    void init(boolean,org.bouncycastle.crypto.CipherParameters) -> init
    int processBlock(byte[],int,byte[],int) -> processBlock
    void reset() -> reset
    void setKey(byte[]) -> setKey
    int encryptBlock(byte[],int,byte[],int) -> encryptBlock
    int decryptBlock(byte[],int,byte[],int) -> decryptBlock
    int bytesToInt(byte[],int) -> bytesToInt
    void unpackInt(int,byte[],int) -> unpackInt
org.bouncycastle.crypto.examples.DESExample -> org.bouncycastle.crypto.examples.DESExample:
    boolean encrypt -> encrypt
    org.bouncycastle.crypto.paddings.PaddedBufferedBlockCipher cipher -> cipher
    java.io.BufferedInputStream in -> in
    java.io.BufferedOutputStream out -> out
    byte[] key -> key
    void main(java.lang.String[]) -> main
    void process() -> process
    void performEncrypt(byte[]) -> performEncrypt
    void performDecrypt(byte[]) -> performDecrypt
org.bouncycastle.crypto.examples.JPAKEExample -> org.bouncycastle.crypto.examples.JPAKEExample:
    void main(java.lang.String[]) -> main
    java.math.BigInteger deriveSessionKey(java.math.BigInteger) -> deriveSessionKey
org.bouncycastle.crypto.generators.BaseKDFBytesGenerator -> org.bouncycastle.crypto.generators.BaseKDFBytesGenerator:
    int counterStart -> counterStart
    org.bouncycastle.crypto.Digest digest -> digest
    byte[] shared -> shared
    byte[] iv -> iv
    void init(org.bouncycastle.crypto.DerivationParameters) -> init
    org.bouncycastle.crypto.Digest getDigest() -> getDigest
    int generateBytes(byte[],int,int) -> generateBytes
org.bouncycastle.crypto.generators.CramerShoupKeyPairGenerator -> org.bouncycastle.crypto.generators.CramerShoupKeyPairGenerator:
    java.math.BigInteger ONE -> ONE
    org.bouncycastle.crypto.params.CramerShoupKeyGenerationParameters param -> param
    void init(org.bouncycastle.crypto.KeyGenerationParameters) -> init
    org.bouncycastle.crypto.AsymmetricCipherKeyPair generateKeyPair() -> generateKeyPair
    java.math.BigInteger generateRandomElement(java.math.BigInteger,java.security.SecureRandom) -> generateRandomElement
    org.bouncycastle.crypto.params.CramerShoupPrivateKeyParameters generatePrivateKey(java.security.SecureRandom,org.bouncycastle.crypto.params.CramerShoupParameters) -> generatePrivateKey
    org.bouncycastle.crypto.params.CramerShoupPublicKeyParameters calculatePublicKey(org.bouncycastle.crypto.params.CramerShoupParameters,org.bouncycastle.crypto.params.CramerShoupPrivateKeyParameters) -> calculatePublicKey
org.bouncycastle.crypto.generators.CramerShoupParametersGenerator -> org.bouncycastle.crypto.generators.CramerShoupParametersGenerator:
    java.math.BigInteger ONE -> ONE
    int size -> size
    int certainty -> certainty
    java.security.SecureRandom random -> random
    void init(int,int,java.security.SecureRandom) -> init
    org.bouncycastle.crypto.params.CramerShoupParameters generateParameters() -> generateParameters
    org.bouncycastle.crypto.params.CramerShoupParameters generateParameters(org.bouncycastle.crypto.params.DHParameters) -> generateParameters
    java.math.BigInteger access$000() -> access$000
org.bouncycastle.crypto.generators.CramerShoupParametersGenerator$ParametersHelper -> org.bouncycastle.crypto.generators.CramerShoupParametersGenerator$ParametersHelper:
    java.math.BigInteger TWO -> TWO
    java.math.BigInteger[] generateSafePrimes(int,int,java.security.SecureRandom) -> generateSafePrimes
    java.math.BigInteger selectGenerator(java.math.BigInteger,java.security.SecureRandom) -> selectGenerator
org.bouncycastle.crypto.generators.DESKeyGenerator -> org.bouncycastle.crypto.generators.DESKeyGenerator:
    void init(org.bouncycastle.crypto.KeyGenerationParameters) -> init
    byte[] generateKey() -> generateKey
org.bouncycastle.crypto.generators.DESedeKeyGenerator -> org.bouncycastle.crypto.generators.DESedeKeyGenerator:
    void init(org.bouncycastle.crypto.KeyGenerationParameters) -> init
    byte[] generateKey() -> generateKey
org.bouncycastle.crypto.generators.DHBasicKeyPairGenerator -> org.bouncycastle.crypto.generators.DHBasicKeyPairGenerator:
    org.bouncycastle.crypto.params.DHKeyGenerationParameters param -> param
    void init(org.bouncycastle.crypto.KeyGenerationParameters) -> init
    org.bouncycastle.crypto.AsymmetricCipherKeyPair generateKeyPair() -> generateKeyPair
org.bouncycastle.crypto.generators.DHKeyGeneratorHelper -> org.bouncycastle.crypto.generators.DHKeyGeneratorHelper:
    org.bouncycastle.crypto.generators.DHKeyGeneratorHelper INSTANCE -> INSTANCE
    java.math.BigInteger ONE -> ONE
    java.math.BigInteger TWO -> TWO
    java.math.BigInteger calculatePrivate(org.bouncycastle.crypto.params.DHParameters,java.security.SecureRandom) -> calculatePrivate
    java.math.BigInteger calculatePublic(org.bouncycastle.crypto.params.DHParameters,java.math.BigInteger) -> calculatePublic
org.bouncycastle.crypto.generators.DHKeyPairGenerator -> org.bouncycastle.crypto.generators.DHKeyPairGenerator:
    org.bouncycastle.crypto.params.DHKeyGenerationParameters param -> param
    void init(org.bouncycastle.crypto.KeyGenerationParameters) -> init
    org.bouncycastle.crypto.AsymmetricCipherKeyPair generateKeyPair() -> generateKeyPair
org.bouncycastle.crypto.generators.DHParametersGenerator -> org.bouncycastle.crypto.generators.DHParametersGenerator:
    int size -> size
    int certainty -> certainty
    java.security.SecureRandom random -> random
    java.math.BigInteger TWO -> TWO
    void init(int,int,java.security.SecureRandom) -> init
    org.bouncycastle.crypto.params.DHParameters generateParameters() -> generateParameters
org.bouncycastle.crypto.generators.DHParametersHelper -> org.bouncycastle.crypto.generators.DHParametersHelper:
    java.math.BigInteger ONE -> ONE
    java.math.BigInteger TWO -> TWO
    java.math.BigInteger[] generateSafePrimes(int,int,java.security.SecureRandom) -> generateSafePrimes
    java.math.BigInteger selectGenerator(java.math.BigInteger,java.math.BigInteger,java.security.SecureRandom) -> selectGenerator
org.bouncycastle.crypto.generators.DSAKeyPairGenerator -> org.bouncycastle.crypto.generators.DSAKeyPairGenerator:
    java.math.BigInteger ONE -> ONE
    org.bouncycastle.crypto.params.DSAKeyGenerationParameters param -> param
    void init(org.bouncycastle.crypto.KeyGenerationParameters) -> init
    org.bouncycastle.crypto.AsymmetricCipherKeyPair generateKeyPair() -> generateKeyPair
    java.math.BigInteger generatePrivateKey(java.math.BigInteger,java.security.SecureRandom) -> generatePrivateKey
    java.math.BigInteger calculatePublicKey(java.math.BigInteger,java.math.BigInteger,java.math.BigInteger) -> calculatePublicKey
org.bouncycastle.crypto.generators.DSAParametersGenerator -> org.bouncycastle.crypto.generators.DSAParametersGenerator:
    org.bouncycastle.crypto.Digest digest -> digest
    int L -> L
    int N -> N
    int certainty -> certainty
    java.security.SecureRandom random -> random
    java.math.BigInteger ZERO -> ZERO
    java.math.BigInteger ONE -> ONE
    java.math.BigInteger TWO -> TWO
    boolean use186_3 -> use186_3
    int usageIndex -> usageIndex
    void init(int,int,java.security.SecureRandom) -> init
    void init(org.bouncycastle.crypto.params.DSAParameterGenerationParameters) -> init
    org.bouncycastle.crypto.params.DSAParameters generateParameters() -> generateParameters
    org.bouncycastle.crypto.params.DSAParameters generateParameters_FIPS186_2() -> generateParameters_FIPS186_2
    java.math.BigInteger calculateGenerator_FIPS186_2(java.math.BigInteger,java.math.BigInteger,java.security.SecureRandom) -> calculateGenerator_FIPS186_2
    org.bouncycastle.crypto.params.DSAParameters generateParameters_FIPS186_3() -> generateParameters_FIPS186_3
    java.math.BigInteger calculateGenerator_FIPS186_3_Unverifiable(java.math.BigInteger,java.math.BigInteger,java.security.SecureRandom) -> calculateGenerator_FIPS186_3_Unverifiable
    java.math.BigInteger calculateGenerator_FIPS186_3_Verifiable(org.bouncycastle.crypto.Digest,java.math.BigInteger,java.math.BigInteger,byte[],int) -> calculateGenerator_FIPS186_3_Verifiable
    void hash(org.bouncycastle.crypto.Digest,byte[],byte[]) -> hash
    int getDefaultN(int) -> getDefaultN
    void inc(byte[]) -> inc
org.bouncycastle.crypto.generators.DSTU4145KeyPairGenerator -> org.bouncycastle.crypto.generators.DSTU4145KeyPairGenerator:
    org.bouncycastle.crypto.AsymmetricCipherKeyPair generateKeyPair() -> generateKeyPair
org.bouncycastle.crypto.generators.ECKeyPairGenerator -> org.bouncycastle.crypto.generators.ECKeyPairGenerator:
    org.bouncycastle.crypto.params.ECDomainParameters params -> params
    java.security.SecureRandom random -> random
    void init(org.bouncycastle.crypto.KeyGenerationParameters) -> init
    org.bouncycastle.crypto.AsymmetricCipherKeyPair generateKeyPair() -> generateKeyPair
    org.bouncycastle.math.ec.ECMultiplier createBasePointMultiplier() -> createBasePointMultiplier
org.bouncycastle.crypto.generators.ElGamalKeyPairGenerator -> org.bouncycastle.crypto.generators.ElGamalKeyPairGenerator:
    org.bouncycastle.crypto.params.ElGamalKeyGenerationParameters param -> param
    void init(org.bouncycastle.crypto.KeyGenerationParameters) -> init
    org.bouncycastle.crypto.AsymmetricCipherKeyPair generateKeyPair() -> generateKeyPair
org.bouncycastle.crypto.generators.ElGamalParametersGenerator -> org.bouncycastle.crypto.generators.ElGamalParametersGenerator:
    int size -> size
    int certainty -> certainty
    java.security.SecureRandom random -> random
    void init(int,int,java.security.SecureRandom) -> init
    org.bouncycastle.crypto.params.ElGamalParameters generateParameters() -> generateParameters
org.bouncycastle.crypto.generators.EphemeralKeyPairGenerator -> org.bouncycastle.crypto.generators.EphemeralKeyPairGenerator:
    org.bouncycastle.crypto.AsymmetricCipherKeyPairGenerator gen -> gen
    org.bouncycastle.crypto.KeyEncoder keyEncoder -> keyEncoder
    org.bouncycastle.crypto.EphemeralKeyPair generate() -> generate
org.bouncycastle.crypto.generators.GOST3410KeyPairGenerator -> org.bouncycastle.crypto.generators.GOST3410KeyPairGenerator:
    org.bouncycastle.crypto.params.GOST3410KeyGenerationParameters param -> param
    void init(org.bouncycastle.crypto.KeyGenerationParameters) -> init
    org.bouncycastle.crypto.AsymmetricCipherKeyPair generateKeyPair() -> generateKeyPair
org.bouncycastle.crypto.generators.GOST3410ParametersGenerator -> org.bouncycastle.crypto.generators.GOST3410ParametersGenerator:
    int size -> size
    int typeproc -> typeproc
    java.security.SecureRandom init_random -> init_random
    java.math.BigInteger ONE -> ONE
    java.math.BigInteger TWO -> TWO
    void init(int,int,java.security.SecureRandom) -> init
    int procedure_A(int,int,java.math.BigInteger[],int) -> procedure_A
    long procedure_Aa(long,long,java.math.BigInteger[],int) -> procedure_Aa
    void procedure_B(int,int,java.math.BigInteger[]) -> procedure_B
    void procedure_Bb(long,long,java.math.BigInteger[]) -> procedure_Bb
    java.math.BigInteger procedure_C(java.math.BigInteger,java.math.BigInteger) -> procedure_C
    org.bouncycastle.crypto.params.GOST3410Parameters generateParameters() -> generateParameters
org.bouncycastle.crypto.generators.HKDFBytesGenerator -> org.bouncycastle.crypto.generators.HKDFBytesGenerator:
    org.bouncycastle.crypto.macs.HMac hMacHash -> hMacHash
    int hashLen -> hashLen
    byte[] info -> info
    byte[] currentT -> currentT
    int generatedBytes -> generatedBytes
    void init(org.bouncycastle.crypto.DerivationParameters) -> init
    org.bouncycastle.crypto.params.KeyParameter extract(byte[],byte[]) -> extract
    void expandNext() -> expandNext
    org.bouncycastle.crypto.Digest getDigest() -> getDigest
    int generateBytes(byte[],int,int) -> generateBytes
org.bouncycastle.crypto.generators.KDF1BytesGenerator -> org.bouncycastle.crypto.generators.KDF1BytesGenerator:
org.bouncycastle.crypto.generators.KDF2BytesGenerator -> org.bouncycastle.crypto.generators.KDF2BytesGenerator:
org.bouncycastle.crypto.generators.KDFCounterBytesGenerator -> org.bouncycastle.crypto.generators.KDFCounterBytesGenerator:
    java.math.BigInteger INTEGER_MAX -> INTEGER_MAX
    java.math.BigInteger TWO -> TWO
    org.bouncycastle.crypto.Mac prf -> prf
    int h -> h
    byte[] fixedInputDataCtrPrefix -> fixedInputDataCtrPrefix
    byte[] fixedInputData_afterCtr -> fixedInputData_afterCtr
    int maxSizeExcl -> maxSizeExcl
    byte[] ios -> ios
    int generatedBytes -> generatedBytes
    byte[] k -> k
    void init(org.bouncycastle.crypto.DerivationParameters) -> init
    org.bouncycastle.crypto.Mac getMac() -> getMac
    int generateBytes(byte[],int,int) -> generateBytes
    void generateNext() -> generateNext
org.bouncycastle.crypto.generators.KDFDoublePipelineIterationBytesGenerator -> org.bouncycastle.crypto.generators.KDFDoublePipelineIterationBytesGenerator:
    java.math.BigInteger INTEGER_MAX -> INTEGER_MAX
    java.math.BigInteger TWO -> TWO
    org.bouncycastle.crypto.Mac prf -> prf
    int h -> h
    byte[] fixedInputData -> fixedInputData
    int maxSizeExcl -> maxSizeExcl
    byte[] ios -> ios
    boolean useCounter -> useCounter
    int generatedBytes -> generatedBytes
    byte[] a -> a
    byte[] k -> k
    void init(org.bouncycastle.crypto.DerivationParameters) -> init
    org.bouncycastle.crypto.Mac getMac() -> getMac
    int generateBytes(byte[],int,int) -> generateBytes
    void generateNext() -> generateNext
org.bouncycastle.crypto.generators.KDFFeedbackBytesGenerator -> org.bouncycastle.crypto.generators.KDFFeedbackBytesGenerator:
    java.math.BigInteger INTEGER_MAX -> INTEGER_MAX
    java.math.BigInteger TWO -> TWO
    org.bouncycastle.crypto.Mac prf -> prf
    int h -> h
    byte[] fixedInputData -> fixedInputData
    int maxSizeExcl -> maxSizeExcl
    byte[] ios -> ios
    byte[] iv -> iv
    boolean useCounter -> useCounter
    int generatedBytes -> generatedBytes
    byte[] k -> k
    void init(org.bouncycastle.crypto.DerivationParameters) -> init
    org.bouncycastle.crypto.Mac getMac() -> getMac
    int generateBytes(byte[],int,int) -> generateBytes
    void generateNext() -> generateNext
org.bouncycastle.crypto.generators.MGF1BytesGenerator -> org.bouncycastle.crypto.generators.MGF1BytesGenerator:
    org.bouncycastle.crypto.Digest digest -> digest
    byte[] seed -> seed
    int hLen -> hLen
    void init(org.bouncycastle.crypto.DerivationParameters) -> init
    org.bouncycastle.crypto.Digest getDigest() -> getDigest
    void ItoOSP(int,byte[]) -> ItoOSP
    int generateBytes(byte[],int,int) -> generateBytes
org.bouncycastle.crypto.generators.NaccacheSternKeyPairGenerator -> org.bouncycastle.crypto.generators.NaccacheSternKeyPairGenerator:
    int[] smallPrimes -> smallPrimes
    org.bouncycastle.crypto.params.NaccacheSternKeyGenerationParameters param -> param
    java.math.BigInteger ONE -> ONE
    void init(org.bouncycastle.crypto.KeyGenerationParameters) -> init
    org.bouncycastle.crypto.AsymmetricCipherKeyPair generateKeyPair() -> generateKeyPair
    java.math.BigInteger generatePrime(int,int,java.security.SecureRandom) -> generatePrime
    java.util.Vector permuteList(java.util.Vector,java.security.SecureRandom) -> permuteList
    int getInt(java.security.SecureRandom,int) -> getInt
    java.util.Vector findFirstPrimes(int) -> findFirstPrimes
org.bouncycastle.crypto.generators.OpenSSLPBEParametersGenerator -> org.bouncycastle.crypto.generators.OpenSSLPBEParametersGenerator:
    org.bouncycastle.crypto.Digest digest -> digest
    void init(byte[],byte[]) -> init
    byte[] generateDerivedKey(int) -> generateDerivedKey
    org.bouncycastle.crypto.CipherParameters generateDerivedParameters(int) -> generateDerivedParameters
    org.bouncycastle.crypto.CipherParameters generateDerivedParameters(int,int) -> generateDerivedParameters
    org.bouncycastle.crypto.CipherParameters generateDerivedMacParameters(int) -> generateDerivedMacParameters
org.bouncycastle.crypto.generators.PKCS12ParametersGenerator -> org.bouncycastle.crypto.generators.PKCS12ParametersGenerator:
    int KEY_MATERIAL -> KEY_MATERIAL
    int IV_MATERIAL -> IV_MATERIAL
    int MAC_MATERIAL -> MAC_MATERIAL
    org.bouncycastle.crypto.Digest digest -> digest
    int u -> u
    int v -> v
    void adjust(byte[],int,byte[]) -> adjust
    byte[] generateDerivedKey(int,int) -> generateDerivedKey
    org.bouncycastle.crypto.CipherParameters generateDerivedParameters(int) -> generateDerivedParameters
    org.bouncycastle.crypto.CipherParameters generateDerivedParameters(int,int) -> generateDerivedParameters
    org.bouncycastle.crypto.CipherParameters generateDerivedMacParameters(int) -> generateDerivedMacParameters
org.bouncycastle.crypto.generators.PKCS5S1ParametersGenerator -> org.bouncycastle.crypto.generators.PKCS5S1ParametersGenerator:
    org.bouncycastle.crypto.Digest digest -> digest
    byte[] generateDerivedKey() -> generateDerivedKey
    org.bouncycastle.crypto.CipherParameters generateDerivedParameters(int) -> generateDerivedParameters
    org.bouncycastle.crypto.CipherParameters generateDerivedParameters(int,int) -> generateDerivedParameters
    org.bouncycastle.crypto.CipherParameters generateDerivedMacParameters(int) -> generateDerivedMacParameters
org.bouncycastle.crypto.generators.PKCS5S2ParametersGenerator -> org.bouncycastle.crypto.generators.PKCS5S2ParametersGenerator:
    org.bouncycastle.crypto.Mac hMac -> hMac
    byte[] state -> state
    void F(byte[],int,byte[],byte[],int) -> F
    byte[] generateDerivedKey(int) -> generateDerivedKey
    org.bouncycastle.crypto.CipherParameters generateDerivedParameters(int) -> generateDerivedParameters
    org.bouncycastle.crypto.CipherParameters generateDerivedParameters(int,int) -> generateDerivedParameters
    org.bouncycastle.crypto.CipherParameters generateDerivedMacParameters(int) -> generateDerivedMacParameters
org.bouncycastle.crypto.generators.Poly1305KeyGenerator -> org.bouncycastle.crypto.generators.Poly1305KeyGenerator:
    byte R_MASK_LOW_2 -> R_MASK_LOW_2
    byte R_MASK_HIGH_4 -> R_MASK_HIGH_4
    void init(org.bouncycastle.crypto.KeyGenerationParameters) -> init
    byte[] generateKey() -> generateKey
    void clamp(byte[]) -> clamp
    void checkKey(byte[]) -> checkKey
    void checkMask(byte,byte) -> checkMask
org.bouncycastle.crypto.generators.RSABlindingFactorGenerator -> org.bouncycastle.crypto.generators.RSABlindingFactorGenerator:
    java.math.BigInteger ZERO -> ZERO
    java.math.BigInteger ONE -> ONE
    org.bouncycastle.crypto.params.RSAKeyParameters key -> key
    java.security.SecureRandom random -> random
    void init(org.bouncycastle.crypto.CipherParameters) -> init
    java.math.BigInteger generateBlindingFactor() -> generateBlindingFactor
org.bouncycastle.crypto.generators.RSAKeyPairGenerator -> org.bouncycastle.crypto.generators.RSAKeyPairGenerator:
    java.math.BigInteger ONE -> ONE
    org.bouncycastle.crypto.params.RSAKeyGenerationParameters param -> param
    void init(org.bouncycastle.crypto.KeyGenerationParameters) -> init
    org.bouncycastle.crypto.AsymmetricCipherKeyPair generateKeyPair() -> generateKeyPair
    java.math.BigInteger chooseRandomPrime(int,java.math.BigInteger) -> chooseRandomPrime
org.bouncycastle.crypto.generators.SCrypt -> org.bouncycastle.crypto.generators.SCrypt:
    byte[] generate(byte[],byte[],int,int,int,int) -> generate
    byte[] MFcrypt(byte[],byte[],int,int,int,int) -> MFcrypt
    byte[] SingleIterationPBKDF2(byte[],byte[],int) -> SingleIterationPBKDF2
    void SMix(int[],int,int,int) -> SMix
    void BlockMix(int[],int[],int[],int[],int) -> BlockMix
    void Xor(int[],int[],int,int[]) -> Xor
    void Clear(byte[]) -> Clear
    void Clear(int[]) -> Clear
    void ClearAll(int[][]) -> ClearAll
org.bouncycastle.crypto.io.CipherIOException -> org.bouncycastle.crypto.io.CipherIOException:
    long serialVersionUID -> serialVersionUID
    java.lang.Throwable cause -> cause
    java.lang.Throwable getCause() -> getCause
org.bouncycastle.crypto.io.CipherInputStream -> org.bouncycastle.crypto.io.CipherInputStream:
    int INPUT_BUF_SIZE -> INPUT_BUF_SIZE
    org.bouncycastle.crypto.SkippingCipher skippingCipher -> skippingCipher
    byte[] inBuf -> inBuf
    org.bouncycastle.crypto.BufferedBlockCipher bufferedBlockCipher -> bufferedBlockCipher
    org.bouncycastle.crypto.StreamCipher streamCipher -> streamCipher
    org.bouncycastle.crypto.modes.AEADBlockCipher aeadBlockCipher -> aeadBlockCipher
    byte[] buf -> buf
    byte[] markBuf -> markBuf
    int bufOff -> bufOff
    int maxBuf -> maxBuf
    boolean finalized -> finalized
    long markPosition -> markPosition
    int markBufOff -> markBufOff
    int nextChunk() -> nextChunk
    void finaliseCipher() -> finaliseCipher
    int read() -> read
    int read(byte[]) -> read
    int read(byte[],int,int) -> read
    long skip(long) -> skip
    int available() -> available
    void ensureCapacity(int,boolean) -> ensureCapacity
    void close() -> close
    void mark(int) -> mark
    void reset() -> reset
    boolean markSupported() -> markSupported
org.bouncycastle.crypto.io.CipherOutputStream -> org.bouncycastle.crypto.io.CipherOutputStream:
    org.bouncycastle.crypto.BufferedBlockCipher bufferedBlockCipher -> bufferedBlockCipher
    org.bouncycastle.crypto.StreamCipher streamCipher -> streamCipher
    org.bouncycastle.crypto.modes.AEADBlockCipher aeadBlockCipher -> aeadBlockCipher
    byte[] oneByte -> oneByte
    byte[] buf -> buf
    void write(int) -> write
    void write(byte[]) -> write
    void write(byte[],int,int) -> write
    void ensureCapacity(int,boolean) -> ensureCapacity
    void flush() -> flush
    void close() -> close
org.bouncycastle.crypto.io.DigestInputStream -> org.bouncycastle.crypto.io.DigestInputStream:
    org.bouncycastle.crypto.Digest digest -> digest
    int read() -> read
    int read(byte[],int,int) -> read
    org.bouncycastle.crypto.Digest getDigest() -> getDigest
org.bouncycastle.crypto.io.DigestOutputStream -> org.bouncycastle.crypto.io.DigestOutputStream:
    org.bouncycastle.crypto.Digest digest -> digest
    void write(int) -> write
    void write(byte[],int,int) -> write
    byte[] getDigest() -> getDigest
org.bouncycastle.crypto.io.InvalidCipherTextIOException -> org.bouncycastle.crypto.io.InvalidCipherTextIOException:
    long serialVersionUID -> serialVersionUID
org.bouncycastle.crypto.io.MacInputStream -> org.bouncycastle.crypto.io.MacInputStream:
    org.bouncycastle.crypto.Mac mac -> mac
    int read() -> read
    int read(byte[],int,int) -> read
    org.bouncycastle.crypto.Mac getMac() -> getMac
org.bouncycastle.crypto.io.MacOutputStream -> org.bouncycastle.crypto.io.MacOutputStream:
    org.bouncycastle.crypto.Mac mac -> mac
    void write(int) -> write
    void write(byte[],int,int) -> write
    byte[] getMac() -> getMac
org.bouncycastle.crypto.io.SignerInputStream -> org.bouncycastle.crypto.io.SignerInputStream:
    org.bouncycastle.crypto.Signer signer -> signer
    int read() -> read
    int read(byte[],int,int) -> read
    org.bouncycastle.crypto.Signer getSigner() -> getSigner
org.bouncycastle.crypto.io.SignerOutputStream -> org.bouncycastle.crypto.io.SignerOutputStream:
    org.bouncycastle.crypto.Signer signer -> signer
    void write(int) -> write
    void write(byte[],int,int) -> write
    org.bouncycastle.crypto.Signer getSigner() -> getSigner
org.bouncycastle.crypto.kems.ECIESKeyEncapsulation -> org.bouncycastle.crypto.kems.ECIESKeyEncapsulation:
    java.math.BigInteger ONE -> ONE
    org.bouncycastle.crypto.DerivationFunction kdf -> kdf
    java.security.SecureRandom rnd -> rnd
    org.bouncycastle.crypto.params.ECKeyParameters key -> key
    boolean CofactorMode -> CofactorMode
    boolean OldCofactorMode -> OldCofactorMode
    boolean SingleHashMode -> SingleHashMode
    void init(org.bouncycastle.crypto.CipherParameters) -> init
    org.bouncycastle.crypto.CipherParameters encrypt(byte[],int,int) -> encrypt
    org.bouncycastle.crypto.CipherParameters encrypt(byte[],int) -> encrypt
    org.bouncycastle.crypto.CipherParameters decrypt(byte[],int,int,int) -> decrypt
    org.bouncycastle.crypto.CipherParameters decrypt(byte[],int) -> decrypt
    org.bouncycastle.math.ec.ECMultiplier createBasePointMultiplier() -> createBasePointMultiplier
org.bouncycastle.crypto.kems.RSAKeyEncapsulation -> org.bouncycastle.crypto.kems.RSAKeyEncapsulation:
    java.math.BigInteger ZERO -> ZERO
    java.math.BigInteger ONE -> ONE
    org.bouncycastle.crypto.DerivationFunction kdf -> kdf
    java.security.SecureRandom rnd -> rnd
    org.bouncycastle.crypto.params.RSAKeyParameters key -> key
    void init(org.bouncycastle.crypto.CipherParameters) -> init
    org.bouncycastle.crypto.CipherParameters encrypt(byte[],int,int) -> encrypt
    org.bouncycastle.crypto.CipherParameters encrypt(byte[],int) -> encrypt
    org.bouncycastle.crypto.CipherParameters decrypt(byte[],int,int,int) -> decrypt
    org.bouncycastle.crypto.CipherParameters decrypt(byte[],int) -> decrypt
    org.bouncycastle.crypto.params.KeyParameter generateKey(java.math.BigInteger,java.math.BigInteger,int) -> generateKey
org.bouncycastle.crypto.macs.BlockCipherMac -> org.bouncycastle.crypto.macs.BlockCipherMac:
    byte[] mac -> mac
    byte[] buf -> buf
    int bufOff -> bufOff
    org.bouncycastle.crypto.BlockCipher cipher -> cipher
    int macSize -> macSize
    java.lang.String getAlgorithmName() -> getAlgorithmName
    void init(org.bouncycastle.crypto.CipherParameters) -> init
    int getMacSize() -> getMacSize
    void update(byte) -> update
    void update(byte[],int,int) -> update
    int doFinal(byte[],int) -> doFinal
    void reset() -> reset
org.bouncycastle.crypto.macs.CBCBlockCipherMac -> org.bouncycastle.crypto.macs.CBCBlockCipherMac:
    byte[] mac -> mac
    byte[] buf -> buf
    int bufOff -> bufOff
    org.bouncycastle.crypto.BlockCipher cipher -> cipher
    org.bouncycastle.crypto.paddings.BlockCipherPadding padding -> padding
    int macSize -> macSize
    java.lang.String getAlgorithmName() -> getAlgorithmName
    void init(org.bouncycastle.crypto.CipherParameters) -> init
    int getMacSize() -> getMacSize
    void update(byte) -> update
    void update(byte[],int,int) -> update
    int doFinal(byte[],int) -> doFinal
    void reset() -> reset
org.bouncycastle.crypto.macs.CFBBlockCipherMac -> org.bouncycastle.crypto.macs.CFBBlockCipherMac:
    byte[] mac -> mac
    byte[] buf -> buf
    int bufOff -> bufOff
    org.bouncycastle.crypto.macs.MacCFBBlockCipher cipher -> cipher
    org.bouncycastle.crypto.paddings.BlockCipherPadding padding -> padding
    int macSize -> macSize
    java.lang.String getAlgorithmName() -> getAlgorithmName
    void init(org.bouncycastle.crypto.CipherParameters) -> init
    int getMacSize() -> getMacSize
    void update(byte) -> update
    void update(byte[],int,int) -> update
    int doFinal(byte[],int) -> doFinal
    void reset() -> reset
org.bouncycastle.crypto.macs.CMac -> org.bouncycastle.crypto.macs.CMac:
    byte CONSTANT_128 -> CONSTANT_128
    byte CONSTANT_64 -> CONSTANT_64
    byte[] ZEROES -> ZEROES
    byte[] mac -> mac
    byte[] buf -> buf
    int bufOff -> bufOff
    org.bouncycastle.crypto.BlockCipher cipher -> cipher
    int macSize -> macSize
    byte[] L -> L
    byte[] Lu -> Lu
    byte[] Lu2 -> Lu2
    java.lang.String getAlgorithmName() -> getAlgorithmName
    int shiftLeft(byte[],byte[]) -> shiftLeft
    byte[] doubleLu(byte[]) -> doubleLu
    void init(org.bouncycastle.crypto.CipherParameters) -> init
    void validate(org.bouncycastle.crypto.CipherParameters) -> validate
    int getMacSize() -> getMacSize
    void update(byte) -> update
    void update(byte[],int,int) -> update
    int doFinal(byte[],int) -> doFinal
    void reset() -> reset
org.bouncycastle.crypto.macs.CMacWithIV -> org.bouncycastle.crypto.macs.CMacWithIV:
    void validate(org.bouncycastle.crypto.CipherParameters) -> validate
org.bouncycastle.crypto.macs.GMac -> org.bouncycastle.crypto.macs.GMac:
    org.bouncycastle.crypto.modes.GCMBlockCipher cipher -> cipher
    int macSizeBits -> macSizeBits
    void init(org.bouncycastle.crypto.CipherParameters) -> init
    java.lang.String getAlgorithmName() -> getAlgorithmName
    int getMacSize() -> getMacSize
    void update(byte) -> update
    void update(byte[],int,int) -> update
    int doFinal(byte[],int) -> doFinal
    void reset() -> reset
org.bouncycastle.crypto.macs.GOST28147Mac -> org.bouncycastle.crypto.macs.GOST28147Mac:
    int blockSize -> blockSize
    int macSize -> macSize
    int bufOff -> bufOff
    byte[] buf -> buf
    byte[] mac -> mac
    boolean firstStep -> firstStep
    int[] workingKey -> workingKey
    byte[] S -> S
    int[] generateWorkingKey(byte[]) -> generateWorkingKey
    void init(org.bouncycastle.crypto.CipherParameters) -> init
    java.lang.String getAlgorithmName() -> getAlgorithmName
    int getMacSize() -> getMacSize
    int gost28147_mainStep(int,int) -> gost28147_mainStep
    void gost28147MacFunc(int[],byte[],int,byte[],int) -> gost28147MacFunc
    int bytesToint(byte[],int) -> bytesToint
    void intTobytes(int,byte[],int) -> intTobytes
    byte[] CM5func(byte[],int,byte[]) -> CM5func
    void update(byte) -> update
    void update(byte[],int,int) -> update
    int doFinal(byte[],int) -> doFinal
    void reset() -> reset
org.bouncycastle.crypto.macs.HMac -> org.bouncycastle.crypto.macs.HMac:
    byte IPAD -> IPAD
    byte OPAD -> OPAD
    org.bouncycastle.crypto.Digest digest -> digest
    int digestSize -> digestSize
    int blockLength -> blockLength
    org.bouncycastle.util.Memoable ipadState -> ipadState
    org.bouncycastle.util.Memoable opadState -> opadState
    byte[] inputPad -> inputPad
    byte[] outputBuf -> outputBuf
    java.util.Hashtable blockLengths -> blockLengths
    int getByteLength(org.bouncycastle.crypto.Digest) -> getByteLength
    java.lang.String getAlgorithmName() -> getAlgorithmName
    org.bouncycastle.crypto.Digest getUnderlyingDigest() -> getUnderlyingDigest
    void init(org.bouncycastle.crypto.CipherParameters) -> init
    int getMacSize() -> getMacSize
    void update(byte) -> update
    void update(byte[],int,int) -> update
    int doFinal(byte[],int) -> doFinal
    void reset() -> reset
    void xorPad(byte[],int,byte) -> xorPad
org.bouncycastle.crypto.macs.ISO9797Alg3Mac -> org.bouncycastle.crypto.macs.ISO9797Alg3Mac:
    byte[] mac -> mac
    byte[] buf -> buf
    int bufOff -> bufOff
    org.bouncycastle.crypto.BlockCipher cipher -> cipher
    org.bouncycastle.crypto.paddings.BlockCipherPadding padding -> padding
    int macSize -> macSize
    org.bouncycastle.crypto.params.KeyParameter lastKey2 -> lastKey2
    org.bouncycastle.crypto.params.KeyParameter lastKey3 -> lastKey3
    java.lang.String getAlgorithmName() -> getAlgorithmName
    void init(org.bouncycastle.crypto.CipherParameters) -> init
    int getMacSize() -> getMacSize
    void update(byte) -> update
    void update(byte[],int,int) -> update
    int doFinal(byte[],int) -> doFinal
    void reset() -> reset
org.bouncycastle.crypto.macs.MacCFBBlockCipher -> org.bouncycastle.crypto.macs.MacCFBBlockCipher:
    byte[] IV -> IV
    byte[] cfbV -> cfbV
    byte[] cfbOutV -> cfbOutV
    int blockSize -> blockSize
    org.bouncycastle.crypto.BlockCipher cipher -> cipher
    void init(org.bouncycastle.crypto.CipherParameters) -> init
    java.lang.String getAlgorithmName() -> getAlgorithmName
    int getBlockSize() -> getBlockSize
    int processBlock(byte[],int,byte[],int) -> processBlock
    void reset() -> reset
    void getMacBlock(byte[]) -> getMacBlock
org.bouncycastle.crypto.macs.OldHMac -> org.bouncycastle.crypto.macs.OldHMac:
    int BLOCK_LENGTH -> BLOCK_LENGTH
    byte IPAD -> IPAD
    byte OPAD -> OPAD
    org.bouncycastle.crypto.Digest digest -> digest
    int digestSize -> digestSize
    byte[] inputPad -> inputPad
    byte[] outputPad -> outputPad
    java.lang.String getAlgorithmName() -> getAlgorithmName
    org.bouncycastle.crypto.Digest getUnderlyingDigest() -> getUnderlyingDigest
    void init(org.bouncycastle.crypto.CipherParameters) -> init
    int getMacSize() -> getMacSize
    void update(byte) -> update
    void update(byte[],int,int) -> update
    int doFinal(byte[],int) -> doFinal
    void reset() -> reset
org.bouncycastle.crypto.macs.Poly1305 -> org.bouncycastle.crypto.macs.Poly1305:
    int BLOCK_SIZE -> BLOCK_SIZE
    org.bouncycastle.crypto.BlockCipher cipher -> cipher
    byte[] singleByte -> singleByte
    int r0 -> r0
    int r1 -> r1
    int r2 -> r2
    int r3 -> r3
    int r4 -> r4
    int s1 -> s1
    int s2 -> s2
    int s3 -> s3
    int s4 -> s4
    int k0 -> k0
    int k1 -> k1
    int k2 -> k2
    int k3 -> k3
    byte[] currentBlock -> currentBlock
    int currentBlockOffset -> currentBlockOffset
    int h0 -> h0
    int h1 -> h1
    int h2 -> h2
    int h3 -> h3
    int h4 -> h4
    void init(org.bouncycastle.crypto.CipherParameters) -> init
    void setKey(byte[],byte[]) -> setKey
    java.lang.String getAlgorithmName() -> getAlgorithmName
    int getMacSize() -> getMacSize
    void update(byte) -> update
    void update(byte[],int,int) -> update
    void processBlock() -> processBlock
    int doFinal(byte[],int) -> doFinal
    void reset() -> reset
    long mul32x32_64(int,int) -> mul32x32_64
org.bouncycastle.crypto.macs.SipHash -> org.bouncycastle.crypto.macs.SipHash:
    int c -> c
    int d -> d
    long k0 -> k0
    long k1 -> k1
    long v0 -> v0
    long v1 -> v1
    long v2 -> v2
    long v3 -> v3
    long m -> m
    int wordPos -> wordPos
    int wordCount -> wordCount
    java.lang.String getAlgorithmName() -> getAlgorithmName
    int getMacSize() -> getMacSize
    void init(org.bouncycastle.crypto.CipherParameters) -> init
    void update(byte) -> update
    void update(byte[],int,int) -> update
    long doFinal() -> doFinal
    int doFinal(byte[],int) -> doFinal
    void reset() -> reset
    void processMessageWord() -> processMessageWord
    void applySipRounds(int) -> applySipRounds
    long rotateLeft(long,int) -> rotateLeft
org.bouncycastle.crypto.macs.SkeinMac -> org.bouncycastle.crypto.macs.SkeinMac:
    int SKEIN_256 -> SKEIN_256
    int SKEIN_512 -> SKEIN_512
    int SKEIN_1024 -> SKEIN_1024
    org.bouncycastle.crypto.digests.SkeinEngine engine -> engine
    java.lang.String getAlgorithmName() -> getAlgorithmName
    void init(org.bouncycastle.crypto.CipherParameters) -> init
    int getMacSize() -> getMacSize
    void reset() -> reset
    void update(byte) -> update
    void update(byte[],int,int) -> update
    int doFinal(byte[],int) -> doFinal
org.bouncycastle.crypto.macs.VMPCMac -> org.bouncycastle.crypto.macs.VMPCMac:
    byte g -> g
    byte n -> n
    byte[] P -> P
    byte s -> s
    byte[] T -> T
    byte[] workingIV -> workingIV
    byte[] workingKey -> workingKey
    byte x1 -> x1
    byte x2 -> x2
    byte x3 -> x3
    byte x4 -> x4
    int doFinal(byte[],int) -> doFinal
    java.lang.String getAlgorithmName() -> getAlgorithmName
    int getMacSize() -> getMacSize
    void init(org.bouncycastle.crypto.CipherParameters) -> init
    void initKey(byte[],byte[]) -> initKey
    void reset() -> reset
    void update(byte) -> update
    void update(byte[],int,int) -> update
org.bouncycastle.crypto.modes.AEADBlockCipher -> org.bouncycastle.crypto.modes.AEADBlockCipher:
    void init(boolean,org.bouncycastle.crypto.CipherParameters) -> init
    java.lang.String getAlgorithmName() -> getAlgorithmName
    org.bouncycastle.crypto.BlockCipher getUnderlyingCipher() -> getUnderlyingCipher
    void processAADByte(byte) -> processAADByte
    void processAADBytes(byte[],int,int) -> processAADBytes
    int processByte(byte,byte[],int) -> processByte
    int processBytes(byte[],int,int,byte[],int) -> processBytes
    int doFinal(byte[],int) -> doFinal
    byte[] getMac() -> getMac
    int getUpdateOutputSize(int) -> getUpdateOutputSize
    int getOutputSize(int) -> getOutputSize
    void reset() -> reset
org.bouncycastle.crypto.modes.CBCBlockCipher -> org.bouncycastle.crypto.modes.CBCBlockCipher:
    byte[] IV -> IV
    byte[] cbcV -> cbcV
    byte[] cbcNextV -> cbcNextV
    int blockSize -> blockSize
    org.bouncycastle.crypto.BlockCipher cipher -> cipher
    boolean encrypting -> encrypting
    org.bouncycastle.crypto.BlockCipher getUnderlyingCipher() -> getUnderlyingCipher
    void init(boolean,org.bouncycastle.crypto.CipherParameters) -> init
    java.lang.String getAlgorithmName() -> getAlgorithmName
    int getBlockSize() -> getBlockSize
    int processBlock(byte[],int,byte[],int) -> processBlock
    void reset() -> reset
    int encryptBlock(byte[],int,byte[],int) -> encryptBlock
    int decryptBlock(byte[],int,byte[],int) -> decryptBlock
org.bouncycastle.crypto.modes.CCMBlockCipher -> org.bouncycastle.crypto.modes.CCMBlockCipher:
    org.bouncycastle.crypto.BlockCipher cipher -> cipher
    int blockSize -> blockSize
    boolean forEncryption -> forEncryption
    byte[] nonce -> nonce
    byte[] initialAssociatedText -> initialAssociatedText
    int macSize -> macSize
    org.bouncycastle.crypto.CipherParameters keyParam -> keyParam
    byte[] macBlock -> macBlock
    org.bouncycastle.crypto.modes.CCMBlockCipher$ExposedByteArrayOutputStream associatedText -> associatedText
    org.bouncycastle.crypto.modes.CCMBlockCipher$ExposedByteArrayOutputStream data -> data
    org.bouncycastle.crypto.BlockCipher getUnderlyingCipher() -> getUnderlyingCipher
    void init(boolean,org.bouncycastle.crypto.CipherParameters) -> init
    java.lang.String getAlgorithmName() -> getAlgorithmName
    void processAADByte(byte) -> processAADByte
    void processAADBytes(byte[],int,int) -> processAADBytes
    int processByte(byte,byte[],int) -> processByte
    int processBytes(byte[],int,int,byte[],int) -> processBytes
    int doFinal(byte[],int) -> doFinal
    void reset() -> reset
    byte[] getMac() -> getMac
    int getUpdateOutputSize(int) -> getUpdateOutputSize
    int getOutputSize(int) -> getOutputSize
    byte[] processPacket(byte[],int,int) -> processPacket
    int processPacket(byte[],int,int,byte[],int) -> processPacket
    int calculateMac(byte[],int,int,byte[]) -> calculateMac
    int getAssociatedTextLength() -> getAssociatedTextLength
    boolean hasAssociatedText() -> hasAssociatedText
org.bouncycastle.crypto.modes.CCMBlockCipher$ExposedByteArrayOutputStream -> org.bouncycastle.crypto.modes.CCMBlockCipher$ExposedByteArrayOutputStream:
    org.bouncycastle.crypto.modes.CCMBlockCipher this$0 -> this$0
    byte[] getBuffer() -> getBuffer
org.bouncycastle.crypto.modes.CFBBlockCipher -> org.bouncycastle.crypto.modes.CFBBlockCipher:
    byte[] IV -> IV
    byte[] cfbV -> cfbV
    byte[] cfbOutV -> cfbOutV
    byte[] inBuf -> inBuf
    int blockSize -> blockSize
    org.bouncycastle.crypto.BlockCipher cipher -> cipher
    boolean encrypting -> encrypting
    int byteCount -> byteCount
    void init(boolean,org.bouncycastle.crypto.CipherParameters) -> init
    java.lang.String getAlgorithmName() -> getAlgorithmName
    byte calculateByte(byte) -> calculateByte
    byte encryptByte(byte) -> encryptByte
    byte decryptByte(byte) -> decryptByte
    int getBlockSize() -> getBlockSize
    int processBlock(byte[],int,byte[],int) -> processBlock
    int encryptBlock(byte[],int,byte[],int) -> encryptBlock
    int decryptBlock(byte[],int,byte[],int) -> decryptBlock
    byte[] getCurrentIV() -> getCurrentIV
    void reset() -> reset
org.bouncycastle.crypto.modes.CTSBlockCipher -> org.bouncycastle.crypto.modes.CTSBlockCipher:
    int blockSize -> blockSize
    int getUpdateOutputSize(int) -> getUpdateOutputSize
    int getOutputSize(int) -> getOutputSize
    int processByte(byte,byte[],int) -> processByte
    int processBytes(byte[],int,int,byte[],int) -> processBytes
    int doFinal(byte[],int) -> doFinal
org.bouncycastle.crypto.modes.EAXBlockCipher -> org.bouncycastle.crypto.modes.EAXBlockCipher:
    byte nTAG -> nTAG
    byte hTAG -> hTAG
    byte cTAG -> cTAG
    org.bouncycastle.crypto.modes.SICBlockCipher cipher -> cipher
    boolean forEncryption -> forEncryption
    int blockSize -> blockSize
    org.bouncycastle.crypto.Mac mac -> mac
    byte[] nonceMac -> nonceMac
    byte[] associatedTextMac -> associatedTextMac
    byte[] macBlock -> macBlock
    int macSize -> macSize
    byte[] bufBlock -> bufBlock
    int bufOff -> bufOff
    boolean cipherInitialized -> cipherInitialized
    byte[] initialAssociatedText -> initialAssociatedText
    java.lang.String getAlgorithmName() -> getAlgorithmName
    org.bouncycastle.crypto.BlockCipher getUnderlyingCipher() -> getUnderlyingCipher
    int getBlockSize() -> getBlockSize
    void init(boolean,org.bouncycastle.crypto.CipherParameters) -> init
    void initCipher() -> initCipher
    void calculateMac() -> calculateMac
    void reset() -> reset
    void reset(boolean) -> reset
    void processAADByte(byte) -> processAADByte
    void processAADBytes(byte[],int,int) -> processAADBytes
    int processByte(byte,byte[],int) -> processByte
    int processBytes(byte[],int,int,byte[],int) -> processBytes
    int doFinal(byte[],int) -> doFinal
    byte[] getMac() -> getMac
    int getUpdateOutputSize(int) -> getUpdateOutputSize
    int getOutputSize(int) -> getOutputSize
    int process(byte,byte[],int) -> process
    boolean verifyMac(byte[],int) -> verifyMac
org.bouncycastle.crypto.modes.GCFBBlockCipher -> org.bouncycastle.crypto.modes.GCFBBlockCipher:
    byte[] C -> C
    org.bouncycastle.crypto.modes.CFBBlockCipher cfbEngine -> cfbEngine
    org.bouncycastle.crypto.params.KeyParameter key -> key
    long counter -> counter
    boolean forEncryption -> forEncryption
    void init(boolean,org.bouncycastle.crypto.CipherParameters) -> init
    java.lang.String getAlgorithmName() -> getAlgorithmName
    int getBlockSize() -> getBlockSize
    int processBlock(byte[],int,byte[],int) -> processBlock
    byte calculateByte(byte) -> calculateByte
    void reset() -> reset
org.bouncycastle.crypto.modes.GCMBlockCipher -> org.bouncycastle.crypto.modes.GCMBlockCipher:
    int BLOCK_SIZE -> BLOCK_SIZE
    org.bouncycastle.crypto.BlockCipher cipher -> cipher
    org.bouncycastle.crypto.modes.gcm.GCMMultiplier multiplier -> multiplier
    org.bouncycastle.crypto.modes.gcm.GCMExponentiator exp -> exp
    boolean forEncryption -> forEncryption
    int macSize -> macSize
    byte[] nonce -> nonce
    byte[] initialAssociatedText -> initialAssociatedText
    byte[] H -> H
    byte[] J0 -> J0
    byte[] bufBlock -> bufBlock
    byte[] macBlock -> macBlock
    byte[] S -> S
    byte[] S_at -> S_at
    byte[] S_atPre -> S_atPre
    byte[] counter -> counter
    int bufOff -> bufOff
    long totalLength -> totalLength
    byte[] atBlock -> atBlock
    int atBlockPos -> atBlockPos
    long atLength -> atLength
    long atLengthPre -> atLengthPre
    org.bouncycastle.crypto.BlockCipher getUnderlyingCipher() -> getUnderlyingCipher
    java.lang.String getAlgorithmName() -> getAlgorithmName
    void init(boolean,org.bouncycastle.crypto.CipherParameters) -> init
    byte[] getMac() -> getMac
    int getOutputSize(int) -> getOutputSize
    int getUpdateOutputSize(int) -> getUpdateOutputSize
    void processAADByte(byte) -> processAADByte
    void processAADBytes(byte[],int,int) -> processAADBytes
    void initCipher() -> initCipher
    int processByte(byte,byte[],int) -> processByte
    int processBytes(byte[],int,int,byte[],int) -> processBytes
    void outputBlock(byte[],int) -> outputBlock
    int doFinal(byte[],int) -> doFinal
    void reset() -> reset
    void reset(boolean) -> reset
    void gCTRBlock(byte[],byte[],int) -> gCTRBlock
    void gCTRPartial(byte[],int,int,byte[],int) -> gCTRPartial
    void gHASH(byte[],byte[],int) -> gHASH
    void gHASHBlock(byte[],byte[]) -> gHASHBlock
    void gHASHPartial(byte[],byte[],int,int) -> gHASHPartial
    byte[] getNextCounterBlock() -> getNextCounterBlock
    void multiply(byte[],byte[]) -> multiply
    void shiftRight(byte[]) -> shiftRight
    void xor(byte[],byte[]) -> xor
    void xor(byte[],byte[],int,int) -> xor
org.bouncycastle.crypto.modes.GOFBBlockCipher -> org.bouncycastle.crypto.modes.GOFBBlockCipher:
    byte[] IV -> IV
    byte[] ofbV -> ofbV
    byte[] ofbOutV -> ofbOutV
    int byteCount -> byteCount
    int blockSize -> blockSize
    org.bouncycastle.crypto.BlockCipher cipher -> cipher
    boolean firstStep -> firstStep
    int N3 -> N3
    int N4 -> N4
    int C1 -> C1
    int C2 -> C2
    void init(boolean,org.bouncycastle.crypto.CipherParameters) -> init
    java.lang.String getAlgorithmName() -> getAlgorithmName
    int getBlockSize() -> getBlockSize
    int processBlock(byte[],int,byte[],int) -> processBlock
    void reset() -> reset
    int bytesToint(byte[],int) -> bytesToint
    void intTobytes(int,byte[],int) -> intTobytes
    byte calculateByte(byte) -> calculateByte
org.bouncycastle.crypto.modes.OCBBlockCipher -> org.bouncycastle.crypto.modes.OCBBlockCipher:
    int BLOCK_SIZE -> BLOCK_SIZE
    org.bouncycastle.crypto.BlockCipher hashCipher -> hashCipher
    org.bouncycastle.crypto.BlockCipher mainCipher -> mainCipher
    boolean forEncryption -> forEncryption
    int macSize -> macSize
    byte[] initialAssociatedText -> initialAssociatedText
    java.util.Vector L -> L
    byte[] L_Asterisk -> L_Asterisk
    byte[] L_Dollar -> L_Dollar
    byte[] KtopInput -> KtopInput
    byte[] Stretch -> Stretch
    byte[] OffsetMAIN_0 -> OffsetMAIN_0
    byte[] hashBlock -> hashBlock
    byte[] mainBlock -> mainBlock
    int hashBlockPos -> hashBlockPos
    int mainBlockPos -> mainBlockPos
    long hashBlockCount -> hashBlockCount
    long mainBlockCount -> mainBlockCount
    byte[] OffsetHASH -> OffsetHASH
    byte[] Sum -> Sum
    byte[] OffsetMAIN -> OffsetMAIN
    byte[] Checksum -> Checksum
    byte[] macBlock -> macBlock
    org.bouncycastle.crypto.BlockCipher getUnderlyingCipher() -> getUnderlyingCipher
    java.lang.String getAlgorithmName() -> getAlgorithmName
    void init(boolean,org.bouncycastle.crypto.CipherParameters) -> init
    int processNonce(byte[]) -> processNonce
    byte[] getMac() -> getMac
    int getOutputSize(int) -> getOutputSize
    int getUpdateOutputSize(int) -> getUpdateOutputSize
    void processAADByte(byte) -> processAADByte
    void processAADBytes(byte[],int,int) -> processAADBytes
    int processByte(byte,byte[],int) -> processByte
    int processBytes(byte[],int,int,byte[],int) -> processBytes
    int doFinal(byte[],int) -> doFinal
    void reset() -> reset
    void clear(byte[]) -> clear
    byte[] getLSub(int) -> getLSub
    void processHashBlock() -> processHashBlock
    void processMainBlock(byte[],int) -> processMainBlock
    void reset(boolean) -> reset
    void updateHASH(byte[]) -> updateHASH
    byte[] OCB_double(byte[]) -> OCB_double
    void OCB_extend(byte[],int) -> OCB_extend
    int OCB_ntz(long) -> OCB_ntz
    int shiftLeft(byte[],byte[]) -> shiftLeft
    void xor(byte[],byte[]) -> xor
org.bouncycastle.crypto.modes.OFBBlockCipher -> org.bouncycastle.crypto.modes.OFBBlockCipher:
    int byteCount -> byteCount
    byte[] IV -> IV
    byte[] ofbV -> ofbV
    byte[] ofbOutV -> ofbOutV
    int blockSize -> blockSize
    org.bouncycastle.crypto.BlockCipher cipher -> cipher
    void init(boolean,org.bouncycastle.crypto.CipherParameters) -> init
    java.lang.String getAlgorithmName() -> getAlgorithmName
    int getBlockSize() -> getBlockSize
    int processBlock(byte[],int,byte[],int) -> processBlock
    void reset() -> reset
    byte calculateByte(byte) -> calculateByte
org.bouncycastle.crypto.modes.OldCTSBlockCipher -> org.bouncycastle.crypto.modes.OldCTSBlockCipher:
    int blockSize -> blockSize
    int getUpdateOutputSize(int) -> getUpdateOutputSize
    int getOutputSize(int) -> getOutputSize
    int processByte(byte,byte[],int) -> processByte
    int processBytes(byte[],int,int,byte[],int) -> processBytes
    int doFinal(byte[],int) -> doFinal
org.bouncycastle.crypto.modes.OpenPGPCFBBlockCipher -> org.bouncycastle.crypto.modes.OpenPGPCFBBlockCipher:
    byte[] IV -> IV
    byte[] FR -> FR
    byte[] FRE -> FRE
    org.bouncycastle.crypto.BlockCipher cipher -> cipher
    int count -> count
    int blockSize -> blockSize
    boolean forEncryption -> forEncryption
    org.bouncycastle.crypto.BlockCipher getUnderlyingCipher() -> getUnderlyingCipher
    java.lang.String getAlgorithmName() -> getAlgorithmName
    int getBlockSize() -> getBlockSize
    int processBlock(byte[],int,byte[],int) -> processBlock
    void reset() -> reset
    void init(boolean,org.bouncycastle.crypto.CipherParameters) -> init
    byte encryptByte(byte,int) -> encryptByte
    int encryptBlock(byte[],int,byte[],int) -> encryptBlock
    int decryptBlock(byte[],int,byte[],int) -> decryptBlock
org.bouncycastle.crypto.modes.PGPCFBBlockCipher -> org.bouncycastle.crypto.modes.PGPCFBBlockCipher:
    byte[] IV -> IV
    byte[] FR -> FR
    byte[] FRE -> FRE
    byte[] tmp -> tmp
    org.bouncycastle.crypto.BlockCipher cipher -> cipher
    int count -> count
    int blockSize -> blockSize
    boolean forEncryption -> forEncryption
    boolean inlineIv -> inlineIv
    org.bouncycastle.crypto.BlockCipher getUnderlyingCipher() -> getUnderlyingCipher
    java.lang.String getAlgorithmName() -> getAlgorithmName
    int getBlockSize() -> getBlockSize
    int processBlock(byte[],int,byte[],int) -> processBlock
    void reset() -> reset
    void init(boolean,org.bouncycastle.crypto.CipherParameters) -> init
    byte encryptByte(byte,int) -> encryptByte
    int encryptBlockWithIV(byte[],int,byte[],int) -> encryptBlockWithIV
    int decryptBlockWithIV(byte[],int,byte[],int) -> decryptBlockWithIV
    int encryptBlock(byte[],int,byte[],int) -> encryptBlock
    int decryptBlock(byte[],int,byte[],int) -> decryptBlock
org.bouncycastle.crypto.modes.PaddedBlockCipher -> org.bouncycastle.crypto.modes.PaddedBlockCipher:
    int getOutputSize(int) -> getOutputSize
    int getUpdateOutputSize(int) -> getUpdateOutputSize
    int processByte(byte,byte[],int) -> processByte
    int processBytes(byte[],int,int,byte[],int) -> processBytes
    int doFinal(byte[],int) -> doFinal
org.bouncycastle.crypto.modes.SICBlockCipher -> org.bouncycastle.crypto.modes.SICBlockCipher:
    org.bouncycastle.crypto.BlockCipher cipher -> cipher
    int blockSize -> blockSize
    byte[] IV -> IV
    byte[] counter -> counter
    byte[] counterOut -> counterOut
    int byteCount -> byteCount
    void init(boolean,org.bouncycastle.crypto.CipherParameters) -> init
    java.lang.String getAlgorithmName() -> getAlgorithmName
    int getBlockSize() -> getBlockSize
    int processBlock(byte[],int,byte[],int) -> processBlock
    byte calculateByte(byte) -> calculateByte
    void incrementCounter() -> incrementCounter
    void decrementCounter() -> decrementCounter
    void adjustCounter(long) -> adjustCounter
    void reset() -> reset
    long skip(long) -> skip
    long seekTo(long) -> seekTo
    long getPosition() -> getPosition
org.bouncycastle.crypto.modes.gcm.BasicGCMExponentiator -> org.bouncycastle.crypto.modes.gcm.BasicGCMExponentiator:
    int[] x -> x
    void init(byte[]) -> init
    void exponentiateX(long,byte[]) -> exponentiateX
org.bouncycastle.crypto.modes.gcm.BasicGCMMultiplier -> org.bouncycastle.crypto.modes.gcm.BasicGCMMultiplier:
    byte[] H -> H
    void init(byte[]) -> init
    void multiplyH(byte[]) -> multiplyH
org.bouncycastle.crypto.modes.gcm.GCMExponentiator -> org.bouncycastle.crypto.modes.gcm.GCMExponentiator:
    void init(byte[]) -> init
    void exponentiateX(long,byte[]) -> exponentiateX
org.bouncycastle.crypto.modes.gcm.GCMMultiplier -> org.bouncycastle.crypto.modes.gcm.GCMMultiplier:
    void init(byte[]) -> init
    void multiplyH(byte[]) -> multiplyH
org.bouncycastle.crypto.modes.gcm.GCMUtil -> org.bouncycastle.crypto.modes.gcm.GCMUtil:
    int E1 -> E1
    byte E1B -> E1B
    long E1L -> E1L
    int[] LOOKUP -> LOOKUP
    int[] generateLookup() -> generateLookup
    byte[] oneAsBytes() -> oneAsBytes
    int[] oneAsInts() -> oneAsInts
    long[] oneAsLongs() -> oneAsLongs
    byte[] asBytes(int[]) -> asBytes
    void asBytes(int[],byte[]) -> asBytes
    byte[] asBytes(long[]) -> asBytes
    void asBytes(long[],byte[]) -> asBytes
    int[] asInts(byte[]) -> asInts
    void asInts(byte[],int[]) -> asInts
    long[] asLongs(byte[]) -> asLongs
    void asLongs(byte[],long[]) -> asLongs
    void multiply(byte[],byte[]) -> multiply
    void multiply(int[],int[]) -> multiply
    void multiply(long[],long[]) -> multiply
    void multiplyP(int[]) -> multiplyP
    void multiplyP(int[],int[]) -> multiplyP
    void multiplyP8(int[]) -> multiplyP8
    void multiplyP8(int[],int[]) -> multiplyP8
    byte shiftRight(byte[]) -> shiftRight
    byte shiftRight(byte[],byte[]) -> shiftRight
    int shiftRight(int[]) -> shiftRight
    int shiftRight(int[],int[]) -> shiftRight
    long shiftRight(long[]) -> shiftRight
    long shiftRight(long[],long[]) -> shiftRight
    int shiftRightN(int[],int) -> shiftRightN
    int shiftRightN(int[],int,int[]) -> shiftRightN
    void xor(byte[],byte[]) -> xor
    void xor(byte[],byte[],int,int) -> xor
    void xor(byte[],byte[],byte[]) -> xor
    void xor(int[],int[]) -> xor
    void xor(int[],int[],int[]) -> xor
    void xor(long[],long[]) -> xor
    void xor(long[],long[],long[]) -> xor
org.bouncycastle.crypto.modes.gcm.Tables1kGCMExponentiator -> org.bouncycastle.crypto.modes.gcm.Tables1kGCMExponentiator:
    java.util.Vector lookupPowX2 -> lookupPowX2
    void init(byte[]) -> init
    void exponentiateX(long,byte[]) -> exponentiateX
    void ensureAvailable(int) -> ensureAvailable
org.bouncycastle.crypto.modes.gcm.Tables64kGCMMultiplier -> org.bouncycastle.crypto.modes.gcm.Tables64kGCMMultiplier:
    byte[] H -> H
    int[][][] M -> M
    void init(byte[]) -> init
    void multiplyH(byte[]) -> multiplyH
org.bouncycastle.crypto.modes.gcm.Tables8kGCMMultiplier -> org.bouncycastle.crypto.modes.gcm.Tables8kGCMMultiplier:
    byte[] H -> H
    int[][][] M -> M
    void init(byte[]) -> init
    void multiplyH(byte[]) -> multiplyH
org.bouncycastle.crypto.paddings.BlockCipherPadding -> org.bouncycastle.crypto.paddings.BlockCipherPadding:
    void init(java.security.SecureRandom) -> init
    java.lang.String getPaddingName() -> getPaddingName
    int addPadding(byte[],int) -> addPadding
    int padCount(byte[]) -> padCount
org.bouncycastle.crypto.paddings.ISO10126d2Padding -> org.bouncycastle.crypto.paddings.ISO10126d2Padding:
    java.security.SecureRandom random -> random
    void init(java.security.SecureRandom) -> init
    java.lang.String getPaddingName() -> getPaddingName
    int addPadding(byte[],int) -> addPadding
    int padCount(byte[]) -> padCount
org.bouncycastle.crypto.paddings.ISO7816d4Padding -> org.bouncycastle.crypto.paddings.ISO7816d4Padding:
    void init(java.security.SecureRandom) -> init
    java.lang.String getPaddingName() -> getPaddingName
    int addPadding(byte[],int) -> addPadding
    int padCount(byte[]) -> padCount
org.bouncycastle.crypto.paddings.PKCS7Padding -> org.bouncycastle.crypto.paddings.PKCS7Padding:
    void init(java.security.SecureRandom) -> init
    java.lang.String getPaddingName() -> getPaddingName
    int addPadding(byte[],int) -> addPadding
    int padCount(byte[]) -> padCount
org.bouncycastle.crypto.paddings.PaddedBufferedBlockCipher -> org.bouncycastle.crypto.paddings.PaddedBufferedBlockCipher:
    org.bouncycastle.crypto.paddings.BlockCipherPadding padding -> padding
    void init(boolean,org.bouncycastle.crypto.CipherParameters) -> init
    int getOutputSize(int) -> getOutputSize
    int getUpdateOutputSize(int) -> getUpdateOutputSize
    int processByte(byte,byte[],int) -> processByte
    int processBytes(byte[],int,int,byte[],int) -> processBytes
    int doFinal(byte[],int) -> doFinal
org.bouncycastle.crypto.paddings.TBCPadding -> org.bouncycastle.crypto.paddings.TBCPadding:
    void init(java.security.SecureRandom) -> init
    java.lang.String getPaddingName() -> getPaddingName
    int addPadding(byte[],int) -> addPadding
    int padCount(byte[]) -> padCount
org.bouncycastle.crypto.paddings.X923Padding -> org.bouncycastle.crypto.paddings.X923Padding:
    java.security.SecureRandom random -> random
    void init(java.security.SecureRandom) -> init
    java.lang.String getPaddingName() -> getPaddingName
    int addPadding(byte[],int) -> addPadding
    int padCount(byte[]) -> padCount
org.bouncycastle.crypto.paddings.ZeroBytePadding -> org.bouncycastle.crypto.paddings.ZeroBytePadding:
    void init(java.security.SecureRandom) -> init
    java.lang.String getPaddingName() -> getPaddingName
    int addPadding(byte[],int) -> addPadding
    int padCount(byte[]) -> padCount
org.bouncycastle.crypto.params.AEADParameters -> org.bouncycastle.crypto.params.AEADParameters:
    byte[] associatedText -> associatedText
    byte[] nonce -> nonce
    org.bouncycastle.crypto.params.KeyParameter key -> key
    int macSize -> macSize
    org.bouncycastle.crypto.params.KeyParameter getKey() -> getKey
    int getMacSize() -> getMacSize
    byte[] getAssociatedText() -> getAssociatedText
    byte[] getNonce() -> getNonce
org.bouncycastle.crypto.params.AsymmetricKeyParameter -> org.bouncycastle.crypto.params.AsymmetricKeyParameter:
    boolean privateKey -> privateKey
    boolean isPrivate() -> isPrivate
org.bouncycastle.crypto.params.CCMParameters -> org.bouncycastle.crypto.params.CCMParameters:
org.bouncycastle.crypto.params.CramerShoupKeyGenerationParameters -> org.bouncycastle.crypto.params.CramerShoupKeyGenerationParameters:
    org.bouncycastle.crypto.params.CramerShoupParameters params -> params
    org.bouncycastle.crypto.params.CramerShoupParameters getParameters() -> getParameters
    int getStrength(org.bouncycastle.crypto.params.CramerShoupParameters) -> getStrength
org.bouncycastle.crypto.params.CramerShoupKeyParameters -> org.bouncycastle.crypto.params.CramerShoupKeyParameters:
    org.bouncycastle.crypto.params.CramerShoupParameters params -> params
    org.bouncycastle.crypto.params.CramerShoupParameters getParameters() -> getParameters
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
org.bouncycastle.crypto.params.CramerShoupParameters -> org.bouncycastle.crypto.params.CramerShoupParameters:
    java.math.BigInteger p -> p
    java.math.BigInteger g1 -> g1
    java.math.BigInteger g2 -> g2
    org.bouncycastle.crypto.Digest H -> H
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.math.BigInteger getG1() -> getG1
    java.math.BigInteger getG2() -> getG2
    java.math.BigInteger getP() -> getP
    org.bouncycastle.crypto.Digest getH() -> getH
org.bouncycastle.crypto.params.CramerShoupPrivateKeyParameters -> org.bouncycastle.crypto.params.CramerShoupPrivateKeyParameters:
    java.math.BigInteger x1 -> x1
    java.math.BigInteger x2 -> x2
    java.math.BigInteger y1 -> y1
    java.math.BigInteger y2 -> y2
    java.math.BigInteger z -> z
    org.bouncycastle.crypto.params.CramerShoupPublicKeyParameters pk -> pk
    java.math.BigInteger getX1() -> getX1
    java.math.BigInteger getX2() -> getX2
    java.math.BigInteger getY1() -> getY1
    java.math.BigInteger getY2() -> getY2
    java.math.BigInteger getZ() -> getZ
    void setPk(org.bouncycastle.crypto.params.CramerShoupPublicKeyParameters) -> setPk
    org.bouncycastle.crypto.params.CramerShoupPublicKeyParameters getPk() -> getPk
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
org.bouncycastle.crypto.params.CramerShoupPublicKeyParameters -> org.bouncycastle.crypto.params.CramerShoupPublicKeyParameters:
    java.math.BigInteger c -> c
    java.math.BigInteger d -> d
    java.math.BigInteger h -> h
    java.math.BigInteger getC() -> getC
    java.math.BigInteger getD() -> getD
    java.math.BigInteger getH() -> getH
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
org.bouncycastle.crypto.params.DESParameters -> org.bouncycastle.crypto.params.DESParameters:
    int DES_KEY_LENGTH -> DES_KEY_LENGTH
    int N_DES_WEAK_KEYS -> N_DES_WEAK_KEYS
    byte[] DES_weak_keys -> DES_weak_keys
    boolean isWeakKey(byte[],int) -> isWeakKey
    void setOddParity(byte[]) -> setOddParity
org.bouncycastle.crypto.params.DESedeParameters -> org.bouncycastle.crypto.params.DESedeParameters:
    int DES_EDE_KEY_LENGTH -> DES_EDE_KEY_LENGTH
    boolean isWeakKey(byte[],int,int) -> isWeakKey
    boolean isWeakKey(byte[],int) -> isWeakKey
org.bouncycastle.crypto.params.DHKeyGenerationParameters -> org.bouncycastle.crypto.params.DHKeyGenerationParameters:
    org.bouncycastle.crypto.params.DHParameters params -> params
    org.bouncycastle.crypto.params.DHParameters getParameters() -> getParameters
    int getStrength(org.bouncycastle.crypto.params.DHParameters) -> getStrength
org.bouncycastle.crypto.params.DHKeyParameters -> org.bouncycastle.crypto.params.DHKeyParameters:
    org.bouncycastle.crypto.params.DHParameters params -> params
    org.bouncycastle.crypto.params.DHParameters getParameters() -> getParameters
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
org.bouncycastle.crypto.params.DHParameters -> org.bouncycastle.crypto.params.DHParameters:
    int DEFAULT_MINIMUM_LENGTH -> DEFAULT_MINIMUM_LENGTH
    java.math.BigInteger g -> g
    java.math.BigInteger p -> p
    java.math.BigInteger q -> q
    java.math.BigInteger j -> j
    int m -> m
    int l -> l
    org.bouncycastle.crypto.params.DHValidationParameters validation -> validation
    int getDefaultMParam(int) -> getDefaultMParam
    java.math.BigInteger getP() -> getP
    java.math.BigInteger getG() -> getG
    java.math.BigInteger getQ() -> getQ
    java.math.BigInteger getJ() -> getJ
    int getM() -> getM
    int getL() -> getL
    org.bouncycastle.crypto.params.DHValidationParameters getValidationParameters() -> getValidationParameters
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
org.bouncycastle.crypto.params.DHPrivateKeyParameters -> org.bouncycastle.crypto.params.DHPrivateKeyParameters:
    java.math.BigInteger x -> x
    java.math.BigInteger getX() -> getX
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
org.bouncycastle.crypto.params.DHPublicKeyParameters -> org.bouncycastle.crypto.params.DHPublicKeyParameters:
    java.math.BigInteger y -> y
    java.math.BigInteger getY() -> getY
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
org.bouncycastle.crypto.params.DHValidationParameters -> org.bouncycastle.crypto.params.DHValidationParameters:
    byte[] seed -> seed
    int counter -> counter
    int getCounter() -> getCounter
    byte[] getSeed() -> getSeed
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
org.bouncycastle.crypto.params.DSAKeyGenerationParameters -> org.bouncycastle.crypto.params.DSAKeyGenerationParameters:
    org.bouncycastle.crypto.params.DSAParameters params -> params
    org.bouncycastle.crypto.params.DSAParameters getParameters() -> getParameters
org.bouncycastle.crypto.params.DSAKeyParameters -> org.bouncycastle.crypto.params.DSAKeyParameters:
    org.bouncycastle.crypto.params.DSAParameters params -> params
    org.bouncycastle.crypto.params.DSAParameters getParameters() -> getParameters
org.bouncycastle.crypto.params.DSAParameterGenerationParameters -> org.bouncycastle.crypto.params.DSAParameterGenerationParameters:
    int DIGITAL_SIGNATURE_USAGE -> DIGITAL_SIGNATURE_USAGE
    int KEY_ESTABLISHMENT_USAGE -> KEY_ESTABLISHMENT_USAGE
    int l -> l
    int n -> n
    int usageIndex -> usageIndex
    int certainty -> certainty
    java.security.SecureRandom random -> random
    int getL() -> getL
    int getN() -> getN
    int getCertainty() -> getCertainty
    java.security.SecureRandom getRandom() -> getRandom
    int getUsageIndex() -> getUsageIndex
org.bouncycastle.crypto.params.DSAParameters -> org.bouncycastle.crypto.params.DSAParameters:
    java.math.BigInteger g -> g
    java.math.BigInteger q -> q
    java.math.BigInteger p -> p
    org.bouncycastle.crypto.params.DSAValidationParameters validation -> validation
    java.math.BigInteger getP() -> getP
    java.math.BigInteger getQ() -> getQ
    java.math.BigInteger getG() -> getG
    org.bouncycastle.crypto.params.DSAValidationParameters getValidationParameters() -> getValidationParameters
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
org.bouncycastle.crypto.params.DSAPrivateKeyParameters -> org.bouncycastle.crypto.params.DSAPrivateKeyParameters:
    java.math.BigInteger x -> x
    java.math.BigInteger getX() -> getX
org.bouncycastle.crypto.params.DSAPublicKeyParameters -> org.bouncycastle.crypto.params.DSAPublicKeyParameters:
    java.math.BigInteger y -> y
    java.math.BigInteger getY() -> getY
org.bouncycastle.crypto.params.DSAValidationParameters -> org.bouncycastle.crypto.params.DSAValidationParameters:
    int usageIndex -> usageIndex
    byte[] seed -> seed
    int counter -> counter
    int getCounter() -> getCounter
    byte[] getSeed() -> getSeed
    int getUsageIndex() -> getUsageIndex
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
org.bouncycastle.crypto.params.ECDomainParameters -> org.bouncycastle.crypto.params.ECDomainParameters:
    org.bouncycastle.math.ec.ECCurve curve -> curve
    byte[] seed -> seed
    org.bouncycastle.math.ec.ECPoint G -> G
    java.math.BigInteger n -> n
    java.math.BigInteger h -> h
    org.bouncycastle.math.ec.ECCurve getCurve() -> getCurve
    org.bouncycastle.math.ec.ECPoint getG() -> getG
    java.math.BigInteger getN() -> getN
    java.math.BigInteger getH() -> getH
    byte[] getSeed() -> getSeed
org.bouncycastle.crypto.params.ECKeyGenerationParameters -> org.bouncycastle.crypto.params.ECKeyGenerationParameters:
    org.bouncycastle.crypto.params.ECDomainParameters domainParams -> domainParams
    org.bouncycastle.crypto.params.ECDomainParameters getDomainParameters() -> getDomainParameters
org.bouncycastle.crypto.params.ECKeyParameters -> org.bouncycastle.crypto.params.ECKeyParameters:
    org.bouncycastle.crypto.params.ECDomainParameters params -> params
    org.bouncycastle.crypto.params.ECDomainParameters getParameters() -> getParameters
org.bouncycastle.crypto.params.ECNamedDomainParameters -> org.bouncycastle.crypto.params.ECNamedDomainParameters:
    org.bouncycastle.asn1.ASN1ObjectIdentifier name -> name
    org.bouncycastle.asn1.ASN1ObjectIdentifier getName() -> getName
org.bouncycastle.crypto.params.ECPrivateKeyParameters -> org.bouncycastle.crypto.params.ECPrivateKeyParameters:
    java.math.BigInteger d -> d
    java.math.BigInteger getD() -> getD
org.bouncycastle.crypto.params.ECPublicKeyParameters -> org.bouncycastle.crypto.params.ECPublicKeyParameters:
    org.bouncycastle.math.ec.ECPoint Q -> Q
    org.bouncycastle.math.ec.ECPoint getQ() -> getQ
org.bouncycastle.crypto.params.ElGamalKeyGenerationParameters -> org.bouncycastle.crypto.params.ElGamalKeyGenerationParameters:
    org.bouncycastle.crypto.params.ElGamalParameters params -> params
    org.bouncycastle.crypto.params.ElGamalParameters getParameters() -> getParameters
    int getStrength(org.bouncycastle.crypto.params.ElGamalParameters) -> getStrength
org.bouncycastle.crypto.params.ElGamalKeyParameters -> org.bouncycastle.crypto.params.ElGamalKeyParameters:
    org.bouncycastle.crypto.params.ElGamalParameters params -> params
    org.bouncycastle.crypto.params.ElGamalParameters getParameters() -> getParameters
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
org.bouncycastle.crypto.params.ElGamalParameters -> org.bouncycastle.crypto.params.ElGamalParameters:
    java.math.BigInteger g -> g
    java.math.BigInteger p -> p
    int l -> l
    java.math.BigInteger getP() -> getP
    java.math.BigInteger getG() -> getG
    int getL() -> getL
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
org.bouncycastle.crypto.params.ElGamalPrivateKeyParameters -> org.bouncycastle.crypto.params.ElGamalPrivateKeyParameters:
    java.math.BigInteger x -> x
    java.math.BigInteger getX() -> getX
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
org.bouncycastle.crypto.params.ElGamalPublicKeyParameters -> org.bouncycastle.crypto.params.ElGamalPublicKeyParameters:
    java.math.BigInteger y -> y
    java.math.BigInteger getY() -> getY
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
org.bouncycastle.crypto.params.GOST3410KeyGenerationParameters -> org.bouncycastle.crypto.params.GOST3410KeyGenerationParameters:
    org.bouncycastle.crypto.params.GOST3410Parameters params -> params
    org.bouncycastle.crypto.params.GOST3410Parameters getParameters() -> getParameters
org.bouncycastle.crypto.params.GOST3410KeyParameters -> org.bouncycastle.crypto.params.GOST3410KeyParameters:
    org.bouncycastle.crypto.params.GOST3410Parameters params -> params
    org.bouncycastle.crypto.params.GOST3410Parameters getParameters() -> getParameters
org.bouncycastle.crypto.params.GOST3410Parameters -> org.bouncycastle.crypto.params.GOST3410Parameters:
    java.math.BigInteger p -> p
    java.math.BigInteger q -> q
    java.math.BigInteger a -> a
    org.bouncycastle.crypto.params.GOST3410ValidationParameters validation -> validation
    java.math.BigInteger getP() -> getP
    java.math.BigInteger getQ() -> getQ
    java.math.BigInteger getA() -> getA
    org.bouncycastle.crypto.params.GOST3410ValidationParameters getValidationParameters() -> getValidationParameters
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
org.bouncycastle.crypto.params.GOST3410PrivateKeyParameters -> org.bouncycastle.crypto.params.GOST3410PrivateKeyParameters:
    java.math.BigInteger x -> x
    java.math.BigInteger getX() -> getX
org.bouncycastle.crypto.params.GOST3410PublicKeyParameters -> org.bouncycastle.crypto.params.GOST3410PublicKeyParameters:
    java.math.BigInteger y -> y
    java.math.BigInteger getY() -> getY
org.bouncycastle.crypto.params.GOST3410ValidationParameters -> org.bouncycastle.crypto.params.GOST3410ValidationParameters:
    int x0 -> x0
    int c -> c
    long x0L -> x0L
    long cL -> cL
    int getC() -> getC
    int getX0() -> getX0
    long getCL() -> getCL
    long getX0L() -> getX0L
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
org.bouncycastle.crypto.params.HKDFParameters -> org.bouncycastle.crypto.params.HKDFParameters:
    byte[] ikm -> ikm
    boolean skipExpand -> skipExpand
    byte[] salt -> salt
    byte[] info -> info
    org.bouncycastle.crypto.params.HKDFParameters skipExtractParameters(byte[],byte[]) -> skipExtractParameters
    org.bouncycastle.crypto.params.HKDFParameters defaultParameters(byte[]) -> defaultParameters
    byte[] getIKM() -> getIKM
    boolean skipExtract() -> skipExtract
    byte[] getSalt() -> getSalt
    byte[] getInfo() -> getInfo
org.bouncycastle.crypto.params.IESParameters -> org.bouncycastle.crypto.params.IESParameters:
    byte[] derivation -> derivation
    byte[] encoding -> encoding
    int macKeySize -> macKeySize
    byte[] getDerivationV() -> getDerivationV
    byte[] getEncodingV() -> getEncodingV
    int getMacKeySize() -> getMacKeySize
org.bouncycastle.crypto.params.IESWithCipherParameters -> org.bouncycastle.crypto.params.IESWithCipherParameters:
    int cipherKeySize -> cipherKeySize
    int getCipherKeySize() -> getCipherKeySize
org.bouncycastle.crypto.params.ISO18033KDFParameters -> org.bouncycastle.crypto.params.ISO18033KDFParameters:
    byte[] seed -> seed
    byte[] getSeed() -> getSeed
org.bouncycastle.crypto.params.KDFCounterParameters -> org.bouncycastle.crypto.params.KDFCounterParameters:
    byte[] ki -> ki
    byte[] fixedInputDataCounterPrefix -> fixedInputDataCounterPrefix
    byte[] fixedInputDataCounterSuffix -> fixedInputDataCounterSuffix
    int r -> r
    byte[] getKI() -> getKI
    byte[] getFixedInputData() -> getFixedInputData
    byte[] getFixedInputDataCounterPrefix() -> getFixedInputDataCounterPrefix
    byte[] getFixedInputDataCounterSuffix() -> getFixedInputDataCounterSuffix
    int getR() -> getR
org.bouncycastle.crypto.params.KDFDoublePipelineIterationParameters -> org.bouncycastle.crypto.params.KDFDoublePipelineIterationParameters:
    int UNUSED_R -> UNUSED_R
    byte[] ki -> ki
    boolean useCounter -> useCounter
    int r -> r
    byte[] fixedInputData -> fixedInputData
    org.bouncycastle.crypto.params.KDFDoublePipelineIterationParameters createWithCounter(byte[],byte[],int) -> createWithCounter
    org.bouncycastle.crypto.params.KDFDoublePipelineIterationParameters createWithoutCounter(byte[],byte[]) -> createWithoutCounter
    byte[] getKI() -> getKI
    boolean useCounter() -> useCounter
    int getR() -> getR
    byte[] getFixedInputData() -> getFixedInputData
org.bouncycastle.crypto.params.KDFFeedbackParameters -> org.bouncycastle.crypto.params.KDFFeedbackParameters:
    int UNUSED_R -> UNUSED_R
    byte[] ki -> ki
    byte[] iv -> iv
    boolean useCounter -> useCounter
    int r -> r
    byte[] fixedInputData -> fixedInputData
    org.bouncycastle.crypto.params.KDFFeedbackParameters createWithCounter(byte[],byte[],byte[],int) -> createWithCounter
    org.bouncycastle.crypto.params.KDFFeedbackParameters createWithoutCounter(byte[],byte[],byte[]) -> createWithoutCounter
    byte[] getKI() -> getKI
    byte[] getIV() -> getIV
    boolean useCounter() -> useCounter
    int getR() -> getR
    byte[] getFixedInputData() -> getFixedInputData
org.bouncycastle.crypto.params.KDFParameters -> org.bouncycastle.crypto.params.KDFParameters:
    byte[] iv -> iv
    byte[] shared -> shared
    byte[] getSharedSecret() -> getSharedSecret
    byte[] getIV() -> getIV
org.bouncycastle.crypto.params.KeyParameter -> org.bouncycastle.crypto.params.KeyParameter:
    byte[] key -> key
    byte[] getKey() -> getKey
org.bouncycastle.crypto.params.MGFParameters -> org.bouncycastle.crypto.params.MGFParameters:
    byte[] seed -> seed
    byte[] getSeed() -> getSeed
org.bouncycastle.crypto.params.MQVPrivateParameters -> org.bouncycastle.crypto.params.MQVPrivateParameters:
    org.bouncycastle.crypto.params.ECPrivateKeyParameters staticPrivateKey -> staticPrivateKey
    org.bouncycastle.crypto.params.ECPrivateKeyParameters ephemeralPrivateKey -> ephemeralPrivateKey
    org.bouncycastle.crypto.params.ECPublicKeyParameters ephemeralPublicKey -> ephemeralPublicKey
    org.bouncycastle.crypto.params.ECPrivateKeyParameters getStaticPrivateKey() -> getStaticPrivateKey
    org.bouncycastle.crypto.params.ECPrivateKeyParameters getEphemeralPrivateKey() -> getEphemeralPrivateKey
    org.bouncycastle.crypto.params.ECPublicKeyParameters getEphemeralPublicKey() -> getEphemeralPublicKey
org.bouncycastle.crypto.params.MQVPublicParameters -> org.bouncycastle.crypto.params.MQVPublicParameters:
    org.bouncycastle.crypto.params.ECPublicKeyParameters staticPublicKey -> staticPublicKey
    org.bouncycastle.crypto.params.ECPublicKeyParameters ephemeralPublicKey -> ephemeralPublicKey
    org.bouncycastle.crypto.params.ECPublicKeyParameters getStaticPublicKey() -> getStaticPublicKey
    org.bouncycastle.crypto.params.ECPublicKeyParameters getEphemeralPublicKey() -> getEphemeralPublicKey
org.bouncycastle.crypto.params.NaccacheSternKeyGenerationParameters -> org.bouncycastle.crypto.params.NaccacheSternKeyGenerationParameters:
    int certainty -> certainty
    int cntSmallPrimes -> cntSmallPrimes
    boolean debug -> debug
    int getCertainty() -> getCertainty
    int getCntSmallPrimes() -> getCntSmallPrimes
    boolean isDebug() -> isDebug
org.bouncycastle.crypto.params.NaccacheSternKeyParameters -> org.bouncycastle.crypto.params.NaccacheSternKeyParameters:
    java.math.BigInteger g -> g
    java.math.BigInteger n -> n
    int lowerSigmaBound -> lowerSigmaBound
    java.math.BigInteger getG() -> getG
    int getLowerSigmaBound() -> getLowerSigmaBound
    java.math.BigInteger getModulus() -> getModulus
org.bouncycastle.crypto.params.NaccacheSternPrivateKeyParameters -> org.bouncycastle.crypto.params.NaccacheSternPrivateKeyParameters:
    java.math.BigInteger phi_n -> phi_n
    java.util.Vector smallPrimes -> smallPrimes
    java.math.BigInteger getPhi_n() -> getPhi_n
    java.util.Vector getSmallPrimes() -> getSmallPrimes
org.bouncycastle.crypto.params.ParametersWithIV -> org.bouncycastle.crypto.params.ParametersWithIV:
    byte[] iv -> iv
    org.bouncycastle.crypto.CipherParameters parameters -> parameters
    byte[] getIV() -> getIV
    org.bouncycastle.crypto.CipherParameters getParameters() -> getParameters
org.bouncycastle.crypto.params.ParametersWithRandom -> org.bouncycastle.crypto.params.ParametersWithRandom:
    java.security.SecureRandom random -> random
    org.bouncycastle.crypto.CipherParameters parameters -> parameters
    java.security.SecureRandom getRandom() -> getRandom
    org.bouncycastle.crypto.CipherParameters getParameters() -> getParameters
org.bouncycastle.crypto.params.ParametersWithSBox -> org.bouncycastle.crypto.params.ParametersWithSBox:
    org.bouncycastle.crypto.CipherParameters parameters -> parameters
    byte[] sBox -> sBox
    byte[] getSBox() -> getSBox
    org.bouncycastle.crypto.CipherParameters getParameters() -> getParameters
org.bouncycastle.crypto.params.ParametersWithSalt -> org.bouncycastle.crypto.params.ParametersWithSalt:
    byte[] salt -> salt
    org.bouncycastle.crypto.CipherParameters parameters -> parameters
    byte[] getSalt() -> getSalt
    org.bouncycastle.crypto.CipherParameters getParameters() -> getParameters
org.bouncycastle.crypto.params.RC2Parameters -> org.bouncycastle.crypto.params.RC2Parameters:
    byte[] key -> key
    int bits -> bits
    byte[] getKey() -> getKey
    int getEffectiveKeyBits() -> getEffectiveKeyBits
org.bouncycastle.crypto.params.RC5Parameters -> org.bouncycastle.crypto.params.RC5Parameters:
    byte[] key -> key
    int rounds -> rounds
    byte[] getKey() -> getKey
    int getRounds() -> getRounds
org.bouncycastle.crypto.params.RSABlindingParameters -> org.bouncycastle.crypto.params.RSABlindingParameters:
    org.bouncycastle.crypto.params.RSAKeyParameters publicKey -> publicKey
    java.math.BigInteger blindingFactor -> blindingFactor
    org.bouncycastle.crypto.params.RSAKeyParameters getPublicKey() -> getPublicKey
    java.math.BigInteger getBlindingFactor() -> getBlindingFactor
org.bouncycastle.crypto.params.RSAKeyGenerationParameters -> org.bouncycastle.crypto.params.RSAKeyGenerationParameters:
    java.math.BigInteger publicExponent -> publicExponent
    int certainty -> certainty
    java.math.BigInteger getPublicExponent() -> getPublicExponent
    int getCertainty() -> getCertainty
org.bouncycastle.crypto.params.RSAKeyParameters -> org.bouncycastle.crypto.params.RSAKeyParameters:
    java.math.BigInteger modulus -> modulus
    java.math.BigInteger exponent -> exponent
    java.math.BigInteger getModulus() -> getModulus
    java.math.BigInteger getExponent() -> getExponent
org.bouncycastle.crypto.params.RSAPrivateCrtKeyParameters -> org.bouncycastle.crypto.params.RSAPrivateCrtKeyParameters:
    java.math.BigInteger e -> e
    java.math.BigInteger p -> p
    java.math.BigInteger q -> q
    java.math.BigInteger dP -> dP
    java.math.BigInteger dQ -> dQ
    java.math.BigInteger qInv -> qInv
    java.math.BigInteger getPublicExponent() -> getPublicExponent
    java.math.BigInteger getP() -> getP
    java.math.BigInteger getQ() -> getQ
    java.math.BigInteger getDP() -> getDP
    java.math.BigInteger getDQ() -> getDQ
    java.math.BigInteger getQInv() -> getQInv
org.bouncycastle.crypto.params.SkeinParameters -> org.bouncycastle.crypto.params.SkeinParameters:
    int PARAM_TYPE_KEY -> PARAM_TYPE_KEY
    int PARAM_TYPE_CONFIG -> PARAM_TYPE_CONFIG
    int PARAM_TYPE_PERSONALISATION -> PARAM_TYPE_PERSONALISATION
    int PARAM_TYPE_PUBLIC_KEY -> PARAM_TYPE_PUBLIC_KEY
    int PARAM_TYPE_KEY_IDENTIFIER -> PARAM_TYPE_KEY_IDENTIFIER
    int PARAM_TYPE_NONCE -> PARAM_TYPE_NONCE
    int PARAM_TYPE_MESSAGE -> PARAM_TYPE_MESSAGE
    int PARAM_TYPE_OUTPUT -> PARAM_TYPE_OUTPUT
    java.util.Hashtable parameters -> parameters
    java.util.Hashtable getParameters() -> getParameters
    byte[] getKey() -> getKey
    byte[] getPersonalisation() -> getPersonalisation
    byte[] getPublicKey() -> getPublicKey
    byte[] getKeyIdentifier() -> getKeyIdentifier
    byte[] getNonce() -> getNonce
    java.util.Hashtable access$000(org.bouncycastle.crypto.params.SkeinParameters) -> access$000
org.bouncycastle.crypto.params.SkeinParameters$1 -> org.bouncycastle.crypto.params.SkeinParameters$1:
org.bouncycastle.crypto.params.SkeinParameters$Builder -> org.bouncycastle.crypto.params.SkeinParameters$Builder:
    java.util.Hashtable parameters -> parameters
    org.bouncycastle.crypto.params.SkeinParameters$Builder set(int,byte[]) -> set
    org.bouncycastle.crypto.params.SkeinParameters$Builder setKey(byte[]) -> setKey
    org.bouncycastle.crypto.params.SkeinParameters$Builder setPersonalisation(byte[]) -> setPersonalisation
    org.bouncycastle.crypto.params.SkeinParameters$Builder setPersonalisation(java.util.Date,java.lang.String,java.lang.String) -> setPersonalisation
    org.bouncycastle.crypto.params.SkeinParameters$Builder setPersonalisation(java.util.Date,java.util.Locale,java.lang.String,java.lang.String) -> setPersonalisation
    org.bouncycastle.crypto.params.SkeinParameters$Builder setPublicKey(byte[]) -> setPublicKey
    org.bouncycastle.crypto.params.SkeinParameters$Builder setKeyIdentifier(byte[]) -> setKeyIdentifier
    org.bouncycastle.crypto.params.SkeinParameters$Builder setNonce(byte[]) -> setNonce
    org.bouncycastle.crypto.params.SkeinParameters build() -> build
org.bouncycastle.crypto.params.TweakableBlockCipherParameters -> org.bouncycastle.crypto.params.TweakableBlockCipherParameters:
    byte[] tweak -> tweak
    org.bouncycastle.crypto.params.KeyParameter key -> key
    org.bouncycastle.crypto.params.KeyParameter getKey() -> getKey
    byte[] getTweak() -> getTweak
org.bouncycastle.crypto.parsers.DHIESPublicKeyParser -> org.bouncycastle.crypto.parsers.DHIESPublicKeyParser:
    org.bouncycastle.crypto.params.DHParameters dhParams -> dhParams
    org.bouncycastle.crypto.params.AsymmetricKeyParameter readKey(java.io.InputStream) -> readKey
org.bouncycastle.crypto.parsers.ECIESPublicKeyParser -> org.bouncycastle.crypto.parsers.ECIESPublicKeyParser:
    org.bouncycastle.crypto.params.ECDomainParameters ecParams -> ecParams
    org.bouncycastle.crypto.params.AsymmetricKeyParameter readKey(java.io.InputStream) -> readKey
org.bouncycastle.crypto.prng.BasicEntropySourceProvider -> org.bouncycastle.crypto.prng.BasicEntropySourceProvider:
    java.security.SecureRandom _sr -> _sr
    boolean _predictionResistant -> _predictionResistant
    org.bouncycastle.crypto.prng.EntropySource get(int) -> get
    boolean access$000(org.bouncycastle.crypto.prng.BasicEntropySourceProvider) -> access$000
    java.security.SecureRandom access$100(org.bouncycastle.crypto.prng.BasicEntropySourceProvider) -> access$100
org.bouncycastle.crypto.prng.BasicEntropySourceProvider$1 -> org.bouncycastle.crypto.prng.BasicEntropySourceProvider$1:
    int val$bitsRequired -> val$bitsRequired
    org.bouncycastle.crypto.prng.BasicEntropySourceProvider this$0 -> this$0
    boolean isPredictionResistant() -> isPredictionResistant
    byte[] getEntropy() -> getEntropy
    int entropySize() -> entropySize
org.bouncycastle.crypto.prng.DRBGProvider -> org.bouncycastle.crypto.prng.DRBGProvider:
    org.bouncycastle.crypto.prng.drbg.SP80090DRBG get(org.bouncycastle.crypto.prng.EntropySource) -> get
org.bouncycastle.crypto.prng.DigestRandomGenerator -> org.bouncycastle.crypto.prng.DigestRandomGenerator:
    long CYCLE_COUNT -> CYCLE_COUNT
    long stateCounter -> stateCounter
    long seedCounter -> seedCounter
    org.bouncycastle.crypto.Digest digest -> digest
    byte[] state -> state
    byte[] seed -> seed
    void addSeedMaterial(byte[]) -> addSeedMaterial
    void addSeedMaterial(long) -> addSeedMaterial
    void nextBytes(byte[]) -> nextBytes
    void nextBytes(byte[],int,int) -> nextBytes
    void cycleSeed() -> cycleSeed
    void generateState() -> generateState
    void digestAddCounter(long) -> digestAddCounter
    void digestUpdate(byte[]) -> digestUpdate
    void digestDoFinal(byte[]) -> digestDoFinal
org.bouncycastle.crypto.prng.EntropySource -> org.bouncycastle.crypto.prng.EntropySource:
    boolean isPredictionResistant() -> isPredictionResistant
    byte[] getEntropy() -> getEntropy
    int entropySize() -> entropySize
org.bouncycastle.crypto.prng.EntropySourceProvider -> org.bouncycastle.crypto.prng.EntropySourceProvider:
    org.bouncycastle.crypto.prng.EntropySource get(int) -> get
org.bouncycastle.crypto.prng.FixedSecureRandom -> org.bouncycastle.crypto.prng.FixedSecureRandom:
    byte[] _data -> _data
    int _index -> _index
    int _intPad -> _intPad
    void nextBytes(byte[]) -> nextBytes
    byte[] generateSeed(int) -> generateSeed
    int nextInt() -> nextInt
    long nextLong() -> nextLong
    boolean isExhausted() -> isExhausted
    int nextValue() -> nextValue
org.bouncycastle.crypto.prng.RandomGenerator -> org.bouncycastle.crypto.prng.RandomGenerator:
    void addSeedMaterial(byte[]) -> addSeedMaterial
    void addSeedMaterial(long) -> addSeedMaterial
    void nextBytes(byte[]) -> nextBytes
    void nextBytes(byte[],int,int) -> nextBytes
org.bouncycastle.crypto.prng.ReversedWindowGenerator -> org.bouncycastle.crypto.prng.ReversedWindowGenerator:
    org.bouncycastle.crypto.prng.RandomGenerator generator -> generator
    byte[] window -> window
    int windowCount -> windowCount
    void addSeedMaterial(byte[]) -> addSeedMaterial
    void addSeedMaterial(long) -> addSeedMaterial
    void nextBytes(byte[]) -> nextBytes
    void nextBytes(byte[],int,int) -> nextBytes
    void doNextBytes(byte[],int,int) -> doNextBytes
org.bouncycastle.crypto.prng.SP800SecureRandom -> org.bouncycastle.crypto.prng.SP800SecureRandom:
    org.bouncycastle.crypto.prng.DRBGProvider drbgProvider -> drbgProvider
    boolean predictionResistant -> predictionResistant
    java.security.SecureRandom randomSource -> randomSource
    org.bouncycastle.crypto.prng.EntropySource entropySource -> entropySource
    org.bouncycastle.crypto.prng.drbg.SP80090DRBG drbg -> drbg
    void setSeed(byte[]) -> setSeed
    void setSeed(long) -> setSeed
    void nextBytes(byte[]) -> nextBytes
    byte[] generateSeed(int) -> generateSeed
org.bouncycastle.crypto.prng.SP800SecureRandomBuilder -> org.bouncycastle.crypto.prng.SP800SecureRandomBuilder:
    java.security.SecureRandom random -> random
    org.bouncycastle.crypto.prng.EntropySourceProvider entropySourceProvider -> entropySourceProvider
    byte[] personalizationString -> personalizationString
    int securityStrength -> securityStrength
    int entropyBitsRequired -> entropyBitsRequired
    org.bouncycastle.crypto.prng.SP800SecureRandomBuilder setPersonalizationString(byte[]) -> setPersonalizationString
    org.bouncycastle.crypto.prng.SP800SecureRandomBuilder setSecurityStrength(int) -> setSecurityStrength
    org.bouncycastle.crypto.prng.SP800SecureRandomBuilder setEntropyBitsRequired(int) -> setEntropyBitsRequired
    org.bouncycastle.crypto.prng.SP800SecureRandom buildHash(org.bouncycastle.crypto.Digest,byte[],boolean) -> buildHash
    org.bouncycastle.crypto.prng.SP800SecureRandom buildCTR(org.bouncycastle.crypto.BlockCipher,int,byte[],boolean) -> buildCTR
    org.bouncycastle.crypto.prng.SP800SecureRandom buildHMAC(org.bouncycastle.crypto.Mac,byte[],boolean) -> buildHMAC
    org.bouncycastle.crypto.prng.SP800SecureRandom buildDualEC(org.bouncycastle.crypto.Digest,byte[],boolean) -> buildDualEC
    org.bouncycastle.crypto.prng.SP800SecureRandom buildDualEC(org.bouncycastle.crypto.prng.drbg.DualECPoints[],org.bouncycastle.crypto.Digest,byte[],boolean) -> buildDualEC
org.bouncycastle.crypto.prng.SP800SecureRandomBuilder$CTRDRBGProvider -> org.bouncycastle.crypto.prng.SP800SecureRandomBuilder$CTRDRBGProvider:
    org.bouncycastle.crypto.BlockCipher blockCipher -> blockCipher
    int keySizeInBits -> keySizeInBits
    byte[] nonce -> nonce
    byte[] personalizationString -> personalizationString
    int securityStrength -> securityStrength
    org.bouncycastle.crypto.prng.drbg.SP80090DRBG get(org.bouncycastle.crypto.prng.EntropySource) -> get
org.bouncycastle.crypto.prng.SP800SecureRandomBuilder$ConfigurableDualECDRBGProvider -> org.bouncycastle.crypto.prng.SP800SecureRandomBuilder$ConfigurableDualECDRBGProvider:
    org.bouncycastle.crypto.prng.drbg.DualECPoints[] pointSet -> pointSet
    org.bouncycastle.crypto.Digest digest -> digest
    byte[] nonce -> nonce
    byte[] personalizationString -> personalizationString
    int securityStrength -> securityStrength
    org.bouncycastle.crypto.prng.drbg.SP80090DRBG get(org.bouncycastle.crypto.prng.EntropySource) -> get
org.bouncycastle.crypto.prng.SP800SecureRandomBuilder$DualECDRBGProvider -> org.bouncycastle.crypto.prng.SP800SecureRandomBuilder$DualECDRBGProvider:
    org.bouncycastle.crypto.Digest digest -> digest
    byte[] nonce -> nonce
    byte[] personalizationString -> personalizationString
    int securityStrength -> securityStrength
    org.bouncycastle.crypto.prng.drbg.SP80090DRBG get(org.bouncycastle.crypto.prng.EntropySource) -> get
org.bouncycastle.crypto.prng.SP800SecureRandomBuilder$HMacDRBGProvider -> org.bouncycastle.crypto.prng.SP800SecureRandomBuilder$HMacDRBGProvider:
    org.bouncycastle.crypto.Mac hMac -> hMac
    byte[] nonce -> nonce
    byte[] personalizationString -> personalizationString
    int securityStrength -> securityStrength
    org.bouncycastle.crypto.prng.drbg.SP80090DRBG get(org.bouncycastle.crypto.prng.EntropySource) -> get
org.bouncycastle.crypto.prng.SP800SecureRandomBuilder$HashDRBGProvider -> org.bouncycastle.crypto.prng.SP800SecureRandomBuilder$HashDRBGProvider:
    org.bouncycastle.crypto.Digest digest -> digest
    byte[] nonce -> nonce
    byte[] personalizationString -> personalizationString
    int securityStrength -> securityStrength
    org.bouncycastle.crypto.prng.drbg.SP80090DRBG get(org.bouncycastle.crypto.prng.EntropySource) -> get
org.bouncycastle.crypto.prng.ThreadedSeedGenerator -> org.bouncycastle.crypto.prng.ThreadedSeedGenerator:
    byte[] generateSeed(int,boolean) -> generateSeed
org.bouncycastle.crypto.prng.ThreadedSeedGenerator$1 -> org.bouncycastle.crypto.prng.ThreadedSeedGenerator$1:
org.bouncycastle.crypto.prng.ThreadedSeedGenerator$SeedGenerator -> org.bouncycastle.crypto.prng.ThreadedSeedGenerator$SeedGenerator:
    int counter -> counter
    boolean stop -> stop
    org.bouncycastle.crypto.prng.ThreadedSeedGenerator this$0 -> this$0
    void run() -> run
    byte[] generateSeed(int,boolean) -> generateSeed
org.bouncycastle.crypto.prng.VMPCRandomGenerator -> org.bouncycastle.crypto.prng.VMPCRandomGenerator:
    byte n -> n
    byte[] P -> P
    byte s -> s
    void addSeedMaterial(byte[]) -> addSeedMaterial
    void addSeedMaterial(long) -> addSeedMaterial
    void nextBytes(byte[]) -> nextBytes
    void nextBytes(byte[],int,int) -> nextBytes
org.bouncycastle.crypto.prng.drbg.CTRSP800DRBG -> org.bouncycastle.crypto.prng.drbg.CTRSP800DRBG:
    long TDEA_RESEED_MAX -> TDEA_RESEED_MAX
    long AES_RESEED_MAX -> AES_RESEED_MAX
    int TDEA_MAX_BITS_REQUEST -> TDEA_MAX_BITS_REQUEST
    int AES_MAX_BITS_REQUEST -> AES_MAX_BITS_REQUEST
    org.bouncycastle.crypto.prng.EntropySource _entropySource -> _entropySource
    org.bouncycastle.crypto.BlockCipher _engine -> _engine
    int _keySizeInBits -> _keySizeInBits
    int _seedLength -> _seedLength
    byte[] _Key -> _Key
    byte[] _V -> _V
    long _reseedCounter -> _reseedCounter
    boolean _isTDEA -> _isTDEA
    byte[] K_BITS -> K_BITS
    void CTR_DRBG_Instantiate_algorithm(byte[],byte[],byte[]) -> CTR_DRBG_Instantiate_algorithm
    void CTR_DRBG_Update(byte[],byte[],byte[]) -> CTR_DRBG_Update
    void CTR_DRBG_Reseed_algorithm(org.bouncycastle.crypto.prng.EntropySource,byte[]) -> CTR_DRBG_Reseed_algorithm
    void XOR(byte[],byte[],byte[],int) -> XOR
    void addOneTo(byte[]) -> addOneTo
    byte[] Block_Cipher_df(byte[],int) -> Block_Cipher_df
    void BCC(byte[],byte[],byte[],byte[]) -> BCC
    void copyIntToByteArray(byte[],int,int) -> copyIntToByteArray
    int getBlockSize() -> getBlockSize
    int generate(byte[],byte[],boolean) -> generate
    void reseed(byte[]) -> reseed
    boolean isTDEA(org.bouncycastle.crypto.BlockCipher) -> isTDEA
    int getMaxSecurityStrength(org.bouncycastle.crypto.BlockCipher,int) -> getMaxSecurityStrength
    byte[] expandKey(byte[]) -> expandKey
    void padKey(byte[],int,byte[],int) -> padKey
org.bouncycastle.crypto.prng.drbg.DualECPoints -> org.bouncycastle.crypto.prng.drbg.DualECPoints:
    org.bouncycastle.math.ec.ECPoint p -> p
    org.bouncycastle.math.ec.ECPoint q -> q
    int securityStrength -> securityStrength
    int cofactor -> cofactor
    int getSeedLen() -> getSeedLen
    int getMaxOutlen() -> getMaxOutlen
    org.bouncycastle.math.ec.ECPoint getP() -> getP
    org.bouncycastle.math.ec.ECPoint getQ() -> getQ
    int getSecurityStrength() -> getSecurityStrength
    int getCofactor() -> getCofactor
    int log2(int) -> log2
org.bouncycastle.crypto.prng.drbg.DualECSP800DRBG -> org.bouncycastle.crypto.prng.drbg.DualECSP800DRBG:
    java.math.BigInteger p256_Px -> p256_Px
    java.math.BigInteger p256_Py -> p256_Py
    java.math.BigInteger p256_Qx -> p256_Qx
    java.math.BigInteger p256_Qy -> p256_Qy
    java.math.BigInteger p384_Px -> p384_Px
    java.math.BigInteger p384_Py -> p384_Py
    java.math.BigInteger p384_Qx -> p384_Qx
    java.math.BigInteger p384_Qy -> p384_Qy
    java.math.BigInteger p521_Px -> p521_Px
    java.math.BigInteger p521_Py -> p521_Py
    java.math.BigInteger p521_Qx -> p521_Qx
    java.math.BigInteger p521_Qy -> p521_Qy
    org.bouncycastle.crypto.prng.drbg.DualECPoints[] nistPoints -> nistPoints
    long RESEED_MAX -> RESEED_MAX
    int MAX_ADDITIONAL_INPUT -> MAX_ADDITIONAL_INPUT
    int MAX_ENTROPY_LENGTH -> MAX_ENTROPY_LENGTH
    int MAX_PERSONALIZATION_STRING -> MAX_PERSONALIZATION_STRING
    org.bouncycastle.crypto.Digest _digest -> _digest
    long _reseedCounter -> _reseedCounter
    org.bouncycastle.crypto.prng.EntropySource _entropySource -> _entropySource
    int _securityStrength -> _securityStrength
    int _seedlen -> _seedlen
    int _outlen -> _outlen
    org.bouncycastle.math.ec.ECCurve$Fp _curve -> _curve
    org.bouncycastle.math.ec.ECPoint _P -> _P
    org.bouncycastle.math.ec.ECPoint _Q -> _Q
    byte[] _s -> _s
    int _sLength -> _sLength
    org.bouncycastle.math.ec.ECMultiplier _fixedPointMultiplier -> _fixedPointMultiplier
    int getBlockSize() -> getBlockSize
    int generate(byte[],byte[],boolean) -> generate
    void reseed(byte[]) -> reseed
    byte[] xor(byte[],byte[]) -> xor
    byte[] pad8(byte[],int) -> pad8
    java.math.BigInteger getScalarMultipleXCoord(org.bouncycastle.math.ec.ECPoint,java.math.BigInteger) -> getScalarMultipleXCoord
org.bouncycastle.crypto.prng.drbg.HMacSP800DRBG -> org.bouncycastle.crypto.prng.drbg.HMacSP800DRBG:
    long RESEED_MAX -> RESEED_MAX
    int MAX_BITS_REQUEST -> MAX_BITS_REQUEST
    byte[] _K -> _K
    byte[] _V -> _V
    long _reseedCounter -> _reseedCounter
    org.bouncycastle.crypto.prng.EntropySource _entropySource -> _entropySource
    org.bouncycastle.crypto.Mac _hMac -> _hMac
    void hmac_DRBG_Update(byte[]) -> hmac_DRBG_Update
    void hmac_DRBG_Update_Func(byte[],byte) -> hmac_DRBG_Update_Func
    int getBlockSize() -> getBlockSize
    int generate(byte[],byte[],boolean) -> generate
    void reseed(byte[]) -> reseed
org.bouncycastle.crypto.prng.drbg.HashSP800DRBG -> org.bouncycastle.crypto.prng.drbg.HashSP800DRBG:
    byte[] ONE -> ONE
    long RESEED_MAX -> RESEED_MAX
    int MAX_BITS_REQUEST -> MAX_BITS_REQUEST
    java.util.Hashtable seedlens -> seedlens
    org.bouncycastle.crypto.Digest _digest -> _digest
    byte[] _V -> _V
    byte[] _C -> _C
    long _reseedCounter -> _reseedCounter
    org.bouncycastle.crypto.prng.EntropySource _entropySource -> _entropySource
    int _securityStrength -> _securityStrength
    int _seedLength -> _seedLength
    int getBlockSize() -> getBlockSize
    int generate(byte[],byte[],boolean) -> generate
    void addTo(byte[],byte[]) -> addTo
    void reseed(byte[]) -> reseed
    byte[] hash(byte[]) -> hash
    void doHash(byte[],byte[]) -> doHash
    byte[] hashgen(byte[],int) -> hashgen
org.bouncycastle.crypto.prng.drbg.SP80090DRBG -> org.bouncycastle.crypto.prng.drbg.SP80090DRBG:
    int getBlockSize() -> getBlockSize
    int generate(byte[],byte[],boolean) -> generate
    void reseed(byte[]) -> reseed
org.bouncycastle.crypto.prng.drbg.Utils -> org.bouncycastle.crypto.prng.drbg.Utils:
    java.util.Hashtable maxSecurityStrengths -> maxSecurityStrengths
    int getMaxSecurityStrength(org.bouncycastle.crypto.Digest) -> getMaxSecurityStrength
    int getMaxSecurityStrength(org.bouncycastle.crypto.Mac) -> getMaxSecurityStrength
    byte[] hash_df(org.bouncycastle.crypto.Digest,byte[],int) -> hash_df
    boolean isTooLarge(byte[],int) -> isTooLarge
org.bouncycastle.crypto.signers.DSADigestSigner -> org.bouncycastle.crypto.signers.DSADigestSigner:
    org.bouncycastle.crypto.Digest digest -> digest
    org.bouncycastle.crypto.DSA dsaSigner -> dsaSigner
    boolean forSigning -> forSigning
    void init(boolean,org.bouncycastle.crypto.CipherParameters) -> init
    void update(byte) -> update
    void update(byte[],int,int) -> update
    byte[] generateSignature() -> generateSignature
    boolean verifySignature(byte[]) -> verifySignature
    void reset() -> reset
    byte[] derEncode(java.math.BigInteger,java.math.BigInteger) -> derEncode
    java.math.BigInteger[] derDecode(byte[]) -> derDecode
org.bouncycastle.crypto.signers.DSAKCalculator -> org.bouncycastle.crypto.signers.DSAKCalculator:
    boolean isDeterministic() -> isDeterministic
    void init(java.math.BigInteger,java.security.SecureRandom) -> init
    void init(java.math.BigInteger,java.math.BigInteger,byte[]) -> init
    java.math.BigInteger nextK() -> nextK
org.bouncycastle.crypto.signers.DSASigner -> org.bouncycastle.crypto.signers.DSASigner:
    org.bouncycastle.crypto.signers.DSAKCalculator kCalculator -> kCalculator
    org.bouncycastle.crypto.params.DSAKeyParameters key -> key
    java.security.SecureRandom random -> random
    void init(boolean,org.bouncycastle.crypto.CipherParameters) -> init
    java.math.BigInteger[] generateSignature(byte[]) -> generateSignature
    boolean verifySignature(byte[],java.math.BigInteger,java.math.BigInteger) -> verifySignature
    java.math.BigInteger calculateE(java.math.BigInteger,byte[]) -> calculateE
    java.security.SecureRandom initSecureRandom(boolean,java.security.SecureRandom) -> initSecureRandom
org.bouncycastle.crypto.signers.DSTU4145Signer -> org.bouncycastle.crypto.signers.DSTU4145Signer:
    java.math.BigInteger ONE -> ONE
    org.bouncycastle.crypto.params.ECKeyParameters key -> key
    java.security.SecureRandom random -> random
    void init(boolean,org.bouncycastle.crypto.CipherParameters) -> init
    java.math.BigInteger[] generateSignature(byte[]) -> generateSignature
    boolean verifySignature(byte[],java.math.BigInteger,java.math.BigInteger) -> verifySignature
    org.bouncycastle.math.ec.ECMultiplier createBasePointMultiplier() -> createBasePointMultiplier
    java.math.BigInteger generateRandomInteger(java.math.BigInteger,java.security.SecureRandom) -> generateRandomInteger
    org.bouncycastle.math.ec.ECFieldElement hash2FieldElement(org.bouncycastle.math.ec.ECCurve,byte[]) -> hash2FieldElement
    java.math.BigInteger fieldElement2Integer(java.math.BigInteger,org.bouncycastle.math.ec.ECFieldElement) -> fieldElement2Integer
    java.math.BigInteger truncate(java.math.BigInteger,int) -> truncate
org.bouncycastle.crypto.signers.ECDSASigner -> org.bouncycastle.crypto.signers.ECDSASigner:
    org.bouncycastle.crypto.signers.DSAKCalculator kCalculator -> kCalculator
    org.bouncycastle.crypto.params.ECKeyParameters key -> key
    java.security.SecureRandom random -> random
    void init(boolean,org.bouncycastle.crypto.CipherParameters) -> init
    java.math.BigInteger[] generateSignature(byte[]) -> generateSignature
    boolean verifySignature(byte[],java.math.BigInteger,java.math.BigInteger) -> verifySignature
    java.math.BigInteger calculateE(java.math.BigInteger,byte[]) -> calculateE
    org.bouncycastle.math.ec.ECMultiplier createBasePointMultiplier() -> createBasePointMultiplier
    java.security.SecureRandom initSecureRandom(boolean,java.security.SecureRandom) -> initSecureRandom
org.bouncycastle.crypto.signers.ECGOST3410Signer -> org.bouncycastle.crypto.signers.ECGOST3410Signer:
    org.bouncycastle.crypto.params.ECKeyParameters key -> key
    java.security.SecureRandom random -> random
    void init(boolean,org.bouncycastle.crypto.CipherParameters) -> init
    java.math.BigInteger[] generateSignature(byte[]) -> generateSignature
    boolean verifySignature(byte[],java.math.BigInteger,java.math.BigInteger) -> verifySignature
    org.bouncycastle.math.ec.ECMultiplier createBasePointMultiplier() -> createBasePointMultiplier
org.bouncycastle.crypto.signers.ECNRSigner -> org.bouncycastle.crypto.signers.ECNRSigner:
    boolean forSigning -> forSigning
    org.bouncycastle.crypto.params.ECKeyParameters key -> key
    java.security.SecureRandom random -> random
    void init(boolean,org.bouncycastle.crypto.CipherParameters) -> init
    java.math.BigInteger[] generateSignature(byte[]) -> generateSignature
    boolean verifySignature(byte[],java.math.BigInteger,java.math.BigInteger) -> verifySignature
org.bouncycastle.crypto.signers.GOST3410Signer -> org.bouncycastle.crypto.signers.GOST3410Signer:
    org.bouncycastle.crypto.params.GOST3410KeyParameters key -> key
    java.security.SecureRandom random -> random
    void init(boolean,org.bouncycastle.crypto.CipherParameters) -> init
    java.math.BigInteger[] generateSignature(byte[]) -> generateSignature
    boolean verifySignature(byte[],java.math.BigInteger,java.math.BigInteger) -> verifySignature
org.bouncycastle.crypto.signers.GenericSigner -> org.bouncycastle.crypto.signers.GenericSigner:
    org.bouncycastle.crypto.AsymmetricBlockCipher engine -> engine
    org.bouncycastle.crypto.Digest digest -> digest
    boolean forSigning -> forSigning
    void init(boolean,org.bouncycastle.crypto.CipherParameters) -> init
    void update(byte) -> update
    void update(byte[],int,int) -> update
    byte[] generateSignature() -> generateSignature
    boolean verifySignature(byte[]) -> verifySignature
    void reset() -> reset
org.bouncycastle.crypto.signers.HMacDSAKCalculator -> org.bouncycastle.crypto.signers.HMacDSAKCalculator:
    java.math.BigInteger ZERO -> ZERO
    org.bouncycastle.crypto.macs.HMac hMac -> hMac
    byte[] K -> K
    byte[] V -> V
    java.math.BigInteger n -> n
    boolean isDeterministic() -> isDeterministic
    void init(java.math.BigInteger,java.security.SecureRandom) -> init
    void init(java.math.BigInteger,java.math.BigInteger,byte[]) -> init
    java.math.BigInteger nextK() -> nextK
    java.math.BigInteger bitsToInt(byte[]) -> bitsToInt
org.bouncycastle.crypto.signers.ISO9796d2PSSSigner -> org.bouncycastle.crypto.signers.ISO9796d2PSSSigner:
    int TRAILER_IMPLICIT -> TRAILER_IMPLICIT
    int TRAILER_RIPEMD160 -> TRAILER_RIPEMD160
    int TRAILER_RIPEMD128 -> TRAILER_RIPEMD128
    int TRAILER_SHA1 -> TRAILER_SHA1
    int TRAILER_SHA256 -> TRAILER_SHA256
    int TRAILER_SHA512 -> TRAILER_SHA512
    int TRAILER_SHA384 -> TRAILER_SHA384
    int TRAILER_WHIRLPOOL -> TRAILER_WHIRLPOOL
    java.util.Hashtable trailerMap -> trailerMap
    org.bouncycastle.crypto.Digest digest -> digest
    org.bouncycastle.crypto.AsymmetricBlockCipher cipher -> cipher
    java.security.SecureRandom random -> random
    byte[] standardSalt -> standardSalt
    int hLen -> hLen
    int trailer -> trailer
    int keyBits -> keyBits
    byte[] block -> block
    byte[] mBuf -> mBuf
    int messageLength -> messageLength
    int saltLength -> saltLength
    boolean fullMessage -> fullMessage
    byte[] recoveredMessage -> recoveredMessage
    byte[] preSig -> preSig
    byte[] preBlock -> preBlock
    int preMStart -> preMStart
    int preTLength -> preTLength
    void init(boolean,org.bouncycastle.crypto.CipherParameters) -> init
    boolean isSameAs(byte[],byte[]) -> isSameAs
    void clearBlock(byte[]) -> clearBlock
    void updateWithRecoveredMessage(byte[]) -> updateWithRecoveredMessage
    void update(byte) -> update
    void update(byte[],int,int) -> update
    void reset() -> reset
    byte[] generateSignature() -> generateSignature
    boolean verifySignature(byte[]) -> verifySignature
    boolean hasFullMessage() -> hasFullMessage
    byte[] getRecoveredMessage() -> getRecoveredMessage
    void ItoOSP(int,byte[]) -> ItoOSP
    void LtoOSP(long,byte[]) -> LtoOSP
    byte[] maskGeneratorFunction1(byte[],int,int,int) -> maskGeneratorFunction1
org.bouncycastle.crypto.signers.ISO9796d2Signer -> org.bouncycastle.crypto.signers.ISO9796d2Signer:
    int TRAILER_IMPLICIT -> TRAILER_IMPLICIT
    int TRAILER_RIPEMD160 -> TRAILER_RIPEMD160
    int TRAILER_RIPEMD128 -> TRAILER_RIPEMD128
    int TRAILER_SHA1 -> TRAILER_SHA1
    int TRAILER_SHA256 -> TRAILER_SHA256
    int TRAILER_SHA512 -> TRAILER_SHA512
    int TRAILER_SHA384 -> TRAILER_SHA384
    int TRAILER_WHIRLPOOL -> TRAILER_WHIRLPOOL
    java.util.Hashtable trailerMap -> trailerMap
    org.bouncycastle.crypto.Digest digest -> digest
    org.bouncycastle.crypto.AsymmetricBlockCipher cipher -> cipher
    int trailer -> trailer
    int keyBits -> keyBits
    byte[] block -> block
    byte[] mBuf -> mBuf
    int messageLength -> messageLength
    boolean fullMessage -> fullMessage
    byte[] recoveredMessage -> recoveredMessage
    byte[] preSig -> preSig
    byte[] preBlock -> preBlock
    void init(boolean,org.bouncycastle.crypto.CipherParameters) -> init
    boolean isSameAs(byte[],byte[]) -> isSameAs
    void clearBlock(byte[]) -> clearBlock
    void updateWithRecoveredMessage(byte[]) -> updateWithRecoveredMessage
    void update(byte) -> update
    void update(byte[],int,int) -> update
    void reset() -> reset
    byte[] generateSignature() -> generateSignature
    boolean verifySignature(byte[]) -> verifySignature
    boolean returnFalse(byte[]) -> returnFalse
    boolean hasFullMessage() -> hasFullMessage
    byte[] getRecoveredMessage() -> getRecoveredMessage
org.bouncycastle.crypto.signers.PSSSigner -> org.bouncycastle.crypto.signers.PSSSigner:
    byte TRAILER_IMPLICIT -> TRAILER_IMPLICIT
    org.bouncycastle.crypto.Digest contentDigest -> contentDigest
    org.bouncycastle.crypto.Digest mgfDigest -> mgfDigest
    org.bouncycastle.crypto.AsymmetricBlockCipher cipher -> cipher
    java.security.SecureRandom random -> random
    int hLen -> hLen
    int mgfhLen -> mgfhLen
    int sLen -> sLen
    int emBits -> emBits
    byte[] salt -> salt
    byte[] mDash -> mDash
    byte[] block -> block
    byte trailer -> trailer
    void init(boolean,org.bouncycastle.crypto.CipherParameters) -> init
    void clearBlock(byte[]) -> clearBlock
    void update(byte) -> update
    void update(byte[],int,int) -> update
    void reset() -> reset
    byte[] generateSignature() -> generateSignature
    boolean verifySignature(byte[]) -> verifySignature
    void ItoOSP(int,byte[]) -> ItoOSP
    byte[] maskGeneratorFunction1(byte[],int,int,int) -> maskGeneratorFunction1
org.bouncycastle.crypto.signers.RSADigestSigner -> org.bouncycastle.crypto.signers.RSADigestSigner:
    org.bouncycastle.crypto.AsymmetricBlockCipher rsaEngine -> rsaEngine
    org.bouncycastle.asn1.x509.AlgorithmIdentifier algId -> algId
    org.bouncycastle.crypto.Digest digest -> digest
    boolean forSigning -> forSigning
    java.util.Hashtable oidMap -> oidMap
    java.lang.String getAlgorithmName() -> getAlgorithmName
    void init(boolean,org.bouncycastle.crypto.CipherParameters) -> init
    void update(byte) -> update
    void update(byte[],int,int) -> update
    byte[] generateSignature() -> generateSignature
    boolean verifySignature(byte[]) -> verifySignature
    void reset() -> reset
    byte[] derEncode(byte[]) -> derEncode
org.bouncycastle.crypto.signers.RandomDSAKCalculator -> org.bouncycastle.crypto.signers.RandomDSAKCalculator:
    java.math.BigInteger ZERO -> ZERO
    java.math.BigInteger q -> q
    java.security.SecureRandom random -> random
    boolean isDeterministic() -> isDeterministic
    void init(java.math.BigInteger,java.security.SecureRandom) -> init
    void init(java.math.BigInteger,java.math.BigInteger,byte[]) -> init
    java.math.BigInteger nextK() -> nextK
org.bouncycastle.crypto.tls.AbstractTlsAgreementCredentials -> org.bouncycastle.crypto.tls.AbstractTlsAgreementCredentials:
org.bouncycastle.crypto.tls.AbstractTlsCipherFactory -> org.bouncycastle.crypto.tls.AbstractTlsCipherFactory:
    org.bouncycastle.crypto.tls.TlsCipher createCipher(org.bouncycastle.crypto.tls.TlsContext,int,int) -> createCipher
org.bouncycastle.crypto.tls.AbstractTlsClient -> org.bouncycastle.crypto.tls.AbstractTlsClient:
    org.bouncycastle.crypto.tls.TlsCipherFactory cipherFactory -> cipherFactory
    org.bouncycastle.crypto.tls.TlsClientContext context -> context
    java.util.Vector supportedSignatureAlgorithms -> supportedSignatureAlgorithms
    int[] namedCurves -> namedCurves
    short[] clientECPointFormats -> clientECPointFormats
    short[] serverECPointFormats -> serverECPointFormats
    int selectedCipherSuite -> selectedCipherSuite
    short selectedCompressionMethod -> selectedCompressionMethod
    void init(org.bouncycastle.crypto.tls.TlsClientContext) -> init
    org.bouncycastle.crypto.tls.TlsSession getSessionToResume() -> getSessionToResume
    org.bouncycastle.crypto.tls.ProtocolVersion getClientHelloRecordLayerVersion() -> getClientHelloRecordLayerVersion
    org.bouncycastle.crypto.tls.ProtocolVersion getClientVersion() -> getClientVersion
    java.util.Hashtable getClientExtensions() -> getClientExtensions
    org.bouncycastle.crypto.tls.ProtocolVersion getMinimumVersion() -> getMinimumVersion
    void notifyServerVersion(org.bouncycastle.crypto.tls.ProtocolVersion) -> notifyServerVersion
    short[] getCompressionMethods() -> getCompressionMethods
    void notifySessionID(byte[]) -> notifySessionID
    void notifySelectedCipherSuite(int) -> notifySelectedCipherSuite
    void notifySelectedCompressionMethod(short) -> notifySelectedCompressionMethod
    void processServerExtensions(java.util.Hashtable) -> processServerExtensions
    void processServerSupplementalData(java.util.Vector) -> processServerSupplementalData
    java.util.Vector getClientSupplementalData() -> getClientSupplementalData
    org.bouncycastle.crypto.tls.TlsCompression getCompression() -> getCompression
    void notifyNewSessionTicket(org.bouncycastle.crypto.tls.NewSessionTicket) -> notifyNewSessionTicket
org.bouncycastle.crypto.tls.AbstractTlsContext -> org.bouncycastle.crypto.tls.AbstractTlsContext:
    long counter -> counter
    org.bouncycastle.crypto.prng.RandomGenerator nonceRandom -> nonceRandom
    java.security.SecureRandom secureRandom -> secureRandom
    org.bouncycastle.crypto.tls.SecurityParameters securityParameters -> securityParameters
    org.bouncycastle.crypto.tls.ProtocolVersion clientVersion -> clientVersion
    org.bouncycastle.crypto.tls.ProtocolVersion serverVersion -> serverVersion
    org.bouncycastle.crypto.tls.TlsSession session -> session
    java.lang.Object userObject -> userObject
    long nextCounterValue() -> nextCounterValue
    org.bouncycastle.crypto.prng.RandomGenerator getNonceRandomGenerator() -> getNonceRandomGenerator
    java.security.SecureRandom getSecureRandom() -> getSecureRandom
    org.bouncycastle.crypto.tls.SecurityParameters getSecurityParameters() -> getSecurityParameters
    org.bouncycastle.crypto.tls.ProtocolVersion getClientVersion() -> getClientVersion
    void setClientVersion(org.bouncycastle.crypto.tls.ProtocolVersion) -> setClientVersion
    org.bouncycastle.crypto.tls.ProtocolVersion getServerVersion() -> getServerVersion
    void setServerVersion(org.bouncycastle.crypto.tls.ProtocolVersion) -> setServerVersion
    org.bouncycastle.crypto.tls.TlsSession getResumableSession() -> getResumableSession
    void setResumableSession(org.bouncycastle.crypto.tls.TlsSession) -> setResumableSession
    java.lang.Object getUserObject() -> getUserObject
    void setUserObject(java.lang.Object) -> setUserObject
    byte[] exportKeyingMaterial(java.lang.String,byte[],int) -> exportKeyingMaterial
org.bouncycastle.crypto.tls.AbstractTlsCredentials -> org.bouncycastle.crypto.tls.AbstractTlsCredentials:
org.bouncycastle.crypto.tls.AbstractTlsEncryptionCredentials -> org.bouncycastle.crypto.tls.AbstractTlsEncryptionCredentials:
org.bouncycastle.crypto.tls.AbstractTlsKeyExchange -> org.bouncycastle.crypto.tls.AbstractTlsKeyExchange:
    int keyExchange -> keyExchange
    java.util.Vector supportedSignatureAlgorithms -> supportedSignatureAlgorithms
    org.bouncycastle.crypto.tls.TlsContext context -> context
    void init(org.bouncycastle.crypto.tls.TlsContext) -> init
    void processServerCertificate(org.bouncycastle.crypto.tls.Certificate) -> processServerCertificate
    void processServerCredentials(org.bouncycastle.crypto.tls.TlsCredentials) -> processServerCredentials
    boolean requiresServerKeyExchange() -> requiresServerKeyExchange
    byte[] generateServerKeyExchange() -> generateServerKeyExchange
    void skipServerKeyExchange() -> skipServerKeyExchange
    void processServerKeyExchange(java.io.InputStream) -> processServerKeyExchange
    void skipClientCredentials() -> skipClientCredentials
    void processClientCertificate(org.bouncycastle.crypto.tls.Certificate) -> processClientCertificate
    void processClientKeyExchange(java.io.InputStream) -> processClientKeyExchange
org.bouncycastle.crypto.tls.AbstractTlsPeer -> org.bouncycastle.crypto.tls.AbstractTlsPeer:
    boolean shouldUseGMTUnixTime() -> shouldUseGMTUnixTime
    void notifySecureRenegotiation(boolean) -> notifySecureRenegotiation
    void notifyAlertRaised(short,short,java.lang.String,java.lang.Exception) -> notifyAlertRaised
    void notifyAlertReceived(short,short) -> notifyAlertReceived
    void notifyHandshakeComplete() -> notifyHandshakeComplete
org.bouncycastle.crypto.tls.AbstractTlsServer -> org.bouncycastle.crypto.tls.AbstractTlsServer:
    org.bouncycastle.crypto.tls.TlsCipherFactory cipherFactory -> cipherFactory
    org.bouncycastle.crypto.tls.TlsServerContext context -> context
    org.bouncycastle.crypto.tls.ProtocolVersion clientVersion -> clientVersion
    int[] offeredCipherSuites -> offeredCipherSuites
    short[] offeredCompressionMethods -> offeredCompressionMethods
    java.util.Hashtable clientExtensions -> clientExtensions
    boolean encryptThenMACOffered -> encryptThenMACOffered
    short maxFragmentLengthOffered -> maxFragmentLengthOffered
    boolean truncatedHMacOffered -> truncatedHMacOffered
    java.util.Vector supportedSignatureAlgorithms -> supportedSignatureAlgorithms
    boolean eccCipherSuitesOffered -> eccCipherSuitesOffered
    int[] namedCurves -> namedCurves
    short[] clientECPointFormats -> clientECPointFormats
    short[] serverECPointFormats -> serverECPointFormats
    org.bouncycastle.crypto.tls.ProtocolVersion serverVersion -> serverVersion
    int selectedCipherSuite -> selectedCipherSuite
    short selectedCompressionMethod -> selectedCompressionMethod
    java.util.Hashtable serverExtensions -> serverExtensions
    boolean allowEncryptThenMAC() -> allowEncryptThenMAC
    boolean allowTruncatedHMac() -> allowTruncatedHMac
    java.util.Hashtable checkServerExtensions() -> checkServerExtensions
    int[] getCipherSuites() -> getCipherSuites
    short[] getCompressionMethods() -> getCompressionMethods
    org.bouncycastle.crypto.tls.ProtocolVersion getMaximumVersion() -> getMaximumVersion
    org.bouncycastle.crypto.tls.ProtocolVersion getMinimumVersion() -> getMinimumVersion
    boolean supportsClientECCCapabilities(int[],short[]) -> supportsClientECCCapabilities
    void init(org.bouncycastle.crypto.tls.TlsServerContext) -> init
    void notifyClientVersion(org.bouncycastle.crypto.tls.ProtocolVersion) -> notifyClientVersion
    void notifyOfferedCipherSuites(int[]) -> notifyOfferedCipherSuites
    void notifyOfferedCompressionMethods(short[]) -> notifyOfferedCompressionMethods
    void processClientExtensions(java.util.Hashtable) -> processClientExtensions
    org.bouncycastle.crypto.tls.ProtocolVersion getServerVersion() -> getServerVersion
    int getSelectedCipherSuite() -> getSelectedCipherSuite
    short getSelectedCompressionMethod() -> getSelectedCompressionMethod
    java.util.Hashtable getServerExtensions() -> getServerExtensions
    java.util.Vector getServerSupplementalData() -> getServerSupplementalData
    org.bouncycastle.crypto.tls.CertificateStatus getCertificateStatus() -> getCertificateStatus
    org.bouncycastle.crypto.tls.CertificateRequest getCertificateRequest() -> getCertificateRequest
    void processClientSupplementalData(java.util.Vector) -> processClientSupplementalData
    void notifyClientCertificate(org.bouncycastle.crypto.tls.Certificate) -> notifyClientCertificate
    org.bouncycastle.crypto.tls.TlsCompression getCompression() -> getCompression
    org.bouncycastle.crypto.tls.NewSessionTicket getNewSessionTicket() -> getNewSessionTicket
org.bouncycastle.crypto.tls.AbstractTlsSigner -> org.bouncycastle.crypto.tls.AbstractTlsSigner:
    org.bouncycastle.crypto.tls.TlsContext context -> context
    void init(org.bouncycastle.crypto.tls.TlsContext) -> init
    byte[] generateRawSignature(org.bouncycastle.crypto.params.AsymmetricKeyParameter,byte[]) -> generateRawSignature
    boolean verifyRawSignature(byte[],org.bouncycastle.crypto.params.AsymmetricKeyParameter,byte[]) -> verifyRawSignature
    org.bouncycastle.crypto.Signer createSigner(org.bouncycastle.crypto.params.AsymmetricKeyParameter) -> createSigner
    org.bouncycastle.crypto.Signer createVerifyer(org.bouncycastle.crypto.params.AsymmetricKeyParameter) -> createVerifyer
org.bouncycastle.crypto.tls.AbstractTlsSignerCredentials -> org.bouncycastle.crypto.tls.AbstractTlsSignerCredentials:
    org.bouncycastle.crypto.tls.SignatureAndHashAlgorithm getSignatureAndHashAlgorithm() -> getSignatureAndHashAlgorithm
org.bouncycastle.crypto.tls.AlertDescription -> org.bouncycastle.crypto.tls.AlertDescription:
    short close_notify -> close_notify
    short unexpected_message -> unexpected_message
    short bad_record_mac -> bad_record_mac
    short decryption_failed -> decryption_failed
    short record_overflow -> record_overflow
    short decompression_failure -> decompression_failure
    short handshake_failure -> handshake_failure
    short no_certificate -> no_certificate
    short bad_certificate -> bad_certificate
    short unsupported_certificate -> unsupported_certificate
    short certificate_revoked -> certificate_revoked
    short certificate_expired -> certificate_expired
    short certificate_unknown -> certificate_unknown
    short illegal_parameter -> illegal_parameter
    short unknown_ca -> unknown_ca
    short access_denied -> access_denied
    short decode_error -> decode_error
    short decrypt_error -> decrypt_error
    short export_restriction -> export_restriction
    short protocol_version -> protocol_version
    short insufficient_security -> insufficient_security
    short internal_error -> internal_error
    short user_canceled -> user_canceled
    short no_renegotiation -> no_renegotiation
    short unsupported_extension -> unsupported_extension
    short certificate_unobtainable -> certificate_unobtainable
    short unrecognized_name -> unrecognized_name
    short bad_certificate_status_response -> bad_certificate_status_response
    short bad_certificate_hash_value -> bad_certificate_hash_value
    short unknown_psk_identity -> unknown_psk_identity
org.bouncycastle.crypto.tls.AlertLevel -> org.bouncycastle.crypto.tls.AlertLevel:
    short warning -> warning
    short fatal -> fatal
org.bouncycastle.crypto.tls.AlwaysValidVerifyer -> org.bouncycastle.crypto.tls.AlwaysValidVerifyer:
    boolean isValid(org.bouncycastle.asn1.x509.Certificate[]) -> isValid
org.bouncycastle.crypto.tls.BulkCipherAlgorithm -> org.bouncycastle.crypto.tls.BulkCipherAlgorithm:
    int _null -> _null
    int rc4 -> rc4
    int rc2 -> rc2
    int des -> des
    int _3des -> _3des
    int des40 -> des40
    int aes -> aes
    int idea -> idea
org.bouncycastle.crypto.tls.ByteQueue -> org.bouncycastle.crypto.tls.ByteQueue:
    int DEFAULT_CAPACITY -> DEFAULT_CAPACITY
    byte[] databuf -> databuf
    int skipped -> skipped
    int available -> available
    int nextTwoPow(int) -> nextTwoPow
    void read(byte[],int,int,int) -> read
    void addData(byte[],int,int) -> addData
    void removeData(int) -> removeData
    void removeData(byte[],int,int,int) -> removeData
    byte[] removeData(int,int) -> removeData
    int size() -> size
org.bouncycastle.crypto.tls.CertChainType -> org.bouncycastle.crypto.tls.CertChainType:
    short individual_certs -> individual_certs
    short pkipath -> pkipath
    boolean isValid(short) -> isValid
org.bouncycastle.crypto.tls.Certificate -> org.bouncycastle.crypto.tls.Certificate:
    org.bouncycastle.crypto.tls.Certificate EMPTY_CHAIN -> EMPTY_CHAIN
    org.bouncycastle.asn1.x509.Certificate[] certificateList -> certificateList
    org.bouncycastle.asn1.x509.Certificate[] getCerts() -> getCerts
    org.bouncycastle.asn1.x509.Certificate[] getCertificateList() -> getCertificateList
    org.bouncycastle.asn1.x509.Certificate getCertificateAt(int) -> getCertificateAt
    int getLength() -> getLength
    boolean isEmpty() -> isEmpty
    void encode(java.io.OutputStream) -> encode
    org.bouncycastle.crypto.tls.Certificate parse(java.io.InputStream) -> parse
    org.bouncycastle.asn1.x509.Certificate[] cloneCertificateList() -> cloneCertificateList
org.bouncycastle.crypto.tls.CertificateRequest -> org.bouncycastle.crypto.tls.CertificateRequest:
    short[] certificateTypes -> certificateTypes
    java.util.Vector supportedSignatureAlgorithms -> supportedSignatureAlgorithms
    java.util.Vector certificateAuthorities -> certificateAuthorities
    short[] getCertificateTypes() -> getCertificateTypes
    java.util.Vector getSupportedSignatureAlgorithms() -> getSupportedSignatureAlgorithms
    java.util.Vector getCertificateAuthorities() -> getCertificateAuthorities
    void encode(java.io.OutputStream) -> encode
    org.bouncycastle.crypto.tls.CertificateRequest parse(org.bouncycastle.crypto.tls.TlsContext,java.io.InputStream) -> parse
org.bouncycastle.crypto.tls.CertificateStatus -> org.bouncycastle.crypto.tls.CertificateStatus:
    short statusType -> statusType
    java.lang.Object response -> response
    short getStatusType() -> getStatusType
    java.lang.Object getResponse() -> getResponse
    org.bouncycastle.asn1.ocsp.OCSPResponse getOCSPResponse() -> getOCSPResponse
    void encode(java.io.OutputStream) -> encode
    org.bouncycastle.crypto.tls.CertificateStatus parse(java.io.InputStream) -> parse
    boolean isCorrectType(short,java.lang.Object) -> isCorrectType
org.bouncycastle.crypto.tls.CertificateStatusRequest -> org.bouncycastle.crypto.tls.CertificateStatusRequest:
    short statusType -> statusType
    java.lang.Object request -> request
    short getStatusType() -> getStatusType
    java.lang.Object getRequest() -> getRequest
    org.bouncycastle.crypto.tls.OCSPStatusRequest getOCSPStatusRequest() -> getOCSPStatusRequest
    void encode(java.io.OutputStream) -> encode
    org.bouncycastle.crypto.tls.CertificateStatusRequest parse(java.io.InputStream) -> parse
    boolean isCorrectType(short,java.lang.Object) -> isCorrectType
org.bouncycastle.crypto.tls.CertificateStatusType -> org.bouncycastle.crypto.tls.CertificateStatusType:
    short ocsp -> ocsp
org.bouncycastle.crypto.tls.CertificateURL -> org.bouncycastle.crypto.tls.CertificateURL:
    short type -> type
    java.util.Vector urlAndHashList -> urlAndHashList
    short getType() -> getType
    java.util.Vector getURLAndHashList() -> getURLAndHashList
    void encode(java.io.OutputStream) -> encode
    org.bouncycastle.crypto.tls.CertificateURL parse(org.bouncycastle.crypto.tls.TlsContext,java.io.InputStream) -> parse
org.bouncycastle.crypto.tls.CertificateURL$ListBuffer16 -> org.bouncycastle.crypto.tls.CertificateURL$ListBuffer16:
    org.bouncycastle.crypto.tls.CertificateURL this$0 -> this$0
    void encodeTo(java.io.OutputStream) -> encodeTo
org.bouncycastle.crypto.tls.CertificateVerifyer -> org.bouncycastle.crypto.tls.CertificateVerifyer:
    boolean isValid(org.bouncycastle.asn1.x509.Certificate[]) -> isValid
org.bouncycastle.crypto.tls.Chacha20Poly1305 -> org.bouncycastle.crypto.tls.Chacha20Poly1305:
    org.bouncycastle.crypto.tls.TlsContext context -> context
    org.bouncycastle.crypto.engines.ChaChaEngine encryptCipher -> encryptCipher
    org.bouncycastle.crypto.engines.ChaChaEngine decryptCipher -> decryptCipher
    int getPlaintextLimit(int) -> getPlaintextLimit
    byte[] encodePlaintext(long,short,byte[],int,int) -> encodePlaintext
    byte[] decodeCiphertext(long,short,byte[],int,int) -> decodeCiphertext
    org.bouncycastle.crypto.params.KeyParameter initRecordMAC(org.bouncycastle.crypto.engines.ChaChaEngine,boolean,long) -> initRecordMAC
    byte[] calculateRecordMAC(org.bouncycastle.crypto.params.KeyParameter,byte[],byte[],int,int) -> calculateRecordMAC
    void updateRecordMAC(org.bouncycastle.crypto.Mac,byte[],int,int) -> updateRecordMAC
    byte[] getAdditionalData(long,short,int) -> getAdditionalData
org.bouncycastle.crypto.tls.ChangeCipherSpec -> org.bouncycastle.crypto.tls.ChangeCipherSpec:
    short change_cipher_spec -> change_cipher_spec
org.bouncycastle.crypto.tls.CipherSuite -> org.bouncycastle.crypto.tls.CipherSuite:
    int TLS_NULL_WITH_NULL_NULL -> TLS_NULL_WITH_NULL_NULL
    int TLS_RSA_WITH_NULL_MD5 -> TLS_RSA_WITH_NULL_MD5
    int TLS_RSA_WITH_NULL_SHA -> TLS_RSA_WITH_NULL_SHA
    int TLS_RSA_EXPORT_WITH_RC4_40_MD5 -> TLS_RSA_EXPORT_WITH_RC4_40_MD5
    int TLS_RSA_WITH_RC4_128_MD5 -> TLS_RSA_WITH_RC4_128_MD5
    int TLS_RSA_WITH_RC4_128_SHA -> TLS_RSA_WITH_RC4_128_SHA
    int TLS_RSA_EXPORT_WITH_RC2_CBC_40_MD5 -> TLS_RSA_EXPORT_WITH_RC2_CBC_40_MD5
    int TLS_RSA_WITH_IDEA_CBC_SHA -> TLS_RSA_WITH_IDEA_CBC_SHA
    int TLS_RSA_EXPORT_WITH_DES40_CBC_SHA -> TLS_RSA_EXPORT_WITH_DES40_CBC_SHA
    int TLS_RSA_WITH_DES_CBC_SHA -> TLS_RSA_WITH_DES_CBC_SHA
    int TLS_RSA_WITH_3DES_EDE_CBC_SHA -> TLS_RSA_WITH_3DES_EDE_CBC_SHA
    int TLS_DH_DSS_EXPORT_WITH_DES40_CBC_SHA -> TLS_DH_DSS_EXPORT_WITH_DES40_CBC_SHA
    int TLS_DH_DSS_WITH_DES_CBC_SHA -> TLS_DH_DSS_WITH_DES_CBC_SHA
    int TLS_DH_DSS_WITH_3DES_EDE_CBC_SHA -> TLS_DH_DSS_WITH_3DES_EDE_CBC_SHA
    int TLS_DH_RSA_EXPORT_WITH_DES40_CBC_SHA -> TLS_DH_RSA_EXPORT_WITH_DES40_CBC_SHA
    int TLS_DH_RSA_WITH_DES_CBC_SHA -> TLS_DH_RSA_WITH_DES_CBC_SHA
    int TLS_DH_RSA_WITH_3DES_EDE_CBC_SHA -> TLS_DH_RSA_WITH_3DES_EDE_CBC_SHA
    int TLS_DHE_DSS_EXPORT_WITH_DES40_CBC_SHA -> TLS_DHE_DSS_EXPORT_WITH_DES40_CBC_SHA
    int TLS_DHE_DSS_WITH_DES_CBC_SHA -> TLS_DHE_DSS_WITH_DES_CBC_SHA
    int TLS_DHE_DSS_WITH_3DES_EDE_CBC_SHA -> TLS_DHE_DSS_WITH_3DES_EDE_CBC_SHA
    int TLS_DHE_RSA_EXPORT_WITH_DES40_CBC_SHA -> TLS_DHE_RSA_EXPORT_WITH_DES40_CBC_SHA
    int TLS_DHE_RSA_WITH_DES_CBC_SHA -> TLS_DHE_RSA_WITH_DES_CBC_SHA
    int TLS_DHE_RSA_WITH_3DES_EDE_CBC_SHA -> TLS_DHE_RSA_WITH_3DES_EDE_CBC_SHA
    int TLS_DH_anon_EXPORT_WITH_RC4_40_MD5 -> TLS_DH_anon_EXPORT_WITH_RC4_40_MD5
    int TLS_DH_anon_WITH_RC4_128_MD5 -> TLS_DH_anon_WITH_RC4_128_MD5
    int TLS_DH_anon_EXPORT_WITH_DES40_CBC_SHA -> TLS_DH_anon_EXPORT_WITH_DES40_CBC_SHA
    int TLS_DH_anon_WITH_DES_CBC_SHA -> TLS_DH_anon_WITH_DES_CBC_SHA
    int TLS_DH_anon_WITH_3DES_EDE_CBC_SHA -> TLS_DH_anon_WITH_3DES_EDE_CBC_SHA
    int TLS_RSA_WITH_AES_128_CBC_SHA -> TLS_RSA_WITH_AES_128_CBC_SHA
    int TLS_DH_DSS_WITH_AES_128_CBC_SHA -> TLS_DH_DSS_WITH_AES_128_CBC_SHA
    int TLS_DH_RSA_WITH_AES_128_CBC_SHA -> TLS_DH_RSA_WITH_AES_128_CBC_SHA
    int TLS_DHE_DSS_WITH_AES_128_CBC_SHA -> TLS_DHE_DSS_WITH_AES_128_CBC_SHA
    int TLS_DHE_RSA_WITH_AES_128_CBC_SHA -> TLS_DHE_RSA_WITH_AES_128_CBC_SHA
    int TLS_DH_anon_WITH_AES_128_CBC_SHA -> TLS_DH_anon_WITH_AES_128_CBC_SHA
    int TLS_RSA_WITH_AES_256_CBC_SHA -> TLS_RSA_WITH_AES_256_CBC_SHA
    int TLS_DH_DSS_WITH_AES_256_CBC_SHA -> TLS_DH_DSS_WITH_AES_256_CBC_SHA
    int TLS_DH_RSA_WITH_AES_256_CBC_SHA -> TLS_DH_RSA_WITH_AES_256_CBC_SHA
    int TLS_DHE_DSS_WITH_AES_256_CBC_SHA -> TLS_DHE_DSS_WITH_AES_256_CBC_SHA
    int TLS_DHE_RSA_WITH_AES_256_CBC_SHA -> TLS_DHE_RSA_WITH_AES_256_CBC_SHA
    int TLS_DH_anon_WITH_AES_256_CBC_SHA -> TLS_DH_anon_WITH_AES_256_CBC_SHA
    int TLS_RSA_WITH_CAMELLIA_128_CBC_SHA -> TLS_RSA_WITH_CAMELLIA_128_CBC_SHA
    int TLS_DH_DSS_WITH_CAMELLIA_128_CBC_SHA -> TLS_DH_DSS_WITH_CAMELLIA_128_CBC_SHA
    int TLS_DH_RSA_WITH_CAMELLIA_128_CBC_SHA -> TLS_DH_RSA_WITH_CAMELLIA_128_CBC_SHA
    int TLS_DHE_DSS_WITH_CAMELLIA_128_CBC_SHA -> TLS_DHE_DSS_WITH_CAMELLIA_128_CBC_SHA
    int TLS_DHE_RSA_WITH_CAMELLIA_128_CBC_SHA -> TLS_DHE_RSA_WITH_CAMELLIA_128_CBC_SHA
    int TLS_DH_anon_WITH_CAMELLIA_128_CBC_SHA -> TLS_DH_anon_WITH_CAMELLIA_128_CBC_SHA
    int TLS_RSA_WITH_CAMELLIA_256_CBC_SHA -> TLS_RSA_WITH_CAMELLIA_256_CBC_SHA
    int TLS_DH_DSS_WITH_CAMELLIA_256_CBC_SHA -> TLS_DH_DSS_WITH_CAMELLIA_256_CBC_SHA
    int TLS_DH_RSA_WITH_CAMELLIA_256_CBC_SHA -> TLS_DH_RSA_WITH_CAMELLIA_256_CBC_SHA
    int TLS_DHE_DSS_WITH_CAMELLIA_256_CBC_SHA -> TLS_DHE_DSS_WITH_CAMELLIA_256_CBC_SHA
    int TLS_DHE_RSA_WITH_CAMELLIA_256_CBC_SHA -> TLS_DHE_RSA_WITH_CAMELLIA_256_CBC_SHA
    int TLS_DH_anon_WITH_CAMELLIA_256_CBC_SHA -> TLS_DH_anon_WITH_CAMELLIA_256_CBC_SHA
    int TLS_RSA_WITH_CAMELLIA_128_CBC_SHA256 -> TLS_RSA_WITH_CAMELLIA_128_CBC_SHA256
    int TLS_DH_DSS_WITH_CAMELLIA_128_CBC_SHA256 -> TLS_DH_DSS_WITH_CAMELLIA_128_CBC_SHA256
    int TLS_DH_RSA_WITH_CAMELLIA_128_CBC_SHA256 -> TLS_DH_RSA_WITH_CAMELLIA_128_CBC_SHA256
    int TLS_DHE_DSS_WITH_CAMELLIA_128_CBC_SHA256 -> TLS_DHE_DSS_WITH_CAMELLIA_128_CBC_SHA256
    int TLS_DHE_RSA_WITH_CAMELLIA_128_CBC_SHA256 -> TLS_DHE_RSA_WITH_CAMELLIA_128_CBC_SHA256
    int TLS_DH_anon_WITH_CAMELLIA_128_CBC_SHA256 -> TLS_DH_anon_WITH_CAMELLIA_128_CBC_SHA256
    int TLS_RSA_WITH_CAMELLIA_256_CBC_SHA256 -> TLS_RSA_WITH_CAMELLIA_256_CBC_SHA256
    int TLS_DH_DSS_WITH_CAMELLIA_256_CBC_SHA256 -> TLS_DH_DSS_WITH_CAMELLIA_256_CBC_SHA256
    int TLS_DH_RSA_WITH_CAMELLIA_256_CBC_SHA256 -> TLS_DH_RSA_WITH_CAMELLIA_256_CBC_SHA256
    int TLS_DHE_DSS_WITH_CAMELLIA_256_CBC_SHA256 -> TLS_DHE_DSS_WITH_CAMELLIA_256_CBC_SHA256
    int TLS_DHE_RSA_WITH_CAMELLIA_256_CBC_SHA256 -> TLS_DHE_RSA_WITH_CAMELLIA_256_CBC_SHA256
    int TLS_DH_anon_WITH_CAMELLIA_256_CBC_SHA256 -> TLS_DH_anon_WITH_CAMELLIA_256_CBC_SHA256
    int TLS_RSA_WITH_SEED_CBC_SHA -> TLS_RSA_WITH_SEED_CBC_SHA
    int TLS_DH_DSS_WITH_SEED_CBC_SHA -> TLS_DH_DSS_WITH_SEED_CBC_SHA
    int TLS_DH_RSA_WITH_SEED_CBC_SHA -> TLS_DH_RSA_WITH_SEED_CBC_SHA
    int TLS_DHE_DSS_WITH_SEED_CBC_SHA -> TLS_DHE_DSS_WITH_SEED_CBC_SHA
    int TLS_DHE_RSA_WITH_SEED_CBC_SHA -> TLS_DHE_RSA_WITH_SEED_CBC_SHA
    int TLS_DH_anon_WITH_SEED_CBC_SHA -> TLS_DH_anon_WITH_SEED_CBC_SHA
    int TLS_PSK_WITH_RC4_128_SHA -> TLS_PSK_WITH_RC4_128_SHA
    int TLS_PSK_WITH_3DES_EDE_CBC_SHA -> TLS_PSK_WITH_3DES_EDE_CBC_SHA
    int TLS_PSK_WITH_AES_128_CBC_SHA -> TLS_PSK_WITH_AES_128_CBC_SHA
    int TLS_PSK_WITH_AES_256_CBC_SHA -> TLS_PSK_WITH_AES_256_CBC_SHA
    int TLS_DHE_PSK_WITH_RC4_128_SHA -> TLS_DHE_PSK_WITH_RC4_128_SHA
    int TLS_DHE_PSK_WITH_3DES_EDE_CBC_SHA -> TLS_DHE_PSK_WITH_3DES_EDE_CBC_SHA
    int TLS_DHE_PSK_WITH_AES_128_CBC_SHA -> TLS_DHE_PSK_WITH_AES_128_CBC_SHA
    int TLS_DHE_PSK_WITH_AES_256_CBC_SHA -> TLS_DHE_PSK_WITH_AES_256_CBC_SHA
    int TLS_RSA_PSK_WITH_RC4_128_SHA -> TLS_RSA_PSK_WITH_RC4_128_SHA
    int TLS_RSA_PSK_WITH_3DES_EDE_CBC_SHA -> TLS_RSA_PSK_WITH_3DES_EDE_CBC_SHA
    int TLS_RSA_PSK_WITH_AES_128_CBC_SHA -> TLS_RSA_PSK_WITH_AES_128_CBC_SHA
    int TLS_RSA_PSK_WITH_AES_256_CBC_SHA -> TLS_RSA_PSK_WITH_AES_256_CBC_SHA
    int TLS_ECDH_ECDSA_WITH_NULL_SHA -> TLS_ECDH_ECDSA_WITH_NULL_SHA
    int TLS_ECDH_ECDSA_WITH_RC4_128_SHA -> TLS_ECDH_ECDSA_WITH_RC4_128_SHA
    int TLS_ECDH_ECDSA_WITH_3DES_EDE_CBC_SHA -> TLS_ECDH_ECDSA_WITH_3DES_EDE_CBC_SHA
    int TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA -> TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA
    int TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA -> TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA
    int TLS_ECDHE_ECDSA_WITH_NULL_SHA -> TLS_ECDHE_ECDSA_WITH_NULL_SHA
    int TLS_ECDHE_ECDSA_WITH_RC4_128_SHA -> TLS_ECDHE_ECDSA_WITH_RC4_128_SHA
    int TLS_ECDHE_ECDSA_WITH_3DES_EDE_CBC_SHA -> TLS_ECDHE_ECDSA_WITH_3DES_EDE_CBC_SHA
    int TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA -> TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA
    int TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA -> TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA
    int TLS_ECDH_RSA_WITH_NULL_SHA -> TLS_ECDH_RSA_WITH_NULL_SHA
    int TLS_ECDH_RSA_WITH_RC4_128_SHA -> TLS_ECDH_RSA_WITH_RC4_128_SHA
    int TLS_ECDH_RSA_WITH_3DES_EDE_CBC_SHA -> TLS_ECDH_RSA_WITH_3DES_EDE_CBC_SHA
    int TLS_ECDH_RSA_WITH_AES_128_CBC_SHA -> TLS_ECDH_RSA_WITH_AES_128_CBC_SHA
    int TLS_ECDH_RSA_WITH_AES_256_CBC_SHA -> TLS_ECDH_RSA_WITH_AES_256_CBC_SHA
    int TLS_ECDHE_RSA_WITH_NULL_SHA -> TLS_ECDHE_RSA_WITH_NULL_SHA
    int TLS_ECDHE_RSA_WITH_RC4_128_SHA -> TLS_ECDHE_RSA_WITH_RC4_128_SHA
    int TLS_ECDHE_RSA_WITH_3DES_EDE_CBC_SHA -> TLS_ECDHE_RSA_WITH_3DES_EDE_CBC_SHA
    int TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA -> TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA
    int TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA -> TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA
    int TLS_ECDH_anon_WITH_NULL_SHA -> TLS_ECDH_anon_WITH_NULL_SHA
    int TLS_ECDH_anon_WITH_RC4_128_SHA -> TLS_ECDH_anon_WITH_RC4_128_SHA
    int TLS_ECDH_anon_WITH_3DES_EDE_CBC_SHA -> TLS_ECDH_anon_WITH_3DES_EDE_CBC_SHA
    int TLS_ECDH_anon_WITH_AES_128_CBC_SHA -> TLS_ECDH_anon_WITH_AES_128_CBC_SHA
    int TLS_ECDH_anon_WITH_AES_256_CBC_SHA -> TLS_ECDH_anon_WITH_AES_256_CBC_SHA
    int TLS_PSK_WITH_NULL_SHA -> TLS_PSK_WITH_NULL_SHA
    int TLS_DHE_PSK_WITH_NULL_SHA -> TLS_DHE_PSK_WITH_NULL_SHA
    int TLS_RSA_PSK_WITH_NULL_SHA -> TLS_RSA_PSK_WITH_NULL_SHA
    int TLS_SRP_SHA_WITH_3DES_EDE_CBC_SHA -> TLS_SRP_SHA_WITH_3DES_EDE_CBC_SHA
    int TLS_SRP_SHA_RSA_WITH_3DES_EDE_CBC_SHA -> TLS_SRP_SHA_RSA_WITH_3DES_EDE_CBC_SHA
    int TLS_SRP_SHA_DSS_WITH_3DES_EDE_CBC_SHA -> TLS_SRP_SHA_DSS_WITH_3DES_EDE_CBC_SHA
    int TLS_SRP_SHA_WITH_AES_128_CBC_SHA -> TLS_SRP_SHA_WITH_AES_128_CBC_SHA
    int TLS_SRP_SHA_RSA_WITH_AES_128_CBC_SHA -> TLS_SRP_SHA_RSA_WITH_AES_128_CBC_SHA
    int TLS_SRP_SHA_DSS_WITH_AES_128_CBC_SHA -> TLS_SRP_SHA_DSS_WITH_AES_128_CBC_SHA
    int TLS_SRP_SHA_WITH_AES_256_CBC_SHA -> TLS_SRP_SHA_WITH_AES_256_CBC_SHA
    int TLS_SRP_SHA_RSA_WITH_AES_256_CBC_SHA -> TLS_SRP_SHA_RSA_WITH_AES_256_CBC_SHA
    int TLS_SRP_SHA_DSS_WITH_AES_256_CBC_SHA -> TLS_SRP_SHA_DSS_WITH_AES_256_CBC_SHA
    int TLS_RSA_WITH_NULL_SHA256 -> TLS_RSA_WITH_NULL_SHA256
    int TLS_RSA_WITH_AES_128_CBC_SHA256 -> TLS_RSA_WITH_AES_128_CBC_SHA256
    int TLS_RSA_WITH_AES_256_CBC_SHA256 -> TLS_RSA_WITH_AES_256_CBC_SHA256
    int TLS_DH_DSS_WITH_AES_128_CBC_SHA256 -> TLS_DH_DSS_WITH_AES_128_CBC_SHA256
    int TLS_DH_RSA_WITH_AES_128_CBC_SHA256 -> TLS_DH_RSA_WITH_AES_128_CBC_SHA256
    int TLS_DHE_DSS_WITH_AES_128_CBC_SHA256 -> TLS_DHE_DSS_WITH_AES_128_CBC_SHA256
    int TLS_DHE_RSA_WITH_AES_128_CBC_SHA256 -> TLS_DHE_RSA_WITH_AES_128_CBC_SHA256
    int TLS_DH_DSS_WITH_AES_256_CBC_SHA256 -> TLS_DH_DSS_WITH_AES_256_CBC_SHA256
    int TLS_DH_RSA_WITH_AES_256_CBC_SHA256 -> TLS_DH_RSA_WITH_AES_256_CBC_SHA256
    int TLS_DHE_DSS_WITH_AES_256_CBC_SHA256 -> TLS_DHE_DSS_WITH_AES_256_CBC_SHA256
    int TLS_DHE_RSA_WITH_AES_256_CBC_SHA256 -> TLS_DHE_RSA_WITH_AES_256_CBC_SHA256
    int TLS_DH_anon_WITH_AES_128_CBC_SHA256 -> TLS_DH_anon_WITH_AES_128_CBC_SHA256
    int TLS_DH_anon_WITH_AES_256_CBC_SHA256 -> TLS_DH_anon_WITH_AES_256_CBC_SHA256
    int TLS_RSA_WITH_AES_128_GCM_SHA256 -> TLS_RSA_WITH_AES_128_GCM_SHA256
    int TLS_RSA_WITH_AES_256_GCM_SHA384 -> TLS_RSA_WITH_AES_256_GCM_SHA384
    int TLS_DHE_RSA_WITH_AES_128_GCM_SHA256 -> TLS_DHE_RSA_WITH_AES_128_GCM_SHA256
    int TLS_DHE_RSA_WITH_AES_256_GCM_SHA384 -> TLS_DHE_RSA_WITH_AES_256_GCM_SHA384
    int TLS_DH_RSA_WITH_AES_128_GCM_SHA256 -> TLS_DH_RSA_WITH_AES_128_GCM_SHA256
    int TLS_DH_RSA_WITH_AES_256_GCM_SHA384 -> TLS_DH_RSA_WITH_AES_256_GCM_SHA384
    int TLS_DHE_DSS_WITH_AES_128_GCM_SHA256 -> TLS_DHE_DSS_WITH_AES_128_GCM_SHA256
    int TLS_DHE_DSS_WITH_AES_256_GCM_SHA384 -> TLS_DHE_DSS_WITH_AES_256_GCM_SHA384
    int TLS_DH_DSS_WITH_AES_128_GCM_SHA256 -> TLS_DH_DSS_WITH_AES_128_GCM_SHA256
    int TLS_DH_DSS_WITH_AES_256_GCM_SHA384 -> TLS_DH_DSS_WITH_AES_256_GCM_SHA384
    int TLS_DH_anon_WITH_AES_128_GCM_SHA256 -> TLS_DH_anon_WITH_AES_128_GCM_SHA256
    int TLS_DH_anon_WITH_AES_256_GCM_SHA384 -> TLS_DH_anon_WITH_AES_256_GCM_SHA384
    int TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256 -> TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256
    int TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384 -> TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384
    int TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA256 -> TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA256
    int TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA384 -> TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA384
    int TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256 -> TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256
    int TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384 -> TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384
    int TLS_ECDH_RSA_WITH_AES_128_CBC_SHA256 -> TLS_ECDH_RSA_WITH_AES_128_CBC_SHA256
    int TLS_ECDH_RSA_WITH_AES_256_CBC_SHA384 -> TLS_ECDH_RSA_WITH_AES_256_CBC_SHA384
    int TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256 -> TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256
    int TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384 -> TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384
    int TLS_ECDH_ECDSA_WITH_AES_128_GCM_SHA256 -> TLS_ECDH_ECDSA_WITH_AES_128_GCM_SHA256
    int TLS_ECDH_ECDSA_WITH_AES_256_GCM_SHA384 -> TLS_ECDH_ECDSA_WITH_AES_256_GCM_SHA384
    int TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256 -> TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256
    int TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384 -> TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384
    int TLS_ECDH_RSA_WITH_AES_128_GCM_SHA256 -> TLS_ECDH_RSA_WITH_AES_128_GCM_SHA256
    int TLS_ECDH_RSA_WITH_AES_256_GCM_SHA384 -> TLS_ECDH_RSA_WITH_AES_256_GCM_SHA384
    int TLS_PSK_WITH_AES_128_GCM_SHA256 -> TLS_PSK_WITH_AES_128_GCM_SHA256
    int TLS_PSK_WITH_AES_256_GCM_SHA384 -> TLS_PSK_WITH_AES_256_GCM_SHA384
    int TLS_DHE_PSK_WITH_AES_128_GCM_SHA256 -> TLS_DHE_PSK_WITH_AES_128_GCM_SHA256
    int TLS_DHE_PSK_WITH_AES_256_GCM_SHA384 -> TLS_DHE_PSK_WITH_AES_256_GCM_SHA384
    int TLS_RSA_PSK_WITH_AES_128_GCM_SHA256 -> TLS_RSA_PSK_WITH_AES_128_GCM_SHA256
    int TLS_RSA_PSK_WITH_AES_256_GCM_SHA384 -> TLS_RSA_PSK_WITH_AES_256_GCM_SHA384
    int TLS_PSK_WITH_AES_128_CBC_SHA256 -> TLS_PSK_WITH_AES_128_CBC_SHA256
    int TLS_PSK_WITH_AES_256_CBC_SHA384 -> TLS_PSK_WITH_AES_256_CBC_SHA384
    int TLS_PSK_WITH_NULL_SHA256 -> TLS_PSK_WITH_NULL_SHA256
    int TLS_PSK_WITH_NULL_SHA384 -> TLS_PSK_WITH_NULL_SHA384
    int TLS_DHE_PSK_WITH_AES_128_CBC_SHA256 -> TLS_DHE_PSK_WITH_AES_128_CBC_SHA256
    int TLS_DHE_PSK_WITH_AES_256_CBC_SHA384 -> TLS_DHE_PSK_WITH_AES_256_CBC_SHA384
    int TLS_DHE_PSK_WITH_NULL_SHA256 -> TLS_DHE_PSK_WITH_NULL_SHA256
    int TLS_DHE_PSK_WITH_NULL_SHA384 -> TLS_DHE_PSK_WITH_NULL_SHA384
    int TLS_RSA_PSK_WITH_AES_128_CBC_SHA256 -> TLS_RSA_PSK_WITH_AES_128_CBC_SHA256
    int TLS_RSA_PSK_WITH_AES_256_CBC_SHA384 -> TLS_RSA_PSK_WITH_AES_256_CBC_SHA384
    int TLS_RSA_PSK_WITH_NULL_SHA256 -> TLS_RSA_PSK_WITH_NULL_SHA256
    int TLS_RSA_PSK_WITH_NULL_SHA384 -> TLS_RSA_PSK_WITH_NULL_SHA384
    int TLS_ECDHE_PSK_WITH_RC4_128_SHA -> TLS_ECDHE_PSK_WITH_RC4_128_SHA
    int TLS_ECDHE_PSK_WITH_3DES_EDE_CBC_SHA -> TLS_ECDHE_PSK_WITH_3DES_EDE_CBC_SHA
    int TLS_ECDHE_PSK_WITH_AES_128_CBC_SHA -> TLS_ECDHE_PSK_WITH_AES_128_CBC_SHA
    int TLS_ECDHE_PSK_WITH_AES_256_CBC_SHA -> TLS_ECDHE_PSK_WITH_AES_256_CBC_SHA
    int TLS_ECDHE_PSK_WITH_AES_128_CBC_SHA256 -> TLS_ECDHE_PSK_WITH_AES_128_CBC_SHA256
    int TLS_ECDHE_PSK_WITH_AES_256_CBC_SHA384 -> TLS_ECDHE_PSK_WITH_AES_256_CBC_SHA384
    int TLS_ECDHE_PSK_WITH_NULL_SHA -> TLS_ECDHE_PSK_WITH_NULL_SHA
    int TLS_ECDHE_PSK_WITH_NULL_SHA256 -> TLS_ECDHE_PSK_WITH_NULL_SHA256
    int TLS_ECDHE_PSK_WITH_NULL_SHA384 -> TLS_ECDHE_PSK_WITH_NULL_SHA384
    int TLS_EMPTY_RENEGOTIATION_INFO_SCSV -> TLS_EMPTY_RENEGOTIATION_INFO_SCSV
    int TLS_ECDHE_ECDSA_WITH_CAMELLIA_128_CBC_SHA256 -> TLS_ECDHE_ECDSA_WITH_CAMELLIA_128_CBC_SHA256
    int TLS_ECDHE_ECDSA_WITH_CAMELLIA_256_CBC_SHA384 -> TLS_ECDHE_ECDSA_WITH_CAMELLIA_256_CBC_SHA384
    int TLS_ECDH_ECDSA_WITH_CAMELLIA_128_CBC_SHA256 -> TLS_ECDH_ECDSA_WITH_CAMELLIA_128_CBC_SHA256
    int TLS_ECDH_ECDSA_WITH_CAMELLIA_256_CBC_SHA384 -> TLS_ECDH_ECDSA_WITH_CAMELLIA_256_CBC_SHA384
    int TLS_ECDHE_RSA_WITH_CAMELLIA_128_CBC_SHA256 -> TLS_ECDHE_RSA_WITH_CAMELLIA_128_CBC_SHA256
    int TLS_ECDHE_RSA_WITH_CAMELLIA_256_CBC_SHA384 -> TLS_ECDHE_RSA_WITH_CAMELLIA_256_CBC_SHA384
    int TLS_ECDH_RSA_WITH_CAMELLIA_128_CBC_SHA256 -> TLS_ECDH_RSA_WITH_CAMELLIA_128_CBC_SHA256
    int TLS_ECDH_RSA_WITH_CAMELLIA_256_CBC_SHA384 -> TLS_ECDH_RSA_WITH_CAMELLIA_256_CBC_SHA384
    int TLS_RSA_WITH_CAMELLIA_128_GCM_SHA256 -> TLS_RSA_WITH_CAMELLIA_128_GCM_SHA256
    int TLS_RSA_WITH_CAMELLIA_256_GCM_SHA384 -> TLS_RSA_WITH_CAMELLIA_256_GCM_SHA384
    int TLS_DHE_RSA_WITH_CAMELLIA_128_GCM_SHA256 -> TLS_DHE_RSA_WITH_CAMELLIA_128_GCM_SHA256
    int TLS_DHE_RSA_WITH_CAMELLIA_256_GCM_SHA384 -> TLS_DHE_RSA_WITH_CAMELLIA_256_GCM_SHA384
    int TLS_DH_RSA_WITH_CAMELLIA_128_GCM_SHA256 -> TLS_DH_RSA_WITH_CAMELLIA_128_GCM_SHA256
    int TLS_DH_RSA_WITH_CAMELLIA_256_GCM_SHA384 -> TLS_DH_RSA_WITH_CAMELLIA_256_GCM_SHA384
    int TLS_DHE_DSS_WITH_CAMELLIA_128_GCM_SHA256 -> TLS_DHE_DSS_WITH_CAMELLIA_128_GCM_SHA256
    int TLS_DHE_DSS_WITH_CAMELLIA_256_GCM_SHA384 -> TLS_DHE_DSS_WITH_CAMELLIA_256_GCM_SHA384
    int TLS_DH_DSS_WITH_CAMELLIA_128_GCM_SHA256 -> TLS_DH_DSS_WITH_CAMELLIA_128_GCM_SHA256
    int TLS_DH_DSS_WITH_CAMELLIA_256_GCM_SHA384 -> TLS_DH_DSS_WITH_CAMELLIA_256_GCM_SHA384
    int TLS_DH_anon_WITH_CAMELLIA_128_GCM_SHA256 -> TLS_DH_anon_WITH_CAMELLIA_128_GCM_SHA256
    int TLS_DH_anon_WITH_CAMELLIA_256_GCM_SHA384 -> TLS_DH_anon_WITH_CAMELLIA_256_GCM_SHA384
    int TLS_ECDHE_ECDSA_WITH_CAMELLIA_128_GCM_SHA256 -> TLS_ECDHE_ECDSA_WITH_CAMELLIA_128_GCM_SHA256
    int TLS_ECDHE_ECDSA_WITH_CAMELLIA_256_GCM_SHA384 -> TLS_ECDHE_ECDSA_WITH_CAMELLIA_256_GCM_SHA384
    int TLS_ECDH_ECDSA_WITH_CAMELLIA_128_GCM_SHA256 -> TLS_ECDH_ECDSA_WITH_CAMELLIA_128_GCM_SHA256
    int TLS_ECDH_ECDSA_WITH_CAMELLIA_256_GCM_SHA384 -> TLS_ECDH_ECDSA_WITH_CAMELLIA_256_GCM_SHA384
    int TLS_ECDHE_RSA_WITH_CAMELLIA_128_GCM_SHA256 -> TLS_ECDHE_RSA_WITH_CAMELLIA_128_GCM_SHA256
    int TLS_ECDHE_RSA_WITH_CAMELLIA_256_GCM_SHA384 -> TLS_ECDHE_RSA_WITH_CAMELLIA_256_GCM_SHA384
    int TLS_ECDH_RSA_WITH_CAMELLIA_128_GCM_SHA256 -> TLS_ECDH_RSA_WITH_CAMELLIA_128_GCM_SHA256
    int TLS_ECDH_RSA_WITH_CAMELLIA_256_GCM_SHA384 -> TLS_ECDH_RSA_WITH_CAMELLIA_256_GCM_SHA384
    int TLS_PSK_WITH_CAMELLIA_128_GCM_SHA256 -> TLS_PSK_WITH_CAMELLIA_128_GCM_SHA256
    int TLS_PSK_WITH_CAMELLIA_256_GCM_SHA384 -> TLS_PSK_WITH_CAMELLIA_256_GCM_SHA384
    int TLS_DHE_PSK_WITH_CAMELLIA_128_GCM_SHA256 -> TLS_DHE_PSK_WITH_CAMELLIA_128_GCM_SHA256
    int TLS_DHE_PSK_WITH_CAMELLIA_256_GCM_SHA384 -> TLS_DHE_PSK_WITH_CAMELLIA_256_GCM_SHA384
    int TLS_RSA_PSK_WITH_CAMELLIA_128_GCM_SHA256 -> TLS_RSA_PSK_WITH_CAMELLIA_128_GCM_SHA256
    int TLS_RSA_PSK_WITH_CAMELLIA_256_GCM_SHA384 -> TLS_RSA_PSK_WITH_CAMELLIA_256_GCM_SHA384
    int TLS_PSK_WITH_CAMELLIA_128_CBC_SHA256 -> TLS_PSK_WITH_CAMELLIA_128_CBC_SHA256
    int TLS_PSK_WITH_CAMELLIA_256_CBC_SHA384 -> TLS_PSK_WITH_CAMELLIA_256_CBC_SHA384
    int TLS_DHE_PSK_WITH_CAMELLIA_128_CBC_SHA256 -> TLS_DHE_PSK_WITH_CAMELLIA_128_CBC_SHA256
    int TLS_DHE_PSK_WITH_CAMELLIA_256_CBC_SHA384 -> TLS_DHE_PSK_WITH_CAMELLIA_256_CBC_SHA384
    int TLS_RSA_PSK_WITH_CAMELLIA_128_CBC_SHA256 -> TLS_RSA_PSK_WITH_CAMELLIA_128_CBC_SHA256
    int TLS_RSA_PSK_WITH_CAMELLIA_256_CBC_SHA384 -> TLS_RSA_PSK_WITH_CAMELLIA_256_CBC_SHA384
    int TLS_ECDHE_PSK_WITH_CAMELLIA_128_CBC_SHA256 -> TLS_ECDHE_PSK_WITH_CAMELLIA_128_CBC_SHA256
    int TLS_ECDHE_PSK_WITH_CAMELLIA_256_CBC_SHA384 -> TLS_ECDHE_PSK_WITH_CAMELLIA_256_CBC_SHA384
    int TLS_RSA_WITH_AES_128_CCM -> TLS_RSA_WITH_AES_128_CCM
    int TLS_RSA_WITH_AES_256_CCM -> TLS_RSA_WITH_AES_256_CCM
    int TLS_DHE_RSA_WITH_AES_128_CCM -> TLS_DHE_RSA_WITH_AES_128_CCM
    int TLS_DHE_RSA_WITH_AES_256_CCM -> TLS_DHE_RSA_WITH_AES_256_CCM
    int TLS_RSA_WITH_AES_128_CCM_8 -> TLS_RSA_WITH_AES_128_CCM_8
    int TLS_RSA_WITH_AES_256_CCM_8 -> TLS_RSA_WITH_AES_256_CCM_8
    int TLS_DHE_RSA_WITH_AES_128_CCM_8 -> TLS_DHE_RSA_WITH_AES_128_CCM_8
    int TLS_DHE_RSA_WITH_AES_256_CCM_8 -> TLS_DHE_RSA_WITH_AES_256_CCM_8
    int TLS_PSK_WITH_AES_128_CCM -> TLS_PSK_WITH_AES_128_CCM
    int TLS_PSK_WITH_AES_256_CCM -> TLS_PSK_WITH_AES_256_CCM
    int TLS_DHE_PSK_WITH_AES_128_CCM -> TLS_DHE_PSK_WITH_AES_128_CCM
    int TLS_DHE_PSK_WITH_AES_256_CCM -> TLS_DHE_PSK_WITH_AES_256_CCM
    int TLS_PSK_WITH_AES_128_CCM_8 -> TLS_PSK_WITH_AES_128_CCM_8
    int TLS_PSK_WITH_AES_256_CCM_8 -> TLS_PSK_WITH_AES_256_CCM_8
    int TLS_PSK_DHE_WITH_AES_128_CCM_8 -> TLS_PSK_DHE_WITH_AES_128_CCM_8
    int TLS_PSK_DHE_WITH_AES_256_CCM_8 -> TLS_PSK_DHE_WITH_AES_256_CCM_8
    int TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256 -> TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256
    int TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256 -> TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256
    int TLS_DHE_RSA_WITH_CHACHA20_POLY1305_SHA256 -> TLS_DHE_RSA_WITH_CHACHA20_POLY1305_SHA256
    int TLS_RSA_WITH_ESTREAM_SALSA20_SHA1 -> TLS_RSA_WITH_ESTREAM_SALSA20_SHA1
    int TLS_RSA_WITH_SALSA20_SHA1 -> TLS_RSA_WITH_SALSA20_SHA1
    int TLS_ECDHE_RSA_WITH_ESTREAM_SALSA20_SHA1 -> TLS_ECDHE_RSA_WITH_ESTREAM_SALSA20_SHA1
    int TLS_ECDHE_RSA_WITH_SALSA20_SHA1 -> TLS_ECDHE_RSA_WITH_SALSA20_SHA1
    int TLS_ECDHE_ECDSA_WITH_ESTREAM_SALSA20_SHA1 -> TLS_ECDHE_ECDSA_WITH_ESTREAM_SALSA20_SHA1
    int TLS_ECDHE_ECDSA_WITH_SALSA20_SHA1 -> TLS_ECDHE_ECDSA_WITH_SALSA20_SHA1
    int TLS_PSK_WITH_ESTREAM_SALSA20_SHA1 -> TLS_PSK_WITH_ESTREAM_SALSA20_SHA1
    int TLS_PSK_WITH_SALSA20_SHA1 -> TLS_PSK_WITH_SALSA20_SHA1
    int TLS_ECDHE_PSK_WITH_ESTREAM_SALSA20_SHA1 -> TLS_ECDHE_PSK_WITH_ESTREAM_SALSA20_SHA1
    int TLS_ECDHE_PSK_WITH_SALSA20_SHA1 -> TLS_ECDHE_PSK_WITH_SALSA20_SHA1
    int TLS_RSA_PSK_WITH_ESTREAM_SALSA20_SHA1 -> TLS_RSA_PSK_WITH_ESTREAM_SALSA20_SHA1
    int TLS_RSA_PSK_WITH_SALSA20_SHA1 -> TLS_RSA_PSK_WITH_SALSA20_SHA1
    int TLS_DHE_PSK_WITH_ESTREAM_SALSA20_SHA1 -> TLS_DHE_PSK_WITH_ESTREAM_SALSA20_SHA1
    int TLS_DHE_PSK_WITH_SALSA20_SHA1 -> TLS_DHE_PSK_WITH_SALSA20_SHA1
    int TLS_DHE_RSA_WITH_ESTREAM_SALSA20_SHA1 -> TLS_DHE_RSA_WITH_ESTREAM_SALSA20_SHA1
    int TLS_DHE_RSA_WITH_SALSA20_SHA1 -> TLS_DHE_RSA_WITH_SALSA20_SHA1
org.bouncycastle.crypto.tls.CipherType -> org.bouncycastle.crypto.tls.CipherType:
    int stream -> stream
    int block -> block
    int aead -> aead
org.bouncycastle.crypto.tls.ClientAuthenticationType -> org.bouncycastle.crypto.tls.ClientAuthenticationType:
    short anonymous -> anonymous
    short certificate_based -> certificate_based
    short psk -> psk
org.bouncycastle.crypto.tls.ClientCertificateType -> org.bouncycastle.crypto.tls.ClientCertificateType:
    short rsa_sign -> rsa_sign
    short dss_sign -> dss_sign
    short rsa_fixed_dh -> rsa_fixed_dh
    short dss_fixed_dh -> dss_fixed_dh
    short rsa_ephemeral_dh_RESERVED -> rsa_ephemeral_dh_RESERVED
    short dss_ephemeral_dh_RESERVED -> dss_ephemeral_dh_RESERVED
    short fortezza_dms_RESERVED -> fortezza_dms_RESERVED
    short ecdsa_sign -> ecdsa_sign
    short rsa_fixed_ecdh -> rsa_fixed_ecdh
    short ecdsa_fixed_ecdh -> ecdsa_fixed_ecdh
org.bouncycastle.crypto.tls.CombinedHash -> org.bouncycastle.crypto.tls.CombinedHash:
    org.bouncycastle.crypto.tls.TlsContext context -> context
    org.bouncycastle.crypto.Digest md5 -> md5
    org.bouncycastle.crypto.Digest sha1 -> sha1
    void init(org.bouncycastle.crypto.tls.TlsContext) -> init
    org.bouncycastle.crypto.tls.TlsHandshakeHash notifyPRFDetermined() -> notifyPRFDetermined
    void trackHashAlgorithm(short) -> trackHashAlgorithm
    void sealHashAlgorithms() -> sealHashAlgorithms
    org.bouncycastle.crypto.tls.TlsHandshakeHash stopTracking() -> stopTracking
    org.bouncycastle.crypto.Digest forkPRFHash() -> forkPRFHash
    byte[] getFinalHash(short) -> getFinalHash
    java.lang.String getAlgorithmName() -> getAlgorithmName
    int getDigestSize() -> getDigestSize
    void update(byte) -> update
    void update(byte[],int,int) -> update
    int doFinal(byte[],int) -> doFinal
    void reset() -> reset
    void ssl3Complete(org.bouncycastle.crypto.Digest,byte[],byte[],int) -> ssl3Complete
org.bouncycastle.crypto.tls.CompressionMethod -> org.bouncycastle.crypto.tls.CompressionMethod:
    short _null -> _null
    short NULL -> NULL
    short DEFLATE -> DEFLATE
org.bouncycastle.crypto.tls.ConnectionEnd -> org.bouncycastle.crypto.tls.ConnectionEnd:
    int server -> server
    int client -> client
org.bouncycastle.crypto.tls.ContentType -> org.bouncycastle.crypto.tls.ContentType:
    short change_cipher_spec -> change_cipher_spec
    short alert -> alert
    short handshake -> handshake
    short application_data -> application_data
    short heartbeat -> heartbeat
org.bouncycastle.crypto.tls.DTLSClientProtocol -> org.bouncycastle.crypto.tls.DTLSClientProtocol:
    org.bouncycastle.crypto.tls.DTLSTransport connect(org.bouncycastle.crypto.tls.TlsClient,org.bouncycastle.crypto.tls.DatagramTransport) -> connect
    org.bouncycastle.crypto.tls.DTLSTransport clientHandshake(org.bouncycastle.crypto.tls.DTLSClientProtocol$ClientHandshakeState,org.bouncycastle.crypto.tls.DTLSRecordLayer) -> clientHandshake
    byte[] generateCertificateVerify(org.bouncycastle.crypto.tls.DTLSClientProtocol$ClientHandshakeState,org.bouncycastle.crypto.tls.DigitallySigned) -> generateCertificateVerify
    byte[] generateClientHello(org.bouncycastle.crypto.tls.DTLSClientProtocol$ClientHandshakeState,org.bouncycastle.crypto.tls.TlsClient) -> generateClientHello
    byte[] generateClientKeyExchange(org.bouncycastle.crypto.tls.DTLSClientProtocol$ClientHandshakeState) -> generateClientKeyExchange
    void invalidateSession(org.bouncycastle.crypto.tls.DTLSClientProtocol$ClientHandshakeState) -> invalidateSession
    void processCertificateRequest(org.bouncycastle.crypto.tls.DTLSClientProtocol$ClientHandshakeState,byte[]) -> processCertificateRequest
    void processCertificateStatus(org.bouncycastle.crypto.tls.DTLSClientProtocol$ClientHandshakeState,byte[]) -> processCertificateStatus
    byte[] processHelloVerifyRequest(org.bouncycastle.crypto.tls.DTLSClientProtocol$ClientHandshakeState,byte[]) -> processHelloVerifyRequest
    void processNewSessionTicket(org.bouncycastle.crypto.tls.DTLSClientProtocol$ClientHandshakeState,byte[]) -> processNewSessionTicket
    org.bouncycastle.crypto.tls.Certificate processServerCertificate(org.bouncycastle.crypto.tls.DTLSClientProtocol$ClientHandshakeState,byte[]) -> processServerCertificate
    void processServerHello(org.bouncycastle.crypto.tls.DTLSClientProtocol$ClientHandshakeState,byte[]) -> processServerHello
    void processServerKeyExchange(org.bouncycastle.crypto.tls.DTLSClientProtocol$ClientHandshakeState,byte[]) -> processServerKeyExchange
    void processServerSupplementalData(org.bouncycastle.crypto.tls.DTLSClientProtocol$ClientHandshakeState,byte[]) -> processServerSupplementalData
    void reportServerVersion(org.bouncycastle.crypto.tls.DTLSClientProtocol$ClientHandshakeState,org.bouncycastle.crypto.tls.ProtocolVersion) -> reportServerVersion
    byte[] patchClientHelloWithCookie(byte[],byte[]) -> patchClientHelloWithCookie
org.bouncycastle.crypto.tls.DTLSClientProtocol$ClientHandshakeState -> org.bouncycastle.crypto.tls.DTLSClientProtocol$ClientHandshakeState:
    org.bouncycastle.crypto.tls.TlsClient client -> client
    org.bouncycastle.crypto.tls.TlsClientContextImpl clientContext -> clientContext
    org.bouncycastle.crypto.tls.TlsSession tlsSession -> tlsSession
    org.bouncycastle.crypto.tls.SessionParameters sessionParameters -> sessionParameters
    org.bouncycastle.crypto.tls.SessionParameters$Builder sessionParametersBuilder -> sessionParametersBuilder
    int[] offeredCipherSuites -> offeredCipherSuites
    short[] offeredCompressionMethods -> offeredCompressionMethods
    java.util.Hashtable clientExtensions -> clientExtensions
    byte[] selectedSessionID -> selectedSessionID
    int selectedCipherSuite -> selectedCipherSuite
    short selectedCompressionMethod -> selectedCompressionMethod
    boolean secure_renegotiation -> secure_renegotiation
    short maxFragmentLength -> maxFragmentLength
    boolean allowCertificateStatus -> allowCertificateStatus
    boolean expectSessionTicket -> expectSessionTicket
    org.bouncycastle.crypto.tls.TlsKeyExchange keyExchange -> keyExchange
    org.bouncycastle.crypto.tls.TlsAuthentication authentication -> authentication
    org.bouncycastle.crypto.tls.CertificateStatus certificateStatus -> certificateStatus
    org.bouncycastle.crypto.tls.CertificateRequest certificateRequest -> certificateRequest
    org.bouncycastle.crypto.tls.TlsCredentials clientCredentials -> clientCredentials
org.bouncycastle.crypto.tls.DTLSEpoch -> org.bouncycastle.crypto.tls.DTLSEpoch:
    org.bouncycastle.crypto.tls.DTLSReplayWindow replayWindow -> replayWindow
    int epoch -> epoch
    org.bouncycastle.crypto.tls.TlsCipher cipher -> cipher
    long sequence_number -> sequence_number
    long allocateSequenceNumber() -> allocateSequenceNumber
    org.bouncycastle.crypto.tls.TlsCipher getCipher() -> getCipher
    int getEpoch() -> getEpoch
    org.bouncycastle.crypto.tls.DTLSReplayWindow getReplayWindow() -> getReplayWindow
    long getSequence_number() -> getSequence_number
org.bouncycastle.crypto.tls.DTLSHandshakeRetransmit -> org.bouncycastle.crypto.tls.DTLSHandshakeRetransmit:
    void receivedHandshakeRecord(int,byte[],int,int) -> receivedHandshakeRecord
org.bouncycastle.crypto.tls.DTLSProtocol -> org.bouncycastle.crypto.tls.DTLSProtocol:
    java.security.SecureRandom secureRandom -> secureRandom
    void processFinished(byte[],byte[]) -> processFinished
    short evaluateMaxFragmentLengthExtension(java.util.Hashtable,java.util.Hashtable,short) -> evaluateMaxFragmentLengthExtension
    byte[] generateCertificate(org.bouncycastle.crypto.tls.Certificate) -> generateCertificate
    byte[] generateSupplementalData(java.util.Vector) -> generateSupplementalData
    void validateSelectedCipherSuite(int,short) -> validateSelectedCipherSuite
org.bouncycastle.crypto.tls.DTLSReassembler -> org.bouncycastle.crypto.tls.DTLSReassembler:
    short msg_type -> msg_type
    byte[] body -> body
    java.util.Vector missing -> missing
    short getType() -> getType
    byte[] getBodyIfComplete() -> getBodyIfComplete
    void contributeFragment(short,int,byte[],int,int,int) -> contributeFragment
    void reset() -> reset
org.bouncycastle.crypto.tls.DTLSReassembler$Range -> org.bouncycastle.crypto.tls.DTLSReassembler$Range:
    int start -> start
    int end -> end
    int getStart() -> getStart
    void setStart(int) -> setStart
    int getEnd() -> getEnd
    void setEnd(int) -> setEnd
org.bouncycastle.crypto.tls.DTLSRecordLayer -> org.bouncycastle.crypto.tls.DTLSRecordLayer:
    int RECORD_HEADER_LENGTH -> RECORD_HEADER_LENGTH
    int MAX_FRAGMENT_LENGTH -> MAX_FRAGMENT_LENGTH
    long TCP_MSL -> TCP_MSL
    long RETRANSMIT_TIMEOUT -> RETRANSMIT_TIMEOUT
    org.bouncycastle.crypto.tls.DatagramTransport transport -> transport
    org.bouncycastle.crypto.tls.TlsContext context -> context
    org.bouncycastle.crypto.tls.TlsPeer peer -> peer
    org.bouncycastle.crypto.tls.ByteQueue recordQueue -> recordQueue
    boolean closed -> closed
    boolean failed -> failed
    org.bouncycastle.crypto.tls.ProtocolVersion discoveredPeerVersion -> discoveredPeerVersion
    boolean inHandshake -> inHandshake
    int plaintextLimit -> plaintextLimit
    org.bouncycastle.crypto.tls.DTLSEpoch currentEpoch -> currentEpoch
    org.bouncycastle.crypto.tls.DTLSEpoch pendingEpoch -> pendingEpoch
    org.bouncycastle.crypto.tls.DTLSEpoch readEpoch -> readEpoch
    org.bouncycastle.crypto.tls.DTLSEpoch writeEpoch -> writeEpoch
    org.bouncycastle.crypto.tls.DTLSHandshakeRetransmit retransmit -> retransmit
    org.bouncycastle.crypto.tls.DTLSEpoch retransmitEpoch -> retransmitEpoch
    long retransmitExpiry -> retransmitExpiry
    void setPlaintextLimit(int) -> setPlaintextLimit
    org.bouncycastle.crypto.tls.ProtocolVersion getDiscoveredPeerVersion() -> getDiscoveredPeerVersion
    org.bouncycastle.crypto.tls.ProtocolVersion resetDiscoveredPeerVersion() -> resetDiscoveredPeerVersion
    void initPendingEpoch(org.bouncycastle.crypto.tls.TlsCipher) -> initPendingEpoch
    void handshakeSuccessful(org.bouncycastle.crypto.tls.DTLSHandshakeRetransmit) -> handshakeSuccessful
    void resetWriteEpoch() -> resetWriteEpoch
    int getReceiveLimit() -> getReceiveLimit
    int getSendLimit() -> getSendLimit
    int receive(byte[],int,int,int) -> receive
    void send(byte[],int,int) -> send
    void close() -> close
    void fail(short) -> fail
    void warn(short,java.lang.String) -> warn
    void closeTransport() -> closeTransport
    void raiseAlert(short,short,java.lang.String,java.lang.Exception) -> raiseAlert
    int receiveRecord(byte[],int,int,int) -> receiveRecord
    void sendRecord(short,byte[],int,int) -> sendRecord
    long getMacSequenceNumber(int,long) -> getMacSequenceNumber
org.bouncycastle.crypto.tls.DTLSReliableHandshake -> org.bouncycastle.crypto.tls.DTLSReliableHandshake:
    int MAX_RECEIVE_AHEAD -> MAX_RECEIVE_AHEAD
    org.bouncycastle.crypto.tls.DTLSRecordLayer recordLayer -> recordLayer
    org.bouncycastle.crypto.tls.TlsHandshakeHash handshakeHash -> handshakeHash
    java.util.Hashtable currentInboundFlight -> currentInboundFlight
    java.util.Hashtable previousInboundFlight -> previousInboundFlight
    java.util.Vector outboundFlight -> outboundFlight
    boolean sending -> sending
    int message_seq -> message_seq
    int next_receive_seq -> next_receive_seq
    void notifyHelloComplete() -> notifyHelloComplete
    org.bouncycastle.crypto.tls.TlsHandshakeHash getHandshakeHash() -> getHandshakeHash
    org.bouncycastle.crypto.tls.TlsHandshakeHash prepareToFinish() -> prepareToFinish
    void sendMessage(short,byte[]) -> sendMessage
    byte[] receiveMessageBody(short) -> receiveMessageBody
    org.bouncycastle.crypto.tls.DTLSReliableHandshake$Message receiveMessage() -> receiveMessage
    void finish() -> finish
    void resetHandshakeMessagesDigest() -> resetHandshakeMessagesDigest
    void checkInboundFlight() -> checkInboundFlight
    void prepareInboundFlight() -> prepareInboundFlight
    void resendOutboundFlight() -> resendOutboundFlight
    org.bouncycastle.crypto.tls.DTLSReliableHandshake$Message updateHandshakeMessagesDigest(org.bouncycastle.crypto.tls.DTLSReliableHandshake$Message) -> updateHandshakeMessagesDigest
    void writeMessage(org.bouncycastle.crypto.tls.DTLSReliableHandshake$Message) -> writeMessage
    void writeHandshakeFragment(org.bouncycastle.crypto.tls.DTLSReliableHandshake$Message,int,int) -> writeHandshakeFragment
    boolean checkAll(java.util.Hashtable) -> checkAll
    void resetAll(java.util.Hashtable) -> resetAll
    int access$100(org.bouncycastle.crypto.tls.DTLSReliableHandshake) -> access$100
    java.util.Hashtable access$200(org.bouncycastle.crypto.tls.DTLSReliableHandshake) -> access$200
    boolean access$300(java.util.Hashtable) -> access$300
    void access$400(org.bouncycastle.crypto.tls.DTLSReliableHandshake) -> access$400
    void access$500(java.util.Hashtable) -> access$500
org.bouncycastle.crypto.tls.DTLSReliableHandshake$1 -> org.bouncycastle.crypto.tls.DTLSReliableHandshake$1:
    org.bouncycastle.crypto.tls.DTLSReliableHandshake this$0 -> this$0
    void receivedHandshakeRecord(int,byte[],int,int) -> receivedHandshakeRecord
org.bouncycastle.crypto.tls.DTLSReliableHandshake$Message -> org.bouncycastle.crypto.tls.DTLSReliableHandshake$Message:
    int message_seq -> message_seq
    short msg_type -> msg_type
    byte[] body -> body
    int getSeq() -> getSeq
    short getType() -> getType
    byte[] getBody() -> getBody
org.bouncycastle.crypto.tls.DTLSReliableHandshake$RecordLayerBuffer -> org.bouncycastle.crypto.tls.DTLSReliableHandshake$RecordLayerBuffer:
    void sendToRecordLayer(org.bouncycastle.crypto.tls.DTLSRecordLayer) -> sendToRecordLayer
org.bouncycastle.crypto.tls.DTLSReplayWindow -> org.bouncycastle.crypto.tls.DTLSReplayWindow:
    long VALID_SEQ_MASK -> VALID_SEQ_MASK
    long WINDOW_SIZE -> WINDOW_SIZE
    long latestConfirmedSeq -> latestConfirmedSeq
    long bitmap -> bitmap
    boolean shouldDiscard(long) -> shouldDiscard
    void reportAuthenticated(long) -> reportAuthenticated
    void reset() -> reset
org.bouncycastle.crypto.tls.DTLSServerProtocol -> org.bouncycastle.crypto.tls.DTLSServerProtocol:
    boolean verifyRequests -> verifyRequests
    boolean getVerifyRequests() -> getVerifyRequests
    void setVerifyRequests(boolean) -> setVerifyRequests
    org.bouncycastle.crypto.tls.DTLSTransport accept(org.bouncycastle.crypto.tls.TlsServer,org.bouncycastle.crypto.tls.DatagramTransport) -> accept
    org.bouncycastle.crypto.tls.DTLSTransport serverHandshake(org.bouncycastle.crypto.tls.DTLSServerProtocol$ServerHandshakeState,org.bouncycastle.crypto.tls.DTLSRecordLayer) -> serverHandshake
    byte[] generateCertificateRequest(org.bouncycastle.crypto.tls.DTLSServerProtocol$ServerHandshakeState,org.bouncycastle.crypto.tls.CertificateRequest) -> generateCertificateRequest
    byte[] generateCertificateStatus(org.bouncycastle.crypto.tls.DTLSServerProtocol$ServerHandshakeState,org.bouncycastle.crypto.tls.CertificateStatus) -> generateCertificateStatus
    byte[] generateNewSessionTicket(org.bouncycastle.crypto.tls.DTLSServerProtocol$ServerHandshakeState,org.bouncycastle.crypto.tls.NewSessionTicket) -> generateNewSessionTicket
    byte[] generateServerHello(org.bouncycastle.crypto.tls.DTLSServerProtocol$ServerHandshakeState) -> generateServerHello
    void notifyClientCertificate(org.bouncycastle.crypto.tls.DTLSServerProtocol$ServerHandshakeState,org.bouncycastle.crypto.tls.Certificate) -> notifyClientCertificate
    void processClientCertificate(org.bouncycastle.crypto.tls.DTLSServerProtocol$ServerHandshakeState,byte[]) -> processClientCertificate
    void processCertificateVerify(org.bouncycastle.crypto.tls.DTLSServerProtocol$ServerHandshakeState,byte[],org.bouncycastle.crypto.tls.TlsHandshakeHash) -> processCertificateVerify
    void processClientHello(org.bouncycastle.crypto.tls.DTLSServerProtocol$ServerHandshakeState,byte[]) -> processClientHello
    void processClientKeyExchange(org.bouncycastle.crypto.tls.DTLSServerProtocol$ServerHandshakeState,byte[]) -> processClientKeyExchange
    void processClientSupplementalData(org.bouncycastle.crypto.tls.DTLSServerProtocol$ServerHandshakeState,byte[]) -> processClientSupplementalData
    boolean expectCertificateVerifyMessage(org.bouncycastle.crypto.tls.DTLSServerProtocol$ServerHandshakeState) -> expectCertificateVerifyMessage
org.bouncycastle.crypto.tls.DTLSServerProtocol$ServerHandshakeState -> org.bouncycastle.crypto.tls.DTLSServerProtocol$ServerHandshakeState:
    org.bouncycastle.crypto.tls.TlsServer server -> server
    org.bouncycastle.crypto.tls.TlsServerContextImpl serverContext -> serverContext
    int[] offeredCipherSuites -> offeredCipherSuites
    short[] offeredCompressionMethods -> offeredCompressionMethods
    java.util.Hashtable clientExtensions -> clientExtensions
    int selectedCipherSuite -> selectedCipherSuite
    short selectedCompressionMethod -> selectedCompressionMethod
    boolean secure_renegotiation -> secure_renegotiation
    short maxFragmentLength -> maxFragmentLength
    boolean allowCertificateStatus -> allowCertificateStatus
    boolean expectSessionTicket -> expectSessionTicket
    java.util.Hashtable serverExtensions -> serverExtensions
    org.bouncycastle.crypto.tls.TlsKeyExchange keyExchange -> keyExchange
    org.bouncycastle.crypto.tls.TlsCredentials serverCredentials -> serverCredentials
    org.bouncycastle.crypto.tls.CertificateRequest certificateRequest -> certificateRequest
    short clientCertificateType -> clientCertificateType
    org.bouncycastle.crypto.tls.Certificate clientCertificate -> clientCertificate
org.bouncycastle.crypto.tls.DTLSTransport -> org.bouncycastle.crypto.tls.DTLSTransport:
    org.bouncycastle.crypto.tls.DTLSRecordLayer recordLayer -> recordLayer
    int getReceiveLimit() -> getReceiveLimit
    int getSendLimit() -> getSendLimit
    int receive(byte[],int,int,int) -> receive
    void send(byte[],int,int) -> send
    void close() -> close
org.bouncycastle.crypto.tls.DatagramTransport -> org.bouncycastle.crypto.tls.DatagramTransport:
    int getReceiveLimit() -> getReceiveLimit
    int getSendLimit() -> getSendLimit
    int receive(byte[],int,int,int) -> receive
    void send(byte[],int,int) -> send
    void close() -> close
org.bouncycastle.crypto.tls.DefaultTlsAgreementCredentials -> org.bouncycastle.crypto.tls.DefaultTlsAgreementCredentials:
    org.bouncycastle.crypto.tls.Certificate certificate -> certificate
    org.bouncycastle.crypto.params.AsymmetricKeyParameter privateKey -> privateKey
    org.bouncycastle.crypto.BasicAgreement basicAgreement -> basicAgreement
    boolean truncateAgreement -> truncateAgreement
    org.bouncycastle.crypto.tls.Certificate getCertificate() -> getCertificate
    byte[] generateAgreement(org.bouncycastle.crypto.params.AsymmetricKeyParameter) -> generateAgreement
org.bouncycastle.crypto.tls.DefaultTlsCipherFactory -> org.bouncycastle.crypto.tls.DefaultTlsCipherFactory:
    org.bouncycastle.crypto.tls.TlsCipher createCipher(org.bouncycastle.crypto.tls.TlsContext,int,int) -> createCipher
    org.bouncycastle.crypto.tls.TlsBlockCipher createAESCipher(org.bouncycastle.crypto.tls.TlsContext,int,int) -> createAESCipher
    org.bouncycastle.crypto.tls.TlsBlockCipher createCamelliaCipher(org.bouncycastle.crypto.tls.TlsContext,int,int) -> createCamelliaCipher
    org.bouncycastle.crypto.tls.TlsCipher createChaCha20Poly1305(org.bouncycastle.crypto.tls.TlsContext) -> createChaCha20Poly1305
    org.bouncycastle.crypto.tls.TlsAEADCipher createCipher_AES_CCM(org.bouncycastle.crypto.tls.TlsContext,int,int) -> createCipher_AES_CCM
    org.bouncycastle.crypto.tls.TlsAEADCipher createCipher_AES_GCM(org.bouncycastle.crypto.tls.TlsContext,int,int) -> createCipher_AES_GCM
    org.bouncycastle.crypto.tls.TlsAEADCipher createCipher_Camellia_GCM(org.bouncycastle.crypto.tls.TlsContext,int,int) -> createCipher_Camellia_GCM
    org.bouncycastle.crypto.tls.TlsBlockCipher createDESedeCipher(org.bouncycastle.crypto.tls.TlsContext,int) -> createDESedeCipher
    org.bouncycastle.crypto.tls.TlsNullCipher createNullCipher(org.bouncycastle.crypto.tls.TlsContext,int) -> createNullCipher
    org.bouncycastle.crypto.tls.TlsStreamCipher createRC4Cipher(org.bouncycastle.crypto.tls.TlsContext,int,int) -> createRC4Cipher
    org.bouncycastle.crypto.tls.TlsStreamCipher createSalsa20Cipher(org.bouncycastle.crypto.tls.TlsContext,int,int,int) -> createSalsa20Cipher
    org.bouncycastle.crypto.tls.TlsBlockCipher createSEEDCipher(org.bouncycastle.crypto.tls.TlsContext,int) -> createSEEDCipher
    org.bouncycastle.crypto.BlockCipher createAESEngine() -> createAESEngine
    org.bouncycastle.crypto.BlockCipher createCamelliaEngine() -> createCamelliaEngine
    org.bouncycastle.crypto.BlockCipher createAESBlockCipher() -> createAESBlockCipher
    org.bouncycastle.crypto.modes.AEADBlockCipher createAEADBlockCipher_AES_CCM() -> createAEADBlockCipher_AES_CCM
    org.bouncycastle.crypto.modes.AEADBlockCipher createAEADBlockCipher_AES_GCM() -> createAEADBlockCipher_AES_GCM
    org.bouncycastle.crypto.modes.AEADBlockCipher createAEADBlockCipher_Camellia_GCM() -> createAEADBlockCipher_Camellia_GCM
    org.bouncycastle.crypto.BlockCipher createCamelliaBlockCipher() -> createCamelliaBlockCipher
    org.bouncycastle.crypto.BlockCipher createDESedeBlockCipher() -> createDESedeBlockCipher
    org.bouncycastle.crypto.StreamCipher createRC4StreamCipher() -> createRC4StreamCipher
    org.bouncycastle.crypto.StreamCipher createSalsa20StreamCipher(int) -> createSalsa20StreamCipher
    org.bouncycastle.crypto.BlockCipher createSEEDBlockCipher() -> createSEEDBlockCipher
    org.bouncycastle.crypto.Digest createHMACDigest(int) -> createHMACDigest
org.bouncycastle.crypto.tls.DefaultTlsClient -> org.bouncycastle.crypto.tls.DefaultTlsClient:
    int[] getCipherSuites() -> getCipherSuites
    org.bouncycastle.crypto.tls.TlsKeyExchange getKeyExchange() -> getKeyExchange
    org.bouncycastle.crypto.tls.TlsCipher getCipher() -> getCipher
    org.bouncycastle.crypto.tls.TlsKeyExchange createDHKeyExchange(int) -> createDHKeyExchange
    org.bouncycastle.crypto.tls.TlsKeyExchange createDHEKeyExchange(int) -> createDHEKeyExchange
    org.bouncycastle.crypto.tls.TlsKeyExchange createECDHKeyExchange(int) -> createECDHKeyExchange
    org.bouncycastle.crypto.tls.TlsKeyExchange createECDHEKeyExchange(int) -> createECDHEKeyExchange
    org.bouncycastle.crypto.tls.TlsKeyExchange createRSAKeyExchange() -> createRSAKeyExchange
org.bouncycastle.crypto.tls.DefaultTlsEncryptionCredentials -> org.bouncycastle.crypto.tls.DefaultTlsEncryptionCredentials:
    org.bouncycastle.crypto.tls.TlsContext context -> context
    org.bouncycastle.crypto.tls.Certificate certificate -> certificate
    org.bouncycastle.crypto.params.AsymmetricKeyParameter privateKey -> privateKey
    org.bouncycastle.crypto.tls.Certificate getCertificate() -> getCertificate
    byte[] decryptPreMasterSecret(byte[]) -> decryptPreMasterSecret
org.bouncycastle.crypto.tls.DefaultTlsServer -> org.bouncycastle.crypto.tls.DefaultTlsServer:
    org.bouncycastle.crypto.tls.TlsEncryptionCredentials getRSAEncryptionCredentials() -> getRSAEncryptionCredentials
    org.bouncycastle.crypto.tls.TlsSignerCredentials getRSASignerCredentials() -> getRSASignerCredentials
    org.bouncycastle.crypto.params.DHParameters getDHParameters() -> getDHParameters
    int[] getCipherSuites() -> getCipherSuites
    org.bouncycastle.crypto.tls.TlsCredentials getCredentials() -> getCredentials
    org.bouncycastle.crypto.tls.TlsKeyExchange getKeyExchange() -> getKeyExchange
    org.bouncycastle.crypto.tls.TlsCipher getCipher() -> getCipher
    org.bouncycastle.crypto.tls.TlsKeyExchange createDHKeyExchange(int) -> createDHKeyExchange
    org.bouncycastle.crypto.tls.TlsKeyExchange createDHEKeyExchange(int) -> createDHEKeyExchange
    org.bouncycastle.crypto.tls.TlsKeyExchange createECDHKeyExchange(int) -> createECDHKeyExchange
    org.bouncycastle.crypto.tls.TlsKeyExchange createECDHEKeyExchange(int) -> createECDHEKeyExchange
    org.bouncycastle.crypto.tls.TlsKeyExchange createRSAKeyExchange() -> createRSAKeyExchange
org.bouncycastle.crypto.tls.DefaultTlsSignerCredentials -> org.bouncycastle.crypto.tls.DefaultTlsSignerCredentials:
    org.bouncycastle.crypto.tls.TlsContext context -> context
    org.bouncycastle.crypto.tls.Certificate certificate -> certificate
    org.bouncycastle.crypto.params.AsymmetricKeyParameter privateKey -> privateKey
    org.bouncycastle.crypto.tls.SignatureAndHashAlgorithm signatureAndHashAlgorithm -> signatureAndHashAlgorithm
    org.bouncycastle.crypto.tls.TlsSigner signer -> signer
    org.bouncycastle.crypto.tls.Certificate getCertificate() -> getCertificate
    byte[] generateCertificateSignature(byte[]) -> generateCertificateSignature
    org.bouncycastle.crypto.tls.SignatureAndHashAlgorithm getSignatureAndHashAlgorithm() -> getSignatureAndHashAlgorithm
org.bouncycastle.crypto.tls.DeferredHash -> org.bouncycastle.crypto.tls.DeferredHash:
    int BUFFERING_HASH_LIMIT -> BUFFERING_HASH_LIMIT
    org.bouncycastle.crypto.tls.TlsContext context -> context
    org.bouncycastle.crypto.tls.DigestInputBuffer buf -> buf
    java.util.Hashtable hashes -> hashes
    java.lang.Short prfHashAlgorithm -> prfHashAlgorithm
    void init(org.bouncycastle.crypto.tls.TlsContext) -> init
    org.bouncycastle.crypto.tls.TlsHandshakeHash notifyPRFDetermined() -> notifyPRFDetermined
    void trackHashAlgorithm(short) -> trackHashAlgorithm
    void sealHashAlgorithms() -> sealHashAlgorithms
    org.bouncycastle.crypto.tls.TlsHandshakeHash stopTracking() -> stopTracking
    org.bouncycastle.crypto.Digest forkPRFHash() -> forkPRFHash
    byte[] getFinalHash(short) -> getFinalHash
    java.lang.String getAlgorithmName() -> getAlgorithmName
    int getDigestSize() -> getDigestSize
    void update(byte) -> update
    void update(byte[],int,int) -> update
    int doFinal(byte[],int) -> doFinal
    void reset() -> reset
    void checkStopBuffering() -> checkStopBuffering
    void checkTrackingHash(java.lang.Short) -> checkTrackingHash
org.bouncycastle.crypto.tls.DigestAlgorithm -> org.bouncycastle.crypto.tls.DigestAlgorithm:
    int NULL -> NULL
    int MD5 -> MD5
    int SHA -> SHA
    int SHA256 -> SHA256
    int SHA384 -> SHA384
    int SHA512 -> SHA512
org.bouncycastle.crypto.tls.DigestInputBuffer -> org.bouncycastle.crypto.tls.DigestInputBuffer:
    void updateDigest(org.bouncycastle.crypto.Digest) -> updateDigest
org.bouncycastle.crypto.tls.DigitallySigned -> org.bouncycastle.crypto.tls.DigitallySigned:
    org.bouncycastle.crypto.tls.SignatureAndHashAlgorithm algorithm -> algorithm
    byte[] signature -> signature
    org.bouncycastle.crypto.tls.SignatureAndHashAlgorithm getAlgorithm() -> getAlgorithm
    byte[] getSignature() -> getSignature
    void encode(java.io.OutputStream) -> encode
    org.bouncycastle.crypto.tls.DigitallySigned parse(org.bouncycastle.crypto.tls.TlsContext,java.io.InputStream) -> parse
org.bouncycastle.crypto.tls.ECBasisType -> org.bouncycastle.crypto.tls.ECBasisType:
    short ec_basis_trinomial -> ec_basis_trinomial
    short ec_basis_pentanomial -> ec_basis_pentanomial
    boolean isValid(short) -> isValid
org.bouncycastle.crypto.tls.ECCurveType -> org.bouncycastle.crypto.tls.ECCurveType:
    short explicit_prime -> explicit_prime
    short explicit_char2 -> explicit_char2
    short named_curve -> named_curve
org.bouncycastle.crypto.tls.ECPointFormat -> org.bouncycastle.crypto.tls.ECPointFormat:
    short uncompressed -> uncompressed
    short ansiX962_compressed_prime -> ansiX962_compressed_prime
    short ansiX962_compressed_char2 -> ansiX962_compressed_char2
org.bouncycastle.crypto.tls.EncryptionAlgorithm -> org.bouncycastle.crypto.tls.EncryptionAlgorithm:
    int NULL -> NULL
    int RC4_40 -> RC4_40
    int RC4_128 -> RC4_128
    int RC2_CBC_40 -> RC2_CBC_40
    int IDEA_CBC -> IDEA_CBC
    int DES40_CBC -> DES40_CBC
    int DES_CBC -> DES_CBC
    int _3DES_EDE_CBC -> _3DES_EDE_CBC
    int AES_128_CBC -> AES_128_CBC
    int AES_256_CBC -> AES_256_CBC
    int AES_128_GCM -> AES_128_GCM
    int AES_256_GCM -> AES_256_GCM
    int CAMELLIA_128_CBC -> CAMELLIA_128_CBC
    int CAMELLIA_256_CBC -> CAMELLIA_256_CBC
    int SEED_CBC -> SEED_CBC
    int AES_128_CCM -> AES_128_CCM
    int AES_128_CCM_8 -> AES_128_CCM_8
    int AES_256_CCM -> AES_256_CCM
    int AES_256_CCM_8 -> AES_256_CCM_8
    int CAMELLIA_128_GCM -> CAMELLIA_128_GCM
    int CAMELLIA_256_GCM -> CAMELLIA_256_GCM
    int ESTREAM_SALSA20 -> ESTREAM_SALSA20
    int SALSA20 -> SALSA20
    int AEAD_CHACHA20_POLY1305 -> AEAD_CHACHA20_POLY1305
org.bouncycastle.crypto.tls.ExporterLabel -> org.bouncycastle.crypto.tls.ExporterLabel:
    java.lang.String client_finished -> client_finished
    java.lang.String server_finished -> server_finished
    java.lang.String master_secret -> master_secret
    java.lang.String key_expansion -> key_expansion
    java.lang.String client_EAP_encryption -> client_EAP_encryption
    java.lang.String ttls_keying_material -> ttls_keying_material
    java.lang.String ttls_challenge -> ttls_challenge
    java.lang.String dtls_srtp -> dtls_srtp
org.bouncycastle.crypto.tls.ExtensionType -> org.bouncycastle.crypto.tls.ExtensionType:
    int server_name -> server_name
    int max_fragment_length -> max_fragment_length
    int client_certificate_url -> client_certificate_url
    int trusted_ca_keys -> trusted_ca_keys
    int truncated_hmac -> truncated_hmac
    int status_request -> status_request
    int user_mapping -> user_mapping
    int elliptic_curves -> elliptic_curves
    int ec_point_formats -> ec_point_formats
    int srp -> srp
    int signature_algorithms -> signature_algorithms
    int use_srtp -> use_srtp
    int heartbeat -> heartbeat
    int session_ticket -> session_ticket
    int encrypt_then_mac -> encrypt_then_mac
    int renegotiation_info -> renegotiation_info
org.bouncycastle.crypto.tls.HandshakeType -> org.bouncycastle.crypto.tls.HandshakeType:
    short hello_request -> hello_request
    short client_hello -> client_hello
    short server_hello -> server_hello
    short certificate -> certificate
    short server_key_exchange -> server_key_exchange
    short certificate_request -> certificate_request
    short server_hello_done -> server_hello_done
    short certificate_verify -> certificate_verify
    short client_key_exchange -> client_key_exchange
    short finished -> finished
    short certificate_url -> certificate_url
    short certificate_status -> certificate_status
    short hello_verify_request -> hello_verify_request
    short supplemental_data -> supplemental_data
    short session_ticket -> session_ticket
org.bouncycastle.crypto.tls.HashAlgorithm -> org.bouncycastle.crypto.tls.HashAlgorithm:
    short none -> none
    short md5 -> md5
    short sha1 -> sha1
    short sha224 -> sha224
    short sha256 -> sha256
    short sha384 -> sha384
    short sha512 -> sha512
org.bouncycastle.crypto.tls.HeartbeatExtension -> org.bouncycastle.crypto.tls.HeartbeatExtension:
    short mode -> mode
    short getMode() -> getMode
    void encode(java.io.OutputStream) -> encode
    org.bouncycastle.crypto.tls.HeartbeatExtension parse(java.io.InputStream) -> parse
org.bouncycastle.crypto.tls.HeartbeatMessage -> org.bouncycastle.crypto.tls.HeartbeatMessage:
    short type -> type
    byte[] payload -> payload
    int paddingLength -> paddingLength
    void encode(org.bouncycastle.crypto.tls.TlsContext,java.io.OutputStream) -> encode
    org.bouncycastle.crypto.tls.HeartbeatMessage parse(java.io.InputStream) -> parse
org.bouncycastle.crypto.tls.HeartbeatMessage$PayloadBuffer -> org.bouncycastle.crypto.tls.HeartbeatMessage$PayloadBuffer:
    byte[] toTruncatedByteArray(int) -> toTruncatedByteArray
org.bouncycastle.crypto.tls.HeartbeatMessageType -> org.bouncycastle.crypto.tls.HeartbeatMessageType:
    short heartbeat_request -> heartbeat_request
    short heartbeat_response -> heartbeat_response
    boolean isValid(short) -> isValid
org.bouncycastle.crypto.tls.HeartbeatMode -> org.bouncycastle.crypto.tls.HeartbeatMode:
    short peer_allowed_to_send -> peer_allowed_to_send
    short peer_not_allowed_to_send -> peer_not_allowed_to_send
    boolean isValid(short) -> isValid
org.bouncycastle.crypto.tls.KeyExchangeAlgorithm -> org.bouncycastle.crypto.tls.KeyExchangeAlgorithm:
    int NULL -> NULL
    int RSA -> RSA
    int RSA_EXPORT -> RSA_EXPORT
    int DHE_DSS -> DHE_DSS
    int DHE_DSS_EXPORT -> DHE_DSS_EXPORT
    int DHE_RSA -> DHE_RSA
    int DHE_RSA_EXPORT -> DHE_RSA_EXPORT
    int DH_DSS -> DH_DSS
    int DH_DSS_EXPORT -> DH_DSS_EXPORT
    int DH_RSA -> DH_RSA
    int DH_RSA_EXPORT -> DH_RSA_EXPORT
    int DH_anon -> DH_anon
    int DH_anon_EXPORT -> DH_anon_EXPORT
    int PSK -> PSK
    int DHE_PSK -> DHE_PSK
    int RSA_PSK -> RSA_PSK
    int ECDH_ECDSA -> ECDH_ECDSA
    int ECDHE_ECDSA -> ECDHE_ECDSA
    int ECDH_RSA -> ECDH_RSA
    int ECDHE_RSA -> ECDHE_RSA
    int ECDH_anon -> ECDH_anon
    int SRP -> SRP
    int SRP_DSS -> SRP_DSS
    int SRP_RSA -> SRP_RSA
    int ECDHE_PSK -> ECDHE_PSK
org.bouncycastle.crypto.tls.LegacyTlsAuthentication -> org.bouncycastle.crypto.tls.LegacyTlsAuthentication:
    org.bouncycastle.crypto.tls.CertificateVerifyer verifyer -> verifyer
    void notifyServerCertificate(org.bouncycastle.crypto.tls.Certificate) -> notifyServerCertificate
org.bouncycastle.crypto.tls.LegacyTlsClient -> org.bouncycastle.crypto.tls.LegacyTlsClient:
    org.bouncycastle.crypto.tls.CertificateVerifyer verifyer -> verifyer
    org.bouncycastle.crypto.tls.TlsAuthentication getAuthentication() -> getAuthentication
org.bouncycastle.crypto.tls.MACAlgorithm -> org.bouncycastle.crypto.tls.MACAlgorithm:
    int _null -> _null
    int md5 -> md5
    int sha -> sha
    int hmac_md5 -> hmac_md5
    int hmac_sha1 -> hmac_sha1
    int hmac_sha256 -> hmac_sha256
    int hmac_sha384 -> hmac_sha384
    int hmac_sha512 -> hmac_sha512
org.bouncycastle.crypto.tls.MaxFragmentLength -> org.bouncycastle.crypto.tls.MaxFragmentLength:
    short pow2_9 -> pow2_9
    short pow2_10 -> pow2_10
    short pow2_11 -> pow2_11
    short pow2_12 -> pow2_12
    boolean isValid(short) -> isValid
org.bouncycastle.crypto.tls.NameType -> org.bouncycastle.crypto.tls.NameType:
    short host_name -> host_name
org.bouncycastle.crypto.tls.NamedCurve -> org.bouncycastle.crypto.tls.NamedCurve:
    int sect163k1 -> sect163k1
    int sect163r1 -> sect163r1
    int sect163r2 -> sect163r2
    int sect193r1 -> sect193r1
    int sect193r2 -> sect193r2
    int sect233k1 -> sect233k1
    int sect233r1 -> sect233r1
    int sect239k1 -> sect239k1
    int sect283k1 -> sect283k1
    int sect283r1 -> sect283r1
    int sect409k1 -> sect409k1
    int sect409r1 -> sect409r1
    int sect571k1 -> sect571k1
    int sect571r1 -> sect571r1
    int secp160k1 -> secp160k1
    int secp160r1 -> secp160r1
    int secp160r2 -> secp160r2
    int secp192k1 -> secp192k1
    int secp192r1 -> secp192r1
    int secp224k1 -> secp224k1
    int secp224r1 -> secp224r1
    int secp256k1 -> secp256k1
    int secp256r1 -> secp256r1
    int secp384r1 -> secp384r1
    int secp521r1 -> secp521r1
    int brainpoolP256r1 -> brainpoolP256r1
    int brainpoolP384r1 -> brainpoolP384r1
    int brainpoolP512r1 -> brainpoolP512r1
    int arbitrary_explicit_prime_curves -> arbitrary_explicit_prime_curves
    int arbitrary_explicit_char2_curves -> arbitrary_explicit_char2_curves
    boolean isValid(int) -> isValid
    boolean refersToASpecificNamedCurve(int) -> refersToASpecificNamedCurve
org.bouncycastle.crypto.tls.NewSessionTicket -> org.bouncycastle.crypto.tls.NewSessionTicket:
    long ticketLifetimeHint -> ticketLifetimeHint
    byte[] ticket -> ticket
    long getTicketLifetimeHint() -> getTicketLifetimeHint
    byte[] getTicket() -> getTicket
    void encode(java.io.OutputStream) -> encode
    org.bouncycastle.crypto.tls.NewSessionTicket parse(java.io.InputStream) -> parse
org.bouncycastle.crypto.tls.OCSPStatusRequest -> org.bouncycastle.crypto.tls.OCSPStatusRequest:
    java.util.Vector responderIDList -> responderIDList
    org.bouncycastle.asn1.x509.Extensions requestExtensions -> requestExtensions
    java.util.Vector getResponderIDList() -> getResponderIDList
    org.bouncycastle.asn1.x509.Extensions getRequestExtensions() -> getRequestExtensions
    void encode(java.io.OutputStream) -> encode
    org.bouncycastle.crypto.tls.OCSPStatusRequest parse(java.io.InputStream) -> parse
org.bouncycastle.crypto.tls.PRFAlgorithm -> org.bouncycastle.crypto.tls.PRFAlgorithm:
    int tls_prf_legacy -> tls_prf_legacy
    int tls_prf_sha256 -> tls_prf_sha256
    int tls_prf_sha384 -> tls_prf_sha384
org.bouncycastle.crypto.tls.PSKTlsClient -> org.bouncycastle.crypto.tls.PSKTlsClient:
    org.bouncycastle.crypto.tls.TlsPSKIdentity pskIdentity -> pskIdentity
    int[] getCipherSuites() -> getCipherSuites
    org.bouncycastle.crypto.tls.TlsKeyExchange getKeyExchange() -> getKeyExchange
    org.bouncycastle.crypto.tls.TlsCipher getCipher() -> getCipher
    org.bouncycastle.crypto.tls.TlsKeyExchange createPSKKeyExchange(int) -> createPSKKeyExchange
org.bouncycastle.crypto.tls.ProtocolVersion -> org.bouncycastle.crypto.tls.ProtocolVersion:
    org.bouncycastle.crypto.tls.ProtocolVersion SSLv3 -> SSLv3
    org.bouncycastle.crypto.tls.ProtocolVersion TLSv10 -> TLSv10
    org.bouncycastle.crypto.tls.ProtocolVersion TLSv11 -> TLSv11
    org.bouncycastle.crypto.tls.ProtocolVersion TLSv12 -> TLSv12
    org.bouncycastle.crypto.tls.ProtocolVersion DTLSv10 -> DTLSv10
    org.bouncycastle.crypto.tls.ProtocolVersion DTLSv12 -> DTLSv12
    int version -> version
    java.lang.String name -> name
    int getFullVersion() -> getFullVersion
    int getMajorVersion() -> getMajorVersion
    int getMinorVersion() -> getMinorVersion
    boolean isDTLS() -> isDTLS
    boolean isSSL() -> isSSL
    boolean isTLS() -> isTLS
    org.bouncycastle.crypto.tls.ProtocolVersion getEquivalentTLSVersion() -> getEquivalentTLSVersion
    boolean isEqualOrEarlierVersionOf(org.bouncycastle.crypto.tls.ProtocolVersion) -> isEqualOrEarlierVersionOf
    boolean isLaterVersionOf(org.bouncycastle.crypto.tls.ProtocolVersion) -> isLaterVersionOf
    boolean equals(java.lang.Object) -> equals
    boolean equals(org.bouncycastle.crypto.tls.ProtocolVersion) -> equals
    int hashCode() -> hashCode
    org.bouncycastle.crypto.tls.ProtocolVersion get(int,int) -> get
    java.lang.String toString() -> toString
    org.bouncycastle.crypto.tls.ProtocolVersion getUnknownVersion(int,int,java.lang.String) -> getUnknownVersion
org.bouncycastle.crypto.tls.RecordStream -> org.bouncycastle.crypto.tls.RecordStream:
    int DEFAULT_PLAINTEXT_LIMIT -> DEFAULT_PLAINTEXT_LIMIT
    org.bouncycastle.crypto.tls.TlsProtocol handler -> handler
    java.io.InputStream input -> input
    java.io.OutputStream output -> output
    org.bouncycastle.crypto.tls.TlsCompression pendingCompression -> pendingCompression
    org.bouncycastle.crypto.tls.TlsCompression readCompression -> readCompression
    org.bouncycastle.crypto.tls.TlsCompression writeCompression -> writeCompression
    org.bouncycastle.crypto.tls.TlsCipher pendingCipher -> pendingCipher
    org.bouncycastle.crypto.tls.TlsCipher readCipher -> readCipher
    org.bouncycastle.crypto.tls.TlsCipher writeCipher -> writeCipher
    long readSeqNo -> readSeqNo
    long writeSeqNo -> writeSeqNo
    java.io.ByteArrayOutputStream buffer -> buffer
    org.bouncycastle.crypto.tls.TlsContext context -> context
    org.bouncycastle.crypto.tls.TlsHandshakeHash handshakeHash -> handshakeHash
    org.bouncycastle.crypto.tls.ProtocolVersion readVersion -> readVersion
    org.bouncycastle.crypto.tls.ProtocolVersion writeVersion -> writeVersion
    boolean restrictReadVersion -> restrictReadVersion
    int plaintextLimit -> plaintextLimit
    int compressedLimit -> compressedLimit
    int ciphertextLimit -> ciphertextLimit
    void init(org.bouncycastle.crypto.tls.TlsContext) -> init
    int getPlaintextLimit() -> getPlaintextLimit
    void setPlaintextLimit(int) -> setPlaintextLimit
    org.bouncycastle.crypto.tls.ProtocolVersion getReadVersion() -> getReadVersion
    void setReadVersion(org.bouncycastle.crypto.tls.ProtocolVersion) -> setReadVersion
    void setWriteVersion(org.bouncycastle.crypto.tls.ProtocolVersion) -> setWriteVersion
    void setRestrictReadVersion(boolean) -> setRestrictReadVersion
    void setPendingConnectionState(org.bouncycastle.crypto.tls.TlsCompression,org.bouncycastle.crypto.tls.TlsCipher) -> setPendingConnectionState
    void sentWriteCipherSpec() -> sentWriteCipherSpec
    void receivedReadCipherSpec() -> receivedReadCipherSpec
    void finaliseHandshake() -> finaliseHandshake
    boolean readRecord() -> readRecord
    byte[] decodeAndVerify(short,java.io.InputStream,int) -> decodeAndVerify
    void writeRecord(short,byte[],int,int) -> writeRecord
    void notifyHelloComplete() -> notifyHelloComplete
    org.bouncycastle.crypto.tls.TlsHandshakeHash getHandshakeHash() -> getHandshakeHash
    org.bouncycastle.crypto.tls.TlsHandshakeHash prepareToFinish() -> prepareToFinish
    void updateHandshakeData(byte[],int,int) -> updateHandshakeData
    void safeClose() -> safeClose
    void flush() -> flush
    byte[] getBufferContents() -> getBufferContents
    void checkType(short,short) -> checkType
    void checkLength(int,int,short) -> checkLength
org.bouncycastle.crypto.tls.SRPTlsClient -> org.bouncycastle.crypto.tls.SRPTlsClient:
    java.lang.Integer EXT_SRP -> EXT_SRP
    byte[] identity -> identity
    byte[] password -> password
    int[] getCipherSuites() -> getCipherSuites
    java.util.Hashtable getClientExtensions() -> getClientExtensions
    void processServerExtensions(java.util.Hashtable) -> processServerExtensions
    org.bouncycastle.crypto.tls.TlsKeyExchange getKeyExchange() -> getKeyExchange
    org.bouncycastle.crypto.tls.TlsCipher getCipher() -> getCipher
    org.bouncycastle.crypto.tls.TlsKeyExchange createSRPKeyExchange(int) -> createSRPKeyExchange
org.bouncycastle.crypto.tls.SRTPProtectionProfile -> org.bouncycastle.crypto.tls.SRTPProtectionProfile:
    int SRTP_AES128_CM_HMAC_SHA1_80 -> SRTP_AES128_CM_HMAC_SHA1_80
    int SRTP_AES128_CM_HMAC_SHA1_32 -> SRTP_AES128_CM_HMAC_SHA1_32
    int SRTP_NULL_HMAC_SHA1_80 -> SRTP_NULL_HMAC_SHA1_80
    int SRTP_NULL_HMAC_SHA1_32 -> SRTP_NULL_HMAC_SHA1_32
org.bouncycastle.crypto.tls.SSL3Mac -> org.bouncycastle.crypto.tls.SSL3Mac:
    byte IPAD_BYTE -> IPAD_BYTE
    byte OPAD_BYTE -> OPAD_BYTE
    byte[] IPAD -> IPAD
    byte[] OPAD -> OPAD
    org.bouncycastle.crypto.Digest digest -> digest
    byte[] secret -> secret
    int padLength -> padLength
    java.lang.String getAlgorithmName() -> getAlgorithmName
    org.bouncycastle.crypto.Digest getUnderlyingDigest() -> getUnderlyingDigest
    void init(org.bouncycastle.crypto.CipherParameters) -> init
    int getMacSize() -> getMacSize
    void update(byte) -> update
    void update(byte[],int,int) -> update
    int doFinal(byte[],int) -> doFinal
    void reset() -> reset
    byte[] genPad(byte,int) -> genPad
org.bouncycastle.crypto.tls.SecurityParameters -> org.bouncycastle.crypto.tls.SecurityParameters:
    int entity -> entity
    int cipherSuite -> cipherSuite
    short compressionAlgorithm -> compressionAlgorithm
    int prfAlgorithm -> prfAlgorithm
    int verifyDataLength -> verifyDataLength
    byte[] masterSecret -> masterSecret
    byte[] clientRandom -> clientRandom
    byte[] serverRandom -> serverRandom
    short maxFragmentLength -> maxFragmentLength
    boolean truncatedHMac -> truncatedHMac
    boolean encryptThenMAC -> encryptThenMAC
    void copySessionParametersFrom(org.bouncycastle.crypto.tls.SecurityParameters) -> copySessionParametersFrom
    void clear() -> clear
    int getEntity() -> getEntity
    int getCipherSuite() -> getCipherSuite
    short getCompressionAlgorithm() -> getCompressionAlgorithm
    int getPrfAlgorithm() -> getPrfAlgorithm
    int getVerifyDataLength() -> getVerifyDataLength
    byte[] getMasterSecret() -> getMasterSecret
    byte[] getClientRandom() -> getClientRandom
    byte[] getServerRandom() -> getServerRandom
org.bouncycastle.crypto.tls.ServerDHParams -> org.bouncycastle.crypto.tls.ServerDHParams:
    org.bouncycastle.crypto.params.DHPublicKeyParameters publicKey -> publicKey
    org.bouncycastle.crypto.params.DHPublicKeyParameters getPublicKey() -> getPublicKey
    void encode(java.io.OutputStream) -> encode
    org.bouncycastle.crypto.tls.ServerDHParams parse(java.io.InputStream) -> parse
org.bouncycastle.crypto.tls.ServerName -> org.bouncycastle.crypto.tls.ServerName:
    short nameType -> nameType
    java.lang.Object name -> name
    short getNameType() -> getNameType
    java.lang.Object getName() -> getName
    java.lang.String getHostName() -> getHostName
    void encode(java.io.OutputStream) -> encode
    org.bouncycastle.crypto.tls.ServerName parse(java.io.InputStream) -> parse
    boolean isCorrectType(short,java.lang.Object) -> isCorrectType
org.bouncycastle.crypto.tls.ServerNameList -> org.bouncycastle.crypto.tls.ServerNameList:
    java.util.Vector serverNameList -> serverNameList
    java.util.Vector getServerNameList() -> getServerNameList
    void encode(java.io.OutputStream) -> encode
    org.bouncycastle.crypto.tls.ServerNameList parse(java.io.InputStream) -> parse
org.bouncycastle.crypto.tls.ServerOnlyTlsAuthentication -> org.bouncycastle.crypto.tls.ServerOnlyTlsAuthentication:
    org.bouncycastle.crypto.tls.TlsCredentials getClientCredentials(org.bouncycastle.crypto.tls.CertificateRequest) -> getClientCredentials
org.bouncycastle.crypto.tls.SessionParameters -> org.bouncycastle.crypto.tls.SessionParameters:
    int cipherSuite -> cipherSuite
    short compressionAlgorithm -> compressionAlgorithm
    byte[] masterSecret -> masterSecret
    org.bouncycastle.crypto.tls.Certificate peerCertificate -> peerCertificate
    byte[] encodedServerExtensions -> encodedServerExtensions
    void clear() -> clear
    org.bouncycastle.crypto.tls.SessionParameters copy() -> copy
    int getCipherSuite() -> getCipherSuite
    short getCompressionAlgorithm() -> getCompressionAlgorithm
    byte[] getMasterSecret() -> getMasterSecret
    org.bouncycastle.crypto.tls.Certificate getPeerCertificate() -> getPeerCertificate
    java.util.Hashtable readServerExtensions() -> readServerExtensions
org.bouncycastle.crypto.tls.SessionParameters$1 -> org.bouncycastle.crypto.tls.SessionParameters$1:
org.bouncycastle.crypto.tls.SessionParameters$Builder -> org.bouncycastle.crypto.tls.SessionParameters$Builder:
    int cipherSuite -> cipherSuite
    short compressionAlgorithm -> compressionAlgorithm
    byte[] masterSecret -> masterSecret
    org.bouncycastle.crypto.tls.Certificate peerCertificate -> peerCertificate
    byte[] encodedServerExtensions -> encodedServerExtensions
    org.bouncycastle.crypto.tls.SessionParameters build() -> build
    org.bouncycastle.crypto.tls.SessionParameters$Builder setCipherSuite(int) -> setCipherSuite
    org.bouncycastle.crypto.tls.SessionParameters$Builder setCompressionAlgorithm(short) -> setCompressionAlgorithm
    org.bouncycastle.crypto.tls.SessionParameters$Builder setMasterSecret(byte[]) -> setMasterSecret
    org.bouncycastle.crypto.tls.SessionParameters$Builder setPeerCertificate(org.bouncycastle.crypto.tls.Certificate) -> setPeerCertificate
    org.bouncycastle.crypto.tls.SessionParameters$Builder setServerExtensions(java.util.Hashtable) -> setServerExtensions
    void validate(boolean,java.lang.String) -> validate
org.bouncycastle.crypto.tls.SignatureAlgorithm -> org.bouncycastle.crypto.tls.SignatureAlgorithm:
    short anonymous -> anonymous
    short rsa -> rsa
    short dsa -> dsa
    short ecdsa -> ecdsa
org.bouncycastle.crypto.tls.SignatureAndHashAlgorithm -> org.bouncycastle.crypto.tls.SignatureAndHashAlgorithm:
    short hash -> hash
    short signature -> signature
    short getHash() -> getHash
    short getSignature() -> getSignature
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    void encode(java.io.OutputStream) -> encode
    org.bouncycastle.crypto.tls.SignatureAndHashAlgorithm parse(java.io.InputStream) -> parse
org.bouncycastle.crypto.tls.SignerInputBuffer -> org.bouncycastle.crypto.tls.SignerInputBuffer:
    void updateSigner(org.bouncycastle.crypto.Signer) -> updateSigner
org.bouncycastle.crypto.tls.SupplementalDataEntry -> org.bouncycastle.crypto.tls.SupplementalDataEntry:
    int dataType -> dataType
    byte[] data -> data
    int getDataType() -> getDataType
    byte[] getData() -> getData
org.bouncycastle.crypto.tls.SupplementalDataType -> org.bouncycastle.crypto.tls.SupplementalDataType:
    int user_mapping_data -> user_mapping_data
org.bouncycastle.crypto.tls.TlsAEADCipher -> org.bouncycastle.crypto.tls.TlsAEADCipher:
    org.bouncycastle.crypto.tls.TlsContext context -> context
    int macSize -> macSize
    int nonce_explicit_length -> nonce_explicit_length
    org.bouncycastle.crypto.modes.AEADBlockCipher encryptCipher -> encryptCipher
    org.bouncycastle.crypto.modes.AEADBlockCipher decryptCipher -> decryptCipher
    byte[] encryptImplicitNonce -> encryptImplicitNonce
    byte[] decryptImplicitNonce -> decryptImplicitNonce
    int getPlaintextLimit(int) -> getPlaintextLimit
    byte[] encodePlaintext(long,short,byte[],int,int) -> encodePlaintext
    byte[] decodeCiphertext(long,short,byte[],int,int) -> decodeCiphertext
    byte[] getAdditionalData(long,short,int) -> getAdditionalData
org.bouncycastle.crypto.tls.TlsAgreementCredentials -> org.bouncycastle.crypto.tls.TlsAgreementCredentials:
    byte[] generateAgreement(org.bouncycastle.crypto.params.AsymmetricKeyParameter) -> generateAgreement
org.bouncycastle.crypto.tls.TlsAuthentication -> org.bouncycastle.crypto.tls.TlsAuthentication:
    void notifyServerCertificate(org.bouncycastle.crypto.tls.Certificate) -> notifyServerCertificate
    org.bouncycastle.crypto.tls.TlsCredentials getClientCredentials(org.bouncycastle.crypto.tls.CertificateRequest) -> getClientCredentials
org.bouncycastle.crypto.tls.TlsBlockCipher -> org.bouncycastle.crypto.tls.TlsBlockCipher:
    org.bouncycastle.crypto.tls.TlsContext context -> context
    byte[] randomData -> randomData
    boolean useExplicitIV -> useExplicitIV
    boolean encryptThenMAC -> encryptThenMAC
    org.bouncycastle.crypto.BlockCipher encryptCipher -> encryptCipher
    org.bouncycastle.crypto.BlockCipher decryptCipher -> decryptCipher
    org.bouncycastle.crypto.tls.TlsMac writeMac -> writeMac
    org.bouncycastle.crypto.tls.TlsMac readMac -> readMac
    org.bouncycastle.crypto.tls.TlsMac getWriteMac() -> getWriteMac
    org.bouncycastle.crypto.tls.TlsMac getReadMac() -> getReadMac
    int getPlaintextLimit(int) -> getPlaintextLimit
    byte[] encodePlaintext(long,short,byte[],int,int) -> encodePlaintext
    byte[] decodeCiphertext(long,short,byte[],int,int) -> decodeCiphertext
    int checkPaddingConstantTime(byte[],int,int,int,int) -> checkPaddingConstantTime
    int chooseExtraPadBlocks(java.security.SecureRandom,int) -> chooseExtraPadBlocks
    int lowestBitSet(int) -> lowestBitSet
org.bouncycastle.crypto.tls.TlsCipher -> org.bouncycastle.crypto.tls.TlsCipher:
    int getPlaintextLimit(int) -> getPlaintextLimit
    byte[] encodePlaintext(long,short,byte[],int,int) -> encodePlaintext
    byte[] decodeCiphertext(long,short,byte[],int,int) -> decodeCiphertext
org.bouncycastle.crypto.tls.TlsCipherFactory -> org.bouncycastle.crypto.tls.TlsCipherFactory:
    org.bouncycastle.crypto.tls.TlsCipher createCipher(org.bouncycastle.crypto.tls.TlsContext,int,int) -> createCipher
org.bouncycastle.crypto.tls.TlsClient -> org.bouncycastle.crypto.tls.TlsClient:
    void init(org.bouncycastle.crypto.tls.TlsClientContext) -> init
    org.bouncycastle.crypto.tls.TlsSession getSessionToResume() -> getSessionToResume
    org.bouncycastle.crypto.tls.ProtocolVersion getClientHelloRecordLayerVersion() -> getClientHelloRecordLayerVersion
    org.bouncycastle.crypto.tls.ProtocolVersion getClientVersion() -> getClientVersion
    int[] getCipherSuites() -> getCipherSuites
    short[] getCompressionMethods() -> getCompressionMethods
    java.util.Hashtable getClientExtensions() -> getClientExtensions
    void notifyServerVersion(org.bouncycastle.crypto.tls.ProtocolVersion) -> notifyServerVersion
    void notifySessionID(byte[]) -> notifySessionID
    void notifySelectedCipherSuite(int) -> notifySelectedCipherSuite
    void notifySelectedCompressionMethod(short) -> notifySelectedCompressionMethod
    void processServerExtensions(java.util.Hashtable) -> processServerExtensions
    void processServerSupplementalData(java.util.Vector) -> processServerSupplementalData
    org.bouncycastle.crypto.tls.TlsKeyExchange getKeyExchange() -> getKeyExchange
    org.bouncycastle.crypto.tls.TlsAuthentication getAuthentication() -> getAuthentication
    java.util.Vector getClientSupplementalData() -> getClientSupplementalData
    void notifyNewSessionTicket(org.bouncycastle.crypto.tls.NewSessionTicket) -> notifyNewSessionTicket
org.bouncycastle.crypto.tls.TlsClientContext -> org.bouncycastle.crypto.tls.TlsClientContext:
org.bouncycastle.crypto.tls.TlsClientContextImpl -> org.bouncycastle.crypto.tls.TlsClientContextImpl:
    boolean isServer() -> isServer
org.bouncycastle.crypto.tls.TlsClientProtocol -> org.bouncycastle.crypto.tls.TlsClientProtocol:
    org.bouncycastle.crypto.tls.TlsClient tlsClient -> tlsClient
    org.bouncycastle.crypto.tls.TlsClientContextImpl tlsClientContext -> tlsClientContext
    byte[] selectedSessionID -> selectedSessionID
    org.bouncycastle.crypto.tls.TlsKeyExchange keyExchange -> keyExchange
    org.bouncycastle.crypto.tls.TlsAuthentication authentication -> authentication
    org.bouncycastle.crypto.tls.CertificateStatus certificateStatus -> certificateStatus
    org.bouncycastle.crypto.tls.CertificateRequest certificateRequest -> certificateRequest
    java.security.SecureRandom createSecureRandom() -> createSecureRandom
    void connect(org.bouncycastle.crypto.tls.TlsClient) -> connect
    void cleanupHandshake() -> cleanupHandshake
    org.bouncycastle.crypto.tls.AbstractTlsContext getContext() -> getContext
    org.bouncycastle.crypto.tls.TlsPeer getPeer() -> getPeer
    void handleHandshakeMessage(short,byte[]) -> handleHandshakeMessage
    void handleSupplementalData(java.util.Vector) -> handleSupplementalData
    void receiveNewSessionTicketMessage(java.io.ByteArrayInputStream) -> receiveNewSessionTicketMessage
    void receiveServerHelloMessage(java.io.ByteArrayInputStream) -> receiveServerHelloMessage
    void sendCertificateVerifyMessage(org.bouncycastle.crypto.tls.DigitallySigned) -> sendCertificateVerifyMessage
    void sendClientHelloMessage() -> sendClientHelloMessage
    void sendClientKeyExchangeMessage() -> sendClientKeyExchangeMessage
org.bouncycastle.crypto.tls.TlsCompression -> org.bouncycastle.crypto.tls.TlsCompression:
    java.io.OutputStream compress(java.io.OutputStream) -> compress
    java.io.OutputStream decompress(java.io.OutputStream) -> decompress
org.bouncycastle.crypto.tls.TlsContext -> org.bouncycastle.crypto.tls.TlsContext:
    org.bouncycastle.crypto.prng.RandomGenerator getNonceRandomGenerator() -> getNonceRandomGenerator
    java.security.SecureRandom getSecureRandom() -> getSecureRandom
    org.bouncycastle.crypto.tls.SecurityParameters getSecurityParameters() -> getSecurityParameters
    boolean isServer() -> isServer
    org.bouncycastle.crypto.tls.ProtocolVersion getClientVersion() -> getClientVersion
    org.bouncycastle.crypto.tls.ProtocolVersion getServerVersion() -> getServerVersion
    org.bouncycastle.crypto.tls.TlsSession getResumableSession() -> getResumableSession
    java.lang.Object getUserObject() -> getUserObject
    void setUserObject(java.lang.Object) -> setUserObject
    byte[] exportKeyingMaterial(java.lang.String,byte[],int) -> exportKeyingMaterial
org.bouncycastle.crypto.tls.TlsCredentials -> org.bouncycastle.crypto.tls.TlsCredentials:
    org.bouncycastle.crypto.tls.Certificate getCertificate() -> getCertificate
org.bouncycastle.crypto.tls.TlsDHEKeyExchange -> org.bouncycastle.crypto.tls.TlsDHEKeyExchange:
    org.bouncycastle.crypto.tls.TlsSignerCredentials serverCredentials -> serverCredentials
    void processServerCredentials(org.bouncycastle.crypto.tls.TlsCredentials) -> processServerCredentials
    byte[] generateServerKeyExchange() -> generateServerKeyExchange
    void processServerKeyExchange(java.io.InputStream) -> processServerKeyExchange
    org.bouncycastle.crypto.Signer initVerifyer(org.bouncycastle.crypto.tls.TlsSigner,org.bouncycastle.crypto.tls.SignatureAndHashAlgorithm,org.bouncycastle.crypto.tls.SecurityParameters) -> initVerifyer
org.bouncycastle.crypto.tls.TlsDHKeyExchange -> org.bouncycastle.crypto.tls.TlsDHKeyExchange:
    java.math.BigInteger ONE -> ONE
    java.math.BigInteger TWO -> TWO
    org.bouncycastle.crypto.tls.TlsSigner tlsSigner -> tlsSigner
    org.bouncycastle.crypto.params.DHParameters dhParameters -> dhParameters
    org.bouncycastle.crypto.params.AsymmetricKeyParameter serverPublicKey -> serverPublicKey
    org.bouncycastle.crypto.params.DHPublicKeyParameters dhAgreeServerPublicKey -> dhAgreeServerPublicKey
    org.bouncycastle.crypto.tls.TlsAgreementCredentials agreementCredentials -> agreementCredentials
    org.bouncycastle.crypto.params.DHPrivateKeyParameters dhAgreeClientPrivateKey -> dhAgreeClientPrivateKey
    org.bouncycastle.crypto.params.DHPrivateKeyParameters dhAgreeServerPrivateKey -> dhAgreeServerPrivateKey
    org.bouncycastle.crypto.params.DHPublicKeyParameters dhAgreeClientPublicKey -> dhAgreeClientPublicKey
    void init(org.bouncycastle.crypto.tls.TlsContext) -> init
    void skipServerCredentials() -> skipServerCredentials
    void processServerCertificate(org.bouncycastle.crypto.tls.Certificate) -> processServerCertificate
    boolean requiresServerKeyExchange() -> requiresServerKeyExchange
    void validateCertificateRequest(org.bouncycastle.crypto.tls.CertificateRequest) -> validateCertificateRequest
    void processClientCredentials(org.bouncycastle.crypto.tls.TlsCredentials) -> processClientCredentials
    void generateClientKeyExchange(java.io.OutputStream) -> generateClientKeyExchange
    byte[] generatePremasterSecret() -> generatePremasterSecret
org.bouncycastle.crypto.tls.TlsDHUtils -> org.bouncycastle.crypto.tls.TlsDHUtils:
    java.math.BigInteger ONE -> ONE
    java.math.BigInteger TWO -> TWO
    boolean areCompatibleParameters(org.bouncycastle.crypto.params.DHParameters,org.bouncycastle.crypto.params.DHParameters) -> areCompatibleParameters
    byte[] calculateDHBasicAgreement(org.bouncycastle.crypto.params.DHPublicKeyParameters,org.bouncycastle.crypto.params.DHPrivateKeyParameters) -> calculateDHBasicAgreement
    org.bouncycastle.crypto.AsymmetricCipherKeyPair generateDHKeyPair(java.security.SecureRandom,org.bouncycastle.crypto.params.DHParameters) -> generateDHKeyPair
    org.bouncycastle.crypto.params.DHPrivateKeyParameters generateEphemeralClientKeyExchange(java.security.SecureRandom,org.bouncycastle.crypto.params.DHParameters,java.io.OutputStream) -> generateEphemeralClientKeyExchange
    org.bouncycastle.crypto.params.DHPrivateKeyParameters generateEphemeralServerKeyExchange(java.security.SecureRandom,org.bouncycastle.crypto.params.DHParameters,java.io.OutputStream) -> generateEphemeralServerKeyExchange
    org.bouncycastle.crypto.params.DHPublicKeyParameters validateDHPublicKey(org.bouncycastle.crypto.params.DHPublicKeyParameters) -> validateDHPublicKey
    java.math.BigInteger readDHParameter(java.io.InputStream) -> readDHParameter
    void writeDHParameter(java.math.BigInteger,java.io.OutputStream) -> writeDHParameter
org.bouncycastle.crypto.tls.TlsDSASigner -> org.bouncycastle.crypto.tls.TlsDSASigner:
    byte[] generateRawSignature(org.bouncycastle.crypto.tls.SignatureAndHashAlgorithm,org.bouncycastle.crypto.params.AsymmetricKeyParameter,byte[]) -> generateRawSignature
    boolean verifyRawSignature(org.bouncycastle.crypto.tls.SignatureAndHashAlgorithm,byte[],org.bouncycastle.crypto.params.AsymmetricKeyParameter,byte[]) -> verifyRawSignature
    org.bouncycastle.crypto.Signer createSigner(org.bouncycastle.crypto.tls.SignatureAndHashAlgorithm,org.bouncycastle.crypto.params.AsymmetricKeyParameter) -> createSigner
    org.bouncycastle.crypto.Signer createVerifyer(org.bouncycastle.crypto.tls.SignatureAndHashAlgorithm,org.bouncycastle.crypto.params.AsymmetricKeyParameter) -> createVerifyer
    org.bouncycastle.crypto.CipherParameters makeInitParameters(boolean,org.bouncycastle.crypto.CipherParameters) -> makeInitParameters
    org.bouncycastle.crypto.Signer makeSigner(org.bouncycastle.crypto.tls.SignatureAndHashAlgorithm,boolean,boolean,org.bouncycastle.crypto.CipherParameters) -> makeSigner
    short getSignatureAlgorithm() -> getSignatureAlgorithm
    org.bouncycastle.crypto.DSA createDSAImpl(short) -> createDSAImpl
org.bouncycastle.crypto.tls.TlsDSSSigner -> org.bouncycastle.crypto.tls.TlsDSSSigner:
    boolean isValidPublicKey(org.bouncycastle.crypto.params.AsymmetricKeyParameter) -> isValidPublicKey
    org.bouncycastle.crypto.DSA createDSAImpl(short) -> createDSAImpl
    short getSignatureAlgorithm() -> getSignatureAlgorithm
org.bouncycastle.crypto.tls.TlsECCUtils -> org.bouncycastle.crypto.tls.TlsECCUtils:
    java.lang.Integer EXT_elliptic_curves -> EXT_elliptic_curves
    java.lang.Integer EXT_ec_point_formats -> EXT_ec_point_formats
    java.lang.String[] curveNames -> curveNames
    void addSupportedEllipticCurvesExtension(java.util.Hashtable,int[]) -> addSupportedEllipticCurvesExtension
    void addSupportedPointFormatsExtension(java.util.Hashtable,short[]) -> addSupportedPointFormatsExtension
    int[] getSupportedEllipticCurvesExtension(java.util.Hashtable) -> getSupportedEllipticCurvesExtension
    short[] getSupportedPointFormatsExtension(java.util.Hashtable) -> getSupportedPointFormatsExtension
    byte[] createSupportedEllipticCurvesExtension(int[]) -> createSupportedEllipticCurvesExtension
    byte[] createSupportedPointFormatsExtension(short[]) -> createSupportedPointFormatsExtension
    int[] readSupportedEllipticCurvesExtension(byte[]) -> readSupportedEllipticCurvesExtension
    short[] readSupportedPointFormatsExtension(byte[]) -> readSupportedPointFormatsExtension
    java.lang.String getNameOfNamedCurve(int) -> getNameOfNamedCurve
    org.bouncycastle.crypto.params.ECDomainParameters getParametersForNamedCurve(int) -> getParametersForNamedCurve
    boolean hasAnySupportedNamedCurves() -> hasAnySupportedNamedCurves
    boolean containsECCCipherSuites(int[]) -> containsECCCipherSuites
    boolean isECCCipherSuite(int) -> isECCCipherSuite
    boolean areOnSameCurve(org.bouncycastle.crypto.params.ECDomainParameters,org.bouncycastle.crypto.params.ECDomainParameters) -> areOnSameCurve
    boolean isSupportedNamedCurve(int) -> isSupportedNamedCurve
    boolean isCompressionPreferred(short[],short) -> isCompressionPreferred
    byte[] serializeECFieldElement(int,java.math.BigInteger) -> serializeECFieldElement
    byte[] serializeECPoint(short[],org.bouncycastle.math.ec.ECPoint) -> serializeECPoint
    byte[] serializeECPublicKey(short[],org.bouncycastle.crypto.params.ECPublicKeyParameters) -> serializeECPublicKey
    java.math.BigInteger deserializeECFieldElement(int,byte[]) -> deserializeECFieldElement
    org.bouncycastle.math.ec.ECPoint deserializeECPoint(short[],org.bouncycastle.math.ec.ECCurve,byte[]) -> deserializeECPoint
    org.bouncycastle.crypto.params.ECPublicKeyParameters deserializeECPublicKey(short[],org.bouncycastle.crypto.params.ECDomainParameters,byte[]) -> deserializeECPublicKey
    byte[] calculateECDHBasicAgreement(org.bouncycastle.crypto.params.ECPublicKeyParameters,org.bouncycastle.crypto.params.ECPrivateKeyParameters) -> calculateECDHBasicAgreement
    org.bouncycastle.crypto.AsymmetricCipherKeyPair generateECKeyPair(java.security.SecureRandom,org.bouncycastle.crypto.params.ECDomainParameters) -> generateECKeyPair
    org.bouncycastle.crypto.params.ECPrivateKeyParameters generateEphemeralClientKeyExchange(java.security.SecureRandom,short[],org.bouncycastle.crypto.params.ECDomainParameters,java.io.OutputStream) -> generateEphemeralClientKeyExchange
    org.bouncycastle.crypto.params.ECPublicKeyParameters validateECPublicKey(org.bouncycastle.crypto.params.ECPublicKeyParameters) -> validateECPublicKey
    int readECExponent(int,java.io.InputStream) -> readECExponent
    java.math.BigInteger readECFieldElement(int,java.io.InputStream) -> readECFieldElement
    java.math.BigInteger readECParameter(java.io.InputStream) -> readECParameter
    org.bouncycastle.crypto.params.ECDomainParameters readECParameters(int[],short[],java.io.InputStream) -> readECParameters
    void checkNamedCurve(int[],int) -> checkNamedCurve
    void writeECExponent(int,java.io.OutputStream) -> writeECExponent
    void writeECFieldElement(org.bouncycastle.math.ec.ECFieldElement,java.io.OutputStream) -> writeECFieldElement
    void writeECFieldElement(int,java.math.BigInteger,java.io.OutputStream) -> writeECFieldElement
    void writeECParameter(java.math.BigInteger,java.io.OutputStream) -> writeECParameter
    void writeExplicitECParameters(short[],org.bouncycastle.crypto.params.ECDomainParameters,java.io.OutputStream) -> writeExplicitECParameters
    void writeECPoint(short[],org.bouncycastle.math.ec.ECPoint,java.io.OutputStream) -> writeECPoint
    void writeNamedECParameters(int,java.io.OutputStream) -> writeNamedECParameters
org.bouncycastle.crypto.tls.TlsECDHEKeyExchange -> org.bouncycastle.crypto.tls.TlsECDHEKeyExchange:
    org.bouncycastle.crypto.tls.TlsSignerCredentials serverCredentials -> serverCredentials
    void processServerCredentials(org.bouncycastle.crypto.tls.TlsCredentials) -> processServerCredentials
    byte[] generateServerKeyExchange() -> generateServerKeyExchange
    void processServerKeyExchange(java.io.InputStream) -> processServerKeyExchange
    void validateCertificateRequest(org.bouncycastle.crypto.tls.CertificateRequest) -> validateCertificateRequest
    void processClientCredentials(org.bouncycastle.crypto.tls.TlsCredentials) -> processClientCredentials
    org.bouncycastle.crypto.Signer initVerifyer(org.bouncycastle.crypto.tls.TlsSigner,org.bouncycastle.crypto.tls.SignatureAndHashAlgorithm,org.bouncycastle.crypto.tls.SecurityParameters) -> initVerifyer
org.bouncycastle.crypto.tls.TlsECDHKeyExchange -> org.bouncycastle.crypto.tls.TlsECDHKeyExchange:
    org.bouncycastle.crypto.tls.TlsSigner tlsSigner -> tlsSigner
    int[] namedCurves -> namedCurves
    short[] clientECPointFormats -> clientECPointFormats
    short[] serverECPointFormats -> serverECPointFormats
    org.bouncycastle.crypto.params.AsymmetricKeyParameter serverPublicKey -> serverPublicKey
    org.bouncycastle.crypto.tls.TlsAgreementCredentials agreementCredentials -> agreementCredentials
    org.bouncycastle.crypto.params.ECPrivateKeyParameters ecAgreePrivateKey -> ecAgreePrivateKey
    org.bouncycastle.crypto.params.ECPublicKeyParameters ecAgreePublicKey -> ecAgreePublicKey
    void init(org.bouncycastle.crypto.tls.TlsContext) -> init
    void skipServerCredentials() -> skipServerCredentials
    void processServerCertificate(org.bouncycastle.crypto.tls.Certificate) -> processServerCertificate
    boolean requiresServerKeyExchange() -> requiresServerKeyExchange
    void validateCertificateRequest(org.bouncycastle.crypto.tls.CertificateRequest) -> validateCertificateRequest
    void processClientCredentials(org.bouncycastle.crypto.tls.TlsCredentials) -> processClientCredentials
    void generateClientKeyExchange(java.io.OutputStream) -> generateClientKeyExchange
    void processClientCertificate(org.bouncycastle.crypto.tls.Certificate) -> processClientCertificate
    void processClientKeyExchange(java.io.InputStream) -> processClientKeyExchange
    byte[] generatePremasterSecret() -> generatePremasterSecret
org.bouncycastle.crypto.tls.TlsECDSASigner -> org.bouncycastle.crypto.tls.TlsECDSASigner:
    boolean isValidPublicKey(org.bouncycastle.crypto.params.AsymmetricKeyParameter) -> isValidPublicKey
    org.bouncycastle.crypto.DSA createDSAImpl(short) -> createDSAImpl
    short getSignatureAlgorithm() -> getSignatureAlgorithm
org.bouncycastle.crypto.tls.TlsEncryptionCredentials -> org.bouncycastle.crypto.tls.TlsEncryptionCredentials:
    byte[] decryptPreMasterSecret(byte[]) -> decryptPreMasterSecret
org.bouncycastle.crypto.tls.TlsExtensionsUtils -> org.bouncycastle.crypto.tls.TlsExtensionsUtils:
    java.lang.Integer EXT_encrypt_then_mac -> EXT_encrypt_then_mac
    java.lang.Integer EXT_heartbeat -> EXT_heartbeat
    java.lang.Integer EXT_max_fragment_length -> EXT_max_fragment_length
    java.lang.Integer EXT_server_name -> EXT_server_name
    java.lang.Integer EXT_status_request -> EXT_status_request
    java.lang.Integer EXT_truncated_hmac -> EXT_truncated_hmac
    java.util.Hashtable ensureExtensionsInitialised(java.util.Hashtable) -> ensureExtensionsInitialised
    void addEncryptThenMACExtension(java.util.Hashtable) -> addEncryptThenMACExtension
    void addHeartbeatExtension(java.util.Hashtable,org.bouncycastle.crypto.tls.HeartbeatExtension) -> addHeartbeatExtension
    void addMaxFragmentLengthExtension(java.util.Hashtable,short) -> addMaxFragmentLengthExtension
    void addServerNameExtension(java.util.Hashtable,org.bouncycastle.crypto.tls.ServerNameList) -> addServerNameExtension
    void addStatusRequestExtension(java.util.Hashtable,org.bouncycastle.crypto.tls.CertificateStatusRequest) -> addStatusRequestExtension
    void addTruncatedHMacExtension(java.util.Hashtable) -> addTruncatedHMacExtension
    org.bouncycastle.crypto.tls.HeartbeatExtension getHeartbeatExtension(java.util.Hashtable) -> getHeartbeatExtension
    short getMaxFragmentLengthExtension(java.util.Hashtable) -> getMaxFragmentLengthExtension
    org.bouncycastle.crypto.tls.ServerNameList getServerNameExtension(java.util.Hashtable) -> getServerNameExtension
    org.bouncycastle.crypto.tls.CertificateStatusRequest getStatusRequestExtension(java.util.Hashtable) -> getStatusRequestExtension
    boolean hasEncryptThenMACExtension(java.util.Hashtable) -> hasEncryptThenMACExtension
    boolean hasTruncatedHMacExtension(java.util.Hashtable) -> hasTruncatedHMacExtension
    byte[] createEmptyExtensionData() -> createEmptyExtensionData
    byte[] createEncryptThenMACExtension() -> createEncryptThenMACExtension
    byte[] createHeartbeatExtension(org.bouncycastle.crypto.tls.HeartbeatExtension) -> createHeartbeatExtension
    byte[] createMaxFragmentLengthExtension(short) -> createMaxFragmentLengthExtension
    byte[] createServerNameExtension(org.bouncycastle.crypto.tls.ServerNameList) -> createServerNameExtension
    byte[] createStatusRequestExtension(org.bouncycastle.crypto.tls.CertificateStatusRequest) -> createStatusRequestExtension
    byte[] createTruncatedHMacExtension() -> createTruncatedHMacExtension
    boolean readEmptyExtensionData(byte[]) -> readEmptyExtensionData
    boolean readEncryptThenMACExtension(byte[]) -> readEncryptThenMACExtension
    org.bouncycastle.crypto.tls.HeartbeatExtension readHeartbeatExtension(byte[]) -> readHeartbeatExtension
    short readMaxFragmentLengthExtension(byte[]) -> readMaxFragmentLengthExtension
    org.bouncycastle.crypto.tls.ServerNameList readServerNameExtension(byte[]) -> readServerNameExtension
    org.bouncycastle.crypto.tls.CertificateStatusRequest readStatusRequestExtension(byte[]) -> readStatusRequestExtension
    boolean readTruncatedHMacExtension(byte[]) -> readTruncatedHMacExtension
org.bouncycastle.crypto.tls.TlsFatalAlert -> org.bouncycastle.crypto.tls.TlsFatalAlert:
    long serialVersionUID -> serialVersionUID
    short alertDescription -> alertDescription
    short getAlertDescription() -> getAlertDescription
org.bouncycastle.crypto.tls.TlsHandshakeHash -> org.bouncycastle.crypto.tls.TlsHandshakeHash:
    void init(org.bouncycastle.crypto.tls.TlsContext) -> init
    org.bouncycastle.crypto.tls.TlsHandshakeHash notifyPRFDetermined() -> notifyPRFDetermined
    void trackHashAlgorithm(short) -> trackHashAlgorithm
    void sealHashAlgorithms() -> sealHashAlgorithms
    org.bouncycastle.crypto.tls.TlsHandshakeHash stopTracking() -> stopTracking
    org.bouncycastle.crypto.Digest forkPRFHash() -> forkPRFHash
    byte[] getFinalHash(short) -> getFinalHash
org.bouncycastle.crypto.tls.TlsInputStream -> org.bouncycastle.crypto.tls.TlsInputStream:
    byte[] buf -> buf
    org.bouncycastle.crypto.tls.TlsProtocol handler -> handler
    int available() -> available
    int read(byte[],int,int) -> read
    int read() -> read
    void close() -> close
org.bouncycastle.crypto.tls.TlsKeyExchange -> org.bouncycastle.crypto.tls.TlsKeyExchange:
    void init(org.bouncycastle.crypto.tls.TlsContext) -> init
    void skipServerCredentials() -> skipServerCredentials
    void processServerCredentials(org.bouncycastle.crypto.tls.TlsCredentials) -> processServerCredentials
    void processServerCertificate(org.bouncycastle.crypto.tls.Certificate) -> processServerCertificate
    boolean requiresServerKeyExchange() -> requiresServerKeyExchange
    byte[] generateServerKeyExchange() -> generateServerKeyExchange
    void skipServerKeyExchange() -> skipServerKeyExchange
    void processServerKeyExchange(java.io.InputStream) -> processServerKeyExchange
    void validateCertificateRequest(org.bouncycastle.crypto.tls.CertificateRequest) -> validateCertificateRequest
    void skipClientCredentials() -> skipClientCredentials
    void processClientCredentials(org.bouncycastle.crypto.tls.TlsCredentials) -> processClientCredentials
    void processClientCertificate(org.bouncycastle.crypto.tls.Certificate) -> processClientCertificate
    void generateClientKeyExchange(java.io.OutputStream) -> generateClientKeyExchange
    void processClientKeyExchange(java.io.InputStream) -> processClientKeyExchange
    byte[] generatePremasterSecret() -> generatePremasterSecret
org.bouncycastle.crypto.tls.TlsMac -> org.bouncycastle.crypto.tls.TlsMac:
    org.bouncycastle.crypto.tls.TlsContext context -> context
    byte[] secret -> secret
    org.bouncycastle.crypto.Mac mac -> mac
    int digestBlockSize -> digestBlockSize
    int digestOverhead -> digestOverhead
    int macLength -> macLength
    byte[] getMACSecret() -> getMACSecret
    int getSize() -> getSize
    byte[] calculateMac(long,short,byte[],int,int) -> calculateMac
    byte[] calculateMacConstantTime(long,short,byte[],int,int,int,byte[]) -> calculateMacConstantTime
    int getDigestBlockCount(int) -> getDigestBlockCount
    byte[] truncate(byte[]) -> truncate
org.bouncycastle.crypto.tls.TlsNullCipher -> org.bouncycastle.crypto.tls.TlsNullCipher:
    org.bouncycastle.crypto.tls.TlsContext context -> context
    org.bouncycastle.crypto.tls.TlsMac writeMac -> writeMac
    org.bouncycastle.crypto.tls.TlsMac readMac -> readMac
    int getPlaintextLimit(int) -> getPlaintextLimit
    byte[] encodePlaintext(long,short,byte[],int,int) -> encodePlaintext
    byte[] decodeCiphertext(long,short,byte[],int,int) -> decodeCiphertext
org.bouncycastle.crypto.tls.TlsNullCompression -> org.bouncycastle.crypto.tls.TlsNullCompression:
    java.io.OutputStream compress(java.io.OutputStream) -> compress
    java.io.OutputStream decompress(java.io.OutputStream) -> decompress
org.bouncycastle.crypto.tls.TlsOutputStream -> org.bouncycastle.crypto.tls.TlsOutputStream:
    byte[] buf -> buf
    org.bouncycastle.crypto.tls.TlsProtocol handler -> handler
    void write(byte[],int,int) -> write
    void write(int) -> write
    void close() -> close
    void flush() -> flush
org.bouncycastle.crypto.tls.TlsPSKIdentity -> org.bouncycastle.crypto.tls.TlsPSKIdentity:
    void skipIdentityHint() -> skipIdentityHint
    void notifyIdentityHint(byte[]) -> notifyIdentityHint
    byte[] getPSKIdentity() -> getPSKIdentity
    byte[] getPSK() -> getPSK
org.bouncycastle.crypto.tls.TlsPSKKeyExchange -> org.bouncycastle.crypto.tls.TlsPSKKeyExchange:
    org.bouncycastle.crypto.tls.TlsPSKIdentity pskIdentity -> pskIdentity
    org.bouncycastle.crypto.params.DHParameters dhParameters -> dhParameters
    int[] namedCurves -> namedCurves
    short[] clientECPointFormats -> clientECPointFormats
    short[] serverECPointFormats -> serverECPointFormats
    byte[] psk_identity_hint -> psk_identity_hint
    org.bouncycastle.crypto.params.DHPrivateKeyParameters dhAgreePrivateKey -> dhAgreePrivateKey
    org.bouncycastle.crypto.params.DHPublicKeyParameters dhAgreePublicKey -> dhAgreePublicKey
    org.bouncycastle.crypto.params.AsymmetricKeyParameter serverPublicKey -> serverPublicKey
    org.bouncycastle.crypto.params.RSAKeyParameters rsaServerPublicKey -> rsaServerPublicKey
    org.bouncycastle.crypto.tls.TlsEncryptionCredentials serverCredentials -> serverCredentials
    byte[] premasterSecret -> premasterSecret
    void skipServerCredentials() -> skipServerCredentials
    void processServerCredentials(org.bouncycastle.crypto.tls.TlsCredentials) -> processServerCredentials
    byte[] generateServerKeyExchange() -> generateServerKeyExchange
    void processServerCertificate(org.bouncycastle.crypto.tls.Certificate) -> processServerCertificate
    boolean requiresServerKeyExchange() -> requiresServerKeyExchange
    void processServerKeyExchange(java.io.InputStream) -> processServerKeyExchange
    void validateCertificateRequest(org.bouncycastle.crypto.tls.CertificateRequest) -> validateCertificateRequest
    void processClientCredentials(org.bouncycastle.crypto.tls.TlsCredentials) -> processClientCredentials
    void generateClientKeyExchange(java.io.OutputStream) -> generateClientKeyExchange
    byte[] generatePremasterSecret() -> generatePremasterSecret
    byte[] generateOtherSecret(int) -> generateOtherSecret
    org.bouncycastle.crypto.params.RSAKeyParameters validateRSAPublicKey(org.bouncycastle.crypto.params.RSAKeyParameters) -> validateRSAPublicKey
org.bouncycastle.crypto.tls.TlsPeer -> org.bouncycastle.crypto.tls.TlsPeer:
    boolean shouldUseGMTUnixTime() -> shouldUseGMTUnixTime
    void notifySecureRenegotiation(boolean) -> notifySecureRenegotiation
    org.bouncycastle.crypto.tls.TlsCompression getCompression() -> getCompression
    org.bouncycastle.crypto.tls.TlsCipher getCipher() -> getCipher
    void notifyAlertRaised(short,short,java.lang.String,java.lang.Exception) -> notifyAlertRaised
    void notifyAlertReceived(short,short) -> notifyAlertReceived
    void notifyHandshakeComplete() -> notifyHandshakeComplete
org.bouncycastle.crypto.tls.TlsProtocol -> org.bouncycastle.crypto.tls.TlsProtocol:
    java.lang.Integer EXT_RenegotiationInfo -> EXT_RenegotiationInfo
    java.lang.Integer EXT_SessionTicket -> EXT_SessionTicket
    java.lang.String TLS_ERROR_MESSAGE -> TLS_ERROR_MESSAGE
    short CS_START -> CS_START
    short CS_CLIENT_HELLO -> CS_CLIENT_HELLO
    short CS_SERVER_HELLO -> CS_SERVER_HELLO
    short CS_SERVER_SUPPLEMENTAL_DATA -> CS_SERVER_SUPPLEMENTAL_DATA
    short CS_SERVER_CERTIFICATE -> CS_SERVER_CERTIFICATE
    short CS_CERTIFICATE_STATUS -> CS_CERTIFICATE_STATUS
    short CS_SERVER_KEY_EXCHANGE -> CS_SERVER_KEY_EXCHANGE
    short CS_CERTIFICATE_REQUEST -> CS_CERTIFICATE_REQUEST
    short CS_SERVER_HELLO_DONE -> CS_SERVER_HELLO_DONE
    short CS_CLIENT_SUPPLEMENTAL_DATA -> CS_CLIENT_SUPPLEMENTAL_DATA
    short CS_CLIENT_CERTIFICATE -> CS_CLIENT_CERTIFICATE
    short CS_CLIENT_KEY_EXCHANGE -> CS_CLIENT_KEY_EXCHANGE
    short CS_CERTIFICATE_VERIFY -> CS_CERTIFICATE_VERIFY
    short CS_CLIENT_FINISHED -> CS_CLIENT_FINISHED
    short CS_SERVER_SESSION_TICKET -> CS_SERVER_SESSION_TICKET
    short CS_SERVER_FINISHED -> CS_SERVER_FINISHED
    short CS_END -> CS_END
    org.bouncycastle.crypto.tls.ByteQueue applicationDataQueue -> applicationDataQueue
    org.bouncycastle.crypto.tls.ByteQueue alertQueue -> alertQueue
    org.bouncycastle.crypto.tls.ByteQueue handshakeQueue -> handshakeQueue
    org.bouncycastle.crypto.tls.RecordStream recordStream -> recordStream
    java.security.SecureRandom secureRandom -> secureRandom
    org.bouncycastle.crypto.tls.TlsInputStream tlsInputStream -> tlsInputStream
    org.bouncycastle.crypto.tls.TlsOutputStream tlsOutputStream -> tlsOutputStream
    boolean closed -> closed
    boolean failedWithError -> failedWithError
    boolean appDataReady -> appDataReady
    boolean splitApplicationDataRecords -> splitApplicationDataRecords
    byte[] expected_verify_data -> expected_verify_data
    org.bouncycastle.crypto.tls.TlsSession tlsSession -> tlsSession
    org.bouncycastle.crypto.tls.SessionParameters sessionParameters -> sessionParameters
    org.bouncycastle.crypto.tls.SecurityParameters securityParameters -> securityParameters
    org.bouncycastle.crypto.tls.Certificate peerCertificate -> peerCertificate
    int[] offeredCipherSuites -> offeredCipherSuites
    short[] offeredCompressionMethods -> offeredCompressionMethods
    java.util.Hashtable clientExtensions -> clientExtensions
    java.util.Hashtable serverExtensions -> serverExtensions
    short connection_state -> connection_state
    boolean resumedSession -> resumedSession
    boolean receivedChangeCipherSpec -> receivedChangeCipherSpec
    boolean secure_renegotiation -> secure_renegotiation
    boolean allowCertificateStatus -> allowCertificateStatus
    boolean expectSessionTicket -> expectSessionTicket
    org.bouncycastle.crypto.tls.AbstractTlsContext getContext() -> getContext
    org.bouncycastle.crypto.tls.TlsPeer getPeer() -> getPeer
    void handleChangeCipherSpecMessage() -> handleChangeCipherSpecMessage
    void handleHandshakeMessage(short,byte[]) -> handleHandshakeMessage
    void handleWarningMessage(short) -> handleWarningMessage
    void cleanupHandshake() -> cleanupHandshake
    void completeHandshake() -> completeHandshake
    void processRecord(short,byte[],int,int) -> processRecord
    void processHandshake() -> processHandshake
    void processApplicationData() -> processApplicationData
    void processAlert() -> processAlert
    void processChangeCipherSpec(byte[],int,int) -> processChangeCipherSpec
    int applicationDataAvailable() -> applicationDataAvailable
    int readApplicationData(byte[],int,int) -> readApplicationData
    void safeReadRecord() -> safeReadRecord
    void safeWriteRecord(short,byte[],int,int) -> safeWriteRecord
    void writeData(byte[],int,int) -> writeData
    void writeHandshakeMessage(byte[],int,int) -> writeHandshakeMessage
    java.io.OutputStream getOutputStream() -> getOutputStream
    java.io.InputStream getInputStream() -> getInputStream
    void failWithError(short,short,java.lang.String,java.lang.Exception) -> failWithError
    void invalidateSession() -> invalidateSession
    void processFinishedMessage(java.io.ByteArrayInputStream) -> processFinishedMessage
    void raiseAlert(short,short,java.lang.String,java.lang.Exception) -> raiseAlert
    void raiseWarning(short,java.lang.String) -> raiseWarning
    void sendCertificateMessage(org.bouncycastle.crypto.tls.Certificate) -> sendCertificateMessage
    void sendChangeCipherSpecMessage() -> sendChangeCipherSpecMessage
    void sendFinishedMessage() -> sendFinishedMessage
    void sendSupplementalDataMessage(java.util.Vector) -> sendSupplementalDataMessage
    byte[] createVerifyData(boolean) -> createVerifyData
    void close() -> close
    void handleClose(boolean) -> handleClose
    void flush() -> flush
    short processMaxFragmentLengthExtension(java.util.Hashtable,java.util.Hashtable,short) -> processMaxFragmentLengthExtension
    void assertEmpty(java.io.ByteArrayInputStream) -> assertEmpty
    byte[] createRandomBlock(boolean,org.bouncycastle.crypto.prng.RandomGenerator) -> createRandomBlock
    byte[] createRenegotiationInfo(byte[]) -> createRenegotiationInfo
    void establishMasterSecret(org.bouncycastle.crypto.tls.TlsContext,org.bouncycastle.crypto.tls.TlsKeyExchange) -> establishMasterSecret
    byte[] getCurrentPRFHash(org.bouncycastle.crypto.tls.TlsContext,org.bouncycastle.crypto.tls.TlsHandshakeHash,byte[]) -> getCurrentPRFHash
    java.util.Hashtable readExtensions(java.io.ByteArrayInputStream) -> readExtensions
    java.util.Vector readSupplementalDataMessage(java.io.ByteArrayInputStream) -> readSupplementalDataMessage
    void writeExtensions(java.io.OutputStream,java.util.Hashtable) -> writeExtensions
    void writeSupplementalData(java.io.OutputStream,java.util.Vector) -> writeSupplementalData
    int getPRFAlgorithm(org.bouncycastle.crypto.tls.TlsContext,int) -> getPRFAlgorithm
org.bouncycastle.crypto.tls.TlsProtocol$HandshakeMessage -> org.bouncycastle.crypto.tls.TlsProtocol$HandshakeMessage:
    org.bouncycastle.crypto.tls.TlsProtocol this$0 -> this$0
    void writeToRecordStream() -> writeToRecordStream
org.bouncycastle.crypto.tls.TlsProtocolHandler -> org.bouncycastle.crypto.tls.TlsProtocolHandler:
org.bouncycastle.crypto.tls.TlsRSAKeyExchange -> org.bouncycastle.crypto.tls.TlsRSAKeyExchange:
    org.bouncycastle.crypto.params.AsymmetricKeyParameter serverPublicKey -> serverPublicKey
    org.bouncycastle.crypto.params.RSAKeyParameters rsaServerPublicKey -> rsaServerPublicKey
    org.bouncycastle.crypto.tls.TlsEncryptionCredentials serverCredentials -> serverCredentials
    byte[] premasterSecret -> premasterSecret
    void skipServerCredentials() -> skipServerCredentials
    void processServerCredentials(org.bouncycastle.crypto.tls.TlsCredentials) -> processServerCredentials
    void processServerCertificate(org.bouncycastle.crypto.tls.Certificate) -> processServerCertificate
    void validateCertificateRequest(org.bouncycastle.crypto.tls.CertificateRequest) -> validateCertificateRequest
    void processClientCredentials(org.bouncycastle.crypto.tls.TlsCredentials) -> processClientCredentials
    void generateClientKeyExchange(java.io.OutputStream) -> generateClientKeyExchange
    void processClientKeyExchange(java.io.InputStream) -> processClientKeyExchange
    byte[] generatePremasterSecret() -> generatePremasterSecret
    org.bouncycastle.crypto.params.RSAKeyParameters validateRSAPublicKey(org.bouncycastle.crypto.params.RSAKeyParameters) -> validateRSAPublicKey
org.bouncycastle.crypto.tls.TlsRSASigner -> org.bouncycastle.crypto.tls.TlsRSASigner:
    byte[] generateRawSignature(org.bouncycastle.crypto.tls.SignatureAndHashAlgorithm,org.bouncycastle.crypto.params.AsymmetricKeyParameter,byte[]) -> generateRawSignature
    boolean verifyRawSignature(org.bouncycastle.crypto.tls.SignatureAndHashAlgorithm,byte[],org.bouncycastle.crypto.params.AsymmetricKeyParameter,byte[]) -> verifyRawSignature
    org.bouncycastle.crypto.Signer createSigner(org.bouncycastle.crypto.tls.SignatureAndHashAlgorithm,org.bouncycastle.crypto.params.AsymmetricKeyParameter) -> createSigner
    org.bouncycastle.crypto.Signer createVerifyer(org.bouncycastle.crypto.tls.SignatureAndHashAlgorithm,org.bouncycastle.crypto.params.AsymmetricKeyParameter) -> createVerifyer
    boolean isValidPublicKey(org.bouncycastle.crypto.params.AsymmetricKeyParameter) -> isValidPublicKey
    org.bouncycastle.crypto.Signer makeSigner(org.bouncycastle.crypto.tls.SignatureAndHashAlgorithm,boolean,boolean,org.bouncycastle.crypto.CipherParameters) -> makeSigner
    org.bouncycastle.crypto.AsymmetricBlockCipher createRSAImpl() -> createRSAImpl
org.bouncycastle.crypto.tls.TlsRSAUtils -> org.bouncycastle.crypto.tls.TlsRSAUtils:
    byte[] generateEncryptedPreMasterSecret(org.bouncycastle.crypto.tls.TlsContext,org.bouncycastle.crypto.params.RSAKeyParameters,java.io.OutputStream) -> generateEncryptedPreMasterSecret
    byte[] safeDecryptPreMasterSecret(org.bouncycastle.crypto.tls.TlsContext,org.bouncycastle.crypto.tls.TlsEncryptionCredentials,byte[]) -> safeDecryptPreMasterSecret
    byte[] safeDecryptPreMasterSecret(org.bouncycastle.crypto.tls.TlsContext,org.bouncycastle.crypto.params.RSAKeyParameters,byte[]) -> safeDecryptPreMasterSecret
org.bouncycastle.crypto.tls.TlsSRPKeyExchange -> org.bouncycastle.crypto.tls.TlsSRPKeyExchange:
    org.bouncycastle.crypto.tls.TlsSigner tlsSigner -> tlsSigner
    byte[] identity -> identity
    byte[] password -> password
    org.bouncycastle.crypto.params.AsymmetricKeyParameter serverPublicKey -> serverPublicKey
    byte[] s -> s
    java.math.BigInteger B -> B
    org.bouncycastle.crypto.agreement.srp.SRP6Client srpClient -> srpClient
    void init(org.bouncycastle.crypto.tls.TlsContext) -> init
    void skipServerCredentials() -> skipServerCredentials
    void processServerCertificate(org.bouncycastle.crypto.tls.Certificate) -> processServerCertificate
    boolean requiresServerKeyExchange() -> requiresServerKeyExchange
    void processServerKeyExchange(java.io.InputStream) -> processServerKeyExchange
    void validateCertificateRequest(org.bouncycastle.crypto.tls.CertificateRequest) -> validateCertificateRequest
    void processClientCredentials(org.bouncycastle.crypto.tls.TlsCredentials) -> processClientCredentials
    void generateClientKeyExchange(java.io.OutputStream) -> generateClientKeyExchange
    byte[] generatePremasterSecret() -> generatePremasterSecret
    org.bouncycastle.crypto.Signer initVerifyer(org.bouncycastle.crypto.tls.TlsSigner,org.bouncycastle.crypto.tls.SignatureAndHashAlgorithm,org.bouncycastle.crypto.tls.SecurityParameters) -> initVerifyer
org.bouncycastle.crypto.tls.TlsSRPUtils -> org.bouncycastle.crypto.tls.TlsSRPUtils:
    java.lang.Integer EXT_SRP -> EXT_SRP
    void addSRPExtension(java.util.Hashtable,byte[]) -> addSRPExtension
    byte[] getSRPExtension(java.util.Hashtable) -> getSRPExtension
    byte[] createSRPExtension(byte[]) -> createSRPExtension
    byte[] readSRPExtension(byte[]) -> readSRPExtension
org.bouncycastle.crypto.tls.TlsSRTPUtils -> org.bouncycastle.crypto.tls.TlsSRTPUtils:
    java.lang.Integer EXT_use_srtp -> EXT_use_srtp
    void addUseSRTPExtension(java.util.Hashtable,org.bouncycastle.crypto.tls.UseSRTPData) -> addUseSRTPExtension
    org.bouncycastle.crypto.tls.UseSRTPData getUseSRTPExtension(java.util.Hashtable) -> getUseSRTPExtension
    byte[] createUseSRTPExtension(org.bouncycastle.crypto.tls.UseSRTPData) -> createUseSRTPExtension
    org.bouncycastle.crypto.tls.UseSRTPData readUseSRTPExtension(byte[]) -> readUseSRTPExtension
org.bouncycastle.crypto.tls.TlsServer -> org.bouncycastle.crypto.tls.TlsServer:
    void init(org.bouncycastle.crypto.tls.TlsServerContext) -> init
    void notifyClientVersion(org.bouncycastle.crypto.tls.ProtocolVersion) -> notifyClientVersion
    void notifyOfferedCipherSuites(int[]) -> notifyOfferedCipherSuites
    void notifyOfferedCompressionMethods(short[]) -> notifyOfferedCompressionMethods
    void processClientExtensions(java.util.Hashtable) -> processClientExtensions
    org.bouncycastle.crypto.tls.ProtocolVersion getServerVersion() -> getServerVersion
    int getSelectedCipherSuite() -> getSelectedCipherSuite
    short getSelectedCompressionMethod() -> getSelectedCompressionMethod
    java.util.Hashtable getServerExtensions() -> getServerExtensions
    java.util.Vector getServerSupplementalData() -> getServerSupplementalData
    org.bouncycastle.crypto.tls.TlsCredentials getCredentials() -> getCredentials
    org.bouncycastle.crypto.tls.CertificateStatus getCertificateStatus() -> getCertificateStatus
    org.bouncycastle.crypto.tls.TlsKeyExchange getKeyExchange() -> getKeyExchange
    org.bouncycastle.crypto.tls.CertificateRequest getCertificateRequest() -> getCertificateRequest
    void processClientSupplementalData(java.util.Vector) -> processClientSupplementalData
    void notifyClientCertificate(org.bouncycastle.crypto.tls.Certificate) -> notifyClientCertificate
    org.bouncycastle.crypto.tls.NewSessionTicket getNewSessionTicket() -> getNewSessionTicket
org.bouncycastle.crypto.tls.TlsServerContext -> org.bouncycastle.crypto.tls.TlsServerContext:
org.bouncycastle.crypto.tls.TlsServerContextImpl -> org.bouncycastle.crypto.tls.TlsServerContextImpl:
    boolean isServer() -> isServer
org.bouncycastle.crypto.tls.TlsServerProtocol -> org.bouncycastle.crypto.tls.TlsServerProtocol:
    org.bouncycastle.crypto.tls.TlsServer tlsServer -> tlsServer
    org.bouncycastle.crypto.tls.TlsServerContextImpl tlsServerContext -> tlsServerContext
    org.bouncycastle.crypto.tls.TlsKeyExchange keyExchange -> keyExchange
    org.bouncycastle.crypto.tls.TlsCredentials serverCredentials -> serverCredentials
    org.bouncycastle.crypto.tls.CertificateRequest certificateRequest -> certificateRequest
    short clientCertificateType -> clientCertificateType
    org.bouncycastle.crypto.tls.TlsHandshakeHash prepareFinishHash -> prepareFinishHash
    void accept(org.bouncycastle.crypto.tls.TlsServer) -> accept
    void cleanupHandshake() -> cleanupHandshake
    org.bouncycastle.crypto.tls.AbstractTlsContext getContext() -> getContext
    org.bouncycastle.crypto.tls.TlsPeer getPeer() -> getPeer
    void handleHandshakeMessage(short,byte[]) -> handleHandshakeMessage
    void handleWarningMessage(short) -> handleWarningMessage
    void notifyClientCertificate(org.bouncycastle.crypto.tls.Certificate) -> notifyClientCertificate
    void receiveCertificateMessage(java.io.ByteArrayInputStream) -> receiveCertificateMessage
    void receiveCertificateVerifyMessage(java.io.ByteArrayInputStream) -> receiveCertificateVerifyMessage
    void receiveClientHelloMessage(java.io.ByteArrayInputStream) -> receiveClientHelloMessage
    void receiveClientKeyExchangeMessage(java.io.ByteArrayInputStream) -> receiveClientKeyExchangeMessage
    void sendCertificateRequestMessage(org.bouncycastle.crypto.tls.CertificateRequest) -> sendCertificateRequestMessage
    void sendCertificateStatusMessage(org.bouncycastle.crypto.tls.CertificateStatus) -> sendCertificateStatusMessage
    void sendNewSessionTicketMessage(org.bouncycastle.crypto.tls.NewSessionTicket) -> sendNewSessionTicketMessage
    void sendServerHelloMessage() -> sendServerHelloMessage
    void sendServerHelloDoneMessage() -> sendServerHelloDoneMessage
    void sendServerKeyExchangeMessage(byte[]) -> sendServerKeyExchangeMessage
    boolean expectCertificateVerifyMessage() -> expectCertificateVerifyMessage
org.bouncycastle.crypto.tls.TlsSession -> org.bouncycastle.crypto.tls.TlsSession:
    org.bouncycastle.crypto.tls.SessionParameters exportSessionParameters() -> exportSessionParameters
    byte[] getSessionID() -> getSessionID
    void invalidate() -> invalidate
    boolean isResumable() -> isResumable
org.bouncycastle.crypto.tls.TlsSessionImpl -> org.bouncycastle.crypto.tls.TlsSessionImpl:
    byte[] sessionID -> sessionID
    org.bouncycastle.crypto.tls.SessionParameters sessionParameters -> sessionParameters
    org.bouncycastle.crypto.tls.SessionParameters exportSessionParameters() -> exportSessionParameters
    byte[] getSessionID() -> getSessionID
    void invalidate() -> invalidate
    boolean isResumable() -> isResumable
org.bouncycastle.crypto.tls.TlsSigner -> org.bouncycastle.crypto.tls.TlsSigner:
    void init(org.bouncycastle.crypto.tls.TlsContext) -> init
    byte[] generateRawSignature(org.bouncycastle.crypto.params.AsymmetricKeyParameter,byte[]) -> generateRawSignature
    byte[] generateRawSignature(org.bouncycastle.crypto.tls.SignatureAndHashAlgorithm,org.bouncycastle.crypto.params.AsymmetricKeyParameter,byte[]) -> generateRawSignature
    boolean verifyRawSignature(byte[],org.bouncycastle.crypto.params.AsymmetricKeyParameter,byte[]) -> verifyRawSignature
    boolean verifyRawSignature(org.bouncycastle.crypto.tls.SignatureAndHashAlgorithm,byte[],org.bouncycastle.crypto.params.AsymmetricKeyParameter,byte[]) -> verifyRawSignature
    org.bouncycastle.crypto.Signer createSigner(org.bouncycastle.crypto.params.AsymmetricKeyParameter) -> createSigner
    org.bouncycastle.crypto.Signer createSigner(org.bouncycastle.crypto.tls.SignatureAndHashAlgorithm,org.bouncycastle.crypto.params.AsymmetricKeyParameter) -> createSigner
    org.bouncycastle.crypto.Signer createVerifyer(org.bouncycastle.crypto.params.AsymmetricKeyParameter) -> createVerifyer
    org.bouncycastle.crypto.Signer createVerifyer(org.bouncycastle.crypto.tls.SignatureAndHashAlgorithm,org.bouncycastle.crypto.params.AsymmetricKeyParameter) -> createVerifyer
    boolean isValidPublicKey(org.bouncycastle.crypto.params.AsymmetricKeyParameter) -> isValidPublicKey
org.bouncycastle.crypto.tls.TlsSignerCredentials -> org.bouncycastle.crypto.tls.TlsSignerCredentials:
    byte[] generateCertificateSignature(byte[]) -> generateCertificateSignature
    org.bouncycastle.crypto.tls.SignatureAndHashAlgorithm getSignatureAndHashAlgorithm() -> getSignatureAndHashAlgorithm
org.bouncycastle.crypto.tls.TlsStreamCipher -> org.bouncycastle.crypto.tls.TlsStreamCipher:
    org.bouncycastle.crypto.tls.TlsContext context -> context
    org.bouncycastle.crypto.StreamCipher encryptCipher -> encryptCipher
    org.bouncycastle.crypto.StreamCipher decryptCipher -> decryptCipher
    org.bouncycastle.crypto.tls.TlsMac writeMac -> writeMac
    org.bouncycastle.crypto.tls.TlsMac readMac -> readMac
    boolean usesNonce -> usesNonce
    int getPlaintextLimit(int) -> getPlaintextLimit
    byte[] encodePlaintext(long,short,byte[],int,int) -> encodePlaintext
    byte[] decodeCiphertext(long,short,byte[],int,int) -> decodeCiphertext
    void checkMAC(long,short,byte[],int,int,byte[],int,int) -> checkMAC
    void updateIV(org.bouncycastle.crypto.StreamCipher,boolean,long) -> updateIV
org.bouncycastle.crypto.tls.TlsUtils -> org.bouncycastle.crypto.tls.TlsUtils:
    byte[] EMPTY_BYTES -> EMPTY_BYTES
    java.lang.Integer EXT_signature_algorithms -> EXT_signature_algorithms
    byte[] SSL_CLIENT -> SSL_CLIENT
    byte[] SSL_SERVER -> SSL_SERVER
    byte[][] SSL3_CONST -> SSL3_CONST
    void checkUint8(short) -> checkUint8
    void checkUint8(int) -> checkUint8
    void checkUint8(long) -> checkUint8
    void checkUint16(int) -> checkUint16
    void checkUint16(long) -> checkUint16
    void checkUint24(int) -> checkUint24
    void checkUint24(long) -> checkUint24
    void checkUint32(long) -> checkUint32
    void checkUint48(long) -> checkUint48
    void checkUint64(long) -> checkUint64
    boolean isValidUint8(short) -> isValidUint8
    boolean isValidUint8(int) -> isValidUint8
    boolean isValidUint8(long) -> isValidUint8
    boolean isValidUint16(int) -> isValidUint16
    boolean isValidUint16(long) -> isValidUint16
    boolean isValidUint24(int) -> isValidUint24
    boolean isValidUint24(long) -> isValidUint24
    boolean isValidUint32(long) -> isValidUint32
    boolean isValidUint48(long) -> isValidUint48
    boolean isValidUint64(long) -> isValidUint64
    boolean isSSL(org.bouncycastle.crypto.tls.TlsContext) -> isSSL
    boolean isTLSv11(org.bouncycastle.crypto.tls.TlsContext) -> isTLSv11
    boolean isTLSv12(org.bouncycastle.crypto.tls.TlsContext) -> isTLSv12
    void writeUint8(short,java.io.OutputStream) -> writeUint8
    void writeUint8(int,java.io.OutputStream) -> writeUint8
    void writeUint8(short,byte[],int) -> writeUint8
    void writeUint8(int,byte[],int) -> writeUint8
    void writeUint16(int,java.io.OutputStream) -> writeUint16
    void writeUint16(int,byte[],int) -> writeUint16
    void writeUint24(int,java.io.OutputStream) -> writeUint24
    void writeUint24(int,byte[],int) -> writeUint24
    void writeUint32(long,java.io.OutputStream) -> writeUint32
    void writeUint32(long,byte[],int) -> writeUint32
    void writeUint48(long,java.io.OutputStream) -> writeUint48
    void writeUint48(long,byte[],int) -> writeUint48
    void writeUint64(long,java.io.OutputStream) -> writeUint64
    void writeUint64(long,byte[],int) -> writeUint64
    void writeOpaque8(byte[],java.io.OutputStream) -> writeOpaque8
    void writeOpaque16(byte[],java.io.OutputStream) -> writeOpaque16
    void writeOpaque24(byte[],java.io.OutputStream) -> writeOpaque24
    void writeUint8Array(short[],java.io.OutputStream) -> writeUint8Array
    void writeUint8Array(short[],byte[],int) -> writeUint8Array
    void writeUint8ArrayWithUint8Length(short[],java.io.OutputStream) -> writeUint8ArrayWithUint8Length
    void writeUint8ArrayWithUint8Length(short[],byte[],int) -> writeUint8ArrayWithUint8Length
    void writeUint16Array(int[],java.io.OutputStream) -> writeUint16Array
    void writeUint16Array(int[],byte[],int) -> writeUint16Array
    void writeUint16ArrayWithUint16Length(int[],java.io.OutputStream) -> writeUint16ArrayWithUint16Length
    void writeUint16ArrayWithUint16Length(int[],byte[],int) -> writeUint16ArrayWithUint16Length
    byte[] encodeOpaque8(byte[]) -> encodeOpaque8
    byte[] encodeUint8ArrayWithUint8Length(short[]) -> encodeUint8ArrayWithUint8Length
    byte[] encodeUint16ArrayWithUint16Length(int[]) -> encodeUint16ArrayWithUint16Length
    short readUint8(java.io.InputStream) -> readUint8
    short readUint8(byte[],int) -> readUint8
    int readUint16(java.io.InputStream) -> readUint16
    int readUint16(byte[],int) -> readUint16
    int readUint24(java.io.InputStream) -> readUint24
    int readUint24(byte[],int) -> readUint24
    long readUint32(java.io.InputStream) -> readUint32
    long readUint32(byte[],int) -> readUint32
    long readUint48(java.io.InputStream) -> readUint48
    long readUint48(byte[],int) -> readUint48
    byte[] readAllOrNothing(int,java.io.InputStream) -> readAllOrNothing
    byte[] readFully(int,java.io.InputStream) -> readFully
    void readFully(byte[],java.io.InputStream) -> readFully
    byte[] readOpaque8(java.io.InputStream) -> readOpaque8
    byte[] readOpaque16(java.io.InputStream) -> readOpaque16
    byte[] readOpaque24(java.io.InputStream) -> readOpaque24
    short[] readUint8Array(int,java.io.InputStream) -> readUint8Array
    int[] readUint16Array(int,java.io.InputStream) -> readUint16Array
    org.bouncycastle.crypto.tls.ProtocolVersion readVersion(byte[],int) -> readVersion
    org.bouncycastle.crypto.tls.ProtocolVersion readVersion(java.io.InputStream) -> readVersion
    int readVersionRaw(byte[],int) -> readVersionRaw
    int readVersionRaw(java.io.InputStream) -> readVersionRaw
    org.bouncycastle.asn1.ASN1Primitive readASN1Object(byte[]) -> readASN1Object
    org.bouncycastle.asn1.ASN1Primitive readDERObject(byte[]) -> readDERObject
    void writeGMTUnixTime(byte[],int) -> writeGMTUnixTime
    void writeVersion(org.bouncycastle.crypto.tls.ProtocolVersion,java.io.OutputStream) -> writeVersion
    void writeVersion(org.bouncycastle.crypto.tls.ProtocolVersion,byte[],int) -> writeVersion
    java.util.Vector getDefaultDSSSignatureAlgorithms() -> getDefaultDSSSignatureAlgorithms
    java.util.Vector getDefaultECDSASignatureAlgorithms() -> getDefaultECDSASignatureAlgorithms
    java.util.Vector getDefaultRSASignatureAlgorithms() -> getDefaultRSASignatureAlgorithms
    byte[] getExtensionData(java.util.Hashtable,java.lang.Integer) -> getExtensionData
    boolean hasExpectedEmptyExtensionData(java.util.Hashtable,java.lang.Integer,short) -> hasExpectedEmptyExtensionData
    org.bouncycastle.crypto.tls.TlsSession importSession(byte[],org.bouncycastle.crypto.tls.SessionParameters) -> importSession
    boolean isSignatureAlgorithmsExtensionAllowed(org.bouncycastle.crypto.tls.ProtocolVersion) -> isSignatureAlgorithmsExtensionAllowed
    void addSignatureAlgorithmsExtension(java.util.Hashtable,java.util.Vector) -> addSignatureAlgorithmsExtension
    java.util.Vector getSignatureAlgorithmsExtension(java.util.Hashtable) -> getSignatureAlgorithmsExtension
    byte[] createSignatureAlgorithmsExtension(java.util.Vector) -> createSignatureAlgorithmsExtension
    java.util.Vector readSignatureAlgorithmsExtension(byte[]) -> readSignatureAlgorithmsExtension
    void encodeSupportedSignatureAlgorithms(java.util.Vector,boolean,java.io.OutputStream) -> encodeSupportedSignatureAlgorithms
    java.util.Vector parseSupportedSignatureAlgorithms(boolean,java.io.InputStream) -> parseSupportedSignatureAlgorithms
    byte[] PRF(org.bouncycastle.crypto.tls.TlsContext,byte[],java.lang.String,byte[],int) -> PRF
    byte[] PRF_legacy(byte[],java.lang.String,byte[],int) -> PRF_legacy
    byte[] PRF_legacy(byte[],byte[],byte[],int) -> PRF_legacy
    byte[] concat(byte[],byte[]) -> concat
    void hmac_hash(org.bouncycastle.crypto.Digest,byte[],byte[],byte[]) -> hmac_hash
    void validateKeyUsage(org.bouncycastle.asn1.x509.Certificate,int) -> validateKeyUsage
    byte[] calculateKeyBlock(org.bouncycastle.crypto.tls.TlsContext,int) -> calculateKeyBlock
    byte[] calculateKeyBlock_SSL(byte[],byte[],int) -> calculateKeyBlock_SSL
    byte[] calculateMasterSecret(org.bouncycastle.crypto.tls.TlsContext,byte[]) -> calculateMasterSecret
    byte[] calculateMasterSecret_SSL(byte[],byte[]) -> calculateMasterSecret_SSL
    byte[] calculateVerifyData(org.bouncycastle.crypto.tls.TlsContext,java.lang.String,byte[]) -> calculateVerifyData
    org.bouncycastle.crypto.Digest createHash(short) -> createHash
    org.bouncycastle.crypto.Digest cloneHash(short,org.bouncycastle.crypto.Digest) -> cloneHash
    org.bouncycastle.crypto.Digest createPRFHash(int) -> createPRFHash
    org.bouncycastle.crypto.Digest clonePRFHash(int,org.bouncycastle.crypto.Digest) -> clonePRFHash
    short getHashAlgorithmForPRFAlgorithm(int) -> getHashAlgorithmForPRFAlgorithm
    org.bouncycastle.asn1.ASN1ObjectIdentifier getOIDForHashAlgorithm(short) -> getOIDForHashAlgorithm
    short getClientCertificateType(org.bouncycastle.crypto.tls.Certificate,org.bouncycastle.crypto.tls.Certificate) -> getClientCertificateType
    void trackHashAlgorithms(org.bouncycastle.crypto.tls.TlsHandshakeHash,java.util.Vector) -> trackHashAlgorithms
    boolean hasSigningCapability(short) -> hasSigningCapability
    org.bouncycastle.crypto.tls.TlsSigner createTlsSigner(short) -> createTlsSigner
    byte[][] genConst() -> genConst
    java.util.Vector vectorOfOne(java.lang.Object) -> vectorOfOne
    int getCipherType(int) -> getCipherType
    int getEncryptionAlgorithm(int) -> getEncryptionAlgorithm
    org.bouncycastle.crypto.tls.ProtocolVersion getMinimumVersion(int) -> getMinimumVersion
    boolean isAEADCipherSuite(int) -> isAEADCipherSuite
    boolean isBlockCipherSuite(int) -> isBlockCipherSuite
    boolean isStreamCipherSuite(int) -> isStreamCipherSuite
    boolean isValidCipherSuiteForVersion(int,org.bouncycastle.crypto.tls.ProtocolVersion) -> isValidCipherSuiteForVersion
org.bouncycastle.crypto.tls.UDPTransport -> org.bouncycastle.crypto.tls.UDPTransport:
    int MIN_IP_OVERHEAD -> MIN_IP_OVERHEAD
    int MAX_IP_OVERHEAD -> MAX_IP_OVERHEAD
    int UDP_OVERHEAD -> UDP_OVERHEAD
    java.net.DatagramSocket socket -> socket
    int receiveLimit -> receiveLimit
    int sendLimit -> sendLimit
    int getReceiveLimit() -> getReceiveLimit
    int getSendLimit() -> getSendLimit
    int receive(byte[],int,int,int) -> receive
    void send(byte[],int,int) -> send
    void close() -> close
org.bouncycastle.crypto.tls.URLAndHash -> org.bouncycastle.crypto.tls.URLAndHash:
    java.lang.String url -> url
    byte[] sha1Hash -> sha1Hash
    java.lang.String getURL() -> getURL
    byte[] getSHA1Hash() -> getSHA1Hash
    void encode(java.io.OutputStream) -> encode
    org.bouncycastle.crypto.tls.URLAndHash parse(org.bouncycastle.crypto.tls.TlsContext,java.io.InputStream) -> parse
org.bouncycastle.crypto.tls.UseSRTPData -> org.bouncycastle.crypto.tls.UseSRTPData:
    int[] protectionProfiles -> protectionProfiles
    byte[] mki -> mki
    int[] getProtectionProfiles() -> getProtectionProfiles
    byte[] getMki() -> getMki
org.bouncycastle.crypto.tls.UserMappingType -> org.bouncycastle.crypto.tls.UserMappingType:
    short upn_domain_hint -> upn_domain_hint
org.bouncycastle.crypto.util.Pack -> org.bouncycastle.crypto.util.Pack:
    int bigEndianToInt(byte[],int) -> bigEndianToInt
    void bigEndianToInt(byte[],int,int[]) -> bigEndianToInt
    byte[] intToBigEndian(int) -> intToBigEndian
    void intToBigEndian(int,byte[],int) -> intToBigEndian
    byte[] intToBigEndian(int[]) -> intToBigEndian
    void intToBigEndian(int[],byte[],int) -> intToBigEndian
    long bigEndianToLong(byte[],int) -> bigEndianToLong
    void bigEndianToLong(byte[],int,long[]) -> bigEndianToLong
    byte[] longToBigEndian(long) -> longToBigEndian
    void longToBigEndian(long,byte[],int) -> longToBigEndian
    byte[] longToBigEndian(long[]) -> longToBigEndian
    void longToBigEndian(long[],byte[],int) -> longToBigEndian
    int littleEndianToInt(byte[],int) -> littleEndianToInt
    void littleEndianToInt(byte[],int,int[]) -> littleEndianToInt
    void littleEndianToInt(byte[],int,int[],int,int) -> littleEndianToInt
    byte[] intToLittleEndian(int) -> intToLittleEndian
    void intToLittleEndian(int,byte[],int) -> intToLittleEndian
    byte[] intToLittleEndian(int[]) -> intToLittleEndian
    void intToLittleEndian(int[],byte[],int) -> intToLittleEndian
    long littleEndianToLong(byte[],int) -> littleEndianToLong
    void littleEndianToLong(byte[],int,long[]) -> littleEndianToLong
    byte[] longToLittleEndian(long) -> longToLittleEndian
    void longToLittleEndian(long,byte[],int) -> longToLittleEndian
    byte[] longToLittleEndian(long[]) -> longToLittleEndian
    void longToLittleEndian(long[],byte[],int) -> longToLittleEndian
org.bouncycastle.crypto.util.PrivateKeyFactory -> org.bouncycastle.crypto.util.PrivateKeyFactory:
    org.bouncycastle.crypto.params.AsymmetricKeyParameter createKey(byte[]) -> createKey
    org.bouncycastle.crypto.params.AsymmetricKeyParameter createKey(java.io.InputStream) -> createKey
    org.bouncycastle.crypto.params.AsymmetricKeyParameter createKey(org.bouncycastle.asn1.pkcs.PrivateKeyInfo) -> createKey
org.bouncycastle.crypto.util.PrivateKeyInfoFactory -> org.bouncycastle.crypto.util.PrivateKeyInfoFactory:
    org.bouncycastle.asn1.pkcs.PrivateKeyInfo createPrivateKeyInfo(org.bouncycastle.crypto.params.AsymmetricKeyParameter) -> createPrivateKeyInfo
org.bouncycastle.crypto.util.PublicKeyFactory -> org.bouncycastle.crypto.util.PublicKeyFactory:
    org.bouncycastle.crypto.params.AsymmetricKeyParameter createKey(byte[]) -> createKey
    org.bouncycastle.crypto.params.AsymmetricKeyParameter createKey(java.io.InputStream) -> createKey
    org.bouncycastle.crypto.params.AsymmetricKeyParameter createKey(org.bouncycastle.asn1.x509.SubjectPublicKeyInfo) -> createKey
org.bouncycastle.crypto.util.SubjectPublicKeyInfoFactory -> org.bouncycastle.crypto.util.SubjectPublicKeyInfoFactory:
    org.bouncycastle.asn1.x509.SubjectPublicKeyInfo createSubjectPublicKeyInfo(org.bouncycastle.crypto.params.AsymmetricKeyParameter) -> createSubjectPublicKeyInfo
org.bouncycastle.i18n.ErrorBundle -> org.bouncycastle.i18n.ErrorBundle:
    java.lang.String SUMMARY_ENTRY -> SUMMARY_ENTRY
    java.lang.String DETAIL_ENTRY -> DETAIL_ENTRY
    java.lang.String getSummary(java.util.Locale,java.util.TimeZone) -> getSummary
    java.lang.String getSummary(java.util.Locale) -> getSummary
    java.lang.String getDetail(java.util.Locale,java.util.TimeZone) -> getDetail
    java.lang.String getDetail(java.util.Locale) -> getDetail
org.bouncycastle.i18n.LocaleString -> org.bouncycastle.i18n.LocaleString:
    java.lang.String getLocaleString(java.util.Locale) -> getLocaleString
org.bouncycastle.i18n.LocalizedException -> org.bouncycastle.i18n.LocalizedException:
    org.bouncycastle.i18n.ErrorBundle message -> message
    java.lang.Throwable cause -> cause
    org.bouncycastle.i18n.ErrorBundle getErrorMessage() -> getErrorMessage
    java.lang.Throwable getCause() -> getCause
org.bouncycastle.i18n.LocalizedMessage -> org.bouncycastle.i18n.LocalizedMessage:
    java.lang.String id -> id
    java.lang.String resource -> resource
    java.lang.String DEFAULT_ENCODING -> DEFAULT_ENCODING
    java.lang.String encoding -> encoding
    org.bouncycastle.i18n.LocalizedMessage$FilteredArguments arguments -> arguments
    org.bouncycastle.i18n.LocalizedMessage$FilteredArguments extraArgs -> extraArgs
    org.bouncycastle.i18n.filter.Filter filter -> filter
    java.lang.ClassLoader loader -> loader
    java.lang.String getEntry(java.lang.String,java.util.Locale,java.util.TimeZone) -> getEntry
    java.lang.String formatWithTimeZone(java.lang.String,java.lang.Object[],java.util.Locale,java.util.TimeZone) -> formatWithTimeZone
    java.lang.String addExtraArgs(java.lang.String,java.util.Locale) -> addExtraArgs
    void setFilter(org.bouncycastle.i18n.filter.Filter) -> setFilter
    org.bouncycastle.i18n.filter.Filter getFilter() -> getFilter
    void setClassLoader(java.lang.ClassLoader) -> setClassLoader
    java.lang.ClassLoader getClassLoader() -> getClassLoader
    java.lang.String getId() -> getId
    java.lang.String getResource() -> getResource
    java.lang.Object[] getArguments() -> getArguments
    void setExtraArgument(java.lang.Object) -> setExtraArgument
    void setExtraArguments(java.lang.Object[]) -> setExtraArguments
    java.lang.Object[] getExtraArgs() -> getExtraArgs
    java.lang.String toString() -> toString
org.bouncycastle.i18n.LocalizedMessage$FilteredArguments -> org.bouncycastle.i18n.LocalizedMessage$FilteredArguments:
    int NO_FILTER -> NO_FILTER
    int FILTER -> FILTER
    int FILTER_URL -> FILTER_URL
    org.bouncycastle.i18n.filter.Filter filter -> filter
    boolean[] isLocaleSpecific -> isLocaleSpecific
    int[] argFilterType -> argFilterType
    java.lang.Object[] arguments -> arguments
    java.lang.Object[] unpackedArgs -> unpackedArgs
    java.lang.Object[] filteredArgs -> filteredArgs
    org.bouncycastle.i18n.LocalizedMessage this$0 -> this$0
    boolean isEmpty() -> isEmpty
    java.lang.Object[] getArguments() -> getArguments
    java.lang.Object[] getFilteredArgs(java.util.Locale) -> getFilteredArgs
    java.lang.Object filter(int,java.lang.Object) -> filter
    org.bouncycastle.i18n.filter.Filter getFilter() -> getFilter
    void setFilter(org.bouncycastle.i18n.filter.Filter) -> setFilter
org.bouncycastle.i18n.MessageBundle -> org.bouncycastle.i18n.MessageBundle:
    java.lang.String TITLE_ENTRY -> TITLE_ENTRY
    java.lang.String getTitle(java.util.Locale,java.util.TimeZone) -> getTitle
    java.lang.String getTitle(java.util.Locale) -> getTitle
org.bouncycastle.i18n.MissingEntryException -> org.bouncycastle.i18n.MissingEntryException:
    java.lang.String resource -> resource
    java.lang.String key -> key
    java.lang.ClassLoader loader -> loader
    java.util.Locale locale -> locale
    java.lang.String debugMsg -> debugMsg
    java.lang.String getKey() -> getKey
    java.lang.String getResource() -> getResource
    java.lang.ClassLoader getClassLoader() -> getClassLoader
    java.util.Locale getLocale() -> getLocale
    java.lang.String getDebugMsg() -> getDebugMsg
org.bouncycastle.i18n.TextBundle -> org.bouncycastle.i18n.TextBundle:
    java.lang.String TEXT_ENTRY -> TEXT_ENTRY
    java.lang.String getText(java.util.Locale,java.util.TimeZone) -> getText
    java.lang.String getText(java.util.Locale) -> getText
org.bouncycastle.i18n.filter.Filter -> org.bouncycastle.i18n.filter.Filter:
    java.lang.String doFilter(java.lang.String) -> doFilter
    java.lang.String doFilterUrl(java.lang.String) -> doFilterUrl
org.bouncycastle.i18n.filter.HTMLFilter -> org.bouncycastle.i18n.filter.HTMLFilter:
    java.lang.String doFilter(java.lang.String) -> doFilter
    java.lang.String doFilterUrl(java.lang.String) -> doFilterUrl
org.bouncycastle.i18n.filter.SQLFilter -> org.bouncycastle.i18n.filter.SQLFilter:
    java.lang.String doFilter(java.lang.String) -> doFilter
    java.lang.String doFilterUrl(java.lang.String) -> doFilterUrl
org.bouncycastle.i18n.filter.TrustedInput -> org.bouncycastle.i18n.filter.TrustedInput:
    java.lang.Object input -> input
    java.lang.Object getInput() -> getInput
    java.lang.String toString() -> toString
org.bouncycastle.i18n.filter.UntrustedInput -> org.bouncycastle.i18n.filter.UntrustedInput:
    java.lang.Object input -> input
    java.lang.Object getInput() -> getInput
    java.lang.String getString() -> getString
    java.lang.String toString() -> toString
org.bouncycastle.i18n.filter.UntrustedUrlInput -> org.bouncycastle.i18n.filter.UntrustedUrlInput:
org.bouncycastle.jcajce.io.CipherInputStream -> org.bouncycastle.jcajce.io.CipherInputStream:
    javax.crypto.Cipher cipher -> cipher
    byte[] inputBuffer -> inputBuffer
    boolean finalized -> finalized
    byte[] buf -> buf
    int maxBuf -> maxBuf
    int bufOff -> bufOff
    int nextChunk() -> nextChunk
    byte[] finaliseCipher() -> finaliseCipher
    int read() -> read
    int read(byte[],int,int) -> read
    long skip(long) -> skip
    int available() -> available
    void close() -> close
    void mark(int) -> mark
    void reset() -> reset
    boolean markSupported() -> markSupported
org.bouncycastle.jcajce.io.CipherOutputStream -> org.bouncycastle.jcajce.io.CipherOutputStream:
    javax.crypto.Cipher cipher -> cipher
    byte[] oneByte -> oneByte
    void write(int) -> write
    void write(byte[],int,int) -> write
    void flush() -> flush
    void close() -> close
org.bouncycastle.jcajce.io.MacOutputStream -> org.bouncycastle.jcajce.io.MacOutputStream:
    javax.crypto.Mac mac -> mac
    void write(int) -> write
    void write(byte[],int,int) -> write
    byte[] getMac() -> getMac
org.bouncycastle.jcajce.provider.asymmetric.DH -> org.bouncycastle.jcajce.provider.asymmetric.DH:
    java.lang.String PREFIX -> PREFIX
org.bouncycastle.jcajce.provider.asymmetric.DH$Mappings -> org.bouncycastle.jcajce.provider.asymmetric.DH$Mappings:
    void configure(org.bouncycastle.jcajce.provider.config.ConfigurableProvider) -> configure
org.bouncycastle.jcajce.provider.asymmetric.DSA -> org.bouncycastle.jcajce.provider.asymmetric.DSA:
    java.lang.String PREFIX -> PREFIX
org.bouncycastle.jcajce.provider.asymmetric.DSA$Mappings -> org.bouncycastle.jcajce.provider.asymmetric.DSA$Mappings:
    void configure(org.bouncycastle.jcajce.provider.config.ConfigurableProvider) -> configure
org.bouncycastle.jcajce.provider.asymmetric.DSTU4145 -> org.bouncycastle.jcajce.provider.asymmetric.DSTU4145:
    java.lang.String PREFIX -> PREFIX
org.bouncycastle.jcajce.provider.asymmetric.DSTU4145$Mappings -> org.bouncycastle.jcajce.provider.asymmetric.DSTU4145$Mappings:
    void configure(org.bouncycastle.jcajce.provider.config.ConfigurableProvider) -> configure
org.bouncycastle.jcajce.provider.asymmetric.EC -> org.bouncycastle.jcajce.provider.asymmetric.EC:
    java.lang.String PREFIX -> PREFIX
org.bouncycastle.jcajce.provider.asymmetric.EC$Mappings -> org.bouncycastle.jcajce.provider.asymmetric.EC$Mappings:
    void configure(org.bouncycastle.jcajce.provider.config.ConfigurableProvider) -> configure
org.bouncycastle.jcajce.provider.asymmetric.ECGOST -> org.bouncycastle.jcajce.provider.asymmetric.ECGOST:
    java.lang.String PREFIX -> PREFIX
org.bouncycastle.jcajce.provider.asymmetric.ECGOST$Mappings -> org.bouncycastle.jcajce.provider.asymmetric.ECGOST$Mappings:
    void configure(org.bouncycastle.jcajce.provider.config.ConfigurableProvider) -> configure
org.bouncycastle.jcajce.provider.asymmetric.ElGamal -> org.bouncycastle.jcajce.provider.asymmetric.ElGamal:
    java.lang.String PREFIX -> PREFIX
org.bouncycastle.jcajce.provider.asymmetric.ElGamal$Mappings -> org.bouncycastle.jcajce.provider.asymmetric.ElGamal$Mappings:
    void configure(org.bouncycastle.jcajce.provider.config.ConfigurableProvider) -> configure
org.bouncycastle.jcajce.provider.asymmetric.GOST -> org.bouncycastle.jcajce.provider.asymmetric.GOST:
    java.lang.String PREFIX -> PREFIX
org.bouncycastle.jcajce.provider.asymmetric.GOST$Mappings -> org.bouncycastle.jcajce.provider.asymmetric.GOST$Mappings:
    void configure(org.bouncycastle.jcajce.provider.config.ConfigurableProvider) -> configure
org.bouncycastle.jcajce.provider.asymmetric.IES -> org.bouncycastle.jcajce.provider.asymmetric.IES:
    java.lang.String PREFIX -> PREFIX
org.bouncycastle.jcajce.provider.asymmetric.IES$Mappings -> org.bouncycastle.jcajce.provider.asymmetric.IES$Mappings:
    void configure(org.bouncycastle.jcajce.provider.config.ConfigurableProvider) -> configure
org.bouncycastle.jcajce.provider.asymmetric.RSA -> org.bouncycastle.jcajce.provider.asymmetric.RSA:
    java.lang.String PREFIX -> PREFIX
org.bouncycastle.jcajce.provider.asymmetric.RSA$Mappings -> org.bouncycastle.jcajce.provider.asymmetric.RSA$Mappings:
    void configure(org.bouncycastle.jcajce.provider.config.ConfigurableProvider) -> configure
    void addDigestSignature(org.bouncycastle.jcajce.provider.config.ConfigurableProvider,java.lang.String,java.lang.String,org.bouncycastle.asn1.ASN1ObjectIdentifier) -> addDigestSignature
org.bouncycastle.jcajce.provider.asymmetric.X509 -> org.bouncycastle.jcajce.provider.asymmetric.X509:
org.bouncycastle.jcajce.provider.asymmetric.X509$Mappings -> org.bouncycastle.jcajce.provider.asymmetric.X509$Mappings:
    void configure(org.bouncycastle.jcajce.provider.config.ConfigurableProvider) -> configure
org.bouncycastle.jcajce.provider.asymmetric.dh.AlgorithmParameterGeneratorSpi -> org.bouncycastle.jcajce.provider.asymmetric.dh.AlgorithmParameterGeneratorSpi:
    java.security.SecureRandom random -> random
    int strength -> strength
    int l -> l
    void engineInit(int,java.security.SecureRandom) -> engineInit
    void engineInit(java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom) -> engineInit
    java.security.AlgorithmParameters engineGenerateParameters() -> engineGenerateParameters
org.bouncycastle.jcajce.provider.asymmetric.dh.AlgorithmParametersSpi -> org.bouncycastle.jcajce.provider.asymmetric.dh.AlgorithmParametersSpi:
    javax.crypto.spec.DHParameterSpec currentSpec -> currentSpec
    boolean isASN1FormatString(java.lang.String) -> isASN1FormatString
    java.security.spec.AlgorithmParameterSpec engineGetParameterSpec(java.lang.Class) -> engineGetParameterSpec
    byte[] engineGetEncoded() -> engineGetEncoded
    byte[] engineGetEncoded(java.lang.String) -> engineGetEncoded
    java.security.spec.AlgorithmParameterSpec localEngineGetParameterSpec(java.lang.Class) -> localEngineGetParameterSpec
    void engineInit(java.security.spec.AlgorithmParameterSpec) -> engineInit
    void engineInit(byte[]) -> engineInit
    void engineInit(byte[],java.lang.String) -> engineInit
    java.lang.String engineToString() -> engineToString
org.bouncycastle.jcajce.provider.asymmetric.dh.BCDHPrivateKey -> org.bouncycastle.jcajce.provider.asymmetric.dh.BCDHPrivateKey:
    long serialVersionUID -> serialVersionUID
    java.math.BigInteger x -> x
    javax.crypto.spec.DHParameterSpec dhSpec -> dhSpec
    org.bouncycastle.asn1.pkcs.PrivateKeyInfo info -> info
    org.bouncycastle.jcajce.provider.asymmetric.util.PKCS12BagAttributeCarrierImpl attrCarrier -> attrCarrier
    java.lang.String getAlgorithm() -> getAlgorithm
    java.lang.String getFormat() -> getFormat
    byte[] getEncoded() -> getEncoded
    javax.crypto.spec.DHParameterSpec getParams() -> getParams
    java.math.BigInteger getX() -> getX
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    void setBagAttribute(org.bouncycastle.asn1.ASN1ObjectIdentifier,org.bouncycastle.asn1.ASN1Encodable) -> setBagAttribute
    org.bouncycastle.asn1.ASN1Encodable getBagAttribute(org.bouncycastle.asn1.ASN1ObjectIdentifier) -> getBagAttribute
    java.util.Enumeration getBagAttributeKeys() -> getBagAttributeKeys
    void readObject(java.io.ObjectInputStream) -> readObject
    void writeObject(java.io.ObjectOutputStream) -> writeObject
org.bouncycastle.jcajce.provider.asymmetric.dh.BCDHPublicKey -> org.bouncycastle.jcajce.provider.asymmetric.dh.BCDHPublicKey:
    long serialVersionUID -> serialVersionUID
    java.math.BigInteger y -> y
    javax.crypto.spec.DHParameterSpec dhSpec -> dhSpec
    org.bouncycastle.asn1.x509.SubjectPublicKeyInfo info -> info
    java.lang.String getAlgorithm() -> getAlgorithm
    java.lang.String getFormat() -> getFormat
    byte[] getEncoded() -> getEncoded
    javax.crypto.spec.DHParameterSpec getParams() -> getParams
    java.math.BigInteger getY() -> getY
    boolean isPKCSParam(org.bouncycastle.asn1.ASN1Sequence) -> isPKCSParam
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    void readObject(java.io.ObjectInputStream) -> readObject
    void writeObject(java.io.ObjectOutputStream) -> writeObject
org.bouncycastle.jcajce.provider.asymmetric.dh.IESCipher -> org.bouncycastle.jcajce.provider.asymmetric.dh.IESCipher:
    org.bouncycastle.crypto.engines.IESEngine engine -> engine
    int state -> state
    java.io.ByteArrayOutputStream buffer -> buffer
    java.security.AlgorithmParameters engineParam -> engineParam
    org.bouncycastle.jce.spec.IESParameterSpec engineSpec -> engineSpec
    org.bouncycastle.crypto.params.AsymmetricKeyParameter key -> key
    java.security.SecureRandom random -> random
    boolean dhaesMode -> dhaesMode
    org.bouncycastle.crypto.params.AsymmetricKeyParameter otherKeyParameter -> otherKeyParameter
    int engineGetBlockSize() -> engineGetBlockSize
    int engineGetKeySize(java.security.Key) -> engineGetKeySize
    byte[] engineGetIV() -> engineGetIV
    java.security.AlgorithmParameters engineGetParameters() -> engineGetParameters
    void engineSetMode(java.lang.String) -> engineSetMode
    int engineGetOutputSize(int) -> engineGetOutputSize
    void engineSetPadding(java.lang.String) -> engineSetPadding
    void engineInit(int,java.security.Key,java.security.AlgorithmParameters,java.security.SecureRandom) -> engineInit
    void engineInit(int,java.security.Key,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom) -> engineInit
    void engineInit(int,java.security.Key,java.security.SecureRandom) -> engineInit
    byte[] engineUpdate(byte[],int,int) -> engineUpdate
    int engineUpdate(byte[],int,int,byte[],int) -> engineUpdate
    byte[] engineDoFinal(byte[],int,int) -> engineDoFinal
    int engineDoFinal(byte[],int,int,byte[],int) -> engineDoFinal
org.bouncycastle.jcajce.provider.asymmetric.dh.IESCipher$1 -> org.bouncycastle.jcajce.provider.asymmetric.dh.IESCipher$1:
    org.bouncycastle.jcajce.provider.asymmetric.dh.IESCipher this$0 -> this$0
    byte[] getEncoded(org.bouncycastle.crypto.params.AsymmetricKeyParameter) -> getEncoded
org.bouncycastle.jcajce.provider.asymmetric.dh.IESCipher$IES -> org.bouncycastle.jcajce.provider.asymmetric.dh.IESCipher$IES:
org.bouncycastle.jcajce.provider.asymmetric.dh.IESCipher$IESwithAES -> org.bouncycastle.jcajce.provider.asymmetric.dh.IESCipher$IESwithAES:
org.bouncycastle.jcajce.provider.asymmetric.dh.IESCipher$IESwithDESede -> org.bouncycastle.jcajce.provider.asymmetric.dh.IESCipher$IESwithDESede:
org.bouncycastle.jcajce.provider.asymmetric.dh.KeyAgreementSpi -> org.bouncycastle.jcajce.provider.asymmetric.dh.KeyAgreementSpi:
    java.math.BigInteger x -> x
    java.math.BigInteger p -> p
    java.math.BigInteger g -> g
    java.math.BigInteger result -> result
    java.util.Hashtable algorithms -> algorithms
    byte[] bigIntToBytes(java.math.BigInteger) -> bigIntToBytes
    java.security.Key engineDoPhase(java.security.Key,boolean) -> engineDoPhase
    byte[] engineGenerateSecret() -> engineGenerateSecret
    int engineGenerateSecret(byte[],int) -> engineGenerateSecret
    javax.crypto.SecretKey engineGenerateSecret(java.lang.String) -> engineGenerateSecret
    void engineInit(java.security.Key,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom) -> engineInit
    void engineInit(java.security.Key,java.security.SecureRandom) -> engineInit
org.bouncycastle.jcajce.provider.asymmetric.dh.KeyFactorySpi -> org.bouncycastle.jcajce.provider.asymmetric.dh.KeyFactorySpi:
    java.security.spec.KeySpec engineGetKeySpec(java.security.Key,java.lang.Class) -> engineGetKeySpec
    java.security.Key engineTranslateKey(java.security.Key) -> engineTranslateKey
    java.security.PrivateKey engineGeneratePrivate(java.security.spec.KeySpec) -> engineGeneratePrivate
    java.security.PublicKey engineGeneratePublic(java.security.spec.KeySpec) -> engineGeneratePublic
    java.security.PrivateKey generatePrivate(org.bouncycastle.asn1.pkcs.PrivateKeyInfo) -> generatePrivate
    java.security.PublicKey generatePublic(org.bouncycastle.asn1.x509.SubjectPublicKeyInfo) -> generatePublic
org.bouncycastle.jcajce.provider.asymmetric.dh.KeyPairGeneratorSpi -> org.bouncycastle.jcajce.provider.asymmetric.dh.KeyPairGeneratorSpi:
    java.util.Hashtable params -> params
    java.lang.Object lock -> lock
    org.bouncycastle.crypto.params.DHKeyGenerationParameters param -> param
    org.bouncycastle.crypto.generators.DHBasicKeyPairGenerator engine -> engine
    int strength -> strength
    int certainty -> certainty
    java.security.SecureRandom random -> random
    boolean initialised -> initialised
    void initialize(int,java.security.SecureRandom) -> initialize
    void initialize(java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom) -> initialize
    java.security.KeyPair generateKeyPair() -> generateKeyPair
org.bouncycastle.jcajce.provider.asymmetric.dsa.AlgorithmParameterGeneratorSpi -> org.bouncycastle.jcajce.provider.asymmetric.dsa.AlgorithmParameterGeneratorSpi:
    java.security.SecureRandom random -> random
    int strength -> strength
    org.bouncycastle.crypto.params.DSAParameterGenerationParameters params -> params
    void engineInit(int,java.security.SecureRandom) -> engineInit
    void engineInit(java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom) -> engineInit
    java.security.AlgorithmParameters engineGenerateParameters() -> engineGenerateParameters
org.bouncycastle.jcajce.provider.asymmetric.dsa.AlgorithmParametersSpi -> org.bouncycastle.jcajce.provider.asymmetric.dsa.AlgorithmParametersSpi:
    java.security.spec.DSAParameterSpec currentSpec -> currentSpec
    boolean isASN1FormatString(java.lang.String) -> isASN1FormatString
    java.security.spec.AlgorithmParameterSpec engineGetParameterSpec(java.lang.Class) -> engineGetParameterSpec
    byte[] engineGetEncoded() -> engineGetEncoded
    byte[] engineGetEncoded(java.lang.String) -> engineGetEncoded
    java.security.spec.AlgorithmParameterSpec localEngineGetParameterSpec(java.lang.Class) -> localEngineGetParameterSpec
    void engineInit(java.security.spec.AlgorithmParameterSpec) -> engineInit
    void engineInit(byte[]) -> engineInit
    void engineInit(byte[],java.lang.String) -> engineInit
    java.lang.String engineToString() -> engineToString
org.bouncycastle.jcajce.provider.asymmetric.dsa.BCDSAPrivateKey -> org.bouncycastle.jcajce.provider.asymmetric.dsa.BCDSAPrivateKey:
    long serialVersionUID -> serialVersionUID
    java.math.BigInteger x -> x
    java.security.interfaces.DSAParams dsaSpec -> dsaSpec
    org.bouncycastle.jcajce.provider.asymmetric.util.PKCS12BagAttributeCarrierImpl attrCarrier -> attrCarrier
    java.lang.String getAlgorithm() -> getAlgorithm
    java.lang.String getFormat() -> getFormat
    byte[] getEncoded() -> getEncoded
    java.security.interfaces.DSAParams getParams() -> getParams
    java.math.BigInteger getX() -> getX
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    void setBagAttribute(org.bouncycastle.asn1.ASN1ObjectIdentifier,org.bouncycastle.asn1.ASN1Encodable) -> setBagAttribute
    org.bouncycastle.asn1.ASN1Encodable getBagAttribute(org.bouncycastle.asn1.ASN1ObjectIdentifier) -> getBagAttribute
    java.util.Enumeration getBagAttributeKeys() -> getBagAttributeKeys
    void readObject(java.io.ObjectInputStream) -> readObject
    void writeObject(java.io.ObjectOutputStream) -> writeObject
org.bouncycastle.jcajce.provider.asymmetric.dsa.BCDSAPublicKey -> org.bouncycastle.jcajce.provider.asymmetric.dsa.BCDSAPublicKey:
    long serialVersionUID -> serialVersionUID
    java.math.BigInteger y -> y
    java.security.interfaces.DSAParams dsaSpec -> dsaSpec
    boolean isNotNull(org.bouncycastle.asn1.ASN1Encodable) -> isNotNull
    java.lang.String getAlgorithm() -> getAlgorithm
    java.lang.String getFormat() -> getFormat
    byte[] getEncoded() -> getEncoded
    java.security.interfaces.DSAParams getParams() -> getParams
    java.math.BigInteger getY() -> getY
    java.lang.String toString() -> toString
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    void readObject(java.io.ObjectInputStream) -> readObject
    void writeObject(java.io.ObjectOutputStream) -> writeObject
org.bouncycastle.jcajce.provider.asymmetric.dsa.DSASigner -> org.bouncycastle.jcajce.provider.asymmetric.dsa.DSASigner:
    org.bouncycastle.crypto.Digest digest -> digest
    org.bouncycastle.crypto.DSA signer -> signer
    java.security.SecureRandom random -> random
    void engineInitVerify(java.security.PublicKey) -> engineInitVerify
    void engineInitSign(java.security.PrivateKey,java.security.SecureRandom) -> engineInitSign
    void engineInitSign(java.security.PrivateKey) -> engineInitSign
    void engineUpdate(byte) -> engineUpdate
    void engineUpdate(byte[],int,int) -> engineUpdate
    byte[] engineSign() -> engineSign
    boolean engineVerify(byte[]) -> engineVerify
    void engineSetParameter(java.security.spec.AlgorithmParameterSpec) -> engineSetParameter
    void engineSetParameter(java.lang.String,java.lang.Object) -> engineSetParameter
    java.lang.Object engineGetParameter(java.lang.String) -> engineGetParameter
    byte[] derEncode(java.math.BigInteger,java.math.BigInteger) -> derEncode
    java.math.BigInteger[] derDecode(byte[]) -> derDecode
org.bouncycastle.jcajce.provider.asymmetric.dsa.DSASigner$detDSA -> org.bouncycastle.jcajce.provider.asymmetric.dsa.DSASigner$detDSA:
org.bouncycastle.jcajce.provider.asymmetric.dsa.DSASigner$detDSA224 -> org.bouncycastle.jcajce.provider.asymmetric.dsa.DSASigner$detDSA224:
org.bouncycastle.jcajce.provider.asymmetric.dsa.DSASigner$detDSA256 -> org.bouncycastle.jcajce.provider.asymmetric.dsa.DSASigner$detDSA256:
org.bouncycastle.jcajce.provider.asymmetric.dsa.DSASigner$detDSA384 -> org.bouncycastle.jcajce.provider.asymmetric.dsa.DSASigner$detDSA384:
org.bouncycastle.jcajce.provider.asymmetric.dsa.DSASigner$detDSA512 -> org.bouncycastle.jcajce.provider.asymmetric.dsa.DSASigner$detDSA512:
org.bouncycastle.jcajce.provider.asymmetric.dsa.DSASigner$dsa224 -> org.bouncycastle.jcajce.provider.asymmetric.dsa.DSASigner$dsa224:
org.bouncycastle.jcajce.provider.asymmetric.dsa.DSASigner$dsa256 -> org.bouncycastle.jcajce.provider.asymmetric.dsa.DSASigner$dsa256:
org.bouncycastle.jcajce.provider.asymmetric.dsa.DSASigner$dsa384 -> org.bouncycastle.jcajce.provider.asymmetric.dsa.DSASigner$dsa384:
org.bouncycastle.jcajce.provider.asymmetric.dsa.DSASigner$dsa512 -> org.bouncycastle.jcajce.provider.asymmetric.dsa.DSASigner$dsa512:
org.bouncycastle.jcajce.provider.asymmetric.dsa.DSASigner$noneDSA -> org.bouncycastle.jcajce.provider.asymmetric.dsa.DSASigner$noneDSA:
org.bouncycastle.jcajce.provider.asymmetric.dsa.DSASigner$stdDSA -> org.bouncycastle.jcajce.provider.asymmetric.dsa.DSASigner$stdDSA:
org.bouncycastle.jcajce.provider.asymmetric.dsa.DSAUtil -> org.bouncycastle.jcajce.provider.asymmetric.dsa.DSAUtil:
    org.bouncycastle.asn1.ASN1ObjectIdentifier[] dsaOids -> dsaOids
    boolean isDsaOid(org.bouncycastle.asn1.ASN1ObjectIdentifier) -> isDsaOid
    org.bouncycastle.crypto.params.AsymmetricKeyParameter generatePublicKeyParameter(java.security.PublicKey) -> generatePublicKeyParameter
    org.bouncycastle.crypto.params.AsymmetricKeyParameter generatePrivateKeyParameter(java.security.PrivateKey) -> generatePrivateKeyParameter
org.bouncycastle.jcajce.provider.asymmetric.dsa.KeyFactorySpi -> org.bouncycastle.jcajce.provider.asymmetric.dsa.KeyFactorySpi:
    java.security.spec.KeySpec engineGetKeySpec(java.security.Key,java.lang.Class) -> engineGetKeySpec
    java.security.Key engineTranslateKey(java.security.Key) -> engineTranslateKey
    java.security.PrivateKey generatePrivate(org.bouncycastle.asn1.pkcs.PrivateKeyInfo) -> generatePrivate
    java.security.PublicKey generatePublic(org.bouncycastle.asn1.x509.SubjectPublicKeyInfo) -> generatePublic
    java.security.PrivateKey engineGeneratePrivate(java.security.spec.KeySpec) -> engineGeneratePrivate
    java.security.PublicKey engineGeneratePublic(java.security.spec.KeySpec) -> engineGeneratePublic
org.bouncycastle.jcajce.provider.asymmetric.dsa.KeyPairGeneratorSpi -> org.bouncycastle.jcajce.provider.asymmetric.dsa.KeyPairGeneratorSpi:
    org.bouncycastle.crypto.params.DSAKeyGenerationParameters param -> param
    org.bouncycastle.crypto.generators.DSAKeyPairGenerator engine -> engine
    int strength -> strength
    int certainty -> certainty
    java.security.SecureRandom random -> random
    boolean initialised -> initialised
    void initialize(int,java.security.SecureRandom) -> initialize
    void initialize(java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom) -> initialize
    java.security.KeyPair generateKeyPair() -> generateKeyPair
org.bouncycastle.jcajce.provider.asymmetric.dstu.BCDSTU4145PrivateKey -> org.bouncycastle.jcajce.provider.asymmetric.dstu.BCDSTU4145PrivateKey:
    long serialVersionUID -> serialVersionUID
    java.lang.String algorithm -> algorithm
    boolean withCompression -> withCompression
    java.math.BigInteger d -> d
    java.security.spec.ECParameterSpec ecSpec -> ecSpec
    org.bouncycastle.asn1.DERBitString publicKey -> publicKey
    org.bouncycastle.jcajce.provider.asymmetric.util.PKCS12BagAttributeCarrierImpl attrCarrier -> attrCarrier
    void populateFromPrivKeyInfo(org.bouncycastle.asn1.pkcs.PrivateKeyInfo) -> populateFromPrivKeyInfo
    java.lang.String getAlgorithm() -> getAlgorithm
    java.lang.String getFormat() -> getFormat
    byte[] getEncoded() -> getEncoded
    java.security.spec.ECParameterSpec getParams() -> getParams
    org.bouncycastle.jce.spec.ECParameterSpec getParameters() -> getParameters
    org.bouncycastle.jce.spec.ECParameterSpec engineGetSpec() -> engineGetSpec
    java.math.BigInteger getS() -> getS
    java.math.BigInteger getD() -> getD
    void setBagAttribute(org.bouncycastle.asn1.ASN1ObjectIdentifier,org.bouncycastle.asn1.ASN1Encodable) -> setBagAttribute
    org.bouncycastle.asn1.ASN1Encodable getBagAttribute(org.bouncycastle.asn1.ASN1ObjectIdentifier) -> getBagAttribute
    java.util.Enumeration getBagAttributeKeys() -> getBagAttributeKeys
    void setPointFormat(java.lang.String) -> setPointFormat
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    org.bouncycastle.asn1.DERBitString getPublicKeyDetails(org.bouncycastle.jcajce.provider.asymmetric.dstu.BCDSTU4145PublicKey) -> getPublicKeyDetails
    void readObject(java.io.ObjectInputStream) -> readObject
    void writeObject(java.io.ObjectOutputStream) -> writeObject
org.bouncycastle.jcajce.provider.asymmetric.dstu.BCDSTU4145PublicKey -> org.bouncycastle.jcajce.provider.asymmetric.dstu.BCDSTU4145PublicKey:
    long serialVersionUID -> serialVersionUID
    java.lang.String algorithm -> algorithm
    boolean withCompression -> withCompression
    org.bouncycastle.math.ec.ECPoint q -> q
    java.security.spec.ECParameterSpec ecSpec -> ecSpec
    org.bouncycastle.asn1.ua.DSTU4145Params dstuParams -> dstuParams
    java.security.spec.ECParameterSpec createSpec(java.security.spec.EllipticCurve,org.bouncycastle.crypto.params.ECDomainParameters) -> createSpec
    void reverseBytes(byte[]) -> reverseBytes
    void populateFromPubKeyInfo(org.bouncycastle.asn1.x509.SubjectPublicKeyInfo) -> populateFromPubKeyInfo
    byte[] getSbox() -> getSbox
    java.lang.String getAlgorithm() -> getAlgorithm
    java.lang.String getFormat() -> getFormat
    byte[] getEncoded() -> getEncoded
    java.security.spec.ECParameterSpec getParams() -> getParams
    org.bouncycastle.jce.spec.ECParameterSpec getParameters() -> getParameters
    java.security.spec.ECPoint getW() -> getW
    org.bouncycastle.math.ec.ECPoint getQ() -> getQ
    org.bouncycastle.math.ec.ECPoint engineGetQ() -> engineGetQ
    org.bouncycastle.jce.spec.ECParameterSpec engineGetSpec() -> engineGetSpec
    java.lang.String toString() -> toString
    void setPointFormat(java.lang.String) -> setPointFormat
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    void readObject(java.io.ObjectInputStream) -> readObject
    void writeObject(java.io.ObjectOutputStream) -> writeObject
org.bouncycastle.jcajce.provider.asymmetric.dstu.KeyFactorySpi -> org.bouncycastle.jcajce.provider.asymmetric.dstu.KeyFactorySpi:
    java.security.spec.KeySpec engineGetKeySpec(java.security.Key,java.lang.Class) -> engineGetKeySpec
    java.security.Key engineTranslateKey(java.security.Key) -> engineTranslateKey
    java.security.PrivateKey engineGeneratePrivate(java.security.spec.KeySpec) -> engineGeneratePrivate
    java.security.PublicKey engineGeneratePublic(java.security.spec.KeySpec) -> engineGeneratePublic
    java.security.PrivateKey generatePrivate(org.bouncycastle.asn1.pkcs.PrivateKeyInfo) -> generatePrivate
    java.security.PublicKey generatePublic(org.bouncycastle.asn1.x509.SubjectPublicKeyInfo) -> generatePublic
org.bouncycastle.jcajce.provider.asymmetric.dstu.KeyPairGeneratorSpi -> org.bouncycastle.jcajce.provider.asymmetric.dstu.KeyPairGeneratorSpi:
    java.lang.Object ecParams -> ecParams
    org.bouncycastle.crypto.generators.ECKeyPairGenerator engine -> engine
    java.lang.String algorithm -> algorithm
    org.bouncycastle.crypto.params.ECKeyGenerationParameters param -> param
    java.security.SecureRandom random -> random
    boolean initialised -> initialised
    void initialize(int,java.security.SecureRandom) -> initialize
    void initialize(java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom) -> initialize
    java.security.KeyPair generateKeyPair() -> generateKeyPair
org.bouncycastle.jcajce.provider.asymmetric.dstu.SignatureSpi -> org.bouncycastle.jcajce.provider.asymmetric.dstu.SignatureSpi:
    org.bouncycastle.crypto.Digest digest -> digest
    org.bouncycastle.crypto.DSA signer -> signer
    byte[] DEFAULT_SBOX -> DEFAULT_SBOX
    void engineInitVerify(java.security.PublicKey) -> engineInitVerify
    byte[] expandSbox(byte[]) -> expandSbox
    void engineInitSign(java.security.PrivateKey) -> engineInitSign
    void engineUpdate(byte) -> engineUpdate
    void engineUpdate(byte[],int,int) -> engineUpdate
    byte[] engineSign() -> engineSign
    boolean engineVerify(byte[]) -> engineVerify
    void engineSetParameter(java.security.spec.AlgorithmParameterSpec) -> engineSetParameter
    void engineSetParameter(java.lang.String,java.lang.Object) -> engineSetParameter
    java.lang.Object engineGetParameter(java.lang.String) -> engineGetParameter
org.bouncycastle.jcajce.provider.asymmetric.dstu.SignatureSpiLe -> org.bouncycastle.jcajce.provider.asymmetric.dstu.SignatureSpiLe:
    void reverseBytes(byte[]) -> reverseBytes
    byte[] engineSign() -> engineSign
    boolean engineVerify(byte[]) -> engineVerify
org.bouncycastle.jcajce.provider.asymmetric.ec.BCECPrivateKey -> org.bouncycastle.jcajce.provider.asymmetric.ec.BCECPrivateKey:
    long serialVersionUID -> serialVersionUID
    java.lang.String algorithm -> algorithm
    boolean withCompression -> withCompression
    java.math.BigInteger d -> d
    java.security.spec.ECParameterSpec ecSpec -> ecSpec
    org.bouncycastle.jcajce.provider.config.ProviderConfiguration configuration -> configuration
    org.bouncycastle.asn1.DERBitString publicKey -> publicKey
    org.bouncycastle.jcajce.provider.asymmetric.util.PKCS12BagAttributeCarrierImpl attrCarrier -> attrCarrier
    void populateFromPrivKeyInfo(org.bouncycastle.asn1.pkcs.PrivateKeyInfo) -> populateFromPrivKeyInfo
    java.lang.String getAlgorithm() -> getAlgorithm
    java.lang.String getFormat() -> getFormat
    byte[] getEncoded() -> getEncoded
    java.security.spec.ECParameterSpec getParams() -> getParams
    org.bouncycastle.jce.spec.ECParameterSpec getParameters() -> getParameters
    org.bouncycastle.jce.spec.ECParameterSpec engineGetSpec() -> engineGetSpec
    java.math.BigInteger getS() -> getS
    java.math.BigInteger getD() -> getD
    void setBagAttribute(org.bouncycastle.asn1.ASN1ObjectIdentifier,org.bouncycastle.asn1.ASN1Encodable) -> setBagAttribute
    org.bouncycastle.asn1.ASN1Encodable getBagAttribute(org.bouncycastle.asn1.ASN1ObjectIdentifier) -> getBagAttribute
    java.util.Enumeration getBagAttributeKeys() -> getBagAttributeKeys
    void setPointFormat(java.lang.String) -> setPointFormat
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    org.bouncycastle.asn1.DERBitString getPublicKeyDetails(org.bouncycastle.jcajce.provider.asymmetric.ec.BCECPublicKey) -> getPublicKeyDetails
    void readObject(java.io.ObjectInputStream) -> readObject
    void writeObject(java.io.ObjectOutputStream) -> writeObject
org.bouncycastle.jcajce.provider.asymmetric.ec.BCECPublicKey -> org.bouncycastle.jcajce.provider.asymmetric.ec.BCECPublicKey:
    long serialVersionUID -> serialVersionUID
    java.lang.String algorithm -> algorithm
    boolean withCompression -> withCompression
    org.bouncycastle.math.ec.ECPoint q -> q
    java.security.spec.ECParameterSpec ecSpec -> ecSpec
    org.bouncycastle.jcajce.provider.config.ProviderConfiguration configuration -> configuration
    java.security.spec.ECParameterSpec createSpec(java.security.spec.EllipticCurve,org.bouncycastle.crypto.params.ECDomainParameters) -> createSpec
    void populateFromPubKeyInfo(org.bouncycastle.asn1.x509.SubjectPublicKeyInfo) -> populateFromPubKeyInfo
    java.lang.String getAlgorithm() -> getAlgorithm
    java.lang.String getFormat() -> getFormat
    byte[] getEncoded() -> getEncoded
    void extractBytes(byte[],int,java.math.BigInteger) -> extractBytes
    java.security.spec.ECParameterSpec getParams() -> getParams
    org.bouncycastle.jce.spec.ECParameterSpec getParameters() -> getParameters
    java.security.spec.ECPoint getW() -> getW
    org.bouncycastle.math.ec.ECPoint getQ() -> getQ
    org.bouncycastle.math.ec.ECPoint engineGetQ() -> engineGetQ
    org.bouncycastle.jce.spec.ECParameterSpec engineGetSpec() -> engineGetSpec
    java.lang.String toString() -> toString
    void setPointFormat(java.lang.String) -> setPointFormat
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    void readObject(java.io.ObjectInputStream) -> readObject
    void writeObject(java.io.ObjectOutputStream) -> writeObject
org.bouncycastle.jcajce.provider.asymmetric.ec.IESCipher -> org.bouncycastle.jcajce.provider.asymmetric.ec.IESCipher:
    int ivLength -> ivLength
    org.bouncycastle.crypto.engines.IESEngine engine -> engine
    int state -> state
    java.io.ByteArrayOutputStream buffer -> buffer
    java.security.AlgorithmParameters engineParam -> engineParam
    org.bouncycastle.jce.spec.IESParameterSpec engineSpec -> engineSpec
    org.bouncycastle.crypto.params.AsymmetricKeyParameter key -> key
    java.security.SecureRandom random -> random
    boolean dhaesMode -> dhaesMode
    org.bouncycastle.crypto.params.AsymmetricKeyParameter otherKeyParameter -> otherKeyParameter
    int engineGetBlockSize() -> engineGetBlockSize
    int engineGetKeySize(java.security.Key) -> engineGetKeySize
    byte[] engineGetIV() -> engineGetIV
    java.security.AlgorithmParameters engineGetParameters() -> engineGetParameters
    void engineSetMode(java.lang.String) -> engineSetMode
    int engineGetOutputSize(int) -> engineGetOutputSize
    void engineSetPadding(java.lang.String) -> engineSetPadding
    void engineInit(int,java.security.Key,java.security.AlgorithmParameters,java.security.SecureRandom) -> engineInit
    void engineInit(int,java.security.Key,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom) -> engineInit
    void engineInit(int,java.security.Key,java.security.SecureRandom) -> engineInit
    byte[] engineUpdate(byte[],int,int) -> engineUpdate
    int engineUpdate(byte[],int,int,byte[],int) -> engineUpdate
    byte[] engineDoFinal(byte[],int,int) -> engineDoFinal
    int engineDoFinal(byte[],int,int,byte[],int) -> engineDoFinal
org.bouncycastle.jcajce.provider.asymmetric.ec.IESCipher$1 -> org.bouncycastle.jcajce.provider.asymmetric.ec.IESCipher$1:
    org.bouncycastle.jcajce.provider.asymmetric.ec.IESCipher this$0 -> this$0
    byte[] getEncoded(org.bouncycastle.crypto.params.AsymmetricKeyParameter) -> getEncoded
org.bouncycastle.jcajce.provider.asymmetric.ec.IESCipher$ECIES -> org.bouncycastle.jcajce.provider.asymmetric.ec.IESCipher$ECIES:
org.bouncycastle.jcajce.provider.asymmetric.ec.IESCipher$ECIESwithAES -> org.bouncycastle.jcajce.provider.asymmetric.ec.IESCipher$ECIESwithAES:
org.bouncycastle.jcajce.provider.asymmetric.ec.IESCipher$ECIESwithAESCBC -> org.bouncycastle.jcajce.provider.asymmetric.ec.IESCipher$ECIESwithAESCBC:
org.bouncycastle.jcajce.provider.asymmetric.ec.IESCipher$ECIESwithDESede -> org.bouncycastle.jcajce.provider.asymmetric.ec.IESCipher$ECIESwithDESede:
org.bouncycastle.jcajce.provider.asymmetric.ec.IESCipher$ECIESwithDESedeCBC -> org.bouncycastle.jcajce.provider.asymmetric.ec.IESCipher$ECIESwithDESedeCBC:
org.bouncycastle.jcajce.provider.asymmetric.ec.KeyAgreementSpi -> org.bouncycastle.jcajce.provider.asymmetric.ec.KeyAgreementSpi:
    org.bouncycastle.asn1.x9.X9IntegerConverter converter -> converter
    java.util.Hashtable algorithms -> algorithms
    java.util.Hashtable oids -> oids
    java.util.Hashtable des -> des
    java.lang.String kaAlgorithm -> kaAlgorithm
    java.math.BigInteger result -> result
    org.bouncycastle.crypto.params.ECDomainParameters parameters -> parameters
    org.bouncycastle.crypto.BasicAgreement agreement -> agreement
    org.bouncycastle.crypto.DerivationFunction kdf -> kdf
    byte[] bigIntToBytes(java.math.BigInteger) -> bigIntToBytes
    java.security.Key engineDoPhase(java.security.Key,boolean) -> engineDoPhase
    byte[] engineGenerateSecret() -> engineGenerateSecret
    int engineGenerateSecret(byte[],int) -> engineGenerateSecret
    javax.crypto.SecretKey engineGenerateSecret(java.lang.String) -> engineGenerateSecret
    void engineInit(java.security.Key,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom) -> engineInit
    void engineInit(java.security.Key,java.security.SecureRandom) -> engineInit
    void initFromKey(java.security.Key) -> initFromKey
    java.lang.String getSimpleName(java.lang.Class) -> getSimpleName
org.bouncycastle.jcajce.provider.asymmetric.ec.KeyAgreementSpi$DH -> org.bouncycastle.jcajce.provider.asymmetric.ec.KeyAgreementSpi$DH:
org.bouncycastle.jcajce.provider.asymmetric.ec.KeyAgreementSpi$DHC -> org.bouncycastle.jcajce.provider.asymmetric.ec.KeyAgreementSpi$DHC:
org.bouncycastle.jcajce.provider.asymmetric.ec.KeyAgreementSpi$DHwithSHA1KDF -> org.bouncycastle.jcajce.provider.asymmetric.ec.KeyAgreementSpi$DHwithSHA1KDF:
org.bouncycastle.jcajce.provider.asymmetric.ec.KeyAgreementSpi$MQV -> org.bouncycastle.jcajce.provider.asymmetric.ec.KeyAgreementSpi$MQV:
org.bouncycastle.jcajce.provider.asymmetric.ec.KeyAgreementSpi$MQVwithSHA1KDF -> org.bouncycastle.jcajce.provider.asymmetric.ec.KeyAgreementSpi$MQVwithSHA1KDF:
org.bouncycastle.jcajce.provider.asymmetric.ec.KeyFactorySpi -> org.bouncycastle.jcajce.provider.asymmetric.ec.KeyFactorySpi:
    java.lang.String algorithm -> algorithm
    org.bouncycastle.jcajce.provider.config.ProviderConfiguration configuration -> configuration
    java.security.Key engineTranslateKey(java.security.Key) -> engineTranslateKey
    java.security.spec.KeySpec engineGetKeySpec(java.security.Key,java.lang.Class) -> engineGetKeySpec
    java.security.PrivateKey engineGeneratePrivate(java.security.spec.KeySpec) -> engineGeneratePrivate
    java.security.PublicKey engineGeneratePublic(java.security.spec.KeySpec) -> engineGeneratePublic
    java.security.PrivateKey generatePrivate(org.bouncycastle.asn1.pkcs.PrivateKeyInfo) -> generatePrivate
    java.security.PublicKey generatePublic(org.bouncycastle.asn1.x509.SubjectPublicKeyInfo) -> generatePublic
org.bouncycastle.jcajce.provider.asymmetric.ec.KeyFactorySpi$EC -> org.bouncycastle.jcajce.provider.asymmetric.ec.KeyFactorySpi$EC:
org.bouncycastle.jcajce.provider.asymmetric.ec.KeyFactorySpi$ECDH -> org.bouncycastle.jcajce.provider.asymmetric.ec.KeyFactorySpi$ECDH:
org.bouncycastle.jcajce.provider.asymmetric.ec.KeyFactorySpi$ECDHC -> org.bouncycastle.jcajce.provider.asymmetric.ec.KeyFactorySpi$ECDHC:
org.bouncycastle.jcajce.provider.asymmetric.ec.KeyFactorySpi$ECDSA -> org.bouncycastle.jcajce.provider.asymmetric.ec.KeyFactorySpi$ECDSA:
org.bouncycastle.jcajce.provider.asymmetric.ec.KeyFactorySpi$ECGOST3410 -> org.bouncycastle.jcajce.provider.asymmetric.ec.KeyFactorySpi$ECGOST3410:
org.bouncycastle.jcajce.provider.asymmetric.ec.KeyFactorySpi$ECMQV -> org.bouncycastle.jcajce.provider.asymmetric.ec.KeyFactorySpi$ECMQV:
org.bouncycastle.jcajce.provider.asymmetric.ec.KeyPairGeneratorSpi -> org.bouncycastle.jcajce.provider.asymmetric.ec.KeyPairGeneratorSpi:
org.bouncycastle.jcajce.provider.asymmetric.ec.KeyPairGeneratorSpi$EC -> org.bouncycastle.jcajce.provider.asymmetric.ec.KeyPairGeneratorSpi$EC:
    org.bouncycastle.crypto.params.ECKeyGenerationParameters param -> param
    org.bouncycastle.crypto.generators.ECKeyPairGenerator engine -> engine
    java.lang.Object ecParams -> ecParams
    int strength -> strength
    int certainty -> certainty
    java.security.SecureRandom random -> random
    boolean initialised -> initialised
    java.lang.String algorithm -> algorithm
    org.bouncycastle.jcajce.provider.config.ProviderConfiguration configuration -> configuration
    java.util.Hashtable ecParameters -> ecParameters
    void initialize(int,java.security.SecureRandom) -> initialize
    void initialize(java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom) -> initialize
    java.security.KeyPair generateKeyPair() -> generateKeyPair
    org.bouncycastle.crypto.params.ECKeyGenerationParameters createKeyGenParamsBC(org.bouncycastle.jce.spec.ECParameterSpec,java.security.SecureRandom) -> createKeyGenParamsBC
    org.bouncycastle.crypto.params.ECKeyGenerationParameters createKeyGenParamsJCE(java.security.spec.ECParameterSpec,java.security.SecureRandom) -> createKeyGenParamsJCE
    org.bouncycastle.jce.spec.ECNamedCurveSpec createNamedCurveSpec(java.lang.String) -> createNamedCurveSpec
    void initializeNamedCurve(java.lang.String,java.security.SecureRandom) -> initializeNamedCurve
org.bouncycastle.jcajce.provider.asymmetric.ec.KeyPairGeneratorSpi$ECDH -> org.bouncycastle.jcajce.provider.asymmetric.ec.KeyPairGeneratorSpi$ECDH:
org.bouncycastle.jcajce.provider.asymmetric.ec.KeyPairGeneratorSpi$ECDHC -> org.bouncycastle.jcajce.provider.asymmetric.ec.KeyPairGeneratorSpi$ECDHC:
org.bouncycastle.jcajce.provider.asymmetric.ec.KeyPairGeneratorSpi$ECDSA -> org.bouncycastle.jcajce.provider.asymmetric.ec.KeyPairGeneratorSpi$ECDSA:
org.bouncycastle.jcajce.provider.asymmetric.ec.KeyPairGeneratorSpi$ECMQV -> org.bouncycastle.jcajce.provider.asymmetric.ec.KeyPairGeneratorSpi$ECMQV:
org.bouncycastle.jcajce.provider.asymmetric.ec.SignatureSpi -> org.bouncycastle.jcajce.provider.asymmetric.ec.SignatureSpi:
    void engineInitVerify(java.security.PublicKey) -> engineInitVerify
    void engineInitSign(java.security.PrivateKey) -> engineInitSign
org.bouncycastle.jcajce.provider.asymmetric.ec.SignatureSpi$1 -> org.bouncycastle.jcajce.provider.asymmetric.ec.SignatureSpi$1:
org.bouncycastle.jcajce.provider.asymmetric.ec.SignatureSpi$PlainDSAEncoder -> org.bouncycastle.jcajce.provider.asymmetric.ec.SignatureSpi$PlainDSAEncoder:
    byte[] encode(java.math.BigInteger,java.math.BigInteger) -> encode
    byte[] makeUnsigned(java.math.BigInteger) -> makeUnsigned
    java.math.BigInteger[] decode(byte[]) -> decode
org.bouncycastle.jcajce.provider.asymmetric.ec.SignatureSpi$StdDSAEncoder -> org.bouncycastle.jcajce.provider.asymmetric.ec.SignatureSpi$StdDSAEncoder:
    byte[] encode(java.math.BigInteger,java.math.BigInteger) -> encode
    java.math.BigInteger[] decode(byte[]) -> decode
org.bouncycastle.jcajce.provider.asymmetric.ec.SignatureSpi$ecCVCDSA -> org.bouncycastle.jcajce.provider.asymmetric.ec.SignatureSpi$ecCVCDSA:
org.bouncycastle.jcajce.provider.asymmetric.ec.SignatureSpi$ecCVCDSA224 -> org.bouncycastle.jcajce.provider.asymmetric.ec.SignatureSpi$ecCVCDSA224:
org.bouncycastle.jcajce.provider.asymmetric.ec.SignatureSpi$ecCVCDSA256 -> org.bouncycastle.jcajce.provider.asymmetric.ec.SignatureSpi$ecCVCDSA256:
org.bouncycastle.jcajce.provider.asymmetric.ec.SignatureSpi$ecCVCDSA384 -> org.bouncycastle.jcajce.provider.asymmetric.ec.SignatureSpi$ecCVCDSA384:
org.bouncycastle.jcajce.provider.asymmetric.ec.SignatureSpi$ecCVCDSA512 -> org.bouncycastle.jcajce.provider.asymmetric.ec.SignatureSpi$ecCVCDSA512:
org.bouncycastle.jcajce.provider.asymmetric.ec.SignatureSpi$ecDSA -> org.bouncycastle.jcajce.provider.asymmetric.ec.SignatureSpi$ecDSA:
org.bouncycastle.jcajce.provider.asymmetric.ec.SignatureSpi$ecDSA224 -> org.bouncycastle.jcajce.provider.asymmetric.ec.SignatureSpi$ecDSA224:
org.bouncycastle.jcajce.provider.asymmetric.ec.SignatureSpi$ecDSA256 -> org.bouncycastle.jcajce.provider.asymmetric.ec.SignatureSpi$ecDSA256:
org.bouncycastle.jcajce.provider.asymmetric.ec.SignatureSpi$ecDSA384 -> org.bouncycastle.jcajce.provider.asymmetric.ec.SignatureSpi$ecDSA384:
org.bouncycastle.jcajce.provider.asymmetric.ec.SignatureSpi$ecDSA512 -> org.bouncycastle.jcajce.provider.asymmetric.ec.SignatureSpi$ecDSA512:
org.bouncycastle.jcajce.provider.asymmetric.ec.SignatureSpi$ecDSARipeMD160 -> org.bouncycastle.jcajce.provider.asymmetric.ec.SignatureSpi$ecDSARipeMD160:
org.bouncycastle.jcajce.provider.asymmetric.ec.SignatureSpi$ecDSAnone -> org.bouncycastle.jcajce.provider.asymmetric.ec.SignatureSpi$ecDSAnone:
org.bouncycastle.jcajce.provider.asymmetric.ec.SignatureSpi$ecDetDSA -> org.bouncycastle.jcajce.provider.asymmetric.ec.SignatureSpi$ecDetDSA:
org.bouncycastle.jcajce.provider.asymmetric.ec.SignatureSpi$ecDetDSA224 -> org.bouncycastle.jcajce.provider.asymmetric.ec.SignatureSpi$ecDetDSA224:
org.bouncycastle.jcajce.provider.asymmetric.ec.SignatureSpi$ecDetDSA256 -> org.bouncycastle.jcajce.provider.asymmetric.ec.SignatureSpi$ecDetDSA256:
org.bouncycastle.jcajce.provider.asymmetric.ec.SignatureSpi$ecDetDSA384 -> org.bouncycastle.jcajce.provider.asymmetric.ec.SignatureSpi$ecDetDSA384:
org.bouncycastle.jcajce.provider.asymmetric.ec.SignatureSpi$ecDetDSA512 -> org.bouncycastle.jcajce.provider.asymmetric.ec.SignatureSpi$ecDetDSA512:
org.bouncycastle.jcajce.provider.asymmetric.ec.SignatureSpi$ecNR -> org.bouncycastle.jcajce.provider.asymmetric.ec.SignatureSpi$ecNR:
org.bouncycastle.jcajce.provider.asymmetric.ec.SignatureSpi$ecNR224 -> org.bouncycastle.jcajce.provider.asymmetric.ec.SignatureSpi$ecNR224:
org.bouncycastle.jcajce.provider.asymmetric.ec.SignatureSpi$ecNR256 -> org.bouncycastle.jcajce.provider.asymmetric.ec.SignatureSpi$ecNR256:
org.bouncycastle.jcajce.provider.asymmetric.ec.SignatureSpi$ecNR384 -> org.bouncycastle.jcajce.provider.asymmetric.ec.SignatureSpi$ecNR384:
org.bouncycastle.jcajce.provider.asymmetric.ec.SignatureSpi$ecNR512 -> org.bouncycastle.jcajce.provider.asymmetric.ec.SignatureSpi$ecNR512:
org.bouncycastle.jcajce.provider.asymmetric.ec.SignatureSpi$ecPlainDSARP160 -> org.bouncycastle.jcajce.provider.asymmetric.ec.SignatureSpi$ecPlainDSARP160:
org.bouncycastle.jcajce.provider.asymmetric.ecgost.BCECGOST3410PrivateKey -> org.bouncycastle.jcajce.provider.asymmetric.ecgost.BCECGOST3410PrivateKey:
    long serialVersionUID -> serialVersionUID
    java.lang.String algorithm -> algorithm
    boolean withCompression -> withCompression
    org.bouncycastle.asn1.cryptopro.GOST3410PublicKeyAlgParameters gostParams -> gostParams
    java.math.BigInteger d -> d
    java.security.spec.ECParameterSpec ecSpec -> ecSpec
    org.bouncycastle.asn1.DERBitString publicKey -> publicKey
    org.bouncycastle.jcajce.provider.asymmetric.util.PKCS12BagAttributeCarrierImpl attrCarrier -> attrCarrier
    void populateFromPrivKeyInfo(org.bouncycastle.asn1.pkcs.PrivateKeyInfo) -> populateFromPrivKeyInfo
    java.lang.String getAlgorithm() -> getAlgorithm
    java.lang.String getFormat() -> getFormat
    byte[] getEncoded() -> getEncoded
    void extractBytes(byte[],int,java.math.BigInteger) -> extractBytes
    java.security.spec.ECParameterSpec getParams() -> getParams
    org.bouncycastle.jce.spec.ECParameterSpec getParameters() -> getParameters
    org.bouncycastle.jce.spec.ECParameterSpec engineGetSpec() -> engineGetSpec
    java.math.BigInteger getS() -> getS
    java.math.BigInteger getD() -> getD
    void setBagAttribute(org.bouncycastle.asn1.ASN1ObjectIdentifier,org.bouncycastle.asn1.ASN1Encodable) -> setBagAttribute
    org.bouncycastle.asn1.ASN1Encodable getBagAttribute(org.bouncycastle.asn1.ASN1ObjectIdentifier) -> getBagAttribute
    java.util.Enumeration getBagAttributeKeys() -> getBagAttributeKeys
    void setPointFormat(java.lang.String) -> setPointFormat
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    org.bouncycastle.asn1.DERBitString getPublicKeyDetails(org.bouncycastle.jcajce.provider.asymmetric.ecgost.BCECGOST3410PublicKey) -> getPublicKeyDetails
    void readObject(java.io.ObjectInputStream) -> readObject
    void writeObject(java.io.ObjectOutputStream) -> writeObject
org.bouncycastle.jcajce.provider.asymmetric.ecgost.BCECGOST3410PublicKey -> org.bouncycastle.jcajce.provider.asymmetric.ecgost.BCECGOST3410PublicKey:
    long serialVersionUID -> serialVersionUID
    java.lang.String algorithm -> algorithm
    boolean withCompression -> withCompression
    org.bouncycastle.math.ec.ECPoint q -> q
    java.security.spec.ECParameterSpec ecSpec -> ecSpec
    org.bouncycastle.asn1.cryptopro.GOST3410PublicKeyAlgParameters gostParams -> gostParams
    java.security.spec.ECParameterSpec createSpec(java.security.spec.EllipticCurve,org.bouncycastle.crypto.params.ECDomainParameters) -> createSpec
    void populateFromPubKeyInfo(org.bouncycastle.asn1.x509.SubjectPublicKeyInfo) -> populateFromPubKeyInfo
    java.lang.String getAlgorithm() -> getAlgorithm
    java.lang.String getFormat() -> getFormat
    byte[] getEncoded() -> getEncoded
    void extractBytes(byte[],int,java.math.BigInteger) -> extractBytes
    java.security.spec.ECParameterSpec getParams() -> getParams
    org.bouncycastle.jce.spec.ECParameterSpec getParameters() -> getParameters
    java.security.spec.ECPoint getW() -> getW
    org.bouncycastle.math.ec.ECPoint getQ() -> getQ
    org.bouncycastle.math.ec.ECPoint engineGetQ() -> engineGetQ
    org.bouncycastle.jce.spec.ECParameterSpec engineGetSpec() -> engineGetSpec
    java.lang.String toString() -> toString
    void setPointFormat(java.lang.String) -> setPointFormat
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    void readObject(java.io.ObjectInputStream) -> readObject
    void writeObject(java.io.ObjectOutputStream) -> writeObject
    org.bouncycastle.asn1.cryptopro.GOST3410PublicKeyAlgParameters getGostParams() -> getGostParams
org.bouncycastle.jcajce.provider.asymmetric.ecgost.KeyFactorySpi -> org.bouncycastle.jcajce.provider.asymmetric.ecgost.KeyFactorySpi:
    java.security.spec.KeySpec engineGetKeySpec(java.security.Key,java.lang.Class) -> engineGetKeySpec
    java.security.Key engineTranslateKey(java.security.Key) -> engineTranslateKey
    java.security.PrivateKey engineGeneratePrivate(java.security.spec.KeySpec) -> engineGeneratePrivate
    java.security.PublicKey engineGeneratePublic(java.security.spec.KeySpec) -> engineGeneratePublic
    java.security.PrivateKey generatePrivate(org.bouncycastle.asn1.pkcs.PrivateKeyInfo) -> generatePrivate
    java.security.PublicKey generatePublic(org.bouncycastle.asn1.x509.SubjectPublicKeyInfo) -> generatePublic
org.bouncycastle.jcajce.provider.asymmetric.ecgost.KeyPairGeneratorSpi -> org.bouncycastle.jcajce.provider.asymmetric.ecgost.KeyPairGeneratorSpi:
    java.lang.Object ecParams -> ecParams
    org.bouncycastle.crypto.generators.ECKeyPairGenerator engine -> engine
    java.lang.String algorithm -> algorithm
    org.bouncycastle.crypto.params.ECKeyGenerationParameters param -> param
    int strength -> strength
    java.security.SecureRandom random -> random
    boolean initialised -> initialised
    void initialize(int,java.security.SecureRandom) -> initialize
    void initialize(java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom) -> initialize
    java.security.KeyPair generateKeyPair() -> generateKeyPair
org.bouncycastle.jcajce.provider.asymmetric.ecgost.SignatureSpi -> org.bouncycastle.jcajce.provider.asymmetric.ecgost.SignatureSpi:
    org.bouncycastle.crypto.Digest digest -> digest
    org.bouncycastle.crypto.DSA signer -> signer
    void engineInitVerify(java.security.PublicKey) -> engineInitVerify
    void engineInitSign(java.security.PrivateKey) -> engineInitSign
    void engineUpdate(byte) -> engineUpdate
    void engineUpdate(byte[],int,int) -> engineUpdate
    byte[] engineSign() -> engineSign
    boolean engineVerify(byte[]) -> engineVerify
    void engineSetParameter(java.security.spec.AlgorithmParameterSpec) -> engineSetParameter
    void engineSetParameter(java.lang.String,java.lang.Object) -> engineSetParameter
    java.lang.Object engineGetParameter(java.lang.String) -> engineGetParameter
org.bouncycastle.jcajce.provider.asymmetric.elgamal.AlgorithmParameterGeneratorSpi -> org.bouncycastle.jcajce.provider.asymmetric.elgamal.AlgorithmParameterGeneratorSpi:
    java.security.SecureRandom random -> random
    int strength -> strength
    int l -> l
    void engineInit(int,java.security.SecureRandom) -> engineInit
    void engineInit(java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom) -> engineInit
    java.security.AlgorithmParameters engineGenerateParameters() -> engineGenerateParameters
org.bouncycastle.jcajce.provider.asymmetric.elgamal.AlgorithmParametersSpi -> org.bouncycastle.jcajce.provider.asymmetric.elgamal.AlgorithmParametersSpi:
    org.bouncycastle.jce.spec.ElGamalParameterSpec currentSpec -> currentSpec
    byte[] engineGetEncoded() -> engineGetEncoded
    byte[] engineGetEncoded(java.lang.String) -> engineGetEncoded
    java.security.spec.AlgorithmParameterSpec localEngineGetParameterSpec(java.lang.Class) -> localEngineGetParameterSpec
    void engineInit(java.security.spec.AlgorithmParameterSpec) -> engineInit
    void engineInit(byte[]) -> engineInit
    void engineInit(byte[],java.lang.String) -> engineInit
    java.lang.String engineToString() -> engineToString
org.bouncycastle.jcajce.provider.asymmetric.elgamal.BCElGamalPrivateKey -> org.bouncycastle.jcajce.provider.asymmetric.elgamal.BCElGamalPrivateKey:
    long serialVersionUID -> serialVersionUID
    java.math.BigInteger x -> x
    org.bouncycastle.jce.spec.ElGamalParameterSpec elSpec -> elSpec
    org.bouncycastle.jcajce.provider.asymmetric.util.PKCS12BagAttributeCarrierImpl attrCarrier -> attrCarrier
    java.lang.String getAlgorithm() -> getAlgorithm
    java.lang.String getFormat() -> getFormat
    byte[] getEncoded() -> getEncoded
    org.bouncycastle.jce.spec.ElGamalParameterSpec getParameters() -> getParameters
    javax.crypto.spec.DHParameterSpec getParams() -> getParams
    java.math.BigInteger getX() -> getX
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    void readObject(java.io.ObjectInputStream) -> readObject
    void writeObject(java.io.ObjectOutputStream) -> writeObject
    void setBagAttribute(org.bouncycastle.asn1.ASN1ObjectIdentifier,org.bouncycastle.asn1.ASN1Encodable) -> setBagAttribute
    org.bouncycastle.asn1.ASN1Encodable getBagAttribute(org.bouncycastle.asn1.ASN1ObjectIdentifier) -> getBagAttribute
    java.util.Enumeration getBagAttributeKeys() -> getBagAttributeKeys
org.bouncycastle.jcajce.provider.asymmetric.elgamal.BCElGamalPublicKey -> org.bouncycastle.jcajce.provider.asymmetric.elgamal.BCElGamalPublicKey:
    long serialVersionUID -> serialVersionUID
    java.math.BigInteger y -> y
    org.bouncycastle.jce.spec.ElGamalParameterSpec elSpec -> elSpec
    java.lang.String getAlgorithm() -> getAlgorithm
    java.lang.String getFormat() -> getFormat
    byte[] getEncoded() -> getEncoded
    org.bouncycastle.jce.spec.ElGamalParameterSpec getParameters() -> getParameters
    javax.crypto.spec.DHParameterSpec getParams() -> getParams
    java.math.BigInteger getY() -> getY
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    void readObject(java.io.ObjectInputStream) -> readObject
    void writeObject(java.io.ObjectOutputStream) -> writeObject
org.bouncycastle.jcajce.provider.asymmetric.elgamal.CipherSpi -> org.bouncycastle.jcajce.provider.asymmetric.elgamal.CipherSpi:
    org.bouncycastle.crypto.BufferedAsymmetricBlockCipher cipher -> cipher
    java.security.spec.AlgorithmParameterSpec paramSpec -> paramSpec
    java.security.AlgorithmParameters engineParams -> engineParams
    void initFromSpec(javax.crypto.spec.OAEPParameterSpec) -> initFromSpec
    int engineGetBlockSize() -> engineGetBlockSize
    int engineGetKeySize(java.security.Key) -> engineGetKeySize
    int engineGetOutputSize(int) -> engineGetOutputSize
    java.security.AlgorithmParameters engineGetParameters() -> engineGetParameters
    void engineSetMode(java.lang.String) -> engineSetMode
    void engineSetPadding(java.lang.String) -> engineSetPadding
    void engineInit(int,java.security.Key,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom) -> engineInit
    void engineInit(int,java.security.Key,java.security.AlgorithmParameters,java.security.SecureRandom) -> engineInit
    void engineInit(int,java.security.Key,java.security.SecureRandom) -> engineInit
    byte[] engineUpdate(byte[],int,int) -> engineUpdate
    int engineUpdate(byte[],int,int,byte[],int) -> engineUpdate
    byte[] engineDoFinal(byte[],int,int) -> engineDoFinal
    int engineDoFinal(byte[],int,int,byte[],int) -> engineDoFinal
org.bouncycastle.jcajce.provider.asymmetric.elgamal.CipherSpi$NoPadding -> org.bouncycastle.jcajce.provider.asymmetric.elgamal.CipherSpi$NoPadding:
org.bouncycastle.jcajce.provider.asymmetric.elgamal.CipherSpi$PKCS1v1_5Padding -> org.bouncycastle.jcajce.provider.asymmetric.elgamal.CipherSpi$PKCS1v1_5Padding:
org.bouncycastle.jcajce.provider.asymmetric.elgamal.ElGamalUtil -> org.bouncycastle.jcajce.provider.asymmetric.elgamal.ElGamalUtil:
    org.bouncycastle.crypto.params.AsymmetricKeyParameter generatePublicKeyParameter(java.security.PublicKey) -> generatePublicKeyParameter
    org.bouncycastle.crypto.params.AsymmetricKeyParameter generatePrivateKeyParameter(java.security.PrivateKey) -> generatePrivateKeyParameter
org.bouncycastle.jcajce.provider.asymmetric.elgamal.KeyFactorySpi -> org.bouncycastle.jcajce.provider.asymmetric.elgamal.KeyFactorySpi:
    java.security.PrivateKey engineGeneratePrivate(java.security.spec.KeySpec) -> engineGeneratePrivate
    java.security.PublicKey engineGeneratePublic(java.security.spec.KeySpec) -> engineGeneratePublic
    java.security.spec.KeySpec engineGetKeySpec(java.security.Key,java.lang.Class) -> engineGetKeySpec
    java.security.Key engineTranslateKey(java.security.Key) -> engineTranslateKey
    java.security.PrivateKey generatePrivate(org.bouncycastle.asn1.pkcs.PrivateKeyInfo) -> generatePrivate
    java.security.PublicKey generatePublic(org.bouncycastle.asn1.x509.SubjectPublicKeyInfo) -> generatePublic
org.bouncycastle.jcajce.provider.asymmetric.elgamal.KeyPairGeneratorSpi -> org.bouncycastle.jcajce.provider.asymmetric.elgamal.KeyPairGeneratorSpi:
    org.bouncycastle.crypto.params.ElGamalKeyGenerationParameters param -> param
    org.bouncycastle.crypto.generators.ElGamalKeyPairGenerator engine -> engine
    int strength -> strength
    int certainty -> certainty
    java.security.SecureRandom random -> random
    boolean initialised -> initialised
    void initialize(int,java.security.SecureRandom) -> initialize
    void initialize(java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom) -> initialize
    java.security.KeyPair generateKeyPair() -> generateKeyPair
org.bouncycastle.jcajce.provider.asymmetric.gost.AlgorithmParameterGeneratorSpi -> org.bouncycastle.jcajce.provider.asymmetric.gost.AlgorithmParameterGeneratorSpi:
    java.security.SecureRandom random -> random
    int strength -> strength
    void engineInit(int,java.security.SecureRandom) -> engineInit
    void engineInit(java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom) -> engineInit
    java.security.AlgorithmParameters engineGenerateParameters() -> engineGenerateParameters
org.bouncycastle.jcajce.provider.asymmetric.gost.AlgorithmParametersSpi -> org.bouncycastle.jcajce.provider.asymmetric.gost.AlgorithmParametersSpi:
    org.bouncycastle.jce.spec.GOST3410ParameterSpec currentSpec -> currentSpec
    boolean isASN1FormatString(java.lang.String) -> isASN1FormatString
    java.security.spec.AlgorithmParameterSpec engineGetParameterSpec(java.lang.Class) -> engineGetParameterSpec
    byte[] engineGetEncoded() -> engineGetEncoded
    byte[] engineGetEncoded(java.lang.String) -> engineGetEncoded
    java.security.spec.AlgorithmParameterSpec localEngineGetParameterSpec(java.lang.Class) -> localEngineGetParameterSpec
    void engineInit(java.security.spec.AlgorithmParameterSpec) -> engineInit
    void engineInit(byte[]) -> engineInit
    void engineInit(byte[],java.lang.String) -> engineInit
    java.lang.String engineToString() -> engineToString
org.bouncycastle.jcajce.provider.asymmetric.gost.BCGOST3410PrivateKey -> org.bouncycastle.jcajce.provider.asymmetric.gost.BCGOST3410PrivateKey:
    long serialVersionUID -> serialVersionUID
    java.math.BigInteger x -> x
    org.bouncycastle.jce.interfaces.GOST3410Params gost3410Spec -> gost3410Spec
    org.bouncycastle.jce.interfaces.PKCS12BagAttributeCarrier attrCarrier -> attrCarrier
    java.lang.String getAlgorithm() -> getAlgorithm
    java.lang.String getFormat() -> getFormat
    byte[] getEncoded() -> getEncoded
    org.bouncycastle.jce.interfaces.GOST3410Params getParameters() -> getParameters
    java.math.BigInteger getX() -> getX
    boolean equals(java.lang.Object) -> equals
    boolean compareObj(java.lang.Object,java.lang.Object) -> compareObj
    int hashCode() -> hashCode
    void setBagAttribute(org.bouncycastle.asn1.ASN1ObjectIdentifier,org.bouncycastle.asn1.ASN1Encodable) -> setBagAttribute
    org.bouncycastle.asn1.ASN1Encodable getBagAttribute(org.bouncycastle.asn1.ASN1ObjectIdentifier) -> getBagAttribute
    java.util.Enumeration getBagAttributeKeys() -> getBagAttributeKeys
    void readObject(java.io.ObjectInputStream) -> readObject
    void writeObject(java.io.ObjectOutputStream) -> writeObject
org.bouncycastle.jcajce.provider.asymmetric.gost.BCGOST3410PublicKey -> org.bouncycastle.jcajce.provider.asymmetric.gost.BCGOST3410PublicKey:
    long serialVersionUID -> serialVersionUID
    java.math.BigInteger y -> y
    org.bouncycastle.jce.interfaces.GOST3410Params gost3410Spec -> gost3410Spec
    java.lang.String getAlgorithm() -> getAlgorithm
    java.lang.String getFormat() -> getFormat
    byte[] getEncoded() -> getEncoded
    org.bouncycastle.jce.interfaces.GOST3410Params getParameters() -> getParameters
    java.math.BigInteger getY() -> getY
    java.lang.String toString() -> toString
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    void readObject(java.io.ObjectInputStream) -> readObject
    void writeObject(java.io.ObjectOutputStream) -> writeObject
org.bouncycastle.jcajce.provider.asymmetric.gost.KeyFactorySpi -> org.bouncycastle.jcajce.provider.asymmetric.gost.KeyFactorySpi:
    java.security.spec.KeySpec engineGetKeySpec(java.security.Key,java.lang.Class) -> engineGetKeySpec
    java.security.Key engineTranslateKey(java.security.Key) -> engineTranslateKey
    java.security.PrivateKey engineGeneratePrivate(java.security.spec.KeySpec) -> engineGeneratePrivate
    java.security.PublicKey engineGeneratePublic(java.security.spec.KeySpec) -> engineGeneratePublic
    java.security.PrivateKey generatePrivate(org.bouncycastle.asn1.pkcs.PrivateKeyInfo) -> generatePrivate
    java.security.PublicKey generatePublic(org.bouncycastle.asn1.x509.SubjectPublicKeyInfo) -> generatePublic
org.bouncycastle.jcajce.provider.asymmetric.gost.KeyPairGeneratorSpi -> org.bouncycastle.jcajce.provider.asymmetric.gost.KeyPairGeneratorSpi:
    org.bouncycastle.crypto.params.GOST3410KeyGenerationParameters param -> param
    org.bouncycastle.crypto.generators.GOST3410KeyPairGenerator engine -> engine
    org.bouncycastle.jce.spec.GOST3410ParameterSpec gost3410Params -> gost3410Params
    int strength -> strength
    java.security.SecureRandom random -> random
    boolean initialised -> initialised
    void initialize(int,java.security.SecureRandom) -> initialize
    void init(org.bouncycastle.jce.spec.GOST3410ParameterSpec,java.security.SecureRandom) -> init
    void initialize(java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom) -> initialize
    java.security.KeyPair generateKeyPair() -> generateKeyPair
org.bouncycastle.jcajce.provider.asymmetric.gost.SignatureSpi -> org.bouncycastle.jcajce.provider.asymmetric.gost.SignatureSpi:
    org.bouncycastle.crypto.Digest digest -> digest
    org.bouncycastle.crypto.DSA signer -> signer
    java.security.SecureRandom random -> random
    void engineInitVerify(java.security.PublicKey) -> engineInitVerify
    void engineInitSign(java.security.PrivateKey,java.security.SecureRandom) -> engineInitSign
    void engineInitSign(java.security.PrivateKey) -> engineInitSign
    void engineUpdate(byte) -> engineUpdate
    void engineUpdate(byte[],int,int) -> engineUpdate
    byte[] engineSign() -> engineSign
    boolean engineVerify(byte[]) -> engineVerify
    void engineSetParameter(java.security.spec.AlgorithmParameterSpec) -> engineSetParameter
    void engineSetParameter(java.lang.String,java.lang.Object) -> engineSetParameter
    java.lang.Object engineGetParameter(java.lang.String) -> engineGetParameter
org.bouncycastle.jcajce.provider.asymmetric.ies.AlgorithmParametersSpi -> org.bouncycastle.jcajce.provider.asymmetric.ies.AlgorithmParametersSpi:
    org.bouncycastle.jce.spec.IESParameterSpec currentSpec -> currentSpec
    boolean isASN1FormatString(java.lang.String) -> isASN1FormatString
    java.security.spec.AlgorithmParameterSpec engineGetParameterSpec(java.lang.Class) -> engineGetParameterSpec
    byte[] engineGetEncoded() -> engineGetEncoded
    byte[] engineGetEncoded(java.lang.String) -> engineGetEncoded
    java.security.spec.AlgorithmParameterSpec localEngineGetParameterSpec(java.lang.Class) -> localEngineGetParameterSpec
    void engineInit(java.security.spec.AlgorithmParameterSpec) -> engineInit
    void engineInit(byte[]) -> engineInit
    void engineInit(byte[],java.lang.String) -> engineInit
    java.lang.String engineToString() -> engineToString
org.bouncycastle.jcajce.provider.asymmetric.ies.CipherSpi -> org.bouncycastle.jcajce.provider.asymmetric.ies.CipherSpi:
    org.bouncycastle.crypto.engines.IESEngine cipher -> cipher
    int state -> state
    java.io.ByteArrayOutputStream buffer -> buffer
    java.security.AlgorithmParameters engineParam -> engineParam
    org.bouncycastle.jce.spec.IESParameterSpec engineParams -> engineParams
    java.lang.Class[] availableSpecs -> availableSpecs
    int engineGetBlockSize() -> engineGetBlockSize
    byte[] engineGetIV() -> engineGetIV
    int engineGetKeySize(java.security.Key) -> engineGetKeySize
    int engineGetOutputSize(int) -> engineGetOutputSize
    java.security.AlgorithmParameters engineGetParameters() -> engineGetParameters
    void engineSetMode(java.lang.String) -> engineSetMode
    void engineSetPadding(java.lang.String) -> engineSetPadding
    void engineInit(int,java.security.Key,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom) -> engineInit
    void engineInit(int,java.security.Key,java.security.AlgorithmParameters,java.security.SecureRandom) -> engineInit
    void engineInit(int,java.security.Key,java.security.SecureRandom) -> engineInit
    byte[] engineUpdate(byte[],int,int) -> engineUpdate
    int engineUpdate(byte[],int,int,byte[],int) -> engineUpdate
    byte[] engineDoFinal(byte[],int,int) -> engineDoFinal
    int engineDoFinal(byte[],int,int,byte[],int) -> engineDoFinal
org.bouncycastle.jcajce.provider.asymmetric.ies.CipherSpi$IES -> org.bouncycastle.jcajce.provider.asymmetric.ies.CipherSpi$IES:
org.bouncycastle.jcajce.provider.asymmetric.rsa.AlgorithmParametersSpi -> org.bouncycastle.jcajce.provider.asymmetric.rsa.AlgorithmParametersSpi:
    boolean isASN1FormatString(java.lang.String) -> isASN1FormatString
    java.security.spec.AlgorithmParameterSpec engineGetParameterSpec(java.lang.Class) -> engineGetParameterSpec
    java.security.spec.AlgorithmParameterSpec localEngineGetParameterSpec(java.lang.Class) -> localEngineGetParameterSpec
org.bouncycastle.jcajce.provider.asymmetric.rsa.AlgorithmParametersSpi$OAEP -> org.bouncycastle.jcajce.provider.asymmetric.rsa.AlgorithmParametersSpi$OAEP:
    javax.crypto.spec.OAEPParameterSpec currentSpec -> currentSpec
    byte[] engineGetEncoded() -> engineGetEncoded
    byte[] engineGetEncoded(java.lang.String) -> engineGetEncoded
    java.security.spec.AlgorithmParameterSpec localEngineGetParameterSpec(java.lang.Class) -> localEngineGetParameterSpec
    void engineInit(java.security.spec.AlgorithmParameterSpec) -> engineInit
    void engineInit(byte[]) -> engineInit
    void engineInit(byte[],java.lang.String) -> engineInit
    java.lang.String engineToString() -> engineToString
org.bouncycastle.jcajce.provider.asymmetric.rsa.AlgorithmParametersSpi$PSS -> org.bouncycastle.jcajce.provider.asymmetric.rsa.AlgorithmParametersSpi$PSS:
    java.security.spec.PSSParameterSpec currentSpec -> currentSpec
    byte[] engineGetEncoded() -> engineGetEncoded
    byte[] engineGetEncoded(java.lang.String) -> engineGetEncoded
    java.security.spec.AlgorithmParameterSpec localEngineGetParameterSpec(java.lang.Class) -> localEngineGetParameterSpec
    void engineInit(java.security.spec.AlgorithmParameterSpec) -> engineInit
    void engineInit(byte[]) -> engineInit
    void engineInit(byte[],java.lang.String) -> engineInit
    java.lang.String engineToString() -> engineToString
org.bouncycastle.jcajce.provider.asymmetric.rsa.BCRSAPrivateCrtKey -> org.bouncycastle.jcajce.provider.asymmetric.rsa.BCRSAPrivateCrtKey:
    long serialVersionUID -> serialVersionUID
    java.math.BigInteger publicExponent -> publicExponent
    java.math.BigInteger primeP -> primeP
    java.math.BigInteger primeQ -> primeQ
    java.math.BigInteger primeExponentP -> primeExponentP
    java.math.BigInteger primeExponentQ -> primeExponentQ
    java.math.BigInteger crtCoefficient -> crtCoefficient
    java.lang.String getFormat() -> getFormat
    byte[] getEncoded() -> getEncoded
    java.math.BigInteger getPublicExponent() -> getPublicExponent
    java.math.BigInteger getPrimeP() -> getPrimeP
    java.math.BigInteger getPrimeQ() -> getPrimeQ
    java.math.BigInteger getPrimeExponentP() -> getPrimeExponentP
    java.math.BigInteger getPrimeExponentQ() -> getPrimeExponentQ
    java.math.BigInteger getCrtCoefficient() -> getCrtCoefficient
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    java.lang.String toString() -> toString
org.bouncycastle.jcajce.provider.asymmetric.rsa.BCRSAPrivateKey -> org.bouncycastle.jcajce.provider.asymmetric.rsa.BCRSAPrivateKey:
    long serialVersionUID -> serialVersionUID
    java.math.BigInteger ZERO -> ZERO
    java.math.BigInteger modulus -> modulus
    java.math.BigInteger privateExponent -> privateExponent
    org.bouncycastle.jcajce.provider.asymmetric.util.PKCS12BagAttributeCarrierImpl attrCarrier -> attrCarrier
    java.math.BigInteger getModulus() -> getModulus
    java.math.BigInteger getPrivateExponent() -> getPrivateExponent
    java.lang.String getAlgorithm() -> getAlgorithm
    java.lang.String getFormat() -> getFormat
    byte[] getEncoded() -> getEncoded
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    void setBagAttribute(org.bouncycastle.asn1.ASN1ObjectIdentifier,org.bouncycastle.asn1.ASN1Encodable) -> setBagAttribute
    org.bouncycastle.asn1.ASN1Encodable getBagAttribute(org.bouncycastle.asn1.ASN1ObjectIdentifier) -> getBagAttribute
    java.util.Enumeration getBagAttributeKeys() -> getBagAttributeKeys
    void readObject(java.io.ObjectInputStream) -> readObject
    void writeObject(java.io.ObjectOutputStream) -> writeObject
org.bouncycastle.jcajce.provider.asymmetric.rsa.BCRSAPublicKey -> org.bouncycastle.jcajce.provider.asymmetric.rsa.BCRSAPublicKey:
    org.bouncycastle.asn1.x509.AlgorithmIdentifier DEFAULT_ALGORITHM_IDENTIFIER -> DEFAULT_ALGORITHM_IDENTIFIER
    long serialVersionUID -> serialVersionUID
    java.math.BigInteger modulus -> modulus
    java.math.BigInteger publicExponent -> publicExponent
    org.bouncycastle.asn1.x509.AlgorithmIdentifier algorithmIdentifier -> algorithmIdentifier
    void populateFromPublicKeyInfo(org.bouncycastle.asn1.x509.SubjectPublicKeyInfo) -> populateFromPublicKeyInfo
    java.math.BigInteger getModulus() -> getModulus
    java.math.BigInteger getPublicExponent() -> getPublicExponent
    java.lang.String getAlgorithm() -> getAlgorithm
    java.lang.String getFormat() -> getFormat
    byte[] getEncoded() -> getEncoded
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    java.lang.String toString() -> toString
    void readObject(java.io.ObjectInputStream) -> readObject
    void writeObject(java.io.ObjectOutputStream) -> writeObject
org.bouncycastle.jcajce.provider.asymmetric.rsa.CipherSpi -> org.bouncycastle.jcajce.provider.asymmetric.rsa.CipherSpi:
    org.bouncycastle.crypto.AsymmetricBlockCipher cipher -> cipher
    java.security.spec.AlgorithmParameterSpec paramSpec -> paramSpec
    java.security.AlgorithmParameters engineParams -> engineParams
    boolean publicKeyOnly -> publicKeyOnly
    boolean privateKeyOnly -> privateKeyOnly
    java.io.ByteArrayOutputStream bOut -> bOut
    void initFromSpec(javax.crypto.spec.OAEPParameterSpec) -> initFromSpec
    int engineGetBlockSize() -> engineGetBlockSize
    int engineGetKeySize(java.security.Key) -> engineGetKeySize
    int engineGetOutputSize(int) -> engineGetOutputSize
    java.security.AlgorithmParameters engineGetParameters() -> engineGetParameters
    void engineSetMode(java.lang.String) -> engineSetMode
    void engineSetPadding(java.lang.String) -> engineSetPadding
    void engineInit(int,java.security.Key,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom) -> engineInit
    void engineInit(int,java.security.Key,java.security.AlgorithmParameters,java.security.SecureRandom) -> engineInit
    void engineInit(int,java.security.Key,java.security.SecureRandom) -> engineInit
    byte[] engineUpdate(byte[],int,int) -> engineUpdate
    int engineUpdate(byte[],int,int,byte[],int) -> engineUpdate
    byte[] engineDoFinal(byte[],int,int) -> engineDoFinal
    int engineDoFinal(byte[],int,int,byte[],int) -> engineDoFinal
org.bouncycastle.jcajce.provider.asymmetric.rsa.CipherSpi$ISO9796d1Padding -> org.bouncycastle.jcajce.provider.asymmetric.rsa.CipherSpi$ISO9796d1Padding:
org.bouncycastle.jcajce.provider.asymmetric.rsa.CipherSpi$NoPadding -> org.bouncycastle.jcajce.provider.asymmetric.rsa.CipherSpi$NoPadding:
org.bouncycastle.jcajce.provider.asymmetric.rsa.CipherSpi$OAEPPadding -> org.bouncycastle.jcajce.provider.asymmetric.rsa.CipherSpi$OAEPPadding:
org.bouncycastle.jcajce.provider.asymmetric.rsa.CipherSpi$PKCS1v1_5Padding -> org.bouncycastle.jcajce.provider.asymmetric.rsa.CipherSpi$PKCS1v1_5Padding:
org.bouncycastle.jcajce.provider.asymmetric.rsa.CipherSpi$PKCS1v1_5Padding_PrivateOnly -> org.bouncycastle.jcajce.provider.asymmetric.rsa.CipherSpi$PKCS1v1_5Padding_PrivateOnly:
org.bouncycastle.jcajce.provider.asymmetric.rsa.CipherSpi$PKCS1v1_5Padding_PublicOnly -> org.bouncycastle.jcajce.provider.asymmetric.rsa.CipherSpi$PKCS1v1_5Padding_PublicOnly:
org.bouncycastle.jcajce.provider.asymmetric.rsa.DigestSignatureSpi -> org.bouncycastle.jcajce.provider.asymmetric.rsa.DigestSignatureSpi:
    org.bouncycastle.crypto.Digest digest -> digest
    org.bouncycastle.crypto.AsymmetricBlockCipher cipher -> cipher
    org.bouncycastle.asn1.x509.AlgorithmIdentifier algId -> algId
    void engineInitVerify(java.security.PublicKey) -> engineInitVerify
    void engineInitSign(java.security.PrivateKey) -> engineInitSign
    java.lang.String getType(java.lang.Object) -> getType
    void engineUpdate(byte) -> engineUpdate
    void engineUpdate(byte[],int,int) -> engineUpdate
    byte[] engineSign() -> engineSign
    boolean engineVerify(byte[]) -> engineVerify
    void engineSetParameter(java.security.spec.AlgorithmParameterSpec) -> engineSetParameter
    void engineSetParameter(java.lang.String,java.lang.Object) -> engineSetParameter
    java.lang.Object engineGetParameter(java.lang.String) -> engineGetParameter
    java.security.AlgorithmParameters engineGetParameters() -> engineGetParameters
    byte[] derEncode(byte[]) -> derEncode
org.bouncycastle.jcajce.provider.asymmetric.rsa.DigestSignatureSpi$MD2 -> org.bouncycastle.jcajce.provider.asymmetric.rsa.DigestSignatureSpi$MD2:
org.bouncycastle.jcajce.provider.asymmetric.rsa.DigestSignatureSpi$MD4 -> org.bouncycastle.jcajce.provider.asymmetric.rsa.DigestSignatureSpi$MD4:
org.bouncycastle.jcajce.provider.asymmetric.rsa.DigestSignatureSpi$MD5 -> org.bouncycastle.jcajce.provider.asymmetric.rsa.DigestSignatureSpi$MD5:
org.bouncycastle.jcajce.provider.asymmetric.rsa.DigestSignatureSpi$RIPEMD128 -> org.bouncycastle.jcajce.provider.asymmetric.rsa.DigestSignatureSpi$RIPEMD128:
org.bouncycastle.jcajce.provider.asymmetric.rsa.DigestSignatureSpi$RIPEMD160 -> org.bouncycastle.jcajce.provider.asymmetric.rsa.DigestSignatureSpi$RIPEMD160:
org.bouncycastle.jcajce.provider.asymmetric.rsa.DigestSignatureSpi$RIPEMD256 -> org.bouncycastle.jcajce.provider.asymmetric.rsa.DigestSignatureSpi$RIPEMD256:
org.bouncycastle.jcajce.provider.asymmetric.rsa.DigestSignatureSpi$SHA1 -> org.bouncycastle.jcajce.provider.asymmetric.rsa.DigestSignatureSpi$SHA1:
org.bouncycastle.jcajce.provider.asymmetric.rsa.DigestSignatureSpi$SHA224 -> org.bouncycastle.jcajce.provider.asymmetric.rsa.DigestSignatureSpi$SHA224:
org.bouncycastle.jcajce.provider.asymmetric.rsa.DigestSignatureSpi$SHA256 -> org.bouncycastle.jcajce.provider.asymmetric.rsa.DigestSignatureSpi$SHA256:
org.bouncycastle.jcajce.provider.asymmetric.rsa.DigestSignatureSpi$SHA384 -> org.bouncycastle.jcajce.provider.asymmetric.rsa.DigestSignatureSpi$SHA384:
org.bouncycastle.jcajce.provider.asymmetric.rsa.DigestSignatureSpi$SHA512 -> org.bouncycastle.jcajce.provider.asymmetric.rsa.DigestSignatureSpi$SHA512:
org.bouncycastle.jcajce.provider.asymmetric.rsa.DigestSignatureSpi$noneRSA -> org.bouncycastle.jcajce.provider.asymmetric.rsa.DigestSignatureSpi$noneRSA:
org.bouncycastle.jcajce.provider.asymmetric.rsa.ISOSignatureSpi -> org.bouncycastle.jcajce.provider.asymmetric.rsa.ISOSignatureSpi:
    org.bouncycastle.crypto.signers.ISO9796d2Signer signer -> signer
    void engineInitVerify(java.security.PublicKey) -> engineInitVerify
    void engineInitSign(java.security.PrivateKey) -> engineInitSign
    void engineUpdate(byte) -> engineUpdate
    void engineUpdate(byte[],int,int) -> engineUpdate
    byte[] engineSign() -> engineSign
    boolean engineVerify(byte[]) -> engineVerify
    void engineSetParameter(java.security.spec.AlgorithmParameterSpec) -> engineSetParameter
    void engineSetParameter(java.lang.String,java.lang.Object) -> engineSetParameter
    java.lang.Object engineGetParameter(java.lang.String) -> engineGetParameter
org.bouncycastle.jcajce.provider.asymmetric.rsa.ISOSignatureSpi$MD5WithRSAEncryption -> org.bouncycastle.jcajce.provider.asymmetric.rsa.ISOSignatureSpi$MD5WithRSAEncryption:
org.bouncycastle.jcajce.provider.asymmetric.rsa.ISOSignatureSpi$RIPEMD160WithRSAEncryption -> org.bouncycastle.jcajce.provider.asymmetric.rsa.ISOSignatureSpi$RIPEMD160WithRSAEncryption:
org.bouncycastle.jcajce.provider.asymmetric.rsa.ISOSignatureSpi$SHA1WithRSAEncryption -> org.bouncycastle.jcajce.provider.asymmetric.rsa.ISOSignatureSpi$SHA1WithRSAEncryption:
org.bouncycastle.jcajce.provider.asymmetric.rsa.KeyFactorySpi -> org.bouncycastle.jcajce.provider.asymmetric.rsa.KeyFactorySpi:
    java.security.spec.KeySpec engineGetKeySpec(java.security.Key,java.lang.Class) -> engineGetKeySpec
    java.security.Key engineTranslateKey(java.security.Key) -> engineTranslateKey
    java.security.PrivateKey engineGeneratePrivate(java.security.spec.KeySpec) -> engineGeneratePrivate
    java.security.PublicKey engineGeneratePublic(java.security.spec.KeySpec) -> engineGeneratePublic
    java.security.PrivateKey generatePrivate(org.bouncycastle.asn1.pkcs.PrivateKeyInfo) -> generatePrivate
    java.security.PublicKey generatePublic(org.bouncycastle.asn1.x509.SubjectPublicKeyInfo) -> generatePublic
org.bouncycastle.jcajce.provider.asymmetric.rsa.KeyPairGeneratorSpi -> org.bouncycastle.jcajce.provider.asymmetric.rsa.KeyPairGeneratorSpi:
    java.math.BigInteger defaultPublicExponent -> defaultPublicExponent
    int defaultTests -> defaultTests
    org.bouncycastle.crypto.params.RSAKeyGenerationParameters param -> param
    org.bouncycastle.crypto.generators.RSAKeyPairGenerator engine -> engine
    void initialize(int,java.security.SecureRandom) -> initialize
    void initialize(java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom) -> initialize
    java.security.KeyPair generateKeyPair() -> generateKeyPair
org.bouncycastle.jcajce.provider.asymmetric.rsa.PSSSignatureSpi -> org.bouncycastle.jcajce.provider.asymmetric.rsa.PSSSignatureSpi:
    java.security.AlgorithmParameters engineParams -> engineParams
    java.security.spec.PSSParameterSpec paramSpec -> paramSpec
    java.security.spec.PSSParameterSpec originalSpec -> originalSpec
    org.bouncycastle.crypto.AsymmetricBlockCipher signer -> signer
    org.bouncycastle.crypto.Digest contentDigest -> contentDigest
    org.bouncycastle.crypto.Digest mgfDigest -> mgfDigest
    int saltLength -> saltLength
    byte trailer -> trailer
    boolean isRaw -> isRaw
    org.bouncycastle.crypto.signers.PSSSigner pss -> pss
    byte getTrailer(int) -> getTrailer
    void setupContentDigest() -> setupContentDigest
    void engineInitVerify(java.security.PublicKey) -> engineInitVerify
    void engineInitSign(java.security.PrivateKey,java.security.SecureRandom) -> engineInitSign
    void engineInitSign(java.security.PrivateKey) -> engineInitSign
    void engineUpdate(byte) -> engineUpdate
    void engineUpdate(byte[],int,int) -> engineUpdate
    byte[] engineSign() -> engineSign
    boolean engineVerify(byte[]) -> engineVerify
    void engineSetParameter(java.security.spec.AlgorithmParameterSpec) -> engineSetParameter
    java.security.AlgorithmParameters engineGetParameters() -> engineGetParameters
    void engineSetParameter(java.lang.String,java.lang.Object) -> engineSetParameter
    java.lang.Object engineGetParameter(java.lang.String) -> engineGetParameter
org.bouncycastle.jcajce.provider.asymmetric.rsa.PSSSignatureSpi$NullPssDigest -> org.bouncycastle.jcajce.provider.asymmetric.rsa.PSSSignatureSpi$NullPssDigest:
    java.io.ByteArrayOutputStream bOut -> bOut
    org.bouncycastle.crypto.Digest baseDigest -> baseDigest
    boolean oddTime -> oddTime
    org.bouncycastle.jcajce.provider.asymmetric.rsa.PSSSignatureSpi this$0 -> this$0
    java.lang.String getAlgorithmName() -> getAlgorithmName
    int getDigestSize() -> getDigestSize
    void update(byte) -> update
    void update(byte[],int,int) -> update
    int doFinal(byte[],int) -> doFinal
    void reset() -> reset
    int getByteLength() -> getByteLength
org.bouncycastle.jcajce.provider.asymmetric.rsa.PSSSignatureSpi$PSSwithRSA -> org.bouncycastle.jcajce.provider.asymmetric.rsa.PSSSignatureSpi$PSSwithRSA:
org.bouncycastle.jcajce.provider.asymmetric.rsa.PSSSignatureSpi$SHA1withRSA -> org.bouncycastle.jcajce.provider.asymmetric.rsa.PSSSignatureSpi$SHA1withRSA:
org.bouncycastle.jcajce.provider.asymmetric.rsa.PSSSignatureSpi$SHA224withRSA -> org.bouncycastle.jcajce.provider.asymmetric.rsa.PSSSignatureSpi$SHA224withRSA:
org.bouncycastle.jcajce.provider.asymmetric.rsa.PSSSignatureSpi$SHA256withRSA -> org.bouncycastle.jcajce.provider.asymmetric.rsa.PSSSignatureSpi$SHA256withRSA:
org.bouncycastle.jcajce.provider.asymmetric.rsa.PSSSignatureSpi$SHA384withRSA -> org.bouncycastle.jcajce.provider.asymmetric.rsa.PSSSignatureSpi$SHA384withRSA:
org.bouncycastle.jcajce.provider.asymmetric.rsa.PSSSignatureSpi$SHA512withRSA -> org.bouncycastle.jcajce.provider.asymmetric.rsa.PSSSignatureSpi$SHA512withRSA:
org.bouncycastle.jcajce.provider.asymmetric.rsa.PSSSignatureSpi$nonePSS -> org.bouncycastle.jcajce.provider.asymmetric.rsa.PSSSignatureSpi$nonePSS:
org.bouncycastle.jcajce.provider.asymmetric.rsa.RSAUtil -> org.bouncycastle.jcajce.provider.asymmetric.rsa.RSAUtil:
    org.bouncycastle.asn1.ASN1ObjectIdentifier[] rsaOids -> rsaOids
    boolean isRsaOid(org.bouncycastle.asn1.ASN1ObjectIdentifier) -> isRsaOid
    org.bouncycastle.crypto.params.RSAKeyParameters generatePublicKeyParameter(java.security.interfaces.RSAPublicKey) -> generatePublicKeyParameter
    org.bouncycastle.crypto.params.RSAKeyParameters generatePrivateKeyParameter(java.security.interfaces.RSAPrivateKey) -> generatePrivateKeyParameter
org.bouncycastle.jcajce.provider.asymmetric.util.BaseCipherSpi -> org.bouncycastle.jcajce.provider.asymmetric.util.BaseCipherSpi:
    java.lang.Class[] availableSpecs -> availableSpecs
    java.security.AlgorithmParameters engineParams -> engineParams
    org.bouncycastle.crypto.Wrapper wrapEngine -> wrapEngine
    int ivSize -> ivSize
    byte[] iv -> iv
    int engineGetBlockSize() -> engineGetBlockSize
    byte[] engineGetIV() -> engineGetIV
    int engineGetKeySize(java.security.Key) -> engineGetKeySize
    int engineGetOutputSize(int) -> engineGetOutputSize
    java.security.AlgorithmParameters engineGetParameters() -> engineGetParameters
    void engineSetMode(java.lang.String) -> engineSetMode
    void engineSetPadding(java.lang.String) -> engineSetPadding
    byte[] engineWrap(java.security.Key) -> engineWrap
    java.security.Key engineUnwrap(byte[],java.lang.String,int) -> engineUnwrap
org.bouncycastle.jcajce.provider.asymmetric.util.BaseKeyFactorySpi -> org.bouncycastle.jcajce.provider.asymmetric.util.BaseKeyFactorySpi:
    java.security.PrivateKey engineGeneratePrivate(java.security.spec.KeySpec) -> engineGeneratePrivate
    java.security.PublicKey engineGeneratePublic(java.security.spec.KeySpec) -> engineGeneratePublic
    java.security.spec.KeySpec engineGetKeySpec(java.security.Key,java.lang.Class) -> engineGetKeySpec
org.bouncycastle.jcajce.provider.asymmetric.util.DHUtil -> org.bouncycastle.jcajce.provider.asymmetric.util.DHUtil:
    org.bouncycastle.crypto.params.AsymmetricKeyParameter generatePublicKeyParameter(java.security.PublicKey) -> generatePublicKeyParameter
    org.bouncycastle.crypto.params.AsymmetricKeyParameter generatePrivateKeyParameter(java.security.PrivateKey) -> generatePrivateKeyParameter
org.bouncycastle.jcajce.provider.asymmetric.util.DSABase -> org.bouncycastle.jcajce.provider.asymmetric.util.DSABase:
    org.bouncycastle.crypto.Digest digest -> digest
    org.bouncycastle.crypto.DSA signer -> signer
    org.bouncycastle.jcajce.provider.asymmetric.util.DSAEncoder encoder -> encoder
    void engineUpdate(byte) -> engineUpdate
    void engineUpdate(byte[],int,int) -> engineUpdate
    byte[] engineSign() -> engineSign
    boolean engineVerify(byte[]) -> engineVerify
    void engineSetParameter(java.security.spec.AlgorithmParameterSpec) -> engineSetParameter
    void engineSetParameter(java.lang.String,java.lang.Object) -> engineSetParameter
    java.lang.Object engineGetParameter(java.lang.String) -> engineGetParameter
org.bouncycastle.jcajce.provider.asymmetric.util.DSAEncoder -> org.bouncycastle.jcajce.provider.asymmetric.util.DSAEncoder:
    byte[] encode(java.math.BigInteger,java.math.BigInteger) -> encode
    java.math.BigInteger[] decode(byte[]) -> decode
org.bouncycastle.jcajce.provider.asymmetric.util.EC5Util -> org.bouncycastle.jcajce.provider.asymmetric.util.EC5Util:
    java.util.Map customCurves -> customCurves
    java.security.spec.EllipticCurve convertCurve(org.bouncycastle.math.ec.ECCurve,byte[]) -> convertCurve
    org.bouncycastle.math.ec.ECCurve convertCurve(java.security.spec.EllipticCurve) -> convertCurve
    java.security.spec.ECParameterSpec convertSpec(java.security.spec.EllipticCurve,org.bouncycastle.jce.spec.ECParameterSpec) -> convertSpec
    org.bouncycastle.jce.spec.ECParameterSpec convertSpec(java.security.spec.ECParameterSpec,boolean) -> convertSpec
    org.bouncycastle.math.ec.ECPoint convertPoint(java.security.spec.ECParameterSpec,java.security.spec.ECPoint,boolean) -> convertPoint
    org.bouncycastle.math.ec.ECPoint convertPoint(org.bouncycastle.math.ec.ECCurve,java.security.spec.ECPoint,boolean) -> convertPoint
org.bouncycastle.jcajce.provider.asymmetric.util.ECUtil -> org.bouncycastle.jcajce.provider.asymmetric.util.ECUtil:
    int[] convertMidTerms(int[]) -> convertMidTerms
    org.bouncycastle.crypto.params.AsymmetricKeyParameter generatePublicKeyParameter(java.security.PublicKey) -> generatePublicKeyParameter
    org.bouncycastle.crypto.params.AsymmetricKeyParameter generatePrivateKeyParameter(java.security.PrivateKey) -> generatePrivateKeyParameter
    org.bouncycastle.asn1.ASN1ObjectIdentifier getNamedCurveOid(java.lang.String) -> getNamedCurveOid
    org.bouncycastle.asn1.x9.X9ECParameters getNamedCurveByOid(org.bouncycastle.asn1.ASN1ObjectIdentifier) -> getNamedCurveByOid
    java.lang.String getCurveName(org.bouncycastle.asn1.ASN1ObjectIdentifier) -> getCurveName
org.bouncycastle.jcajce.provider.asymmetric.util.ExtendedInvalidKeySpecException -> org.bouncycastle.jcajce.provider.asymmetric.util.ExtendedInvalidKeySpecException:
    java.lang.Throwable cause -> cause
    java.lang.Throwable getCause() -> getCause
org.bouncycastle.jcajce.provider.asymmetric.util.GOST3410Util -> org.bouncycastle.jcajce.provider.asymmetric.util.GOST3410Util:
    org.bouncycastle.crypto.params.AsymmetricKeyParameter generatePublicKeyParameter(java.security.PublicKey) -> generatePublicKeyParameter
    org.bouncycastle.crypto.params.AsymmetricKeyParameter generatePrivateKeyParameter(java.security.PrivateKey) -> generatePrivateKeyParameter
org.bouncycastle.jcajce.provider.asymmetric.util.IESUtil -> org.bouncycastle.jcajce.provider.asymmetric.util.IESUtil:
    org.bouncycastle.jce.spec.IESParameterSpec guessParameterSpec(org.bouncycastle.crypto.engines.IESEngine) -> guessParameterSpec
org.bouncycastle.jcajce.provider.asymmetric.util.KeyUtil -> org.bouncycastle.jcajce.provider.asymmetric.util.KeyUtil:
    byte[] getEncodedSubjectPublicKeyInfo(org.bouncycastle.asn1.x509.AlgorithmIdentifier,org.bouncycastle.asn1.ASN1Encodable) -> getEncodedSubjectPublicKeyInfo
    byte[] getEncodedSubjectPublicKeyInfo(org.bouncycastle.asn1.x509.AlgorithmIdentifier,byte[]) -> getEncodedSubjectPublicKeyInfo
    byte[] getEncodedSubjectPublicKeyInfo(org.bouncycastle.asn1.x509.SubjectPublicKeyInfo) -> getEncodedSubjectPublicKeyInfo
    byte[] getEncodedPrivateKeyInfo(org.bouncycastle.asn1.x509.AlgorithmIdentifier,org.bouncycastle.asn1.ASN1Encodable) -> getEncodedPrivateKeyInfo
    byte[] getEncodedPrivateKeyInfo(org.bouncycastle.asn1.pkcs.PrivateKeyInfo) -> getEncodedPrivateKeyInfo
org.bouncycastle.jcajce.provider.asymmetric.util.PKCS12BagAttributeCarrierImpl -> org.bouncycastle.jcajce.provider.asymmetric.util.PKCS12BagAttributeCarrierImpl:
    java.util.Hashtable pkcs12Attributes -> pkcs12Attributes
    java.util.Vector pkcs12Ordering -> pkcs12Ordering
    void setBagAttribute(org.bouncycastle.asn1.ASN1ObjectIdentifier,org.bouncycastle.asn1.ASN1Encodable) -> setBagAttribute
    org.bouncycastle.asn1.ASN1Encodable getBagAttribute(org.bouncycastle.asn1.ASN1ObjectIdentifier) -> getBagAttribute
    java.util.Enumeration getBagAttributeKeys() -> getBagAttributeKeys
    int size() -> size
    java.util.Hashtable getAttributes() -> getAttributes
    java.util.Vector getOrdering() -> getOrdering
    void writeObject(java.io.ObjectOutputStream) -> writeObject
    void readObject(java.io.ObjectInputStream) -> readObject
org.bouncycastle.jcajce.provider.asymmetric.x509.CertificateFactory -> org.bouncycastle.jcajce.provider.asymmetric.x509.CertificateFactory:
    org.bouncycastle.jcajce.provider.asymmetric.x509.PEMUtil PEM_CERT_PARSER -> PEM_CERT_PARSER
    org.bouncycastle.jcajce.provider.asymmetric.x509.PEMUtil PEM_CRL_PARSER -> PEM_CRL_PARSER
    org.bouncycastle.asn1.ASN1Set sData -> sData
    int sDataObjectCount -> sDataObjectCount
    java.io.InputStream currentStream -> currentStream
    org.bouncycastle.asn1.ASN1Set sCrlData -> sCrlData
    int sCrlDataObjectCount -> sCrlDataObjectCount
    java.io.InputStream currentCrlStream -> currentCrlStream
    java.security.cert.Certificate readDERCertificate(org.bouncycastle.asn1.ASN1InputStream) -> readDERCertificate
    java.security.cert.Certificate getCertificate() -> getCertificate
    java.security.cert.Certificate readPEMCertificate(java.io.InputStream) -> readPEMCertificate
    java.security.cert.CRL createCRL(org.bouncycastle.asn1.x509.CertificateList) -> createCRL
    java.security.cert.CRL readPEMCRL(java.io.InputStream) -> readPEMCRL
    java.security.cert.CRL readDERCRL(org.bouncycastle.asn1.ASN1InputStream) -> readDERCRL
    java.security.cert.CRL getCRL() -> getCRL
    java.security.cert.Certificate engineGenerateCertificate(java.io.InputStream) -> engineGenerateCertificate
    java.util.Collection engineGenerateCertificates(java.io.InputStream) -> engineGenerateCertificates
    java.security.cert.CRL engineGenerateCRL(java.io.InputStream) -> engineGenerateCRL
    java.util.Collection engineGenerateCRLs(java.io.InputStream) -> engineGenerateCRLs
    java.util.Iterator engineGetCertPathEncodings() -> engineGetCertPathEncodings
    java.security.cert.CertPath engineGenerateCertPath(java.io.InputStream) -> engineGenerateCertPath
    java.security.cert.CertPath engineGenerateCertPath(java.io.InputStream,java.lang.String) -> engineGenerateCertPath
    java.security.cert.CertPath engineGenerateCertPath(java.util.List) -> engineGenerateCertPath
org.bouncycastle.jcajce.provider.asymmetric.x509.CertificateFactory$ExCertificateException -> org.bouncycastle.jcajce.provider.asymmetric.x509.CertificateFactory$ExCertificateException:
    java.lang.Throwable cause -> cause
    org.bouncycastle.jcajce.provider.asymmetric.x509.CertificateFactory this$0 -> this$0
    java.lang.Throwable getCause() -> getCause
org.bouncycastle.jcajce.provider.asymmetric.x509.ExtCRLException -> org.bouncycastle.jcajce.provider.asymmetric.x509.ExtCRLException:
    java.lang.Throwable cause -> cause
    java.lang.Throwable getCause() -> getCause
org.bouncycastle.jcajce.provider.asymmetric.x509.KeyFactory -> org.bouncycastle.jcajce.provider.asymmetric.x509.KeyFactory:
    java.security.PrivateKey engineGeneratePrivate(java.security.spec.KeySpec) -> engineGeneratePrivate
    java.security.PublicKey engineGeneratePublic(java.security.spec.KeySpec) -> engineGeneratePublic
    java.security.spec.KeySpec engineGetKeySpec(java.security.Key,java.lang.Class) -> engineGetKeySpec
    java.security.Key engineTranslateKey(java.security.Key) -> engineTranslateKey
org.bouncycastle.jcajce.provider.asymmetric.x509.PEMUtil -> org.bouncycastle.jcajce.provider.asymmetric.x509.PEMUtil:
    java.lang.String _header1 -> _header1
    java.lang.String _header2 -> _header2
    java.lang.String _footer1 -> _footer1
    java.lang.String _footer2 -> _footer2
    java.lang.String readLine(java.io.InputStream) -> readLine
    org.bouncycastle.asn1.ASN1Sequence readPEMObject(java.io.InputStream) -> readPEMObject
org.bouncycastle.jcajce.provider.asymmetric.x509.PKIXCertPath -> org.bouncycastle.jcajce.provider.asymmetric.x509.PKIXCertPath:
    java.util.List certPathEncodings -> certPathEncodings
    java.util.List certificates -> certificates
    java.util.List sortCerts(java.util.List) -> sortCerts
    java.util.Iterator getEncodings() -> getEncodings
    byte[] getEncoded() -> getEncoded
    byte[] getEncoded(java.lang.String) -> getEncoded
    java.util.List getCertificates() -> getCertificates
    org.bouncycastle.asn1.ASN1Primitive toASN1Object(java.security.cert.X509Certificate) -> toASN1Object
    byte[] toDEREncoded(org.bouncycastle.asn1.ASN1Encodable) -> toDEREncoded
org.bouncycastle.jcajce.provider.asymmetric.x509.X509CRLEntryObject -> org.bouncycastle.jcajce.provider.asymmetric.x509.X509CRLEntryObject:
    org.bouncycastle.asn1.x509.TBSCertList$CRLEntry c -> c
    org.bouncycastle.asn1.x500.X500Name certificateIssuer -> certificateIssuer
    int hashValue -> hashValue
    boolean isHashValueSet -> isHashValueSet
    boolean hasUnsupportedCriticalExtension() -> hasUnsupportedCriticalExtension
    org.bouncycastle.asn1.x500.X500Name loadCertificateIssuer(boolean,org.bouncycastle.asn1.x500.X500Name) -> loadCertificateIssuer
    javax.security.auth.x500.X500Principal getCertificateIssuer() -> getCertificateIssuer
    java.util.Set getExtensionOIDs(boolean) -> getExtensionOIDs
    java.util.Set getCriticalExtensionOIDs() -> getCriticalExtensionOIDs
    java.util.Set getNonCriticalExtensionOIDs() -> getNonCriticalExtensionOIDs
    org.bouncycastle.asn1.x509.Extension getExtension(org.bouncycastle.asn1.ASN1ObjectIdentifier) -> getExtension
    byte[] getExtensionValue(java.lang.String) -> getExtensionValue
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    byte[] getEncoded() -> getEncoded
    java.math.BigInteger getSerialNumber() -> getSerialNumber
    java.util.Date getRevocationDate() -> getRevocationDate
    boolean hasExtensions() -> hasExtensions
    java.lang.String toString() -> toString
org.bouncycastle.jcajce.provider.asymmetric.x509.X509CRLObject -> org.bouncycastle.jcajce.provider.asymmetric.x509.X509CRLObject:
    org.bouncycastle.asn1.x509.CertificateList c -> c
    java.lang.String sigAlgName -> sigAlgName
    byte[] sigAlgParams -> sigAlgParams
    boolean isIndirect -> isIndirect
    boolean isHashCodeSet -> isHashCodeSet
    int hashCodeValue -> hashCodeValue
    boolean isIndirectCRL(java.security.cert.X509CRL) -> isIndirectCRL
    boolean hasUnsupportedCriticalExtension() -> hasUnsupportedCriticalExtension
    java.util.Set getExtensionOIDs(boolean) -> getExtensionOIDs
    java.util.Set getCriticalExtensionOIDs() -> getCriticalExtensionOIDs
    java.util.Set getNonCriticalExtensionOIDs() -> getNonCriticalExtensionOIDs
    byte[] getExtensionValue(java.lang.String) -> getExtensionValue
    byte[] getEncoded() -> getEncoded
    void verify(java.security.PublicKey) -> verify
    void verify(java.security.PublicKey,java.lang.String) -> verify
    int getVersion() -> getVersion
    java.security.Principal getIssuerDN() -> getIssuerDN
    javax.security.auth.x500.X500Principal getIssuerX500Principal() -> getIssuerX500Principal
    java.util.Date getThisUpdate() -> getThisUpdate
    java.util.Date getNextUpdate() -> getNextUpdate
    java.util.Set loadCRLEntries() -> loadCRLEntries
    java.security.cert.X509CRLEntry getRevokedCertificate(java.math.BigInteger) -> getRevokedCertificate
    java.util.Set getRevokedCertificates() -> getRevokedCertificates
    byte[] getTBSCertList() -> getTBSCertList
    byte[] getSignature() -> getSignature
    java.lang.String getSigAlgName() -> getSigAlgName
    java.lang.String getSigAlgOID() -> getSigAlgOID
    byte[] getSigAlgParams() -> getSigAlgParams
    java.lang.String toString() -> toString
    boolean isRevoked(java.security.cert.Certificate) -> isRevoked
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
org.bouncycastle.jcajce.provider.asymmetric.x509.X509CertificateObject -> org.bouncycastle.jcajce.provider.asymmetric.x509.X509CertificateObject:
    org.bouncycastle.asn1.x509.Certificate c -> c
    org.bouncycastle.asn1.x509.BasicConstraints basicConstraints -> basicConstraints
    boolean[] keyUsage -> keyUsage
    boolean hashValueSet -> hashValueSet
    int hashValue -> hashValue
    org.bouncycastle.jce.interfaces.PKCS12BagAttributeCarrier attrCarrier -> attrCarrier
    void checkValidity() -> checkValidity
    void checkValidity(java.util.Date) -> checkValidity
    int getVersion() -> getVersion
    java.math.BigInteger getSerialNumber() -> getSerialNumber
    java.security.Principal getIssuerDN() -> getIssuerDN
    javax.security.auth.x500.X500Principal getIssuerX500Principal() -> getIssuerX500Principal
    java.security.Principal getSubjectDN() -> getSubjectDN
    javax.security.auth.x500.X500Principal getSubjectX500Principal() -> getSubjectX500Principal
    java.util.Date getNotBefore() -> getNotBefore
    java.util.Date getNotAfter() -> getNotAfter
    byte[] getTBSCertificate() -> getTBSCertificate
    byte[] getSignature() -> getSignature
    java.lang.String getSigAlgName() -> getSigAlgName
    java.lang.String getSigAlgOID() -> getSigAlgOID
    byte[] getSigAlgParams() -> getSigAlgParams
    boolean[] getIssuerUniqueID() -> getIssuerUniqueID
    boolean[] getSubjectUniqueID() -> getSubjectUniqueID
    boolean[] getKeyUsage() -> getKeyUsage
    java.util.List getExtendedKeyUsage() -> getExtendedKeyUsage
    int getBasicConstraints() -> getBasicConstraints
    java.util.Collection getSubjectAlternativeNames() -> getSubjectAlternativeNames
    java.util.Collection getIssuerAlternativeNames() -> getIssuerAlternativeNames
    java.util.Set getCriticalExtensionOIDs() -> getCriticalExtensionOIDs
    byte[] getExtensionBytes(java.lang.String) -> getExtensionBytes
    byte[] getExtensionValue(java.lang.String) -> getExtensionValue
    java.util.Set getNonCriticalExtensionOIDs() -> getNonCriticalExtensionOIDs
    boolean hasUnsupportedCriticalExtension() -> hasUnsupportedCriticalExtension
    java.security.PublicKey getPublicKey() -> getPublicKey
    byte[] getEncoded() -> getEncoded
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    int calculateHashCode() -> calculateHashCode
    void setBagAttribute(org.bouncycastle.asn1.ASN1ObjectIdentifier,org.bouncycastle.asn1.ASN1Encodable) -> setBagAttribute
    org.bouncycastle.asn1.ASN1Encodable getBagAttribute(org.bouncycastle.asn1.ASN1ObjectIdentifier) -> getBagAttribute
    java.util.Enumeration getBagAttributeKeys() -> getBagAttributeKeys
    java.lang.String toString() -> toString
    void verify(java.security.PublicKey) -> verify
    void verify(java.security.PublicKey,java.lang.String) -> verify
    void checkSignature(java.security.PublicKey,java.security.Signature) -> checkSignature
    boolean isAlgIdEqual(org.bouncycastle.asn1.x509.AlgorithmIdentifier,org.bouncycastle.asn1.x509.AlgorithmIdentifier) -> isAlgIdEqual
    java.util.Collection getAlternativeNames(byte[]) -> getAlternativeNames
org.bouncycastle.jcajce.provider.asymmetric.x509.X509SignatureUtil -> org.bouncycastle.jcajce.provider.asymmetric.x509.X509SignatureUtil:
    org.bouncycastle.asn1.ASN1Null derNull -> derNull
    void setSignatureParameters(java.security.Signature,org.bouncycastle.asn1.ASN1Encodable) -> setSignatureParameters
    java.lang.String getSignatureName(org.bouncycastle.asn1.x509.AlgorithmIdentifier) -> getSignatureName
    java.lang.String getDigestAlgName(org.bouncycastle.asn1.ASN1ObjectIdentifier) -> getDigestAlgName
org.bouncycastle.jcajce.provider.config.ConfigurableProvider -> org.bouncycastle.jcajce.provider.config.ConfigurableProvider:
    java.lang.String THREAD_LOCAL_EC_IMPLICITLY_CA -> THREAD_LOCAL_EC_IMPLICITLY_CA
    java.lang.String EC_IMPLICITLY_CA -> EC_IMPLICITLY_CA
    java.lang.String THREAD_LOCAL_DH_DEFAULT_PARAMS -> THREAD_LOCAL_DH_DEFAULT_PARAMS
    java.lang.String DH_DEFAULT_PARAMS -> DH_DEFAULT_PARAMS
    void setParameter(java.lang.String,java.lang.Object) -> setParameter
    void addAlgorithm(java.lang.String,java.lang.String) -> addAlgorithm
    boolean hasAlgorithm(java.lang.String,java.lang.String) -> hasAlgorithm
    void addKeyInfoConverter(org.bouncycastle.asn1.ASN1ObjectIdentifier,org.bouncycastle.jcajce.provider.util.AsymmetricKeyInfoConverter) -> addKeyInfoConverter
org.bouncycastle.jcajce.provider.config.PKCS12StoreParameter -> org.bouncycastle.jcajce.provider.config.PKCS12StoreParameter:
    java.io.OutputStream out -> out
    java.security.KeyStore$ProtectionParameter protectionParameter -> protectionParameter
    boolean forDEREncoding -> forDEREncoding
    java.io.OutputStream getOutputStream() -> getOutputStream
    java.security.KeyStore$ProtectionParameter getProtectionParameter() -> getProtectionParameter
    boolean isForDEREncoding() -> isForDEREncoding
org.bouncycastle.jcajce.provider.config.ProviderConfiguration -> org.bouncycastle.jcajce.provider.config.ProviderConfiguration:
    org.bouncycastle.jce.spec.ECParameterSpec getEcImplicitlyCa() -> getEcImplicitlyCa
    javax.crypto.spec.DHParameterSpec getDHDefaultParameters(int) -> getDHDefaultParameters
org.bouncycastle.jcajce.provider.config.ProviderConfigurationPermission -> org.bouncycastle.jcajce.provider.config.ProviderConfigurationPermission:
    int THREAD_LOCAL_EC_IMPLICITLY_CA -> THREAD_LOCAL_EC_IMPLICITLY_CA
    int EC_IMPLICITLY_CA -> EC_IMPLICITLY_CA
    int THREAD_LOCAL_DH_DEFAULT_PARAMS -> THREAD_LOCAL_DH_DEFAULT_PARAMS
    int DH_DEFAULT_PARAMS -> DH_DEFAULT_PARAMS
    int ALL -> ALL
    java.lang.String THREAD_LOCAL_EC_IMPLICITLY_CA_STR -> THREAD_LOCAL_EC_IMPLICITLY_CA_STR
    java.lang.String EC_IMPLICITLY_CA_STR -> EC_IMPLICITLY_CA_STR
    java.lang.String THREAD_LOCAL_DH_DEFAULT_PARAMS_STR -> THREAD_LOCAL_DH_DEFAULT_PARAMS_STR
    java.lang.String DH_DEFAULT_PARAMS_STR -> DH_DEFAULT_PARAMS_STR
    java.lang.String ALL_STR -> ALL_STR
    java.lang.String actions -> actions
    int permissionMask -> permissionMask
    int calculateMask(java.lang.String) -> calculateMask
    java.lang.String getActions() -> getActions
    boolean implies(java.security.Permission) -> implies
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
org.bouncycastle.jcajce.provider.digest.BCMessageDigest -> org.bouncycastle.jcajce.provider.digest.BCMessageDigest:
    org.bouncycastle.crypto.Digest digest -> digest
    void engineReset() -> engineReset
    void engineUpdate(byte) -> engineUpdate
    void engineUpdate(byte[],int,int) -> engineUpdate
    byte[] engineDigest() -> engineDigest
org.bouncycastle.jcajce.provider.digest.DigestAlgorithmProvider -> org.bouncycastle.jcajce.provider.digest.DigestAlgorithmProvider:
    void addHMACAlgorithm(org.bouncycastle.jcajce.provider.config.ConfigurableProvider,java.lang.String,java.lang.String,java.lang.String) -> addHMACAlgorithm
    void addHMACAlias(org.bouncycastle.jcajce.provider.config.ConfigurableProvider,java.lang.String,org.bouncycastle.asn1.ASN1ObjectIdentifier) -> addHMACAlias
org.bouncycastle.jcajce.provider.digest.GOST3411 -> org.bouncycastle.jcajce.provider.digest.GOST3411:
org.bouncycastle.jcajce.provider.digest.GOST3411$Digest -> org.bouncycastle.jcajce.provider.digest.GOST3411$Digest:
    java.lang.Object clone() -> clone
org.bouncycastle.jcajce.provider.digest.GOST3411$HashMac -> org.bouncycastle.jcajce.provider.digest.GOST3411$HashMac:
org.bouncycastle.jcajce.provider.digest.GOST3411$KeyGenerator -> org.bouncycastle.jcajce.provider.digest.GOST3411$KeyGenerator:
org.bouncycastle.jcajce.provider.digest.GOST3411$Mappings -> org.bouncycastle.jcajce.provider.digest.GOST3411$Mappings:
    java.lang.String PREFIX -> PREFIX
    void configure(org.bouncycastle.jcajce.provider.config.ConfigurableProvider) -> configure
org.bouncycastle.jcajce.provider.digest.GOST3411$PBEWithMacKeyFactory -> org.bouncycastle.jcajce.provider.digest.GOST3411$PBEWithMacKeyFactory:
org.bouncycastle.jcajce.provider.digest.MD2 -> org.bouncycastle.jcajce.provider.digest.MD2:
org.bouncycastle.jcajce.provider.digest.MD2$Digest -> org.bouncycastle.jcajce.provider.digest.MD2$Digest:
    java.lang.Object clone() -> clone
org.bouncycastle.jcajce.provider.digest.MD2$HashMac -> org.bouncycastle.jcajce.provider.digest.MD2$HashMac:
org.bouncycastle.jcajce.provider.digest.MD2$KeyGenerator -> org.bouncycastle.jcajce.provider.digest.MD2$KeyGenerator:
org.bouncycastle.jcajce.provider.digest.MD2$Mappings -> org.bouncycastle.jcajce.provider.digest.MD2$Mappings:
    java.lang.String PREFIX -> PREFIX
    void configure(org.bouncycastle.jcajce.provider.config.ConfigurableProvider) -> configure
org.bouncycastle.jcajce.provider.digest.MD4 -> org.bouncycastle.jcajce.provider.digest.MD4:
org.bouncycastle.jcajce.provider.digest.MD4$Digest -> org.bouncycastle.jcajce.provider.digest.MD4$Digest:
    java.lang.Object clone() -> clone
org.bouncycastle.jcajce.provider.digest.MD4$HashMac -> org.bouncycastle.jcajce.provider.digest.MD4$HashMac:
org.bouncycastle.jcajce.provider.digest.MD4$KeyGenerator -> org.bouncycastle.jcajce.provider.digest.MD4$KeyGenerator:
org.bouncycastle.jcajce.provider.digest.MD4$Mappings -> org.bouncycastle.jcajce.provider.digest.MD4$Mappings:
    java.lang.String PREFIX -> PREFIX
    void configure(org.bouncycastle.jcajce.provider.config.ConfigurableProvider) -> configure
org.bouncycastle.jcajce.provider.digest.MD5 -> org.bouncycastle.jcajce.provider.digest.MD5:
org.bouncycastle.jcajce.provider.digest.MD5$Digest -> org.bouncycastle.jcajce.provider.digest.MD5$Digest:
    java.lang.Object clone() -> clone
org.bouncycastle.jcajce.provider.digest.MD5$HashMac -> org.bouncycastle.jcajce.provider.digest.MD5$HashMac:
org.bouncycastle.jcajce.provider.digest.MD5$KeyGenerator -> org.bouncycastle.jcajce.provider.digest.MD5$KeyGenerator:
org.bouncycastle.jcajce.provider.digest.MD5$Mappings -> org.bouncycastle.jcajce.provider.digest.MD5$Mappings:
    java.lang.String PREFIX -> PREFIX
    void configure(org.bouncycastle.jcajce.provider.config.ConfigurableProvider) -> configure
org.bouncycastle.jcajce.provider.digest.RIPEMD128 -> org.bouncycastle.jcajce.provider.digest.RIPEMD128:
org.bouncycastle.jcajce.provider.digest.RIPEMD128$Digest -> org.bouncycastle.jcajce.provider.digest.RIPEMD128$Digest:
    java.lang.Object clone() -> clone
org.bouncycastle.jcajce.provider.digest.RIPEMD128$HashMac -> org.bouncycastle.jcajce.provider.digest.RIPEMD128$HashMac:
org.bouncycastle.jcajce.provider.digest.RIPEMD128$KeyGenerator -> org.bouncycastle.jcajce.provider.digest.RIPEMD128$KeyGenerator:
org.bouncycastle.jcajce.provider.digest.RIPEMD128$Mappings -> org.bouncycastle.jcajce.provider.digest.RIPEMD128$Mappings:
    java.lang.String PREFIX -> PREFIX
    void configure(org.bouncycastle.jcajce.provider.config.ConfigurableProvider) -> configure
org.bouncycastle.jcajce.provider.digest.RIPEMD160 -> org.bouncycastle.jcajce.provider.digest.RIPEMD160:
org.bouncycastle.jcajce.provider.digest.RIPEMD160$Digest -> org.bouncycastle.jcajce.provider.digest.RIPEMD160$Digest:
    java.lang.Object clone() -> clone
org.bouncycastle.jcajce.provider.digest.RIPEMD160$HashMac -> org.bouncycastle.jcajce.provider.digest.RIPEMD160$HashMac:
org.bouncycastle.jcajce.provider.digest.RIPEMD160$KeyGenerator -> org.bouncycastle.jcajce.provider.digest.RIPEMD160$KeyGenerator:
org.bouncycastle.jcajce.provider.digest.RIPEMD160$Mappings -> org.bouncycastle.jcajce.provider.digest.RIPEMD160$Mappings:
    java.lang.String PREFIX -> PREFIX
    void configure(org.bouncycastle.jcajce.provider.config.ConfigurableProvider) -> configure
org.bouncycastle.jcajce.provider.digest.RIPEMD160$PBEWithHmac -> org.bouncycastle.jcajce.provider.digest.RIPEMD160$PBEWithHmac:
org.bouncycastle.jcajce.provider.digest.RIPEMD160$PBEWithHmacKeyFactory -> org.bouncycastle.jcajce.provider.digest.RIPEMD160$PBEWithHmacKeyFactory:
org.bouncycastle.jcajce.provider.digest.RIPEMD256 -> org.bouncycastle.jcajce.provider.digest.RIPEMD256:
org.bouncycastle.jcajce.provider.digest.RIPEMD256$Digest -> org.bouncycastle.jcajce.provider.digest.RIPEMD256$Digest:
    java.lang.Object clone() -> clone
org.bouncycastle.jcajce.provider.digest.RIPEMD256$HashMac -> org.bouncycastle.jcajce.provider.digest.RIPEMD256$HashMac:
org.bouncycastle.jcajce.provider.digest.RIPEMD256$KeyGenerator -> org.bouncycastle.jcajce.provider.digest.RIPEMD256$KeyGenerator:
org.bouncycastle.jcajce.provider.digest.RIPEMD256$Mappings -> org.bouncycastle.jcajce.provider.digest.RIPEMD256$Mappings:
    java.lang.String PREFIX -> PREFIX
    void configure(org.bouncycastle.jcajce.provider.config.ConfigurableProvider) -> configure
org.bouncycastle.jcajce.provider.digest.RIPEMD320 -> org.bouncycastle.jcajce.provider.digest.RIPEMD320:
org.bouncycastle.jcajce.provider.digest.RIPEMD320$Digest -> org.bouncycastle.jcajce.provider.digest.RIPEMD320$Digest:
    java.lang.Object clone() -> clone
org.bouncycastle.jcajce.provider.digest.RIPEMD320$HashMac -> org.bouncycastle.jcajce.provider.digest.RIPEMD320$HashMac:
org.bouncycastle.jcajce.provider.digest.RIPEMD320$KeyGenerator -> org.bouncycastle.jcajce.provider.digest.RIPEMD320$KeyGenerator:
org.bouncycastle.jcajce.provider.digest.RIPEMD320$Mappings -> org.bouncycastle.jcajce.provider.digest.RIPEMD320$Mappings:
    java.lang.String PREFIX -> PREFIX
    void configure(org.bouncycastle.jcajce.provider.config.ConfigurableProvider) -> configure
org.bouncycastle.jcajce.provider.digest.SHA1 -> org.bouncycastle.jcajce.provider.digest.SHA1:
org.bouncycastle.jcajce.provider.digest.SHA1$BasePBKDF2WithHmacSHA1 -> org.bouncycastle.jcajce.provider.digest.SHA1$BasePBKDF2WithHmacSHA1:
    int scheme -> scheme
    javax.crypto.SecretKey engineGenerateSecret(java.security.spec.KeySpec) -> engineGenerateSecret
org.bouncycastle.jcajce.provider.digest.SHA1$Digest -> org.bouncycastle.jcajce.provider.digest.SHA1$Digest:
    java.lang.Object clone() -> clone
org.bouncycastle.jcajce.provider.digest.SHA1$HashMac -> org.bouncycastle.jcajce.provider.digest.SHA1$HashMac:
org.bouncycastle.jcajce.provider.digest.SHA1$KeyGenerator -> org.bouncycastle.jcajce.provider.digest.SHA1$KeyGenerator:
org.bouncycastle.jcajce.provider.digest.SHA1$Mappings -> org.bouncycastle.jcajce.provider.digest.SHA1$Mappings:
    java.lang.String PREFIX -> PREFIX
    void configure(org.bouncycastle.jcajce.provider.config.ConfigurableProvider) -> configure
org.bouncycastle.jcajce.provider.digest.SHA1$PBEWithMacKeyFactory -> org.bouncycastle.jcajce.provider.digest.SHA1$PBEWithMacKeyFactory:
org.bouncycastle.jcajce.provider.digest.SHA1$PBKDF2WithHmacSHA18BIT -> org.bouncycastle.jcajce.provider.digest.SHA1$PBKDF2WithHmacSHA18BIT:
org.bouncycastle.jcajce.provider.digest.SHA1$PBKDF2WithHmacSHA1UTF8 -> org.bouncycastle.jcajce.provider.digest.SHA1$PBKDF2WithHmacSHA1UTF8:
org.bouncycastle.jcajce.provider.digest.SHA1$SHA1Mac -> org.bouncycastle.jcajce.provider.digest.SHA1$SHA1Mac:
org.bouncycastle.jcajce.provider.digest.SHA224 -> org.bouncycastle.jcajce.provider.digest.SHA224:
org.bouncycastle.jcajce.provider.digest.SHA224$Digest -> org.bouncycastle.jcajce.provider.digest.SHA224$Digest:
    java.lang.Object clone() -> clone
org.bouncycastle.jcajce.provider.digest.SHA224$HashMac -> org.bouncycastle.jcajce.provider.digest.SHA224$HashMac:
org.bouncycastle.jcajce.provider.digest.SHA224$KeyGenerator -> org.bouncycastle.jcajce.provider.digest.SHA224$KeyGenerator:
org.bouncycastle.jcajce.provider.digest.SHA224$Mappings -> org.bouncycastle.jcajce.provider.digest.SHA224$Mappings:
    java.lang.String PREFIX -> PREFIX
    void configure(org.bouncycastle.jcajce.provider.config.ConfigurableProvider) -> configure
org.bouncycastle.jcajce.provider.digest.SHA256 -> org.bouncycastle.jcajce.provider.digest.SHA256:
org.bouncycastle.jcajce.provider.digest.SHA256$Digest -> org.bouncycastle.jcajce.provider.digest.SHA256$Digest:
    java.lang.Object clone() -> clone
org.bouncycastle.jcajce.provider.digest.SHA256$HashMac -> org.bouncycastle.jcajce.provider.digest.SHA256$HashMac:
org.bouncycastle.jcajce.provider.digest.SHA256$KeyGenerator -> org.bouncycastle.jcajce.provider.digest.SHA256$KeyGenerator:
org.bouncycastle.jcajce.provider.digest.SHA256$Mappings -> org.bouncycastle.jcajce.provider.digest.SHA256$Mappings:
    java.lang.String PREFIX -> PREFIX
    void configure(org.bouncycastle.jcajce.provider.config.ConfigurableProvider) -> configure
org.bouncycastle.jcajce.provider.digest.SHA256$PBEWithMacKeyFactory -> org.bouncycastle.jcajce.provider.digest.SHA256$PBEWithMacKeyFactory:
org.bouncycastle.jcajce.provider.digest.SHA3 -> org.bouncycastle.jcajce.provider.digest.SHA3:
org.bouncycastle.jcajce.provider.digest.SHA3$Digest224 -> org.bouncycastle.jcajce.provider.digest.SHA3$Digest224:
org.bouncycastle.jcajce.provider.digest.SHA3$Digest256 -> org.bouncycastle.jcajce.provider.digest.SHA3$Digest256:
org.bouncycastle.jcajce.provider.digest.SHA3$Digest384 -> org.bouncycastle.jcajce.provider.digest.SHA3$Digest384:
org.bouncycastle.jcajce.provider.digest.SHA3$Digest512 -> org.bouncycastle.jcajce.provider.digest.SHA3$Digest512:
org.bouncycastle.jcajce.provider.digest.SHA3$DigestSHA3 -> org.bouncycastle.jcajce.provider.digest.SHA3$DigestSHA3:
    java.lang.Object clone() -> clone
org.bouncycastle.jcajce.provider.digest.SHA3$HashMac224 -> org.bouncycastle.jcajce.provider.digest.SHA3$HashMac224:
org.bouncycastle.jcajce.provider.digest.SHA3$HashMac256 -> org.bouncycastle.jcajce.provider.digest.SHA3$HashMac256:
org.bouncycastle.jcajce.provider.digest.SHA3$HashMac384 -> org.bouncycastle.jcajce.provider.digest.SHA3$HashMac384:
org.bouncycastle.jcajce.provider.digest.SHA3$HashMac512 -> org.bouncycastle.jcajce.provider.digest.SHA3$HashMac512:
org.bouncycastle.jcajce.provider.digest.SHA3$KeyGenerator224 -> org.bouncycastle.jcajce.provider.digest.SHA3$KeyGenerator224:
org.bouncycastle.jcajce.provider.digest.SHA3$KeyGenerator256 -> org.bouncycastle.jcajce.provider.digest.SHA3$KeyGenerator256:
org.bouncycastle.jcajce.provider.digest.SHA3$KeyGenerator384 -> org.bouncycastle.jcajce.provider.digest.SHA3$KeyGenerator384:
org.bouncycastle.jcajce.provider.digest.SHA3$KeyGenerator512 -> org.bouncycastle.jcajce.provider.digest.SHA3$KeyGenerator512:
org.bouncycastle.jcajce.provider.digest.SHA3$Mappings -> org.bouncycastle.jcajce.provider.digest.SHA3$Mappings:
    java.lang.String PREFIX -> PREFIX
    void configure(org.bouncycastle.jcajce.provider.config.ConfigurableProvider) -> configure
org.bouncycastle.jcajce.provider.digest.SHA384 -> org.bouncycastle.jcajce.provider.digest.SHA384:
org.bouncycastle.jcajce.provider.digest.SHA384$Digest -> org.bouncycastle.jcajce.provider.digest.SHA384$Digest:
    java.lang.Object clone() -> clone
org.bouncycastle.jcajce.provider.digest.SHA384$HashMac -> org.bouncycastle.jcajce.provider.digest.SHA384$HashMac:
org.bouncycastle.jcajce.provider.digest.SHA384$KeyGenerator -> org.bouncycastle.jcajce.provider.digest.SHA384$KeyGenerator:
org.bouncycastle.jcajce.provider.digest.SHA384$Mappings -> org.bouncycastle.jcajce.provider.digest.SHA384$Mappings:
    java.lang.String PREFIX -> PREFIX
    void configure(org.bouncycastle.jcajce.provider.config.ConfigurableProvider) -> configure
org.bouncycastle.jcajce.provider.digest.SHA384$OldSHA384 -> org.bouncycastle.jcajce.provider.digest.SHA384$OldSHA384:
org.bouncycastle.jcajce.provider.digest.SHA512 -> org.bouncycastle.jcajce.provider.digest.SHA512:
org.bouncycastle.jcajce.provider.digest.SHA512$Digest -> org.bouncycastle.jcajce.provider.digest.SHA512$Digest:
    java.lang.Object clone() -> clone
org.bouncycastle.jcajce.provider.digest.SHA512$DigestT -> org.bouncycastle.jcajce.provider.digest.SHA512$DigestT:
    java.lang.Object clone() -> clone
org.bouncycastle.jcajce.provider.digest.SHA512$DigestT224 -> org.bouncycastle.jcajce.provider.digest.SHA512$DigestT224:
org.bouncycastle.jcajce.provider.digest.SHA512$DigestT256 -> org.bouncycastle.jcajce.provider.digest.SHA512$DigestT256:
org.bouncycastle.jcajce.provider.digest.SHA512$HashMac -> org.bouncycastle.jcajce.provider.digest.SHA512$HashMac:
org.bouncycastle.jcajce.provider.digest.SHA512$HashMacT224 -> org.bouncycastle.jcajce.provider.digest.SHA512$HashMacT224:
org.bouncycastle.jcajce.provider.digest.SHA512$HashMacT256 -> org.bouncycastle.jcajce.provider.digest.SHA512$HashMacT256:
org.bouncycastle.jcajce.provider.digest.SHA512$KeyGenerator -> org.bouncycastle.jcajce.provider.digest.SHA512$KeyGenerator:
org.bouncycastle.jcajce.provider.digest.SHA512$KeyGeneratorT224 -> org.bouncycastle.jcajce.provider.digest.SHA512$KeyGeneratorT224:
org.bouncycastle.jcajce.provider.digest.SHA512$KeyGeneratorT256 -> org.bouncycastle.jcajce.provider.digest.SHA512$KeyGeneratorT256:
org.bouncycastle.jcajce.provider.digest.SHA512$Mappings -> org.bouncycastle.jcajce.provider.digest.SHA512$Mappings:
    java.lang.String PREFIX -> PREFIX
    void configure(org.bouncycastle.jcajce.provider.config.ConfigurableProvider) -> configure
org.bouncycastle.jcajce.provider.digest.SHA512$OldSHA512 -> org.bouncycastle.jcajce.provider.digest.SHA512$OldSHA512:
org.bouncycastle.jcajce.provider.digest.SM3 -> org.bouncycastle.jcajce.provider.digest.SM3:
org.bouncycastle.jcajce.provider.digest.SM3$Digest -> org.bouncycastle.jcajce.provider.digest.SM3$Digest:
    java.lang.Object clone() -> clone
org.bouncycastle.jcajce.provider.digest.SM3$Mappings -> org.bouncycastle.jcajce.provider.digest.SM3$Mappings:
    java.lang.String PREFIX -> PREFIX
    void configure(org.bouncycastle.jcajce.provider.config.ConfigurableProvider) -> configure
org.bouncycastle.jcajce.provider.digest.Skein -> org.bouncycastle.jcajce.provider.digest.Skein:
org.bouncycastle.jcajce.provider.digest.Skein$DigestSkein1024 -> org.bouncycastle.jcajce.provider.digest.Skein$DigestSkein1024:
    java.lang.Object clone() -> clone
org.bouncycastle.jcajce.provider.digest.Skein$DigestSkein256 -> org.bouncycastle.jcajce.provider.digest.Skein$DigestSkein256:
    java.lang.Object clone() -> clone
org.bouncycastle.jcajce.provider.digest.Skein$DigestSkein512 -> org.bouncycastle.jcajce.provider.digest.Skein$DigestSkein512:
    java.lang.Object clone() -> clone
org.bouncycastle.jcajce.provider.digest.Skein$Digest_1024_1024 -> org.bouncycastle.jcajce.provider.digest.Skein$Digest_1024_1024:
org.bouncycastle.jcajce.provider.digest.Skein$Digest_1024_384 -> org.bouncycastle.jcajce.provider.digest.Skein$Digest_1024_384:
org.bouncycastle.jcajce.provider.digest.Skein$Digest_1024_512 -> org.bouncycastle.jcajce.provider.digest.Skein$Digest_1024_512:
org.bouncycastle.jcajce.provider.digest.Skein$Digest_256_128 -> org.bouncycastle.jcajce.provider.digest.Skein$Digest_256_128:
org.bouncycastle.jcajce.provider.digest.Skein$Digest_256_160 -> org.bouncycastle.jcajce.provider.digest.Skein$Digest_256_160:
org.bouncycastle.jcajce.provider.digest.Skein$Digest_256_224 -> org.bouncycastle.jcajce.provider.digest.Skein$Digest_256_224:
org.bouncycastle.jcajce.provider.digest.Skein$Digest_256_256 -> org.bouncycastle.jcajce.provider.digest.Skein$Digest_256_256:
org.bouncycastle.jcajce.provider.digest.Skein$Digest_512_128 -> org.bouncycastle.jcajce.provider.digest.Skein$Digest_512_128:
org.bouncycastle.jcajce.provider.digest.Skein$Digest_512_160 -> org.bouncycastle.jcajce.provider.digest.Skein$Digest_512_160:
org.bouncycastle.jcajce.provider.digest.Skein$Digest_512_224 -> org.bouncycastle.jcajce.provider.digest.Skein$Digest_512_224:
org.bouncycastle.jcajce.provider.digest.Skein$Digest_512_256 -> org.bouncycastle.jcajce.provider.digest.Skein$Digest_512_256:
org.bouncycastle.jcajce.provider.digest.Skein$Digest_512_384 -> org.bouncycastle.jcajce.provider.digest.Skein$Digest_512_384:
org.bouncycastle.jcajce.provider.digest.Skein$Digest_512_512 -> org.bouncycastle.jcajce.provider.digest.Skein$Digest_512_512:
org.bouncycastle.jcajce.provider.digest.Skein$HMacKeyGenerator_1024_1024 -> org.bouncycastle.jcajce.provider.digest.Skein$HMacKeyGenerator_1024_1024:
org.bouncycastle.jcajce.provider.digest.Skein$HMacKeyGenerator_1024_384 -> org.bouncycastle.jcajce.provider.digest.Skein$HMacKeyGenerator_1024_384:
org.bouncycastle.jcajce.provider.digest.Skein$HMacKeyGenerator_1024_512 -> org.bouncycastle.jcajce.provider.digest.Skein$HMacKeyGenerator_1024_512:
org.bouncycastle.jcajce.provider.digest.Skein$HMacKeyGenerator_256_128 -> org.bouncycastle.jcajce.provider.digest.Skein$HMacKeyGenerator_256_128:
org.bouncycastle.jcajce.provider.digest.Skein$HMacKeyGenerator_256_160 -> org.bouncycastle.jcajce.provider.digest.Skein$HMacKeyGenerator_256_160:
org.bouncycastle.jcajce.provider.digest.Skein$HMacKeyGenerator_256_224 -> org.bouncycastle.jcajce.provider.digest.Skein$HMacKeyGenerator_256_224:
org.bouncycastle.jcajce.provider.digest.Skein$HMacKeyGenerator_256_256 -> org.bouncycastle.jcajce.provider.digest.Skein$HMacKeyGenerator_256_256:
org.bouncycastle.jcajce.provider.digest.Skein$HMacKeyGenerator_512_128 -> org.bouncycastle.jcajce.provider.digest.Skein$HMacKeyGenerator_512_128:
org.bouncycastle.jcajce.provider.digest.Skein$HMacKeyGenerator_512_160 -> org.bouncycastle.jcajce.provider.digest.Skein$HMacKeyGenerator_512_160:
org.bouncycastle.jcajce.provider.digest.Skein$HMacKeyGenerator_512_224 -> org.bouncycastle.jcajce.provider.digest.Skein$HMacKeyGenerator_512_224:
org.bouncycastle.jcajce.provider.digest.Skein$HMacKeyGenerator_512_256 -> org.bouncycastle.jcajce.provider.digest.Skein$HMacKeyGenerator_512_256:
org.bouncycastle.jcajce.provider.digest.Skein$HMacKeyGenerator_512_384 -> org.bouncycastle.jcajce.provider.digest.Skein$HMacKeyGenerator_512_384:
org.bouncycastle.jcajce.provider.digest.Skein$HMacKeyGenerator_512_512 -> org.bouncycastle.jcajce.provider.digest.Skein$HMacKeyGenerator_512_512:
org.bouncycastle.jcajce.provider.digest.Skein$HashMac_1024_1024 -> org.bouncycastle.jcajce.provider.digest.Skein$HashMac_1024_1024:
org.bouncycastle.jcajce.provider.digest.Skein$HashMac_1024_384 -> org.bouncycastle.jcajce.provider.digest.Skein$HashMac_1024_384:
org.bouncycastle.jcajce.provider.digest.Skein$HashMac_1024_512 -> org.bouncycastle.jcajce.provider.digest.Skein$HashMac_1024_512:
org.bouncycastle.jcajce.provider.digest.Skein$HashMac_256_128 -> org.bouncycastle.jcajce.provider.digest.Skein$HashMac_256_128:
org.bouncycastle.jcajce.provider.digest.Skein$HashMac_256_160 -> org.bouncycastle.jcajce.provider.digest.Skein$HashMac_256_160:
org.bouncycastle.jcajce.provider.digest.Skein$HashMac_256_224 -> org.bouncycastle.jcajce.provider.digest.Skein$HashMac_256_224:
org.bouncycastle.jcajce.provider.digest.Skein$HashMac_256_256 -> org.bouncycastle.jcajce.provider.digest.Skein$HashMac_256_256:
org.bouncycastle.jcajce.provider.digest.Skein$HashMac_512_128 -> org.bouncycastle.jcajce.provider.digest.Skein$HashMac_512_128:
org.bouncycastle.jcajce.provider.digest.Skein$HashMac_512_160 -> org.bouncycastle.jcajce.provider.digest.Skein$HashMac_512_160:
org.bouncycastle.jcajce.provider.digest.Skein$HashMac_512_224 -> org.bouncycastle.jcajce.provider.digest.Skein$HashMac_512_224:
org.bouncycastle.jcajce.provider.digest.Skein$HashMac_512_256 -> org.bouncycastle.jcajce.provider.digest.Skein$HashMac_512_256:
org.bouncycastle.jcajce.provider.digest.Skein$HashMac_512_384 -> org.bouncycastle.jcajce.provider.digest.Skein$HashMac_512_384:
org.bouncycastle.jcajce.provider.digest.Skein$HashMac_512_512 -> org.bouncycastle.jcajce.provider.digest.Skein$HashMac_512_512:
org.bouncycastle.jcajce.provider.digest.Skein$Mappings -> org.bouncycastle.jcajce.provider.digest.Skein$Mappings:
    java.lang.String PREFIX -> PREFIX
    void configure(org.bouncycastle.jcajce.provider.config.ConfigurableProvider) -> configure
    void addSkeinMacAlgorithm(org.bouncycastle.jcajce.provider.config.ConfigurableProvider,int,int) -> addSkeinMacAlgorithm
org.bouncycastle.jcajce.provider.digest.Skein$SkeinMacKeyGenerator_1024_1024 -> org.bouncycastle.jcajce.provider.digest.Skein$SkeinMacKeyGenerator_1024_1024:
org.bouncycastle.jcajce.provider.digest.Skein$SkeinMacKeyGenerator_1024_384 -> org.bouncycastle.jcajce.provider.digest.Skein$SkeinMacKeyGenerator_1024_384:
org.bouncycastle.jcajce.provider.digest.Skein$SkeinMacKeyGenerator_1024_512 -> org.bouncycastle.jcajce.provider.digest.Skein$SkeinMacKeyGenerator_1024_512:
org.bouncycastle.jcajce.provider.digest.Skein$SkeinMacKeyGenerator_256_128 -> org.bouncycastle.jcajce.provider.digest.Skein$SkeinMacKeyGenerator_256_128:
org.bouncycastle.jcajce.provider.digest.Skein$SkeinMacKeyGenerator_256_160 -> org.bouncycastle.jcajce.provider.digest.Skein$SkeinMacKeyGenerator_256_160:
org.bouncycastle.jcajce.provider.digest.Skein$SkeinMacKeyGenerator_256_224 -> org.bouncycastle.jcajce.provider.digest.Skein$SkeinMacKeyGenerator_256_224:
org.bouncycastle.jcajce.provider.digest.Skein$SkeinMacKeyGenerator_256_256 -> org.bouncycastle.jcajce.provider.digest.Skein$SkeinMacKeyGenerator_256_256:
org.bouncycastle.jcajce.provider.digest.Skein$SkeinMacKeyGenerator_512_128 -> org.bouncycastle.jcajce.provider.digest.Skein$SkeinMacKeyGenerator_512_128:
org.bouncycastle.jcajce.provider.digest.Skein$SkeinMacKeyGenerator_512_160 -> org.bouncycastle.jcajce.provider.digest.Skein$SkeinMacKeyGenerator_512_160:
org.bouncycastle.jcajce.provider.digest.Skein$SkeinMacKeyGenerator_512_224 -> org.bouncycastle.jcajce.provider.digest.Skein$SkeinMacKeyGenerator_512_224:
org.bouncycastle.jcajce.provider.digest.Skein$SkeinMacKeyGenerator_512_256 -> org.bouncycastle.jcajce.provider.digest.Skein$SkeinMacKeyGenerator_512_256:
org.bouncycastle.jcajce.provider.digest.Skein$SkeinMacKeyGenerator_512_384 -> org.bouncycastle.jcajce.provider.digest.Skein$SkeinMacKeyGenerator_512_384:
org.bouncycastle.jcajce.provider.digest.Skein$SkeinMacKeyGenerator_512_512 -> org.bouncycastle.jcajce.provider.digest.Skein$SkeinMacKeyGenerator_512_512:
org.bouncycastle.jcajce.provider.digest.Skein$SkeinMac_1024_1024 -> org.bouncycastle.jcajce.provider.digest.Skein$SkeinMac_1024_1024:
org.bouncycastle.jcajce.provider.digest.Skein$SkeinMac_1024_384 -> org.bouncycastle.jcajce.provider.digest.Skein$SkeinMac_1024_384:
org.bouncycastle.jcajce.provider.digest.Skein$SkeinMac_1024_512 -> org.bouncycastle.jcajce.provider.digest.Skein$SkeinMac_1024_512:
org.bouncycastle.jcajce.provider.digest.Skein$SkeinMac_256_128 -> org.bouncycastle.jcajce.provider.digest.Skein$SkeinMac_256_128:
org.bouncycastle.jcajce.provider.digest.Skein$SkeinMac_256_160 -> org.bouncycastle.jcajce.provider.digest.Skein$SkeinMac_256_160:
org.bouncycastle.jcajce.provider.digest.Skein$SkeinMac_256_224 -> org.bouncycastle.jcajce.provider.digest.Skein$SkeinMac_256_224:
org.bouncycastle.jcajce.provider.digest.Skein$SkeinMac_256_256 -> org.bouncycastle.jcajce.provider.digest.Skein$SkeinMac_256_256:
org.bouncycastle.jcajce.provider.digest.Skein$SkeinMac_512_128 -> org.bouncycastle.jcajce.provider.digest.Skein$SkeinMac_512_128:
org.bouncycastle.jcajce.provider.digest.Skein$SkeinMac_512_160 -> org.bouncycastle.jcajce.provider.digest.Skein$SkeinMac_512_160:
org.bouncycastle.jcajce.provider.digest.Skein$SkeinMac_512_224 -> org.bouncycastle.jcajce.provider.digest.Skein$SkeinMac_512_224:
org.bouncycastle.jcajce.provider.digest.Skein$SkeinMac_512_256 -> org.bouncycastle.jcajce.provider.digest.Skein$SkeinMac_512_256:
org.bouncycastle.jcajce.provider.digest.Skein$SkeinMac_512_384 -> org.bouncycastle.jcajce.provider.digest.Skein$SkeinMac_512_384:
org.bouncycastle.jcajce.provider.digest.Skein$SkeinMac_512_512 -> org.bouncycastle.jcajce.provider.digest.Skein$SkeinMac_512_512:
org.bouncycastle.jcajce.provider.digest.Tiger -> org.bouncycastle.jcajce.provider.digest.Tiger:
org.bouncycastle.jcajce.provider.digest.Tiger$Digest -> org.bouncycastle.jcajce.provider.digest.Tiger$Digest:
    java.lang.Object clone() -> clone
org.bouncycastle.jcajce.provider.digest.Tiger$HashMac -> org.bouncycastle.jcajce.provider.digest.Tiger$HashMac:
org.bouncycastle.jcajce.provider.digest.Tiger$KeyGenerator -> org.bouncycastle.jcajce.provider.digest.Tiger$KeyGenerator:
org.bouncycastle.jcajce.provider.digest.Tiger$Mappings -> org.bouncycastle.jcajce.provider.digest.Tiger$Mappings:
    java.lang.String PREFIX -> PREFIX
    void configure(org.bouncycastle.jcajce.provider.config.ConfigurableProvider) -> configure
org.bouncycastle.jcajce.provider.digest.Tiger$PBEWithHashMac -> org.bouncycastle.jcajce.provider.digest.Tiger$PBEWithHashMac:
org.bouncycastle.jcajce.provider.digest.Tiger$PBEWithMacKeyFactory -> org.bouncycastle.jcajce.provider.digest.Tiger$PBEWithMacKeyFactory:
org.bouncycastle.jcajce.provider.digest.Tiger$TigerHmac -> org.bouncycastle.jcajce.provider.digest.Tiger$TigerHmac:
org.bouncycastle.jcajce.provider.digest.Whirlpool -> org.bouncycastle.jcajce.provider.digest.Whirlpool:
org.bouncycastle.jcajce.provider.digest.Whirlpool$Digest -> org.bouncycastle.jcajce.provider.digest.Whirlpool$Digest:
    java.lang.Object clone() -> clone
org.bouncycastle.jcajce.provider.digest.Whirlpool$HashMac -> org.bouncycastle.jcajce.provider.digest.Whirlpool$HashMac:
org.bouncycastle.jcajce.provider.digest.Whirlpool$KeyGenerator -> org.bouncycastle.jcajce.provider.digest.Whirlpool$KeyGenerator:
org.bouncycastle.jcajce.provider.digest.Whirlpool$Mappings -> org.bouncycastle.jcajce.provider.digest.Whirlpool$Mappings:
    java.lang.String PREFIX -> PREFIX
    void configure(org.bouncycastle.jcajce.provider.config.ConfigurableProvider) -> configure
org.bouncycastle.jcajce.provider.keystore.BC -> org.bouncycastle.jcajce.provider.keystore.BC:
    java.lang.String PREFIX -> PREFIX
org.bouncycastle.jcajce.provider.keystore.BC$Mappings -> org.bouncycastle.jcajce.provider.keystore.BC$Mappings:
    void configure(org.bouncycastle.jcajce.provider.config.ConfigurableProvider) -> configure
org.bouncycastle.jcajce.provider.keystore.PKCS12 -> org.bouncycastle.jcajce.provider.keystore.PKCS12:
    java.lang.String PREFIX -> PREFIX
org.bouncycastle.jcajce.provider.keystore.PKCS12$Mappings -> org.bouncycastle.jcajce.provider.keystore.PKCS12$Mappings:
    void configure(org.bouncycastle.jcajce.provider.config.ConfigurableProvider) -> configure
org.bouncycastle.jcajce.provider.keystore.bc.BcKeyStoreSpi -> org.bouncycastle.jcajce.provider.keystore.bc.BcKeyStoreSpi:
    int STORE_VERSION -> STORE_VERSION
    int STORE_SALT_SIZE -> STORE_SALT_SIZE
    java.lang.String STORE_CIPHER -> STORE_CIPHER
    int KEY_SALT_SIZE -> KEY_SALT_SIZE
    int MIN_ITERATIONS -> MIN_ITERATIONS
    java.lang.String KEY_CIPHER -> KEY_CIPHER
    int NULL -> NULL
    int CERTIFICATE -> CERTIFICATE
    int KEY -> KEY
    int SECRET -> SECRET
    int SEALED -> SEALED
    int KEY_PRIVATE -> KEY_PRIVATE
    int KEY_PUBLIC -> KEY_PUBLIC
    int KEY_SECRET -> KEY_SECRET
    java.util.Hashtable table -> table
    java.security.SecureRandom random -> random
    int version -> version
    void encodeCertificate(java.security.cert.Certificate,java.io.DataOutputStream) -> encodeCertificate
    java.security.cert.Certificate decodeCertificate(java.io.DataInputStream) -> decodeCertificate
    void encodeKey(java.security.Key,java.io.DataOutputStream) -> encodeKey
    java.security.Key decodeKey(java.io.DataInputStream) -> decodeKey
    javax.crypto.Cipher makePBECipher(java.lang.String,int,char[],byte[],int) -> makePBECipher
    void setRandom(java.security.SecureRandom) -> setRandom
    java.util.Enumeration engineAliases() -> engineAliases
    boolean engineContainsAlias(java.lang.String) -> engineContainsAlias
    void engineDeleteEntry(java.lang.String) -> engineDeleteEntry
    java.security.cert.Certificate engineGetCertificate(java.lang.String) -> engineGetCertificate
    java.lang.String engineGetCertificateAlias(java.security.cert.Certificate) -> engineGetCertificateAlias
    java.security.cert.Certificate[] engineGetCertificateChain(java.lang.String) -> engineGetCertificateChain
    java.util.Date engineGetCreationDate(java.lang.String) -> engineGetCreationDate
    java.security.Key engineGetKey(java.lang.String,char[]) -> engineGetKey
    boolean engineIsCertificateEntry(java.lang.String) -> engineIsCertificateEntry
    boolean engineIsKeyEntry(java.lang.String) -> engineIsKeyEntry
    void engineSetCertificateEntry(java.lang.String,java.security.cert.Certificate) -> engineSetCertificateEntry
    void engineSetKeyEntry(java.lang.String,byte[],java.security.cert.Certificate[]) -> engineSetKeyEntry
    void engineSetKeyEntry(java.lang.String,java.security.Key,char[],java.security.cert.Certificate[]) -> engineSetKeyEntry
    int engineSize() -> engineSize
    void loadStore(java.io.InputStream) -> loadStore
    void saveStore(java.io.OutputStream) -> saveStore
    void engineLoad(java.io.InputStream,char[]) -> engineLoad
    void engineStore(java.io.OutputStream,char[]) -> engineStore
    void access$000(org.bouncycastle.jcajce.provider.keystore.bc.BcKeyStoreSpi,java.security.Key,java.io.DataOutputStream) -> access$000
    java.security.Key access$100(org.bouncycastle.jcajce.provider.keystore.bc.BcKeyStoreSpi,java.io.DataInputStream) -> access$100
org.bouncycastle.jcajce.provider.keystore.bc.BcKeyStoreSpi$BouncyCastleStore -> org.bouncycastle.jcajce.provider.keystore.bc.BcKeyStoreSpi$BouncyCastleStore:
    void engineLoad(java.io.InputStream,char[]) -> engineLoad
    void engineStore(java.io.OutputStream,char[]) -> engineStore
org.bouncycastle.jcajce.provider.keystore.bc.BcKeyStoreSpi$Std -> org.bouncycastle.jcajce.provider.keystore.bc.BcKeyStoreSpi$Std:
org.bouncycastle.jcajce.provider.keystore.bc.BcKeyStoreSpi$StoreEntry -> org.bouncycastle.jcajce.provider.keystore.bc.BcKeyStoreSpi$StoreEntry:
    int type -> type
    java.lang.String alias -> alias
    java.lang.Object obj -> obj
    java.security.cert.Certificate[] certChain -> certChain
    java.util.Date date -> date
    org.bouncycastle.jcajce.provider.keystore.bc.BcKeyStoreSpi this$0 -> this$0
    int getType() -> getType
    java.lang.String getAlias() -> getAlias
    java.lang.Object getObject() -> getObject
    java.lang.Object getObject(char[]) -> getObject
    java.security.cert.Certificate[] getCertificateChain() -> getCertificateChain
    java.util.Date getDate() -> getDate
org.bouncycastle.jcajce.provider.keystore.bc.BcKeyStoreSpi$Version1 -> org.bouncycastle.jcajce.provider.keystore.bc.BcKeyStoreSpi$Version1:
org.bouncycastle.jcajce.provider.keystore.pkcs12.PKCS12KeyStoreSpi -> org.bouncycastle.jcajce.provider.keystore.pkcs12.PKCS12KeyStoreSpi:
    int SALT_SIZE -> SALT_SIZE
    int MIN_ITERATIONS -> MIN_ITERATIONS
    java.security.Provider bcProvider -> bcProvider
    org.bouncycastle.jcajce.provider.keystore.pkcs12.PKCS12KeyStoreSpi$DefaultSecretKeyProvider keySizeProvider -> keySizeProvider
    org.bouncycastle.jcajce.provider.keystore.pkcs12.PKCS12KeyStoreSpi$IgnoresCaseHashtable keys -> keys
    java.util.Hashtable localIds -> localIds
    org.bouncycastle.jcajce.provider.keystore.pkcs12.PKCS12KeyStoreSpi$IgnoresCaseHashtable certs -> certs
    java.util.Hashtable chainCerts -> chainCerts
    java.util.Hashtable keyCerts -> keyCerts
    int NULL -> NULL
    int CERTIFICATE -> CERTIFICATE
    int KEY -> KEY
    int SECRET -> SECRET
    int SEALED -> SEALED
    int KEY_PRIVATE -> KEY_PRIVATE
    int KEY_PUBLIC -> KEY_PUBLIC
    int KEY_SECRET -> KEY_SECRET
    java.security.SecureRandom random -> random
    java.security.cert.CertificateFactory certFact -> certFact
    org.bouncycastle.asn1.ASN1ObjectIdentifier keyAlgorithm -> keyAlgorithm
    org.bouncycastle.asn1.ASN1ObjectIdentifier certAlgorithm -> certAlgorithm
    org.bouncycastle.asn1.x509.SubjectKeyIdentifier createSubjectKeyId(java.security.PublicKey) -> createSubjectKeyId
    byte[] getDigest(org.bouncycastle.asn1.x509.SubjectPublicKeyInfo) -> getDigest
    void setRandom(java.security.SecureRandom) -> setRandom
    java.util.Enumeration engineAliases() -> engineAliases
    boolean engineContainsAlias(java.lang.String) -> engineContainsAlias
    void engineDeleteEntry(java.lang.String) -> engineDeleteEntry
    java.security.cert.Certificate engineGetCertificate(java.lang.String) -> engineGetCertificate
    java.lang.String engineGetCertificateAlias(java.security.cert.Certificate) -> engineGetCertificateAlias
    java.security.cert.Certificate[] engineGetCertificateChain(java.lang.String) -> engineGetCertificateChain
    java.util.Date engineGetCreationDate(java.lang.String) -> engineGetCreationDate
    java.security.Key engineGetKey(java.lang.String,char[]) -> engineGetKey
    boolean engineIsCertificateEntry(java.lang.String) -> engineIsCertificateEntry
    boolean engineIsKeyEntry(java.lang.String) -> engineIsKeyEntry
    void engineSetCertificateEntry(java.lang.String,java.security.cert.Certificate) -> engineSetCertificateEntry
    void engineSetKeyEntry(java.lang.String,byte[],java.security.cert.Certificate[]) -> engineSetKeyEntry
    void engineSetKeyEntry(java.lang.String,java.security.Key,char[],java.security.cert.Certificate[]) -> engineSetKeyEntry
    int engineSize() -> engineSize
    java.security.PrivateKey unwrapKey(org.bouncycastle.asn1.x509.AlgorithmIdentifier,byte[],char[],boolean) -> unwrapKey
    byte[] wrapKey(java.lang.String,java.security.Key,org.bouncycastle.asn1.pkcs.PKCS12PBEParams,char[]) -> wrapKey
    byte[] cryptData(boolean,org.bouncycastle.asn1.x509.AlgorithmIdentifier,char[],boolean,byte[]) -> cryptData
    javax.crypto.Cipher createCipher(int,char[],org.bouncycastle.asn1.x509.AlgorithmIdentifier) -> createCipher
    void engineLoad(java.io.InputStream,char[]) -> engineLoad
    void engineStore(java.security.KeyStore$LoadStoreParameter) -> engineStore
    void engineStore(java.io.OutputStream,char[]) -> engineStore
    void doStore(java.io.OutputStream,char[],boolean) -> doStore
    byte[] calculatePbeMac(org.bouncycastle.asn1.ASN1ObjectIdentifier,byte[],int,char[],boolean,byte[]) -> calculatePbeMac
    org.bouncycastle.asn1.x509.SubjectKeyIdentifier access$100(org.bouncycastle.jcajce.provider.keystore.pkcs12.PKCS12KeyStoreSpi,java.security.PublicKey) -> access$100
    java.security.Provider access$200() -> access$200
org.bouncycastle.jcajce.provider.keystore.pkcs12.PKCS12KeyStoreSpi$1 -> org.bouncycastle.jcajce.provider.keystore.pkcs12.PKCS12KeyStoreSpi$1:
org.bouncycastle.jcajce.provider.keystore.pkcs12.PKCS12KeyStoreSpi$BCPKCS12KeyStore -> org.bouncycastle.jcajce.provider.keystore.pkcs12.PKCS12KeyStoreSpi$BCPKCS12KeyStore:
org.bouncycastle.jcajce.provider.keystore.pkcs12.PKCS12KeyStoreSpi$BCPKCS12KeyStore3DES -> org.bouncycastle.jcajce.provider.keystore.pkcs12.PKCS12KeyStoreSpi$BCPKCS12KeyStore3DES:
org.bouncycastle.jcajce.provider.keystore.pkcs12.PKCS12KeyStoreSpi$CertId -> org.bouncycastle.jcajce.provider.keystore.pkcs12.PKCS12KeyStoreSpi$CertId:
    byte[] id -> id
    org.bouncycastle.jcajce.provider.keystore.pkcs12.PKCS12KeyStoreSpi this$0 -> this$0
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
org.bouncycastle.jcajce.provider.keystore.pkcs12.PKCS12KeyStoreSpi$DefPKCS12KeyStore -> org.bouncycastle.jcajce.provider.keystore.pkcs12.PKCS12KeyStoreSpi$DefPKCS12KeyStore:
org.bouncycastle.jcajce.provider.keystore.pkcs12.PKCS12KeyStoreSpi$DefPKCS12KeyStore3DES -> org.bouncycastle.jcajce.provider.keystore.pkcs12.PKCS12KeyStoreSpi$DefPKCS12KeyStore3DES:
org.bouncycastle.jcajce.provider.keystore.pkcs12.PKCS12KeyStoreSpi$DefaultSecretKeyProvider -> org.bouncycastle.jcajce.provider.keystore.pkcs12.PKCS12KeyStoreSpi$DefaultSecretKeyProvider:
    java.util.Map KEY_SIZES -> KEY_SIZES
    int getKeySize(org.bouncycastle.asn1.x509.AlgorithmIdentifier) -> getKeySize
org.bouncycastle.jcajce.provider.keystore.pkcs12.PKCS12KeyStoreSpi$IgnoresCaseHashtable -> org.bouncycastle.jcajce.provider.keystore.pkcs12.PKCS12KeyStoreSpi$IgnoresCaseHashtable:
    java.util.Hashtable orig -> orig
    java.util.Hashtable keys -> keys
    void put(java.lang.String,java.lang.Object) -> put
    java.util.Enumeration keys() -> keys
    java.lang.Object remove(java.lang.String) -> remove
    java.lang.Object get(java.lang.String) -> get
    java.util.Enumeration elements() -> elements
org.bouncycastle.jcajce.provider.symmetric.AES -> org.bouncycastle.jcajce.provider.symmetric.AES:
    java.lang.Class gcmSpecClass -> gcmSpecClass
    java.lang.Class lookup(java.lang.String) -> lookup
    java.lang.Class access$000() -> access$000
org.bouncycastle.jcajce.provider.symmetric.AES$AESCMAC -> org.bouncycastle.jcajce.provider.symmetric.AES$AESCMAC:
org.bouncycastle.jcajce.provider.symmetric.AES$AESGMAC -> org.bouncycastle.jcajce.provider.symmetric.AES$AESGMAC:
org.bouncycastle.jcajce.provider.symmetric.AES$AlgParamGen -> org.bouncycastle.jcajce.provider.symmetric.AES$AlgParamGen:
    void engineInit(java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom) -> engineInit
    java.security.AlgorithmParameters engineGenerateParameters() -> engineGenerateParameters
org.bouncycastle.jcajce.provider.symmetric.AES$AlgParams -> org.bouncycastle.jcajce.provider.symmetric.AES$AlgParams:
    java.lang.String engineToString() -> engineToString
org.bouncycastle.jcajce.provider.symmetric.AES$AlgParamsGCM -> org.bouncycastle.jcajce.provider.symmetric.AES$AlgParamsGCM:
    org.bouncycastle.asn1.cms.GCMParameters gcmParams -> gcmParams
    void engineInit(java.security.spec.AlgorithmParameterSpec) -> engineInit
    void engineInit(byte[]) -> engineInit
    void engineInit(byte[],java.lang.String) -> engineInit
    byte[] engineGetEncoded() -> engineGetEncoded
    byte[] engineGetEncoded(java.lang.String) -> engineGetEncoded
    java.lang.String engineToString() -> engineToString
    java.security.spec.AlgorithmParameterSpec localEngineGetParameterSpec(java.lang.Class) -> localEngineGetParameterSpec
org.bouncycastle.jcajce.provider.symmetric.AES$CBC -> org.bouncycastle.jcajce.provider.symmetric.AES$CBC:
org.bouncycastle.jcajce.provider.symmetric.AES$CFB -> org.bouncycastle.jcajce.provider.symmetric.AES$CFB:
org.bouncycastle.jcajce.provider.symmetric.AES$ECB -> org.bouncycastle.jcajce.provider.symmetric.AES$ECB:
org.bouncycastle.jcajce.provider.symmetric.AES$ECB$1 -> org.bouncycastle.jcajce.provider.symmetric.AES$ECB$1:
    org.bouncycastle.crypto.BlockCipher get() -> get
org.bouncycastle.jcajce.provider.symmetric.AES$GCM -> org.bouncycastle.jcajce.provider.symmetric.AES$GCM:
org.bouncycastle.jcajce.provider.symmetric.AES$KeyGen -> org.bouncycastle.jcajce.provider.symmetric.AES$KeyGen:
org.bouncycastle.jcajce.provider.symmetric.AES$KeyGen128 -> org.bouncycastle.jcajce.provider.symmetric.AES$KeyGen128:
org.bouncycastle.jcajce.provider.symmetric.AES$KeyGen192 -> org.bouncycastle.jcajce.provider.symmetric.AES$KeyGen192:
org.bouncycastle.jcajce.provider.symmetric.AES$KeyGen256 -> org.bouncycastle.jcajce.provider.symmetric.AES$KeyGen256:
org.bouncycastle.jcajce.provider.symmetric.AES$Mappings -> org.bouncycastle.jcajce.provider.symmetric.AES$Mappings:
    java.lang.String PREFIX -> PREFIX
    java.lang.String wrongAES128 -> wrongAES128
    java.lang.String wrongAES192 -> wrongAES192
    java.lang.String wrongAES256 -> wrongAES256
    void configure(org.bouncycastle.jcajce.provider.config.ConfigurableProvider) -> configure
org.bouncycastle.jcajce.provider.symmetric.AES$OFB -> org.bouncycastle.jcajce.provider.symmetric.AES$OFB:
org.bouncycastle.jcajce.provider.symmetric.AES$PBEWithAESCBC -> org.bouncycastle.jcajce.provider.symmetric.AES$PBEWithAESCBC:
org.bouncycastle.jcajce.provider.symmetric.AES$PBEWithMD5And128BitAESCBCOpenSSL -> org.bouncycastle.jcajce.provider.symmetric.AES$PBEWithMD5And128BitAESCBCOpenSSL:
org.bouncycastle.jcajce.provider.symmetric.AES$PBEWithMD5And192BitAESCBCOpenSSL -> org.bouncycastle.jcajce.provider.symmetric.AES$PBEWithMD5And192BitAESCBCOpenSSL:
org.bouncycastle.jcajce.provider.symmetric.AES$PBEWithMD5And256BitAESCBCOpenSSL -> org.bouncycastle.jcajce.provider.symmetric.AES$PBEWithMD5And256BitAESCBCOpenSSL:
org.bouncycastle.jcajce.provider.symmetric.AES$PBEWithSHA256And128BitAESBC -> org.bouncycastle.jcajce.provider.symmetric.AES$PBEWithSHA256And128BitAESBC:
org.bouncycastle.jcajce.provider.symmetric.AES$PBEWithSHA256And192BitAESBC -> org.bouncycastle.jcajce.provider.symmetric.AES$PBEWithSHA256And192BitAESBC:
org.bouncycastle.jcajce.provider.symmetric.AES$PBEWithSHA256And256BitAESBC -> org.bouncycastle.jcajce.provider.symmetric.AES$PBEWithSHA256And256BitAESBC:
org.bouncycastle.jcajce.provider.symmetric.AES$PBEWithSHAAnd128BitAESBC -> org.bouncycastle.jcajce.provider.symmetric.AES$PBEWithSHAAnd128BitAESBC:
org.bouncycastle.jcajce.provider.symmetric.AES$PBEWithSHAAnd192BitAESBC -> org.bouncycastle.jcajce.provider.symmetric.AES$PBEWithSHAAnd192BitAESBC:
org.bouncycastle.jcajce.provider.symmetric.AES$PBEWithSHAAnd256BitAESBC -> org.bouncycastle.jcajce.provider.symmetric.AES$PBEWithSHAAnd256BitAESBC:
org.bouncycastle.jcajce.provider.symmetric.AES$Poly1305 -> org.bouncycastle.jcajce.provider.symmetric.AES$Poly1305:
org.bouncycastle.jcajce.provider.symmetric.AES$Poly1305KeyGen -> org.bouncycastle.jcajce.provider.symmetric.AES$Poly1305KeyGen:
org.bouncycastle.jcajce.provider.symmetric.AES$RFC3211Wrap -> org.bouncycastle.jcajce.provider.symmetric.AES$RFC3211Wrap:
org.bouncycastle.jcajce.provider.symmetric.AES$RFC5649Wrap -> org.bouncycastle.jcajce.provider.symmetric.AES$RFC5649Wrap:
org.bouncycastle.jcajce.provider.symmetric.AES$Wrap -> org.bouncycastle.jcajce.provider.symmetric.AES$Wrap:
org.bouncycastle.jcajce.provider.symmetric.ARC4 -> org.bouncycastle.jcajce.provider.symmetric.ARC4:
org.bouncycastle.jcajce.provider.symmetric.ARC4$Base -> org.bouncycastle.jcajce.provider.symmetric.ARC4$Base:
org.bouncycastle.jcajce.provider.symmetric.ARC4$KeyGen -> org.bouncycastle.jcajce.provider.symmetric.ARC4$KeyGen:
org.bouncycastle.jcajce.provider.symmetric.ARC4$Mappings -> org.bouncycastle.jcajce.provider.symmetric.ARC4$Mappings:
    java.lang.String PREFIX -> PREFIX
    void configure(org.bouncycastle.jcajce.provider.config.ConfigurableProvider) -> configure
org.bouncycastle.jcajce.provider.symmetric.ARC4$PBEWithSHAAnd128Bit -> org.bouncycastle.jcajce.provider.symmetric.ARC4$PBEWithSHAAnd128Bit:
org.bouncycastle.jcajce.provider.symmetric.ARC4$PBEWithSHAAnd128BitKeyFactory -> org.bouncycastle.jcajce.provider.symmetric.ARC4$PBEWithSHAAnd128BitKeyFactory:
org.bouncycastle.jcajce.provider.symmetric.ARC4$PBEWithSHAAnd40Bit -> org.bouncycastle.jcajce.provider.symmetric.ARC4$PBEWithSHAAnd40Bit:
org.bouncycastle.jcajce.provider.symmetric.ARC4$PBEWithSHAAnd40BitKeyFactory -> org.bouncycastle.jcajce.provider.symmetric.ARC4$PBEWithSHAAnd40BitKeyFactory:
org.bouncycastle.jcajce.provider.symmetric.Blowfish -> org.bouncycastle.jcajce.provider.symmetric.Blowfish:
org.bouncycastle.jcajce.provider.symmetric.Blowfish$AlgParams -> org.bouncycastle.jcajce.provider.symmetric.Blowfish$AlgParams:
    java.lang.String engineToString() -> engineToString
org.bouncycastle.jcajce.provider.symmetric.Blowfish$CBC -> org.bouncycastle.jcajce.provider.symmetric.Blowfish$CBC:
org.bouncycastle.jcajce.provider.symmetric.Blowfish$ECB -> org.bouncycastle.jcajce.provider.symmetric.Blowfish$ECB:
org.bouncycastle.jcajce.provider.symmetric.Blowfish$KeyGen -> org.bouncycastle.jcajce.provider.symmetric.Blowfish$KeyGen:
org.bouncycastle.jcajce.provider.symmetric.Blowfish$Mappings -> org.bouncycastle.jcajce.provider.symmetric.Blowfish$Mappings:
    java.lang.String PREFIX -> PREFIX
    void configure(org.bouncycastle.jcajce.provider.config.ConfigurableProvider) -> configure
org.bouncycastle.jcajce.provider.symmetric.CAST5 -> org.bouncycastle.jcajce.provider.symmetric.CAST5:
org.bouncycastle.jcajce.provider.symmetric.CAST5$AlgParamGen -> org.bouncycastle.jcajce.provider.symmetric.CAST5$AlgParamGen:
    void engineInit(java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom) -> engineInit
    java.security.AlgorithmParameters engineGenerateParameters() -> engineGenerateParameters
org.bouncycastle.jcajce.provider.symmetric.CAST5$AlgParams -> org.bouncycastle.jcajce.provider.symmetric.CAST5$AlgParams:
    byte[] iv -> iv
    int keyLength -> keyLength
    byte[] engineGetEncoded() -> engineGetEncoded
    byte[] engineGetEncoded(java.lang.String) -> engineGetEncoded
    java.security.spec.AlgorithmParameterSpec localEngineGetParameterSpec(java.lang.Class) -> localEngineGetParameterSpec
    void engineInit(java.security.spec.AlgorithmParameterSpec) -> engineInit
    void engineInit(byte[]) -> engineInit
    void engineInit(byte[],java.lang.String) -> engineInit
    java.lang.String engineToString() -> engineToString
org.bouncycastle.jcajce.provider.symmetric.CAST5$CBC -> org.bouncycastle.jcajce.provider.symmetric.CAST5$CBC:
org.bouncycastle.jcajce.provider.symmetric.CAST5$ECB -> org.bouncycastle.jcajce.provider.symmetric.CAST5$ECB:
org.bouncycastle.jcajce.provider.symmetric.CAST5$KeyGen -> org.bouncycastle.jcajce.provider.symmetric.CAST5$KeyGen:
org.bouncycastle.jcajce.provider.symmetric.CAST5$Mappings -> org.bouncycastle.jcajce.provider.symmetric.CAST5$Mappings:
    java.lang.String PREFIX -> PREFIX
    void configure(org.bouncycastle.jcajce.provider.config.ConfigurableProvider) -> configure
org.bouncycastle.jcajce.provider.symmetric.CAST6 -> org.bouncycastle.jcajce.provider.symmetric.CAST6:
org.bouncycastle.jcajce.provider.symmetric.CAST6$ECB -> org.bouncycastle.jcajce.provider.symmetric.CAST6$ECB:
org.bouncycastle.jcajce.provider.symmetric.CAST6$ECB$1 -> org.bouncycastle.jcajce.provider.symmetric.CAST6$ECB$1:
    org.bouncycastle.crypto.BlockCipher get() -> get
org.bouncycastle.jcajce.provider.symmetric.CAST6$GMAC -> org.bouncycastle.jcajce.provider.symmetric.CAST6$GMAC:
org.bouncycastle.jcajce.provider.symmetric.CAST6$KeyGen -> org.bouncycastle.jcajce.provider.symmetric.CAST6$KeyGen:
org.bouncycastle.jcajce.provider.symmetric.CAST6$Mappings -> org.bouncycastle.jcajce.provider.symmetric.CAST6$Mappings:
    java.lang.String PREFIX -> PREFIX
    void configure(org.bouncycastle.jcajce.provider.config.ConfigurableProvider) -> configure
org.bouncycastle.jcajce.provider.symmetric.CAST6$Poly1305 -> org.bouncycastle.jcajce.provider.symmetric.CAST6$Poly1305:
org.bouncycastle.jcajce.provider.symmetric.CAST6$Poly1305KeyGen -> org.bouncycastle.jcajce.provider.symmetric.CAST6$Poly1305KeyGen:
org.bouncycastle.jcajce.provider.symmetric.Camellia -> org.bouncycastle.jcajce.provider.symmetric.Camellia:
org.bouncycastle.jcajce.provider.symmetric.Camellia$AlgParamGen -> org.bouncycastle.jcajce.provider.symmetric.Camellia$AlgParamGen:
    void engineInit(java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom) -> engineInit
    java.security.AlgorithmParameters engineGenerateParameters() -> engineGenerateParameters
org.bouncycastle.jcajce.provider.symmetric.Camellia$AlgParams -> org.bouncycastle.jcajce.provider.symmetric.Camellia$AlgParams:
    java.lang.String engineToString() -> engineToString
org.bouncycastle.jcajce.provider.symmetric.Camellia$CBC -> org.bouncycastle.jcajce.provider.symmetric.Camellia$CBC:
org.bouncycastle.jcajce.provider.symmetric.Camellia$ECB -> org.bouncycastle.jcajce.provider.symmetric.Camellia$ECB:
org.bouncycastle.jcajce.provider.symmetric.Camellia$ECB$1 -> org.bouncycastle.jcajce.provider.symmetric.Camellia$ECB$1:
    org.bouncycastle.crypto.BlockCipher get() -> get
org.bouncycastle.jcajce.provider.symmetric.Camellia$GMAC -> org.bouncycastle.jcajce.provider.symmetric.Camellia$GMAC:
org.bouncycastle.jcajce.provider.symmetric.Camellia$KeyGen -> org.bouncycastle.jcajce.provider.symmetric.Camellia$KeyGen:
org.bouncycastle.jcajce.provider.symmetric.Camellia$KeyGen128 -> org.bouncycastle.jcajce.provider.symmetric.Camellia$KeyGen128:
org.bouncycastle.jcajce.provider.symmetric.Camellia$KeyGen192 -> org.bouncycastle.jcajce.provider.symmetric.Camellia$KeyGen192:
org.bouncycastle.jcajce.provider.symmetric.Camellia$KeyGen256 -> org.bouncycastle.jcajce.provider.symmetric.Camellia$KeyGen256:
org.bouncycastle.jcajce.provider.symmetric.Camellia$Mappings -> org.bouncycastle.jcajce.provider.symmetric.Camellia$Mappings:
    java.lang.String PREFIX -> PREFIX
    void configure(org.bouncycastle.jcajce.provider.config.ConfigurableProvider) -> configure
org.bouncycastle.jcajce.provider.symmetric.Camellia$Poly1305 -> org.bouncycastle.jcajce.provider.symmetric.Camellia$Poly1305:
org.bouncycastle.jcajce.provider.symmetric.Camellia$Poly1305KeyGen -> org.bouncycastle.jcajce.provider.symmetric.Camellia$Poly1305KeyGen:
org.bouncycastle.jcajce.provider.symmetric.Camellia$RFC3211Wrap -> org.bouncycastle.jcajce.provider.symmetric.Camellia$RFC3211Wrap:
org.bouncycastle.jcajce.provider.symmetric.Camellia$Wrap -> org.bouncycastle.jcajce.provider.symmetric.Camellia$Wrap:
org.bouncycastle.jcajce.provider.symmetric.ChaCha -> org.bouncycastle.jcajce.provider.symmetric.ChaCha:
org.bouncycastle.jcajce.provider.symmetric.ChaCha$Base -> org.bouncycastle.jcajce.provider.symmetric.ChaCha$Base:
org.bouncycastle.jcajce.provider.symmetric.ChaCha$KeyGen -> org.bouncycastle.jcajce.provider.symmetric.ChaCha$KeyGen:
org.bouncycastle.jcajce.provider.symmetric.ChaCha$Mappings -> org.bouncycastle.jcajce.provider.symmetric.ChaCha$Mappings:
    java.lang.String PREFIX -> PREFIX
    void configure(org.bouncycastle.jcajce.provider.config.ConfigurableProvider) -> configure
org.bouncycastle.jcajce.provider.symmetric.DES -> org.bouncycastle.jcajce.provider.symmetric.DES:
org.bouncycastle.jcajce.provider.symmetric.DES$AlgParamGen -> org.bouncycastle.jcajce.provider.symmetric.DES$AlgParamGen:
    void engineInit(java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom) -> engineInit
    java.security.AlgorithmParameters engineGenerateParameters() -> engineGenerateParameters
org.bouncycastle.jcajce.provider.symmetric.DES$CBC -> org.bouncycastle.jcajce.provider.symmetric.DES$CBC:
org.bouncycastle.jcajce.provider.symmetric.DES$CBCMAC -> org.bouncycastle.jcajce.provider.symmetric.DES$CBCMAC:
org.bouncycastle.jcajce.provider.symmetric.DES$CMAC -> org.bouncycastle.jcajce.provider.symmetric.DES$CMAC:
org.bouncycastle.jcajce.provider.symmetric.DES$DES64 -> org.bouncycastle.jcajce.provider.symmetric.DES$DES64:
org.bouncycastle.jcajce.provider.symmetric.DES$DES64with7816d4 -> org.bouncycastle.jcajce.provider.symmetric.DES$DES64with7816d4:
org.bouncycastle.jcajce.provider.symmetric.DES$DES9797Alg3 -> org.bouncycastle.jcajce.provider.symmetric.DES$DES9797Alg3:
org.bouncycastle.jcajce.provider.symmetric.DES$DES9797Alg3with7816d4 -> org.bouncycastle.jcajce.provider.symmetric.DES$DES9797Alg3with7816d4:
org.bouncycastle.jcajce.provider.symmetric.DES$DESCFB8 -> org.bouncycastle.jcajce.provider.symmetric.DES$DESCFB8:
org.bouncycastle.jcajce.provider.symmetric.DES$DESPBEKeyFactory -> org.bouncycastle.jcajce.provider.symmetric.DES$DESPBEKeyFactory:
    boolean forCipher -> forCipher
    int scheme -> scheme
    int digest -> digest
    int keySize -> keySize
    int ivSize -> ivSize
    javax.crypto.SecretKey engineGenerateSecret(java.security.spec.KeySpec) -> engineGenerateSecret
org.bouncycastle.jcajce.provider.symmetric.DES$ECB -> org.bouncycastle.jcajce.provider.symmetric.DES$ECB:
org.bouncycastle.jcajce.provider.symmetric.DES$KeyFactory -> org.bouncycastle.jcajce.provider.symmetric.DES$KeyFactory:
    java.security.spec.KeySpec engineGetKeySpec(javax.crypto.SecretKey,java.lang.Class) -> engineGetKeySpec
    javax.crypto.SecretKey engineGenerateSecret(java.security.spec.KeySpec) -> engineGenerateSecret
org.bouncycastle.jcajce.provider.symmetric.DES$KeyGenerator -> org.bouncycastle.jcajce.provider.symmetric.DES$KeyGenerator:
    void engineInit(int,java.security.SecureRandom) -> engineInit
    javax.crypto.SecretKey engineGenerateKey() -> engineGenerateKey
org.bouncycastle.jcajce.provider.symmetric.DES$Mappings -> org.bouncycastle.jcajce.provider.symmetric.DES$Mappings:
    java.lang.String PREFIX -> PREFIX
    java.lang.String PACKAGE -> PACKAGE
    void configure(org.bouncycastle.jcajce.provider.config.ConfigurableProvider) -> configure
    void addAlias(org.bouncycastle.jcajce.provider.config.ConfigurableProvider,org.bouncycastle.asn1.ASN1ObjectIdentifier,java.lang.String) -> addAlias
org.bouncycastle.jcajce.provider.symmetric.DES$PBEWithMD2 -> org.bouncycastle.jcajce.provider.symmetric.DES$PBEWithMD2:
org.bouncycastle.jcajce.provider.symmetric.DES$PBEWithMD2KeyFactory -> org.bouncycastle.jcajce.provider.symmetric.DES$PBEWithMD2KeyFactory:
org.bouncycastle.jcajce.provider.symmetric.DES$PBEWithMD5 -> org.bouncycastle.jcajce.provider.symmetric.DES$PBEWithMD5:
org.bouncycastle.jcajce.provider.symmetric.DES$PBEWithMD5KeyFactory -> org.bouncycastle.jcajce.provider.symmetric.DES$PBEWithMD5KeyFactory:
org.bouncycastle.jcajce.provider.symmetric.DES$PBEWithSHA1 -> org.bouncycastle.jcajce.provider.symmetric.DES$PBEWithSHA1:
org.bouncycastle.jcajce.provider.symmetric.DES$PBEWithSHA1KeyFactory -> org.bouncycastle.jcajce.provider.symmetric.DES$PBEWithSHA1KeyFactory:
org.bouncycastle.jcajce.provider.symmetric.DES$RFC3211 -> org.bouncycastle.jcajce.provider.symmetric.DES$RFC3211:
org.bouncycastle.jcajce.provider.symmetric.DESede -> org.bouncycastle.jcajce.provider.symmetric.DESede:
org.bouncycastle.jcajce.provider.symmetric.DESede$AlgParamGen -> org.bouncycastle.jcajce.provider.symmetric.DESede$AlgParamGen:
    void engineInit(java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom) -> engineInit
    java.security.AlgorithmParameters engineGenerateParameters() -> engineGenerateParameters
org.bouncycastle.jcajce.provider.symmetric.DESede$CBC -> org.bouncycastle.jcajce.provider.symmetric.DESede$CBC:
org.bouncycastle.jcajce.provider.symmetric.DESede$CBCMAC -> org.bouncycastle.jcajce.provider.symmetric.DESede$CBCMAC:
org.bouncycastle.jcajce.provider.symmetric.DESede$CMAC -> org.bouncycastle.jcajce.provider.symmetric.DESede$CMAC:
org.bouncycastle.jcajce.provider.symmetric.DESede$DESede64 -> org.bouncycastle.jcajce.provider.symmetric.DESede$DESede64:
org.bouncycastle.jcajce.provider.symmetric.DESede$DESede64with7816d4 -> org.bouncycastle.jcajce.provider.symmetric.DESede$DESede64with7816d4:
org.bouncycastle.jcajce.provider.symmetric.DESede$DESedeCFB8 -> org.bouncycastle.jcajce.provider.symmetric.DESede$DESedeCFB8:
org.bouncycastle.jcajce.provider.symmetric.DESede$ECB -> org.bouncycastle.jcajce.provider.symmetric.DESede$ECB:
org.bouncycastle.jcajce.provider.symmetric.DESede$KeyFactory -> org.bouncycastle.jcajce.provider.symmetric.DESede$KeyFactory:
    java.security.spec.KeySpec engineGetKeySpec(javax.crypto.SecretKey,java.lang.Class) -> engineGetKeySpec
    javax.crypto.SecretKey engineGenerateSecret(java.security.spec.KeySpec) -> engineGenerateSecret
org.bouncycastle.jcajce.provider.symmetric.DESede$KeyGenerator -> org.bouncycastle.jcajce.provider.symmetric.DESede$KeyGenerator:
    boolean keySizeSet -> keySizeSet
    void engineInit(int,java.security.SecureRandom) -> engineInit
    javax.crypto.SecretKey engineGenerateKey() -> engineGenerateKey
org.bouncycastle.jcajce.provider.symmetric.DESede$KeyGenerator3 -> org.bouncycastle.jcajce.provider.symmetric.DESede$KeyGenerator3:
org.bouncycastle.jcajce.provider.symmetric.DESede$Mappings -> org.bouncycastle.jcajce.provider.symmetric.DESede$Mappings:
    java.lang.String PREFIX -> PREFIX
    java.lang.String PACKAGE -> PACKAGE
    void configure(org.bouncycastle.jcajce.provider.config.ConfigurableProvider) -> configure
org.bouncycastle.jcajce.provider.symmetric.DESede$PBEWithSHAAndDES2Key -> org.bouncycastle.jcajce.provider.symmetric.DESede$PBEWithSHAAndDES2Key:
org.bouncycastle.jcajce.provider.symmetric.DESede$PBEWithSHAAndDES2KeyFactory -> org.bouncycastle.jcajce.provider.symmetric.DESede$PBEWithSHAAndDES2KeyFactory:
org.bouncycastle.jcajce.provider.symmetric.DESede$PBEWithSHAAndDES3Key -> org.bouncycastle.jcajce.provider.symmetric.DESede$PBEWithSHAAndDES3Key:
org.bouncycastle.jcajce.provider.symmetric.DESede$PBEWithSHAAndDES3KeyFactory -> org.bouncycastle.jcajce.provider.symmetric.DESede$PBEWithSHAAndDES3KeyFactory:
org.bouncycastle.jcajce.provider.symmetric.DESede$RFC3211 -> org.bouncycastle.jcajce.provider.symmetric.DESede$RFC3211:
org.bouncycastle.jcajce.provider.symmetric.DESede$Wrap -> org.bouncycastle.jcajce.provider.symmetric.DESede$Wrap:
org.bouncycastle.jcajce.provider.symmetric.GOST28147 -> org.bouncycastle.jcajce.provider.symmetric.GOST28147:
org.bouncycastle.jcajce.provider.symmetric.GOST28147$AlgParamGen -> org.bouncycastle.jcajce.provider.symmetric.GOST28147$AlgParamGen:
    void engineInit(java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom) -> engineInit
    java.security.AlgorithmParameters engineGenerateParameters() -> engineGenerateParameters
org.bouncycastle.jcajce.provider.symmetric.GOST28147$AlgParams -> org.bouncycastle.jcajce.provider.symmetric.GOST28147$AlgParams:
    java.lang.String engineToString() -> engineToString
org.bouncycastle.jcajce.provider.symmetric.GOST28147$CBC -> org.bouncycastle.jcajce.provider.symmetric.GOST28147$CBC:
org.bouncycastle.jcajce.provider.symmetric.GOST28147$ECB -> org.bouncycastle.jcajce.provider.symmetric.GOST28147$ECB:
org.bouncycastle.jcajce.provider.symmetric.GOST28147$GCFB -> org.bouncycastle.jcajce.provider.symmetric.GOST28147$GCFB:
org.bouncycastle.jcajce.provider.symmetric.GOST28147$KeyGen -> org.bouncycastle.jcajce.provider.symmetric.GOST28147$KeyGen:
org.bouncycastle.jcajce.provider.symmetric.GOST28147$Mac -> org.bouncycastle.jcajce.provider.symmetric.GOST28147$Mac:
org.bouncycastle.jcajce.provider.symmetric.GOST28147$Mappings -> org.bouncycastle.jcajce.provider.symmetric.GOST28147$Mappings:
    java.lang.String PREFIX -> PREFIX
    void configure(org.bouncycastle.jcajce.provider.config.ConfigurableProvider) -> configure
org.bouncycastle.jcajce.provider.symmetric.Grain128 -> org.bouncycastle.jcajce.provider.symmetric.Grain128:
org.bouncycastle.jcajce.provider.symmetric.Grain128$Base -> org.bouncycastle.jcajce.provider.symmetric.Grain128$Base:
org.bouncycastle.jcajce.provider.symmetric.Grain128$KeyGen -> org.bouncycastle.jcajce.provider.symmetric.Grain128$KeyGen:
org.bouncycastle.jcajce.provider.symmetric.Grain128$Mappings -> org.bouncycastle.jcajce.provider.symmetric.Grain128$Mappings:
    java.lang.String PREFIX -> PREFIX
    void configure(org.bouncycastle.jcajce.provider.config.ConfigurableProvider) -> configure
org.bouncycastle.jcajce.provider.symmetric.Grainv1 -> org.bouncycastle.jcajce.provider.symmetric.Grainv1:
org.bouncycastle.jcajce.provider.symmetric.Grainv1$Base -> org.bouncycastle.jcajce.provider.symmetric.Grainv1$Base:
org.bouncycastle.jcajce.provider.symmetric.Grainv1$KeyGen -> org.bouncycastle.jcajce.provider.symmetric.Grainv1$KeyGen:
org.bouncycastle.jcajce.provider.symmetric.Grainv1$Mappings -> org.bouncycastle.jcajce.provider.symmetric.Grainv1$Mappings:
    java.lang.String PREFIX -> PREFIX
    void configure(org.bouncycastle.jcajce.provider.config.ConfigurableProvider) -> configure
org.bouncycastle.jcajce.provider.symmetric.HC128 -> org.bouncycastle.jcajce.provider.symmetric.HC128:
org.bouncycastle.jcajce.provider.symmetric.HC128$Base -> org.bouncycastle.jcajce.provider.symmetric.HC128$Base:
org.bouncycastle.jcajce.provider.symmetric.HC128$KeyGen -> org.bouncycastle.jcajce.provider.symmetric.HC128$KeyGen:
org.bouncycastle.jcajce.provider.symmetric.HC128$Mappings -> org.bouncycastle.jcajce.provider.symmetric.HC128$Mappings:
    java.lang.String PREFIX -> PREFIX
    void configure(org.bouncycastle.jcajce.provider.config.ConfigurableProvider) -> configure
org.bouncycastle.jcajce.provider.symmetric.HC256 -> org.bouncycastle.jcajce.provider.symmetric.HC256:
org.bouncycastle.jcajce.provider.symmetric.HC256$Base -> org.bouncycastle.jcajce.provider.symmetric.HC256$Base:
org.bouncycastle.jcajce.provider.symmetric.HC256$KeyGen -> org.bouncycastle.jcajce.provider.symmetric.HC256$KeyGen:
org.bouncycastle.jcajce.provider.symmetric.HC256$Mappings -> org.bouncycastle.jcajce.provider.symmetric.HC256$Mappings:
    java.lang.String PREFIX -> PREFIX
    void configure(org.bouncycastle.jcajce.provider.config.ConfigurableProvider) -> configure
org.bouncycastle.jcajce.provider.symmetric.IDEA -> org.bouncycastle.jcajce.provider.symmetric.IDEA:
org.bouncycastle.jcajce.provider.symmetric.IDEA$AlgParamGen -> org.bouncycastle.jcajce.provider.symmetric.IDEA$AlgParamGen:
    void engineInit(java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom) -> engineInit
    java.security.AlgorithmParameters engineGenerateParameters() -> engineGenerateParameters
org.bouncycastle.jcajce.provider.symmetric.IDEA$AlgParams -> org.bouncycastle.jcajce.provider.symmetric.IDEA$AlgParams:
    byte[] iv -> iv
    byte[] engineGetEncoded() -> engineGetEncoded
    byte[] engineGetEncoded(java.lang.String) -> engineGetEncoded
    java.security.spec.AlgorithmParameterSpec localEngineGetParameterSpec(java.lang.Class) -> localEngineGetParameterSpec
    void engineInit(java.security.spec.AlgorithmParameterSpec) -> engineInit
    void engineInit(byte[]) -> engineInit
    void engineInit(byte[],java.lang.String) -> engineInit
    java.lang.String engineToString() -> engineToString
org.bouncycastle.jcajce.provider.symmetric.IDEA$CBC -> org.bouncycastle.jcajce.provider.symmetric.IDEA$CBC:
org.bouncycastle.jcajce.provider.symmetric.IDEA$CFB8Mac -> org.bouncycastle.jcajce.provider.symmetric.IDEA$CFB8Mac:
org.bouncycastle.jcajce.provider.symmetric.IDEA$ECB -> org.bouncycastle.jcajce.provider.symmetric.IDEA$ECB:
org.bouncycastle.jcajce.provider.symmetric.IDEA$KeyGen -> org.bouncycastle.jcajce.provider.symmetric.IDEA$KeyGen:
org.bouncycastle.jcajce.provider.symmetric.IDEA$Mac -> org.bouncycastle.jcajce.provider.symmetric.IDEA$Mac:
org.bouncycastle.jcajce.provider.symmetric.IDEA$Mappings -> org.bouncycastle.jcajce.provider.symmetric.IDEA$Mappings:
    java.lang.String PREFIX -> PREFIX
    void configure(org.bouncycastle.jcajce.provider.config.ConfigurableProvider) -> configure
org.bouncycastle.jcajce.provider.symmetric.IDEA$PBEWithSHAAndIDEA -> org.bouncycastle.jcajce.provider.symmetric.IDEA$PBEWithSHAAndIDEA:
org.bouncycastle.jcajce.provider.symmetric.IDEA$PBEWithSHAAndIDEAKeyGen -> org.bouncycastle.jcajce.provider.symmetric.IDEA$PBEWithSHAAndIDEAKeyGen:
org.bouncycastle.jcajce.provider.symmetric.Noekeon -> org.bouncycastle.jcajce.provider.symmetric.Noekeon:
org.bouncycastle.jcajce.provider.symmetric.Noekeon$AlgParamGen -> org.bouncycastle.jcajce.provider.symmetric.Noekeon$AlgParamGen:
    void engineInit(java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom) -> engineInit
    java.security.AlgorithmParameters engineGenerateParameters() -> engineGenerateParameters
org.bouncycastle.jcajce.provider.symmetric.Noekeon$AlgParams -> org.bouncycastle.jcajce.provider.symmetric.Noekeon$AlgParams:
    java.lang.String engineToString() -> engineToString
org.bouncycastle.jcajce.provider.symmetric.Noekeon$ECB -> org.bouncycastle.jcajce.provider.symmetric.Noekeon$ECB:
org.bouncycastle.jcajce.provider.symmetric.Noekeon$ECB$1 -> org.bouncycastle.jcajce.provider.symmetric.Noekeon$ECB$1:
    org.bouncycastle.crypto.BlockCipher get() -> get
org.bouncycastle.jcajce.provider.symmetric.Noekeon$GMAC -> org.bouncycastle.jcajce.provider.symmetric.Noekeon$GMAC:
org.bouncycastle.jcajce.provider.symmetric.Noekeon$KeyGen -> org.bouncycastle.jcajce.provider.symmetric.Noekeon$KeyGen:
org.bouncycastle.jcajce.provider.symmetric.Noekeon$Mappings -> org.bouncycastle.jcajce.provider.symmetric.Noekeon$Mappings:
    java.lang.String PREFIX -> PREFIX
    void configure(org.bouncycastle.jcajce.provider.config.ConfigurableProvider) -> configure
org.bouncycastle.jcajce.provider.symmetric.Noekeon$Poly1305 -> org.bouncycastle.jcajce.provider.symmetric.Noekeon$Poly1305:
org.bouncycastle.jcajce.provider.symmetric.Noekeon$Poly1305KeyGen -> org.bouncycastle.jcajce.provider.symmetric.Noekeon$Poly1305KeyGen:
org.bouncycastle.jcajce.provider.symmetric.PBEPBKDF2 -> org.bouncycastle.jcajce.provider.symmetric.PBEPBKDF2:
org.bouncycastle.jcajce.provider.symmetric.PBEPBKDF2$AlgParams -> org.bouncycastle.jcajce.provider.symmetric.PBEPBKDF2$AlgParams:
    org.bouncycastle.asn1.pkcs.PBKDF2Params params -> params
    byte[] engineGetEncoded() -> engineGetEncoded
    byte[] engineGetEncoded(java.lang.String) -> engineGetEncoded
    java.security.spec.AlgorithmParameterSpec localEngineGetParameterSpec(java.lang.Class) -> localEngineGetParameterSpec
    void engineInit(java.security.spec.AlgorithmParameterSpec) -> engineInit
    void engineInit(byte[]) -> engineInit
    void engineInit(byte[],java.lang.String) -> engineInit
    java.lang.String engineToString() -> engineToString
org.bouncycastle.jcajce.provider.symmetric.PBEPBKDF2$BasePBKDF2 -> org.bouncycastle.jcajce.provider.symmetric.PBEPBKDF2$BasePBKDF2:
    int scheme -> scheme
    javax.crypto.SecretKey engineGenerateSecret(java.security.spec.KeySpec) -> engineGenerateSecret
    int getDigestCode(org.bouncycastle.asn1.ASN1ObjectIdentifier) -> getDigestCode
org.bouncycastle.jcajce.provider.symmetric.PBEPBKDF2$Mappings -> org.bouncycastle.jcajce.provider.symmetric.PBEPBKDF2$Mappings:
    java.lang.String PREFIX -> PREFIX
    void configure(org.bouncycastle.jcajce.provider.config.ConfigurableProvider) -> configure
org.bouncycastle.jcajce.provider.symmetric.PBEPBKDF2$PBKDF2withUTF8 -> org.bouncycastle.jcajce.provider.symmetric.PBEPBKDF2$PBKDF2withUTF8:
org.bouncycastle.jcajce.provider.symmetric.PBEPKCS12 -> org.bouncycastle.jcajce.provider.symmetric.PBEPKCS12:
org.bouncycastle.jcajce.provider.symmetric.PBEPKCS12$AlgParams -> org.bouncycastle.jcajce.provider.symmetric.PBEPKCS12$AlgParams:
    org.bouncycastle.asn1.pkcs.PKCS12PBEParams params -> params
    byte[] engineGetEncoded() -> engineGetEncoded
    byte[] engineGetEncoded(java.lang.String) -> engineGetEncoded
    java.security.spec.AlgorithmParameterSpec localEngineGetParameterSpec(java.lang.Class) -> localEngineGetParameterSpec
    void engineInit(java.security.spec.AlgorithmParameterSpec) -> engineInit
    void engineInit(byte[]) -> engineInit
    void engineInit(byte[],java.lang.String) -> engineInit
    java.lang.String engineToString() -> engineToString
org.bouncycastle.jcajce.provider.symmetric.PBEPKCS12$Mappings -> org.bouncycastle.jcajce.provider.symmetric.PBEPKCS12$Mappings:
    java.lang.String PREFIX -> PREFIX
    void configure(org.bouncycastle.jcajce.provider.config.ConfigurableProvider) -> configure
org.bouncycastle.jcajce.provider.symmetric.RC2 -> org.bouncycastle.jcajce.provider.symmetric.RC2:
org.bouncycastle.jcajce.provider.symmetric.RC2$AlgParamGen -> org.bouncycastle.jcajce.provider.symmetric.RC2$AlgParamGen:
    javax.crypto.spec.RC2ParameterSpec spec -> spec
    void engineInit(java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom) -> engineInit
    java.security.AlgorithmParameters engineGenerateParameters() -> engineGenerateParameters
org.bouncycastle.jcajce.provider.symmetric.RC2$AlgParams -> org.bouncycastle.jcajce.provider.symmetric.RC2$AlgParams:
    short[] table -> table
    short[] ekb -> ekb
    byte[] iv -> iv
    int parameterVersion -> parameterVersion
    byte[] engineGetEncoded() -> engineGetEncoded
    byte[] engineGetEncoded(java.lang.String) -> engineGetEncoded
    java.security.spec.AlgorithmParameterSpec localEngineGetParameterSpec(java.lang.Class) -> localEngineGetParameterSpec
    void engineInit(java.security.spec.AlgorithmParameterSpec) -> engineInit
    void engineInit(byte[]) -> engineInit
    void engineInit(byte[],java.lang.String) -> engineInit
    java.lang.String engineToString() -> engineToString
org.bouncycastle.jcajce.provider.symmetric.RC2$CBC -> org.bouncycastle.jcajce.provider.symmetric.RC2$CBC:
org.bouncycastle.jcajce.provider.symmetric.RC2$CBCMAC -> org.bouncycastle.jcajce.provider.symmetric.RC2$CBCMAC:
org.bouncycastle.jcajce.provider.symmetric.RC2$CFB8MAC -> org.bouncycastle.jcajce.provider.symmetric.RC2$CFB8MAC:
org.bouncycastle.jcajce.provider.symmetric.RC2$ECB -> org.bouncycastle.jcajce.provider.symmetric.RC2$ECB:
org.bouncycastle.jcajce.provider.symmetric.RC2$KeyGenerator -> org.bouncycastle.jcajce.provider.symmetric.RC2$KeyGenerator:
org.bouncycastle.jcajce.provider.symmetric.RC2$Mappings -> org.bouncycastle.jcajce.provider.symmetric.RC2$Mappings:
    java.lang.String PREFIX -> PREFIX
    void configure(org.bouncycastle.jcajce.provider.config.ConfigurableProvider) -> configure
org.bouncycastle.jcajce.provider.symmetric.RC2$PBEWithMD2KeyFactory -> org.bouncycastle.jcajce.provider.symmetric.RC2$PBEWithMD2KeyFactory:
org.bouncycastle.jcajce.provider.symmetric.RC2$PBEWithMD5AndRC2 -> org.bouncycastle.jcajce.provider.symmetric.RC2$PBEWithMD5AndRC2:
org.bouncycastle.jcajce.provider.symmetric.RC2$PBEWithMD5KeyFactory -> org.bouncycastle.jcajce.provider.symmetric.RC2$PBEWithMD5KeyFactory:
org.bouncycastle.jcajce.provider.symmetric.RC2$PBEWithSHA1AndRC2 -> org.bouncycastle.jcajce.provider.symmetric.RC2$PBEWithSHA1AndRC2:
org.bouncycastle.jcajce.provider.symmetric.RC2$PBEWithSHA1KeyFactory -> org.bouncycastle.jcajce.provider.symmetric.RC2$PBEWithSHA1KeyFactory:
org.bouncycastle.jcajce.provider.symmetric.RC2$PBEWithSHAAnd128BitKeyFactory -> org.bouncycastle.jcajce.provider.symmetric.RC2$PBEWithSHAAnd128BitKeyFactory:
org.bouncycastle.jcajce.provider.symmetric.RC2$PBEWithSHAAnd128BitRC2 -> org.bouncycastle.jcajce.provider.symmetric.RC2$PBEWithSHAAnd128BitRC2:
org.bouncycastle.jcajce.provider.symmetric.RC2$PBEWithSHAAnd40BitKeyFactory -> org.bouncycastle.jcajce.provider.symmetric.RC2$PBEWithSHAAnd40BitKeyFactory:
org.bouncycastle.jcajce.provider.symmetric.RC2$PBEWithSHAAnd40BitRC2 -> org.bouncycastle.jcajce.provider.symmetric.RC2$PBEWithSHAAnd40BitRC2:
org.bouncycastle.jcajce.provider.symmetric.RC2$Wrap -> org.bouncycastle.jcajce.provider.symmetric.RC2$Wrap:
org.bouncycastle.jcajce.provider.symmetric.RC5 -> org.bouncycastle.jcajce.provider.symmetric.RC5:
org.bouncycastle.jcajce.provider.symmetric.RC5$AlgParamGen -> org.bouncycastle.jcajce.provider.symmetric.RC5$AlgParamGen:
    void engineInit(java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom) -> engineInit
    java.security.AlgorithmParameters engineGenerateParameters() -> engineGenerateParameters
org.bouncycastle.jcajce.provider.symmetric.RC5$AlgParams -> org.bouncycastle.jcajce.provider.symmetric.RC5$AlgParams:
    java.lang.String engineToString() -> engineToString
org.bouncycastle.jcajce.provider.symmetric.RC5$CBC32 -> org.bouncycastle.jcajce.provider.symmetric.RC5$CBC32:
org.bouncycastle.jcajce.provider.symmetric.RC5$CFB8Mac32 -> org.bouncycastle.jcajce.provider.symmetric.RC5$CFB8Mac32:
org.bouncycastle.jcajce.provider.symmetric.RC5$ECB32 -> org.bouncycastle.jcajce.provider.symmetric.RC5$ECB32:
org.bouncycastle.jcajce.provider.symmetric.RC5$ECB64 -> org.bouncycastle.jcajce.provider.symmetric.RC5$ECB64:
org.bouncycastle.jcajce.provider.symmetric.RC5$KeyGen32 -> org.bouncycastle.jcajce.provider.symmetric.RC5$KeyGen32:
org.bouncycastle.jcajce.provider.symmetric.RC5$KeyGen64 -> org.bouncycastle.jcajce.provider.symmetric.RC5$KeyGen64:
org.bouncycastle.jcajce.provider.symmetric.RC5$Mac32 -> org.bouncycastle.jcajce.provider.symmetric.RC5$Mac32:
org.bouncycastle.jcajce.provider.symmetric.RC5$Mappings -> org.bouncycastle.jcajce.provider.symmetric.RC5$Mappings:
    java.lang.String PREFIX -> PREFIX
    void configure(org.bouncycastle.jcajce.provider.config.ConfigurableProvider) -> configure
org.bouncycastle.jcajce.provider.symmetric.RC6 -> org.bouncycastle.jcajce.provider.symmetric.RC6:
org.bouncycastle.jcajce.provider.symmetric.RC6$AlgParamGen -> org.bouncycastle.jcajce.provider.symmetric.RC6$AlgParamGen:
    void engineInit(java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom) -> engineInit
    java.security.AlgorithmParameters engineGenerateParameters() -> engineGenerateParameters
org.bouncycastle.jcajce.provider.symmetric.RC6$AlgParams -> org.bouncycastle.jcajce.provider.symmetric.RC6$AlgParams:
    java.lang.String engineToString() -> engineToString
org.bouncycastle.jcajce.provider.symmetric.RC6$CBC -> org.bouncycastle.jcajce.provider.symmetric.RC6$CBC:
org.bouncycastle.jcajce.provider.symmetric.RC6$CFB -> org.bouncycastle.jcajce.provider.symmetric.RC6$CFB:
org.bouncycastle.jcajce.provider.symmetric.RC6$ECB -> org.bouncycastle.jcajce.provider.symmetric.RC6$ECB:
org.bouncycastle.jcajce.provider.symmetric.RC6$ECB$1 -> org.bouncycastle.jcajce.provider.symmetric.RC6$ECB$1:
    org.bouncycastle.crypto.BlockCipher get() -> get
org.bouncycastle.jcajce.provider.symmetric.RC6$GMAC -> org.bouncycastle.jcajce.provider.symmetric.RC6$GMAC:
org.bouncycastle.jcajce.provider.symmetric.RC6$KeyGen -> org.bouncycastle.jcajce.provider.symmetric.RC6$KeyGen:
org.bouncycastle.jcajce.provider.symmetric.RC6$Mappings -> org.bouncycastle.jcajce.provider.symmetric.RC6$Mappings:
    java.lang.String PREFIX -> PREFIX
    void configure(org.bouncycastle.jcajce.provider.config.ConfigurableProvider) -> configure
org.bouncycastle.jcajce.provider.symmetric.RC6$OFB -> org.bouncycastle.jcajce.provider.symmetric.RC6$OFB:
org.bouncycastle.jcajce.provider.symmetric.RC6$Poly1305 -> org.bouncycastle.jcajce.provider.symmetric.RC6$Poly1305:
org.bouncycastle.jcajce.provider.symmetric.RC6$Poly1305KeyGen -> org.bouncycastle.jcajce.provider.symmetric.RC6$Poly1305KeyGen:
org.bouncycastle.jcajce.provider.symmetric.Rijndael -> org.bouncycastle.jcajce.provider.symmetric.Rijndael:
org.bouncycastle.jcajce.provider.symmetric.Rijndael$AlgParams -> org.bouncycastle.jcajce.provider.symmetric.Rijndael$AlgParams:
    java.lang.String engineToString() -> engineToString
org.bouncycastle.jcajce.provider.symmetric.Rijndael$ECB -> org.bouncycastle.jcajce.provider.symmetric.Rijndael$ECB:
org.bouncycastle.jcajce.provider.symmetric.Rijndael$ECB$1 -> org.bouncycastle.jcajce.provider.symmetric.Rijndael$ECB$1:
    org.bouncycastle.crypto.BlockCipher get() -> get
org.bouncycastle.jcajce.provider.symmetric.Rijndael$KeyGen -> org.bouncycastle.jcajce.provider.symmetric.Rijndael$KeyGen:
org.bouncycastle.jcajce.provider.symmetric.Rijndael$Mappings -> org.bouncycastle.jcajce.provider.symmetric.Rijndael$Mappings:
    java.lang.String PREFIX -> PREFIX
    void configure(org.bouncycastle.jcajce.provider.config.ConfigurableProvider) -> configure
org.bouncycastle.jcajce.provider.symmetric.SEED -> org.bouncycastle.jcajce.provider.symmetric.SEED:
org.bouncycastle.jcajce.provider.symmetric.SEED$AlgParamGen -> org.bouncycastle.jcajce.provider.symmetric.SEED$AlgParamGen:
    void engineInit(java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom) -> engineInit
    java.security.AlgorithmParameters engineGenerateParameters() -> engineGenerateParameters
org.bouncycastle.jcajce.provider.symmetric.SEED$AlgParams -> org.bouncycastle.jcajce.provider.symmetric.SEED$AlgParams:
    java.lang.String engineToString() -> engineToString
org.bouncycastle.jcajce.provider.symmetric.SEED$CBC -> org.bouncycastle.jcajce.provider.symmetric.SEED$CBC:
org.bouncycastle.jcajce.provider.symmetric.SEED$ECB -> org.bouncycastle.jcajce.provider.symmetric.SEED$ECB:
org.bouncycastle.jcajce.provider.symmetric.SEED$ECB$1 -> org.bouncycastle.jcajce.provider.symmetric.SEED$ECB$1:
    org.bouncycastle.crypto.BlockCipher get() -> get
org.bouncycastle.jcajce.provider.symmetric.SEED$GMAC -> org.bouncycastle.jcajce.provider.symmetric.SEED$GMAC:
org.bouncycastle.jcajce.provider.symmetric.SEED$KeyGen -> org.bouncycastle.jcajce.provider.symmetric.SEED$KeyGen:
org.bouncycastle.jcajce.provider.symmetric.SEED$Mappings -> org.bouncycastle.jcajce.provider.symmetric.SEED$Mappings:
    java.lang.String PREFIX -> PREFIX
    void configure(org.bouncycastle.jcajce.provider.config.ConfigurableProvider) -> configure
org.bouncycastle.jcajce.provider.symmetric.SEED$Poly1305 -> org.bouncycastle.jcajce.provider.symmetric.SEED$Poly1305:
org.bouncycastle.jcajce.provider.symmetric.SEED$Poly1305KeyGen -> org.bouncycastle.jcajce.provider.symmetric.SEED$Poly1305KeyGen:
org.bouncycastle.jcajce.provider.symmetric.SEED$Wrap -> org.bouncycastle.jcajce.provider.symmetric.SEED$Wrap:
org.bouncycastle.jcajce.provider.symmetric.Salsa20 -> org.bouncycastle.jcajce.provider.symmetric.Salsa20:
org.bouncycastle.jcajce.provider.symmetric.Salsa20$Base -> org.bouncycastle.jcajce.provider.symmetric.Salsa20$Base:
org.bouncycastle.jcajce.provider.symmetric.Salsa20$KeyGen -> org.bouncycastle.jcajce.provider.symmetric.Salsa20$KeyGen:
org.bouncycastle.jcajce.provider.symmetric.Salsa20$Mappings -> org.bouncycastle.jcajce.provider.symmetric.Salsa20$Mappings:
    java.lang.String PREFIX -> PREFIX
    void configure(org.bouncycastle.jcajce.provider.config.ConfigurableProvider) -> configure
org.bouncycastle.jcajce.provider.symmetric.Serpent -> org.bouncycastle.jcajce.provider.symmetric.Serpent:
org.bouncycastle.jcajce.provider.symmetric.Serpent$AlgParams -> org.bouncycastle.jcajce.provider.symmetric.Serpent$AlgParams:
    java.lang.String engineToString() -> engineToString
org.bouncycastle.jcajce.provider.symmetric.Serpent$ECB -> org.bouncycastle.jcajce.provider.symmetric.Serpent$ECB:
org.bouncycastle.jcajce.provider.symmetric.Serpent$ECB$1 -> org.bouncycastle.jcajce.provider.symmetric.Serpent$ECB$1:
    org.bouncycastle.crypto.BlockCipher get() -> get
org.bouncycastle.jcajce.provider.symmetric.Serpent$KeyGen -> org.bouncycastle.jcajce.provider.symmetric.Serpent$KeyGen:
org.bouncycastle.jcajce.provider.symmetric.Serpent$Mappings -> org.bouncycastle.jcajce.provider.symmetric.Serpent$Mappings:
    java.lang.String PREFIX -> PREFIX
    void configure(org.bouncycastle.jcajce.provider.config.ConfigurableProvider) -> configure
org.bouncycastle.jcajce.provider.symmetric.Serpent$Poly1305 -> org.bouncycastle.jcajce.provider.symmetric.Serpent$Poly1305:
org.bouncycastle.jcajce.provider.symmetric.Serpent$Poly1305KeyGen -> org.bouncycastle.jcajce.provider.symmetric.Serpent$Poly1305KeyGen:
org.bouncycastle.jcajce.provider.symmetric.Serpent$SerpentGMAC -> org.bouncycastle.jcajce.provider.symmetric.Serpent$SerpentGMAC:
org.bouncycastle.jcajce.provider.symmetric.Shacal2 -> org.bouncycastle.jcajce.provider.symmetric.Shacal2:
org.bouncycastle.jcajce.provider.symmetric.Shacal2$AlgParamGen -> org.bouncycastle.jcajce.provider.symmetric.Shacal2$AlgParamGen:
    void engineInit(java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom) -> engineInit
    java.security.AlgorithmParameters engineGenerateParameters() -> engineGenerateParameters
org.bouncycastle.jcajce.provider.symmetric.Shacal2$AlgParams -> org.bouncycastle.jcajce.provider.symmetric.Shacal2$AlgParams:
    java.lang.String engineToString() -> engineToString
org.bouncycastle.jcajce.provider.symmetric.Shacal2$CBC -> org.bouncycastle.jcajce.provider.symmetric.Shacal2$CBC:
org.bouncycastle.jcajce.provider.symmetric.Shacal2$ECB -> org.bouncycastle.jcajce.provider.symmetric.Shacal2$ECB:
org.bouncycastle.jcajce.provider.symmetric.Shacal2$ECB$1 -> org.bouncycastle.jcajce.provider.symmetric.Shacal2$ECB$1:
    org.bouncycastle.crypto.BlockCipher get() -> get
org.bouncycastle.jcajce.provider.symmetric.Shacal2$KeyGen -> org.bouncycastle.jcajce.provider.symmetric.Shacal2$KeyGen:
org.bouncycastle.jcajce.provider.symmetric.Shacal2$Mappings -> org.bouncycastle.jcajce.provider.symmetric.Shacal2$Mappings:
    java.lang.String PREFIX -> PREFIX
    void configure(org.bouncycastle.jcajce.provider.config.ConfigurableProvider) -> configure
org.bouncycastle.jcajce.provider.symmetric.SipHash -> org.bouncycastle.jcajce.provider.symmetric.SipHash:
org.bouncycastle.jcajce.provider.symmetric.SipHash$KeyGen -> org.bouncycastle.jcajce.provider.symmetric.SipHash$KeyGen:
org.bouncycastle.jcajce.provider.symmetric.SipHash$Mac24 -> org.bouncycastle.jcajce.provider.symmetric.SipHash$Mac24:
org.bouncycastle.jcajce.provider.symmetric.SipHash$Mac48 -> org.bouncycastle.jcajce.provider.symmetric.SipHash$Mac48:
org.bouncycastle.jcajce.provider.symmetric.SipHash$Mappings -> org.bouncycastle.jcajce.provider.symmetric.SipHash$Mappings:
    java.lang.String PREFIX -> PREFIX
    void configure(org.bouncycastle.jcajce.provider.config.ConfigurableProvider) -> configure
org.bouncycastle.jcajce.provider.symmetric.Skipjack -> org.bouncycastle.jcajce.provider.symmetric.Skipjack:
org.bouncycastle.jcajce.provider.symmetric.Skipjack$AlgParams -> org.bouncycastle.jcajce.provider.symmetric.Skipjack$AlgParams:
    java.lang.String engineToString() -> engineToString
org.bouncycastle.jcajce.provider.symmetric.Skipjack$ECB -> org.bouncycastle.jcajce.provider.symmetric.Skipjack$ECB:
org.bouncycastle.jcajce.provider.symmetric.Skipjack$KeyGen -> org.bouncycastle.jcajce.provider.symmetric.Skipjack$KeyGen:
org.bouncycastle.jcajce.provider.symmetric.Skipjack$Mac -> org.bouncycastle.jcajce.provider.symmetric.Skipjack$Mac:
org.bouncycastle.jcajce.provider.symmetric.Skipjack$MacCFB8 -> org.bouncycastle.jcajce.provider.symmetric.Skipjack$MacCFB8:
org.bouncycastle.jcajce.provider.symmetric.Skipjack$Mappings -> org.bouncycastle.jcajce.provider.symmetric.Skipjack$Mappings:
    java.lang.String PREFIX -> PREFIX
    void configure(org.bouncycastle.jcajce.provider.config.ConfigurableProvider) -> configure
org.bouncycastle.jcajce.provider.symmetric.SymmetricAlgorithmProvider -> org.bouncycastle.jcajce.provider.symmetric.SymmetricAlgorithmProvider:
    void addGMacAlgorithm(org.bouncycastle.jcajce.provider.config.ConfigurableProvider,java.lang.String,java.lang.String,java.lang.String) -> addGMacAlgorithm
    void addPoly1305Algorithm(org.bouncycastle.jcajce.provider.config.ConfigurableProvider,java.lang.String,java.lang.String,java.lang.String) -> addPoly1305Algorithm
org.bouncycastle.jcajce.provider.symmetric.TEA -> org.bouncycastle.jcajce.provider.symmetric.TEA:
org.bouncycastle.jcajce.provider.symmetric.TEA$AlgParams -> org.bouncycastle.jcajce.provider.symmetric.TEA$AlgParams:
    java.lang.String engineToString() -> engineToString
org.bouncycastle.jcajce.provider.symmetric.TEA$ECB -> org.bouncycastle.jcajce.provider.symmetric.TEA$ECB:
org.bouncycastle.jcajce.provider.symmetric.TEA$KeyGen -> org.bouncycastle.jcajce.provider.symmetric.TEA$KeyGen:
org.bouncycastle.jcajce.provider.symmetric.TEA$Mappings -> org.bouncycastle.jcajce.provider.symmetric.TEA$Mappings:
    java.lang.String PREFIX -> PREFIX
    void configure(org.bouncycastle.jcajce.provider.config.ConfigurableProvider) -> configure
org.bouncycastle.jcajce.provider.symmetric.Threefish -> org.bouncycastle.jcajce.provider.symmetric.Threefish:
org.bouncycastle.jcajce.provider.symmetric.Threefish$AlgParams_1024 -> org.bouncycastle.jcajce.provider.symmetric.Threefish$AlgParams_1024:
    java.lang.String engineToString() -> engineToString
org.bouncycastle.jcajce.provider.symmetric.Threefish$AlgParams_256 -> org.bouncycastle.jcajce.provider.symmetric.Threefish$AlgParams_256:
    java.lang.String engineToString() -> engineToString
org.bouncycastle.jcajce.provider.symmetric.Threefish$AlgParams_512 -> org.bouncycastle.jcajce.provider.symmetric.Threefish$AlgParams_512:
    java.lang.String engineToString() -> engineToString
org.bouncycastle.jcajce.provider.symmetric.Threefish$ECB_1024 -> org.bouncycastle.jcajce.provider.symmetric.Threefish$ECB_1024:
org.bouncycastle.jcajce.provider.symmetric.Threefish$ECB_256 -> org.bouncycastle.jcajce.provider.symmetric.Threefish$ECB_256:
org.bouncycastle.jcajce.provider.symmetric.Threefish$ECB_512 -> org.bouncycastle.jcajce.provider.symmetric.Threefish$ECB_512:
org.bouncycastle.jcajce.provider.symmetric.Threefish$KeyGen_1024 -> org.bouncycastle.jcajce.provider.symmetric.Threefish$KeyGen_1024:
org.bouncycastle.jcajce.provider.symmetric.Threefish$KeyGen_256 -> org.bouncycastle.jcajce.provider.symmetric.Threefish$KeyGen_256:
org.bouncycastle.jcajce.provider.symmetric.Threefish$KeyGen_512 -> org.bouncycastle.jcajce.provider.symmetric.Threefish$KeyGen_512:
org.bouncycastle.jcajce.provider.symmetric.Threefish$Mappings -> org.bouncycastle.jcajce.provider.symmetric.Threefish$Mappings:
    java.lang.String PREFIX -> PREFIX
    void configure(org.bouncycastle.jcajce.provider.config.ConfigurableProvider) -> configure
org.bouncycastle.jcajce.provider.symmetric.Twofish -> org.bouncycastle.jcajce.provider.symmetric.Twofish:
org.bouncycastle.jcajce.provider.symmetric.Twofish$AlgParams -> org.bouncycastle.jcajce.provider.symmetric.Twofish$AlgParams:
    java.lang.String engineToString() -> engineToString
org.bouncycastle.jcajce.provider.symmetric.Twofish$ECB -> org.bouncycastle.jcajce.provider.symmetric.Twofish$ECB:
org.bouncycastle.jcajce.provider.symmetric.Twofish$ECB$1 -> org.bouncycastle.jcajce.provider.symmetric.Twofish$ECB$1:
    org.bouncycastle.crypto.BlockCipher get() -> get
org.bouncycastle.jcajce.provider.symmetric.Twofish$GMAC -> org.bouncycastle.jcajce.provider.symmetric.Twofish$GMAC:
org.bouncycastle.jcajce.provider.symmetric.Twofish$KeyGen -> org.bouncycastle.jcajce.provider.symmetric.Twofish$KeyGen:
org.bouncycastle.jcajce.provider.symmetric.Twofish$Mappings -> org.bouncycastle.jcajce.provider.symmetric.Twofish$Mappings:
    java.lang.String PREFIX -> PREFIX
    void configure(org.bouncycastle.jcajce.provider.config.ConfigurableProvider) -> configure
org.bouncycastle.jcajce.provider.symmetric.Twofish$PBEWithSHA -> org.bouncycastle.jcajce.provider.symmetric.Twofish$PBEWithSHA:
org.bouncycastle.jcajce.provider.symmetric.Twofish$PBEWithSHAKeyFactory -> org.bouncycastle.jcajce.provider.symmetric.Twofish$PBEWithSHAKeyFactory:
org.bouncycastle.jcajce.provider.symmetric.Twofish$Poly1305 -> org.bouncycastle.jcajce.provider.symmetric.Twofish$Poly1305:
org.bouncycastle.jcajce.provider.symmetric.Twofish$Poly1305KeyGen -> org.bouncycastle.jcajce.provider.symmetric.Twofish$Poly1305KeyGen:
org.bouncycastle.jcajce.provider.symmetric.VMPC -> org.bouncycastle.jcajce.provider.symmetric.VMPC:
org.bouncycastle.jcajce.provider.symmetric.VMPC$Base -> org.bouncycastle.jcajce.provider.symmetric.VMPC$Base:
org.bouncycastle.jcajce.provider.symmetric.VMPC$KeyGen -> org.bouncycastle.jcajce.provider.symmetric.VMPC$KeyGen:
org.bouncycastle.jcajce.provider.symmetric.VMPC$Mac -> org.bouncycastle.jcajce.provider.symmetric.VMPC$Mac:
org.bouncycastle.jcajce.provider.symmetric.VMPC$Mappings -> org.bouncycastle.jcajce.provider.symmetric.VMPC$Mappings:
    java.lang.String PREFIX -> PREFIX
    void configure(org.bouncycastle.jcajce.provider.config.ConfigurableProvider) -> configure
org.bouncycastle.jcajce.provider.symmetric.VMPCKSA3 -> org.bouncycastle.jcajce.provider.symmetric.VMPCKSA3:
org.bouncycastle.jcajce.provider.symmetric.VMPCKSA3$Base -> org.bouncycastle.jcajce.provider.symmetric.VMPCKSA3$Base:
org.bouncycastle.jcajce.provider.symmetric.VMPCKSA3$KeyGen -> org.bouncycastle.jcajce.provider.symmetric.VMPCKSA3$KeyGen:
org.bouncycastle.jcajce.provider.symmetric.VMPCKSA3$Mappings -> org.bouncycastle.jcajce.provider.symmetric.VMPCKSA3$Mappings:
    java.lang.String PREFIX -> PREFIX
    void configure(org.bouncycastle.jcajce.provider.config.ConfigurableProvider) -> configure
org.bouncycastle.jcajce.provider.symmetric.XSalsa20 -> org.bouncycastle.jcajce.provider.symmetric.XSalsa20:
org.bouncycastle.jcajce.provider.symmetric.XSalsa20$Base -> org.bouncycastle.jcajce.provider.symmetric.XSalsa20$Base:
org.bouncycastle.jcajce.provider.symmetric.XSalsa20$KeyGen -> org.bouncycastle.jcajce.provider.symmetric.XSalsa20$KeyGen:
org.bouncycastle.jcajce.provider.symmetric.XSalsa20$Mappings -> org.bouncycastle.jcajce.provider.symmetric.XSalsa20$Mappings:
    java.lang.String PREFIX -> PREFIX
    void configure(org.bouncycastle.jcajce.provider.config.ConfigurableProvider) -> configure
org.bouncycastle.jcajce.provider.symmetric.XTEA -> org.bouncycastle.jcajce.provider.symmetric.XTEA:
org.bouncycastle.jcajce.provider.symmetric.XTEA$AlgParams -> org.bouncycastle.jcajce.provider.symmetric.XTEA$AlgParams:
    java.lang.String engineToString() -> engineToString
org.bouncycastle.jcajce.provider.symmetric.XTEA$ECB -> org.bouncycastle.jcajce.provider.symmetric.XTEA$ECB:
org.bouncycastle.jcajce.provider.symmetric.XTEA$KeyGen -> org.bouncycastle.jcajce.provider.symmetric.XTEA$KeyGen:
org.bouncycastle.jcajce.provider.symmetric.XTEA$Mappings -> org.bouncycastle.jcajce.provider.symmetric.XTEA$Mappings:
    java.lang.String PREFIX -> PREFIX
    void configure(org.bouncycastle.jcajce.provider.config.ConfigurableProvider) -> configure
org.bouncycastle.jcajce.provider.symmetric.util.BCPBEKey -> org.bouncycastle.jcajce.provider.symmetric.util.BCPBEKey:
    java.lang.String algorithm -> algorithm
    org.bouncycastle.asn1.ASN1ObjectIdentifier oid -> oid
    int type -> type
    int digest -> digest
    int keySize -> keySize
    int ivSize -> ivSize
    org.bouncycastle.crypto.CipherParameters param -> param
    javax.crypto.spec.PBEKeySpec pbeKeySpec -> pbeKeySpec
    boolean tryWrong -> tryWrong
    java.lang.String getAlgorithm() -> getAlgorithm
    java.lang.String getFormat() -> getFormat
    byte[] getEncoded() -> getEncoded
    int getType() -> getType
    int getDigest() -> getDigest
    int getKeySize() -> getKeySize
    int getIvSize() -> getIvSize
    org.bouncycastle.crypto.CipherParameters getParam() -> getParam
    char[] getPassword() -> getPassword
    byte[] getSalt() -> getSalt
    int getIterationCount() -> getIterationCount
    org.bouncycastle.asn1.ASN1ObjectIdentifier getOID() -> getOID
    void setTryWrongPKCS12Zero(boolean) -> setTryWrongPKCS12Zero
    boolean shouldTryWrongPKCS12() -> shouldTryWrongPKCS12
org.bouncycastle.jcajce.provider.symmetric.util.BaseAlgorithmParameterGenerator -> org.bouncycastle.jcajce.provider.symmetric.util.BaseAlgorithmParameterGenerator:
    java.security.SecureRandom random -> random
    int strength -> strength
    void engineInit(int,java.security.SecureRandom) -> engineInit
org.bouncycastle.jcajce.provider.symmetric.util.BaseAlgorithmParameters -> org.bouncycastle.jcajce.provider.symmetric.util.BaseAlgorithmParameters:
    boolean isASN1FormatString(java.lang.String) -> isASN1FormatString
    java.security.spec.AlgorithmParameterSpec engineGetParameterSpec(java.lang.Class) -> engineGetParameterSpec
    java.security.spec.AlgorithmParameterSpec localEngineGetParameterSpec(java.lang.Class) -> localEngineGetParameterSpec
org.bouncycastle.jcajce.provider.symmetric.util.BaseBlockCipher -> org.bouncycastle.jcajce.provider.symmetric.util.BaseBlockCipher:
    java.lang.Class gcmSpecClass -> gcmSpecClass
    java.lang.Class[] availableSpecs -> availableSpecs
    org.bouncycastle.crypto.BlockCipher baseEngine -> baseEngine
    org.bouncycastle.jcajce.provider.symmetric.util.BlockCipherProvider engineProvider -> engineProvider
    org.bouncycastle.jcajce.provider.symmetric.util.BaseBlockCipher$GenericBlockCipher cipher -> cipher
    org.bouncycastle.crypto.params.ParametersWithIV ivParam -> ivParam
    org.bouncycastle.crypto.params.AEADParameters aeadParams -> aeadParams
    int ivLength -> ivLength
    boolean padded -> padded
    javax.crypto.spec.PBEParameterSpec pbeSpec -> pbeSpec
    java.lang.String pbeAlgorithm -> pbeAlgorithm
    java.lang.String modeName -> modeName
    java.lang.Class lookup(java.lang.String) -> lookup
    int engineGetBlockSize() -> engineGetBlockSize
    byte[] engineGetIV() -> engineGetIV
    int engineGetKeySize(java.security.Key) -> engineGetKeySize
    int engineGetOutputSize(int) -> engineGetOutputSize
    java.security.AlgorithmParameters engineGetParameters() -> engineGetParameters
    void engineSetMode(java.lang.String) -> engineSetMode
    void engineSetPadding(java.lang.String) -> engineSetPadding
    void engineInit(int,java.security.Key,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom) -> engineInit
    void engineInit(int,java.security.Key,java.security.AlgorithmParameters,java.security.SecureRandom) -> engineInit
    void engineInit(int,java.security.Key,java.security.SecureRandom) -> engineInit
    void engineUpdateAAD(byte[],int,int) -> engineUpdateAAD
    void engineUpdateAAD(java.nio.ByteBuffer) -> engineUpdateAAD
    byte[] engineUpdate(byte[],int,int) -> engineUpdate
    int engineUpdate(byte[],int,int,byte[],int) -> engineUpdate
    byte[] engineDoFinal(byte[],int,int) -> engineDoFinal
    int engineDoFinal(byte[],int,int,byte[],int) -> engineDoFinal
    boolean isAEADModeName(java.lang.String) -> isAEADModeName
    java.lang.Class access$000(java.lang.String) -> access$000
org.bouncycastle.jcajce.provider.symmetric.util.BaseBlockCipher$AEADGenericBlockCipher -> org.bouncycastle.jcajce.provider.symmetric.util.BaseBlockCipher$AEADGenericBlockCipher:
    java.lang.reflect.Constructor aeadBadTagConstructor -> aeadBadTagConstructor
    org.bouncycastle.crypto.modes.AEADBlockCipher cipher -> cipher
    java.lang.reflect.Constructor findExceptionConstructor(java.lang.Class) -> findExceptionConstructor
    void init(boolean,org.bouncycastle.crypto.CipherParameters) -> init
    java.lang.String getAlgorithmName() -> getAlgorithmName
    boolean wrapOnNoPadding() -> wrapOnNoPadding
    org.bouncycastle.crypto.BlockCipher getUnderlyingCipher() -> getUnderlyingCipher
    int getOutputSize(int) -> getOutputSize
    int getUpdateOutputSize(int) -> getUpdateOutputSize
    void updateAAD(byte[],int,int) -> updateAAD
    int processByte(byte,byte[],int) -> processByte
    int processBytes(byte[],int,int,byte[],int) -> processBytes
    int doFinal(byte[],int) -> doFinal
org.bouncycastle.jcajce.provider.symmetric.util.BaseBlockCipher$BufferedGenericBlockCipher -> org.bouncycastle.jcajce.provider.symmetric.util.BaseBlockCipher$BufferedGenericBlockCipher:
    org.bouncycastle.crypto.BufferedBlockCipher cipher -> cipher
    void init(boolean,org.bouncycastle.crypto.CipherParameters) -> init
    boolean wrapOnNoPadding() -> wrapOnNoPadding
    java.lang.String getAlgorithmName() -> getAlgorithmName
    org.bouncycastle.crypto.BlockCipher getUnderlyingCipher() -> getUnderlyingCipher
    int getOutputSize(int) -> getOutputSize
    int getUpdateOutputSize(int) -> getUpdateOutputSize
    void updateAAD(byte[],int,int) -> updateAAD
    int processByte(byte,byte[],int) -> processByte
    int processBytes(byte[],int,int,byte[],int) -> processBytes
    int doFinal(byte[],int) -> doFinal
org.bouncycastle.jcajce.provider.symmetric.util.BaseBlockCipher$GenericBlockCipher -> org.bouncycastle.jcajce.provider.symmetric.util.BaseBlockCipher$GenericBlockCipher:
    void init(boolean,org.bouncycastle.crypto.CipherParameters) -> init
    boolean wrapOnNoPadding() -> wrapOnNoPadding
    java.lang.String getAlgorithmName() -> getAlgorithmName
    org.bouncycastle.crypto.BlockCipher getUnderlyingCipher() -> getUnderlyingCipher
    int getOutputSize(int) -> getOutputSize
    int getUpdateOutputSize(int) -> getUpdateOutputSize
    void updateAAD(byte[],int,int) -> updateAAD
    int processByte(byte,byte[],int) -> processByte
    int processBytes(byte[],int,int,byte[],int) -> processBytes
    int doFinal(byte[],int) -> doFinal
org.bouncycastle.jcajce.provider.symmetric.util.BaseKeyGenerator -> org.bouncycastle.jcajce.provider.symmetric.util.BaseKeyGenerator:
    java.lang.String algName -> algName
    int keySize -> keySize
    int defaultKeySize -> defaultKeySize
    org.bouncycastle.crypto.CipherKeyGenerator engine -> engine
    boolean uninitialised -> uninitialised
    void engineInit(java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom) -> engineInit
    void engineInit(java.security.SecureRandom) -> engineInit
    void engineInit(int,java.security.SecureRandom) -> engineInit
    javax.crypto.SecretKey engineGenerateKey() -> engineGenerateKey
org.bouncycastle.jcajce.provider.symmetric.util.BaseMac -> org.bouncycastle.jcajce.provider.symmetric.util.BaseMac:
    org.bouncycastle.crypto.Mac macEngine -> macEngine
    int pbeType -> pbeType
    int pbeHash -> pbeHash
    int keySize -> keySize
    void engineInit(java.security.Key,java.security.spec.AlgorithmParameterSpec) -> engineInit
    int engineGetMacLength() -> engineGetMacLength
    void engineReset() -> engineReset
    void engineUpdate(byte) -> engineUpdate
    void engineUpdate(byte[],int,int) -> engineUpdate
    byte[] engineDoFinal() -> engineDoFinal
    java.util.Hashtable copyMap(java.util.Map) -> copyMap
org.bouncycastle.jcajce.provider.symmetric.util.BaseSecretKeyFactory -> org.bouncycastle.jcajce.provider.symmetric.util.BaseSecretKeyFactory:
    java.lang.String algName -> algName
    org.bouncycastle.asn1.ASN1ObjectIdentifier algOid -> algOid
    javax.crypto.SecretKey engineGenerateSecret(java.security.spec.KeySpec) -> engineGenerateSecret
    java.security.spec.KeySpec engineGetKeySpec(javax.crypto.SecretKey,java.lang.Class) -> engineGetKeySpec
    javax.crypto.SecretKey engineTranslateKey(javax.crypto.SecretKey) -> engineTranslateKey
org.bouncycastle.jcajce.provider.symmetric.util.BaseStreamCipher -> org.bouncycastle.jcajce.provider.symmetric.util.BaseStreamCipher:
    java.lang.Class[] availableSpecs -> availableSpecs
    org.bouncycastle.crypto.StreamCipher cipher -> cipher
    org.bouncycastle.crypto.params.ParametersWithIV ivParam -> ivParam
    int ivLength -> ivLength
    javax.crypto.spec.PBEParameterSpec pbeSpec -> pbeSpec
    java.lang.String pbeAlgorithm -> pbeAlgorithm
    int engineGetBlockSize() -> engineGetBlockSize
    byte[] engineGetIV() -> engineGetIV
    int engineGetKeySize(java.security.Key) -> engineGetKeySize
    int engineGetOutputSize(int) -> engineGetOutputSize
    java.security.AlgorithmParameters engineGetParameters() -> engineGetParameters
    void engineSetMode(java.lang.String) -> engineSetMode
    void engineSetPadding(java.lang.String) -> engineSetPadding
    void engineInit(int,java.security.Key,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom) -> engineInit
    void engineInit(int,java.security.Key,java.security.AlgorithmParameters,java.security.SecureRandom) -> engineInit
    void engineInit(int,java.security.Key,java.security.SecureRandom) -> engineInit
    byte[] engineUpdate(byte[],int,int) -> engineUpdate
    int engineUpdate(byte[],int,int,byte[],int) -> engineUpdate
    byte[] engineDoFinal(byte[],int,int) -> engineDoFinal
    int engineDoFinal(byte[],int,int,byte[],int) -> engineDoFinal
org.bouncycastle.jcajce.provider.symmetric.util.BaseWrapCipher -> org.bouncycastle.jcajce.provider.symmetric.util.BaseWrapCipher:
    java.lang.Class[] availableSpecs -> availableSpecs
    int pbeType -> pbeType
    int pbeHash -> pbeHash
    int pbeKeySize -> pbeKeySize
    int pbeIvSize -> pbeIvSize
    java.security.AlgorithmParameters engineParams -> engineParams
    org.bouncycastle.crypto.Wrapper wrapEngine -> wrapEngine
    int ivSize -> ivSize
    byte[] iv -> iv
    int engineGetBlockSize() -> engineGetBlockSize
    byte[] engineGetIV() -> engineGetIV
    int engineGetKeySize(java.security.Key) -> engineGetKeySize
    int engineGetOutputSize(int) -> engineGetOutputSize
    java.security.AlgorithmParameters engineGetParameters() -> engineGetParameters
    void engineSetMode(java.lang.String) -> engineSetMode
    void engineSetPadding(java.lang.String) -> engineSetPadding
    void engineInit(int,java.security.Key,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom) -> engineInit
    void engineInit(int,java.security.Key,java.security.AlgorithmParameters,java.security.SecureRandom) -> engineInit
    void engineInit(int,java.security.Key,java.security.SecureRandom) -> engineInit
    byte[] engineUpdate(byte[],int,int) -> engineUpdate
    int engineUpdate(byte[],int,int,byte[],int) -> engineUpdate
    byte[] engineDoFinal(byte[],int,int) -> engineDoFinal
    int engineDoFinal(byte[],int,int,byte[],int) -> engineDoFinal
    byte[] engineWrap(java.security.Key) -> engineWrap
    java.security.Key engineUnwrap(byte[],java.lang.String,int) -> engineUnwrap
org.bouncycastle.jcajce.provider.symmetric.util.BlockCipherProvider -> org.bouncycastle.jcajce.provider.symmetric.util.BlockCipherProvider:
    org.bouncycastle.crypto.BlockCipher get() -> get
org.bouncycastle.jcajce.provider.symmetric.util.IvAlgorithmParameters -> org.bouncycastle.jcajce.provider.symmetric.util.IvAlgorithmParameters:
    byte[] iv -> iv
    byte[] engineGetEncoded() -> engineGetEncoded
    byte[] engineGetEncoded(java.lang.String) -> engineGetEncoded
    java.security.spec.AlgorithmParameterSpec localEngineGetParameterSpec(java.lang.Class) -> localEngineGetParameterSpec
    void engineInit(java.security.spec.AlgorithmParameterSpec) -> engineInit
    void engineInit(byte[]) -> engineInit
    void engineInit(byte[],java.lang.String) -> engineInit
    java.lang.String engineToString() -> engineToString
org.bouncycastle.jcajce.provider.symmetric.util.PBE -> org.bouncycastle.jcajce.provider.symmetric.util.PBE:
    int MD5 -> MD5
    int SHA1 -> SHA1
    int RIPEMD160 -> RIPEMD160
    int TIGER -> TIGER
    int SHA256 -> SHA256
    int MD2 -> MD2
    int GOST3411 -> GOST3411
    int PKCS5S1 -> PKCS5S1
    int PKCS5S2 -> PKCS5S2
    int PKCS12 -> PKCS12
    int OPENSSL -> OPENSSL
    int PKCS5S1_UTF8 -> PKCS5S1_UTF8
    int PKCS5S2_UTF8 -> PKCS5S2_UTF8
org.bouncycastle.jcajce.provider.symmetric.util.PBE$Util -> org.bouncycastle.jcajce.provider.symmetric.util.PBE$Util:
    org.bouncycastle.crypto.PBEParametersGenerator makePBEGenerator(int,int) -> makePBEGenerator
    org.bouncycastle.crypto.CipherParameters makePBEParameters(org.bouncycastle.jcajce.provider.symmetric.util.BCPBEKey,java.security.spec.AlgorithmParameterSpec,java.lang.String) -> makePBEParameters
    org.bouncycastle.crypto.CipherParameters makePBEMacParameters(org.bouncycastle.jcajce.provider.symmetric.util.BCPBEKey,java.security.spec.AlgorithmParameterSpec) -> makePBEMacParameters
    org.bouncycastle.crypto.CipherParameters makePBEParameters(javax.crypto.spec.PBEKeySpec,int,int,int,int) -> makePBEParameters
    org.bouncycastle.crypto.CipherParameters makePBEMacParameters(javax.crypto.spec.PBEKeySpec,int,int,int) -> makePBEMacParameters
    byte[] convertPassword(int,javax.crypto.spec.PBEKeySpec) -> convertPassword
org.bouncycastle.jcajce.provider.symmetric.util.PBESecretKeyFactory -> org.bouncycastle.jcajce.provider.symmetric.util.PBESecretKeyFactory:
    boolean forCipher -> forCipher
    int scheme -> scheme
    int digest -> digest
    int keySize -> keySize
    int ivSize -> ivSize
    javax.crypto.SecretKey engineGenerateSecret(java.security.spec.KeySpec) -> engineGenerateSecret
org.bouncycastle.jcajce.provider.util.AlgorithmProvider -> org.bouncycastle.jcajce.provider.util.AlgorithmProvider:
    void configure(org.bouncycastle.jcajce.provider.config.ConfigurableProvider) -> configure
org.bouncycastle.jcajce.provider.util.AsymmetricAlgorithmProvider -> org.bouncycastle.jcajce.provider.util.AsymmetricAlgorithmProvider:
    void addSignatureAlgorithm(org.bouncycastle.jcajce.provider.config.ConfigurableProvider,java.lang.String,java.lang.String,java.lang.String,org.bouncycastle.asn1.ASN1ObjectIdentifier) -> addSignatureAlgorithm
    void registerOid(org.bouncycastle.jcajce.provider.config.ConfigurableProvider,org.bouncycastle.asn1.ASN1ObjectIdentifier,java.lang.String,org.bouncycastle.jcajce.provider.util.AsymmetricKeyInfoConverter) -> registerOid
    void registerOidAlgorithmParameters(org.bouncycastle.jcajce.provider.config.ConfigurableProvider,org.bouncycastle.asn1.ASN1ObjectIdentifier,java.lang.String) -> registerOidAlgorithmParameters
org.bouncycastle.jcajce.provider.util.AsymmetricKeyInfoConverter -> org.bouncycastle.jcajce.provider.util.AsymmetricKeyInfoConverter:
    java.security.PrivateKey generatePrivate(org.bouncycastle.asn1.pkcs.PrivateKeyInfo) -> generatePrivate
    java.security.PublicKey generatePublic(org.bouncycastle.asn1.x509.SubjectPublicKeyInfo) -> generatePublic
org.bouncycastle.jcajce.provider.util.DigestFactory -> org.bouncycastle.jcajce.provider.util.DigestFactory:
    java.util.Set md5 -> md5
    java.util.Set sha1 -> sha1
    java.util.Set sha224 -> sha224
    java.util.Set sha256 -> sha256
    java.util.Set sha384 -> sha384
    java.util.Set sha512 -> sha512
    java.util.Map oids -> oids
    org.bouncycastle.crypto.Digest getDigest(java.lang.String) -> getDigest
    boolean isSameDigest(java.lang.String,java.lang.String) -> isSameDigest
    org.bouncycastle.asn1.ASN1ObjectIdentifier getOID(java.lang.String) -> getOID
org.bouncycastle.jcajce.provider.util.SecretKeyUtil -> org.bouncycastle.jcajce.provider.util.SecretKeyUtil:
    java.util.Map keySizes -> keySizes
    int getKeySize(org.bouncycastle.asn1.ASN1ObjectIdentifier) -> getKeySize
org.bouncycastle.jcajce.spec.GOST28147ParameterSpec -> org.bouncycastle.jcajce.spec.GOST28147ParameterSpec:
    byte[] iv -> iv
    byte[] sBox -> sBox
    java.util.Map oidMappings -> oidMappings
    byte[] getSbox() -> getSbox
    byte[] getIV() -> getIV
    java.lang.String getName(org.bouncycastle.asn1.ASN1ObjectIdentifier) -> getName
org.bouncycastle.jcajce.spec.PBKDF2KeySpec -> org.bouncycastle.jcajce.spec.PBKDF2KeySpec:
    org.bouncycastle.asn1.x509.AlgorithmIdentifier prf -> prf
    org.bouncycastle.asn1.x509.AlgorithmIdentifier getPrf() -> getPrf
org.bouncycastle.jcajce.spec.RepeatedSecretKeySpec -> org.bouncycastle.jcajce.spec.RepeatedSecretKeySpec:
    java.lang.String algorithm -> algorithm
    java.lang.String getAlgorithm() -> getAlgorithm
    java.lang.String getFormat() -> getFormat
    byte[] getEncoded() -> getEncoded
org.bouncycastle.jcajce.spec.SkeinParameterSpec -> org.bouncycastle.jcajce.spec.SkeinParameterSpec:
    int PARAM_TYPE_KEY -> PARAM_TYPE_KEY
    int PARAM_TYPE_CONFIG -> PARAM_TYPE_CONFIG
    int PARAM_TYPE_PERSONALISATION -> PARAM_TYPE_PERSONALISATION
    int PARAM_TYPE_PUBLIC_KEY -> PARAM_TYPE_PUBLIC_KEY
    int PARAM_TYPE_KEY_IDENTIFIER -> PARAM_TYPE_KEY_IDENTIFIER
    int PARAM_TYPE_NONCE -> PARAM_TYPE_NONCE
    int PARAM_TYPE_MESSAGE -> PARAM_TYPE_MESSAGE
    int PARAM_TYPE_OUTPUT -> PARAM_TYPE_OUTPUT
    java.util.Map parameters -> parameters
    java.util.Map getParameters() -> getParameters
    byte[] getKey() -> getKey
    byte[] getPersonalisation() -> getPersonalisation
    byte[] getPublicKey() -> getPublicKey
    byte[] getKeyIdentifier() -> getKeyIdentifier
    byte[] getNonce() -> getNonce
    java.util.Map access$000(org.bouncycastle.jcajce.spec.SkeinParameterSpec) -> access$000
org.bouncycastle.jcajce.spec.SkeinParameterSpec$1 -> org.bouncycastle.jcajce.spec.SkeinParameterSpec$1:
org.bouncycastle.jcajce.spec.SkeinParameterSpec$Builder -> org.bouncycastle.jcajce.spec.SkeinParameterSpec$Builder:
    java.util.Map parameters -> parameters
    org.bouncycastle.jcajce.spec.SkeinParameterSpec$Builder set(int,byte[]) -> set
    org.bouncycastle.jcajce.spec.SkeinParameterSpec$Builder setKey(byte[]) -> setKey
    org.bouncycastle.jcajce.spec.SkeinParameterSpec$Builder setPersonalisation(byte[]) -> setPersonalisation
    org.bouncycastle.jcajce.spec.SkeinParameterSpec$Builder setPersonalisation(java.util.Date,java.lang.String,java.lang.String) -> setPersonalisation
    org.bouncycastle.jcajce.spec.SkeinParameterSpec$Builder setPersonalisation(java.util.Date,java.util.Locale,java.lang.String,java.lang.String) -> setPersonalisation
    org.bouncycastle.jcajce.spec.SkeinParameterSpec$Builder setPublicKey(byte[]) -> setPublicKey
    org.bouncycastle.jcajce.spec.SkeinParameterSpec$Builder setKeyIdentifier(byte[]) -> setKeyIdentifier
    org.bouncycastle.jcajce.spec.SkeinParameterSpec$Builder setNonce(byte[]) -> setNonce
    org.bouncycastle.jcajce.spec.SkeinParameterSpec build() -> build
org.bouncycastle.jcajce.util.DefaultJcaJceHelper -> org.bouncycastle.jcajce.util.DefaultJcaJceHelper:
    javax.crypto.Cipher createCipher(java.lang.String) -> createCipher
    javax.crypto.Mac createMac(java.lang.String) -> createMac
    javax.crypto.KeyAgreement createKeyAgreement(java.lang.String) -> createKeyAgreement
    java.security.AlgorithmParameterGenerator createAlgorithmParameterGenerator(java.lang.String) -> createAlgorithmParameterGenerator
    java.security.AlgorithmParameters createAlgorithmParameters(java.lang.String) -> createAlgorithmParameters
    javax.crypto.KeyGenerator createKeyGenerator(java.lang.String) -> createKeyGenerator
    java.security.KeyFactory createKeyFactory(java.lang.String) -> createKeyFactory
    javax.crypto.SecretKeyFactory createSecretKeyFactory(java.lang.String) -> createSecretKeyFactory
    java.security.KeyPairGenerator createKeyPairGenerator(java.lang.String) -> createKeyPairGenerator
    java.security.MessageDigest createDigest(java.lang.String) -> createDigest
    java.security.Signature createSignature(java.lang.String) -> createSignature
    java.security.cert.CertificateFactory createCertificateFactory(java.lang.String) -> createCertificateFactory
org.bouncycastle.jcajce.util.JcaJceHelper -> org.bouncycastle.jcajce.util.JcaJceHelper:
    javax.crypto.Cipher createCipher(java.lang.String) -> createCipher
    javax.crypto.Mac createMac(java.lang.String) -> createMac
    javax.crypto.KeyAgreement createKeyAgreement(java.lang.String) -> createKeyAgreement
    java.security.AlgorithmParameterGenerator createAlgorithmParameterGenerator(java.lang.String) -> createAlgorithmParameterGenerator
    java.security.AlgorithmParameters createAlgorithmParameters(java.lang.String) -> createAlgorithmParameters
    javax.crypto.KeyGenerator createKeyGenerator(java.lang.String) -> createKeyGenerator
    java.security.KeyFactory createKeyFactory(java.lang.String) -> createKeyFactory
    javax.crypto.SecretKeyFactory createSecretKeyFactory(java.lang.String) -> createSecretKeyFactory
    java.security.KeyPairGenerator createKeyPairGenerator(java.lang.String) -> createKeyPairGenerator
    java.security.MessageDigest createDigest(java.lang.String) -> createDigest
    java.security.Signature createSignature(java.lang.String) -> createSignature
    java.security.cert.CertificateFactory createCertificateFactory(java.lang.String) -> createCertificateFactory
org.bouncycastle.jcajce.util.JcaJceUtils -> org.bouncycastle.jcajce.util.JcaJceUtils:
    org.bouncycastle.asn1.ASN1Encodable extractParameters(java.security.AlgorithmParameters) -> extractParameters
    void loadParameters(java.security.AlgorithmParameters,org.bouncycastle.asn1.ASN1Encodable) -> loadParameters
    java.lang.String getDigestAlgName(org.bouncycastle.asn1.ASN1ObjectIdentifier) -> getDigestAlgName
org.bouncycastle.jcajce.util.NamedJcaJceHelper -> org.bouncycastle.jcajce.util.NamedJcaJceHelper:
    java.lang.String providerName -> providerName
    javax.crypto.Cipher createCipher(java.lang.String) -> createCipher
    javax.crypto.Mac createMac(java.lang.String) -> createMac
    javax.crypto.KeyAgreement createKeyAgreement(java.lang.String) -> createKeyAgreement
    java.security.AlgorithmParameterGenerator createAlgorithmParameterGenerator(java.lang.String) -> createAlgorithmParameterGenerator
    java.security.AlgorithmParameters createAlgorithmParameters(java.lang.String) -> createAlgorithmParameters
    javax.crypto.KeyGenerator createKeyGenerator(java.lang.String) -> createKeyGenerator
    java.security.KeyFactory createKeyFactory(java.lang.String) -> createKeyFactory
    javax.crypto.SecretKeyFactory createSecretKeyFactory(java.lang.String) -> createSecretKeyFactory
    java.security.KeyPairGenerator createKeyPairGenerator(java.lang.String) -> createKeyPairGenerator
    java.security.MessageDigest createDigest(java.lang.String) -> createDigest
    java.security.Signature createSignature(java.lang.String) -> createSignature
    java.security.cert.CertificateFactory createCertificateFactory(java.lang.String) -> createCertificateFactory
org.bouncycastle.jcajce.util.ProviderJcaJceHelper -> org.bouncycastle.jcajce.util.ProviderJcaJceHelper:
    java.security.Provider provider -> provider
    javax.crypto.Cipher createCipher(java.lang.String) -> createCipher
    javax.crypto.Mac createMac(java.lang.String) -> createMac
    javax.crypto.KeyAgreement createKeyAgreement(java.lang.String) -> createKeyAgreement
    java.security.AlgorithmParameterGenerator createAlgorithmParameterGenerator(java.lang.String) -> createAlgorithmParameterGenerator
    java.security.AlgorithmParameters createAlgorithmParameters(java.lang.String) -> createAlgorithmParameters
    javax.crypto.KeyGenerator createKeyGenerator(java.lang.String) -> createKeyGenerator
    java.security.KeyFactory createKeyFactory(java.lang.String) -> createKeyFactory
    javax.crypto.SecretKeyFactory createSecretKeyFactory(java.lang.String) -> createSecretKeyFactory
    java.security.KeyPairGenerator createKeyPairGenerator(java.lang.String) -> createKeyPairGenerator
    java.security.MessageDigest createDigest(java.lang.String) -> createDigest
    java.security.Signature createSignature(java.lang.String) -> createSignature
    java.security.cert.CertificateFactory createCertificateFactory(java.lang.String) -> createCertificateFactory
org.bouncycastle.jce.ECGOST3410NamedCurveTable -> org.bouncycastle.jce.ECGOST3410NamedCurveTable:
    org.bouncycastle.jce.spec.ECNamedCurveParameterSpec getParameterSpec(java.lang.String) -> getParameterSpec
    java.util.Enumeration getNames() -> getNames
org.bouncycastle.jce.ECKeyUtil -> org.bouncycastle.jce.ECKeyUtil:
    java.security.PublicKey publicToExplicitParameters(java.security.PublicKey,java.lang.String) -> publicToExplicitParameters
    java.security.PublicKey publicToExplicitParameters(java.security.PublicKey,java.security.Provider) -> publicToExplicitParameters
    java.security.PrivateKey privateToExplicitParameters(java.security.PrivateKey,java.lang.String) -> privateToExplicitParameters
    java.security.PrivateKey privateToExplicitParameters(java.security.PrivateKey,java.security.Provider) -> privateToExplicitParameters
org.bouncycastle.jce.ECKeyUtil$UnexpectedException -> org.bouncycastle.jce.ECKeyUtil$UnexpectedException:
    java.lang.Throwable cause -> cause
    java.lang.Throwable getCause() -> getCause
org.bouncycastle.jce.ECNamedCurveTable -> org.bouncycastle.jce.ECNamedCurveTable:
    org.bouncycastle.jce.spec.ECNamedCurveParameterSpec getParameterSpec(java.lang.String) -> getParameterSpec
    java.util.Enumeration getNames() -> getNames
org.bouncycastle.jce.ECPointUtil -> org.bouncycastle.jce.ECPointUtil:
    java.security.spec.ECPoint decodePoint(java.security.spec.EllipticCurve,byte[]) -> decodePoint
org.bouncycastle.jce.MultiCertStoreParameters -> org.bouncycastle.jce.MultiCertStoreParameters:
    java.util.Collection certStores -> certStores
    boolean searchAllStores -> searchAllStores
    java.util.Collection getCertStores() -> getCertStores
    boolean getSearchAllStores() -> getSearchAllStores
    java.lang.Object clone() -> clone
org.bouncycastle.jce.PKCS10CertificationRequest -> org.bouncycastle.jce.PKCS10CertificationRequest:
    java.util.Hashtable algorithms -> algorithms
    java.util.Hashtable params -> params
    java.util.Hashtable keyAlgorithms -> keyAlgorithms
    java.util.Hashtable oids -> oids
    java.util.Set noParams -> noParams
    org.bouncycastle.asn1.pkcs.RSASSAPSSparams creatPSSParams(org.bouncycastle.asn1.x509.AlgorithmIdentifier,int) -> creatPSSParams
    org.bouncycastle.asn1.ASN1Sequence toDERSequence(byte[]) -> toDERSequence
    org.bouncycastle.asn1.x509.X509Name convertName(javax.security.auth.x500.X500Principal) -> convertName
    java.security.PublicKey getPublicKey() -> getPublicKey
    java.security.PublicKey getPublicKey(java.lang.String) -> getPublicKey
    boolean verify() -> verify
    boolean verify(java.lang.String) -> verify
    boolean verify(java.security.PublicKey,java.lang.String) -> verify
    byte[] getEncoded() -> getEncoded
    void setSignatureParameters(java.security.Signature,org.bouncycastle.asn1.ASN1Encodable) -> setSignatureParameters
    java.lang.String getSignatureName(org.bouncycastle.asn1.x509.AlgorithmIdentifier) -> getSignatureName
    java.lang.String getDigestAlgName(org.bouncycastle.asn1.ASN1ObjectIdentifier) -> getDigestAlgName
org.bouncycastle.jce.PKCS12Util -> org.bouncycastle.jce.PKCS12Util:
    byte[] convertToDefiniteLength(byte[]) -> convertToDefiniteLength
    byte[] convertToDefiniteLength(byte[],char[],java.lang.String) -> convertToDefiniteLength
    byte[] calculatePbeMac(org.bouncycastle.asn1.ASN1ObjectIdentifier,byte[],int,char[],byte[],java.lang.String) -> calculatePbeMac
org.bouncycastle.jce.PrincipalUtil -> org.bouncycastle.jce.PrincipalUtil:
    org.bouncycastle.jce.X509Principal getIssuerX509Principal(java.security.cert.X509Certificate) -> getIssuerX509Principal
    org.bouncycastle.jce.X509Principal getSubjectX509Principal(java.security.cert.X509Certificate) -> getSubjectX509Principal
    org.bouncycastle.jce.X509Principal getIssuerX509Principal(java.security.cert.X509CRL) -> getIssuerX509Principal
org.bouncycastle.jce.X509KeyUsage -> org.bouncycastle.jce.X509KeyUsage:
    int digitalSignature -> digitalSignature
    int nonRepudiation -> nonRepudiation
    int keyEncipherment -> keyEncipherment
    int dataEncipherment -> dataEncipherment
    int keyAgreement -> keyAgreement
    int keyCertSign -> keyCertSign
    int cRLSign -> cRLSign
    int encipherOnly -> encipherOnly
    int decipherOnly -> decipherOnly
    int usage -> usage
    org.bouncycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
org.bouncycastle.jce.X509LDAPCertStoreParameters -> org.bouncycastle.jce.X509LDAPCertStoreParameters:
    java.lang.String ldapURL -> ldapURL
    java.lang.String baseDN -> baseDN
    java.lang.String userCertificateAttribute -> userCertificateAttribute
    java.lang.String cACertificateAttribute -> cACertificateAttribute
    java.lang.String crossCertificateAttribute -> crossCertificateAttribute
    java.lang.String certificateRevocationListAttribute -> certificateRevocationListAttribute
    java.lang.String deltaRevocationListAttribute -> deltaRevocationListAttribute
    java.lang.String authorityRevocationListAttribute -> authorityRevocationListAttribute
    java.lang.String attributeCertificateAttributeAttribute -> attributeCertificateAttributeAttribute
    java.lang.String aACertificateAttribute -> aACertificateAttribute
    java.lang.String attributeDescriptorCertificateAttribute -> attributeDescriptorCertificateAttribute
    java.lang.String attributeCertificateRevocationListAttribute -> attributeCertificateRevocationListAttribute
    java.lang.String attributeAuthorityRevocationListAttribute -> attributeAuthorityRevocationListAttribute
    java.lang.String ldapUserCertificateAttributeName -> ldapUserCertificateAttributeName
    java.lang.String ldapCACertificateAttributeName -> ldapCACertificateAttributeName
    java.lang.String ldapCrossCertificateAttributeName -> ldapCrossCertificateAttributeName
    java.lang.String ldapCertificateRevocationListAttributeName -> ldapCertificateRevocationListAttributeName
    java.lang.String ldapDeltaRevocationListAttributeName -> ldapDeltaRevocationListAttributeName
    java.lang.String ldapAuthorityRevocationListAttributeName -> ldapAuthorityRevocationListAttributeName
    java.lang.String ldapAttributeCertificateAttributeAttributeName -> ldapAttributeCertificateAttributeAttributeName
    java.lang.String ldapAACertificateAttributeName -> ldapAACertificateAttributeName
    java.lang.String ldapAttributeDescriptorCertificateAttributeName -> ldapAttributeDescriptorCertificateAttributeName
    java.lang.String ldapAttributeCertificateRevocationListAttributeName -> ldapAttributeCertificateRevocationListAttributeName
    java.lang.String ldapAttributeAuthorityRevocationListAttributeName -> ldapAttributeAuthorityRevocationListAttributeName
    java.lang.String userCertificateSubjectAttributeName -> userCertificateSubjectAttributeName
    java.lang.String cACertificateSubjectAttributeName -> cACertificateSubjectAttributeName
    java.lang.String crossCertificateSubjectAttributeName -> crossCertificateSubjectAttributeName
    java.lang.String certificateRevocationListIssuerAttributeName -> certificateRevocationListIssuerAttributeName
    java.lang.String deltaRevocationListIssuerAttributeName -> deltaRevocationListIssuerAttributeName
    java.lang.String authorityRevocationListIssuerAttributeName -> authorityRevocationListIssuerAttributeName
    java.lang.String attributeCertificateAttributeSubjectAttributeName -> attributeCertificateAttributeSubjectAttributeName
    java.lang.String aACertificateSubjectAttributeName -> aACertificateSubjectAttributeName
    java.lang.String attributeDescriptorCertificateSubjectAttributeName -> attributeDescriptorCertificateSubjectAttributeName
    java.lang.String attributeCertificateRevocationListIssuerAttributeName -> attributeCertificateRevocationListIssuerAttributeName
    java.lang.String attributeAuthorityRevocationListIssuerAttributeName -> attributeAuthorityRevocationListIssuerAttributeName
    java.lang.String searchForSerialNumberIn -> searchForSerialNumberIn
    java.lang.Object clone() -> clone
    boolean equal(java.lang.Object) -> equal
    boolean checkField(java.lang.Object,java.lang.Object) -> checkField
    int hashCode() -> hashCode
    int addHashCode(int,java.lang.Object) -> addHashCode
    java.lang.String getAACertificateAttribute() -> getAACertificateAttribute
    java.lang.String getAACertificateSubjectAttributeName() -> getAACertificateSubjectAttributeName
    java.lang.String getAttributeAuthorityRevocationListAttribute() -> getAttributeAuthorityRevocationListAttribute
    java.lang.String getAttributeAuthorityRevocationListIssuerAttributeName() -> getAttributeAuthorityRevocationListIssuerAttributeName
    java.lang.String getAttributeCertificateAttributeAttribute() -> getAttributeCertificateAttributeAttribute
    java.lang.String getAttributeCertificateAttributeSubjectAttributeName() -> getAttributeCertificateAttributeSubjectAttributeName
    java.lang.String getAttributeCertificateRevocationListAttribute() -> getAttributeCertificateRevocationListAttribute
    java.lang.String getAttributeCertificateRevocationListIssuerAttributeName() -> getAttributeCertificateRevocationListIssuerAttributeName
    java.lang.String getAttributeDescriptorCertificateAttribute() -> getAttributeDescriptorCertificateAttribute
    java.lang.String getAttributeDescriptorCertificateSubjectAttributeName() -> getAttributeDescriptorCertificateSubjectAttributeName
    java.lang.String getAuthorityRevocationListAttribute() -> getAuthorityRevocationListAttribute
    java.lang.String getAuthorityRevocationListIssuerAttributeName() -> getAuthorityRevocationListIssuerAttributeName
    java.lang.String getBaseDN() -> getBaseDN
    java.lang.String getCACertificateAttribute() -> getCACertificateAttribute
    java.lang.String getCACertificateSubjectAttributeName() -> getCACertificateSubjectAttributeName
    java.lang.String getCertificateRevocationListAttribute() -> getCertificateRevocationListAttribute
    java.lang.String getCertificateRevocationListIssuerAttributeName() -> getCertificateRevocationListIssuerAttributeName
    java.lang.String getCrossCertificateAttribute() -> getCrossCertificateAttribute
    java.lang.String getCrossCertificateSubjectAttributeName() -> getCrossCertificateSubjectAttributeName
    java.lang.String getDeltaRevocationListAttribute() -> getDeltaRevocationListAttribute
    java.lang.String getDeltaRevocationListIssuerAttributeName() -> getDeltaRevocationListIssuerAttributeName
    java.lang.String getLdapAACertificateAttributeName() -> getLdapAACertificateAttributeName
    java.lang.String getLdapAttributeAuthorityRevocationListAttributeName() -> getLdapAttributeAuthorityRevocationListAttributeName
    java.lang.String getLdapAttributeCertificateAttributeAttributeName() -> getLdapAttributeCertificateAttributeAttributeName
    java.lang.String getLdapAttributeCertificateRevocationListAttributeName() -> getLdapAttributeCertificateRevocationListAttributeName
    java.lang.String getLdapAttributeDescriptorCertificateAttributeName() -> getLdapAttributeDescriptorCertificateAttributeName
    java.lang.String getLdapAuthorityRevocationListAttributeName() -> getLdapAuthorityRevocationListAttributeName
    java.lang.String getLdapCACertificateAttributeName() -> getLdapCACertificateAttributeName
    java.lang.String getLdapCertificateRevocationListAttributeName() -> getLdapCertificateRevocationListAttributeName
    java.lang.String getLdapCrossCertificateAttributeName() -> getLdapCrossCertificateAttributeName
    java.lang.String getLdapDeltaRevocationListAttributeName() -> getLdapDeltaRevocationListAttributeName
    java.lang.String getLdapURL() -> getLdapURL
    java.lang.String getLdapUserCertificateAttributeName() -> getLdapUserCertificateAttributeName
    java.lang.String getSearchForSerialNumberIn() -> getSearchForSerialNumberIn
    java.lang.String getUserCertificateAttribute() -> getUserCertificateAttribute
    java.lang.String getUserCertificateSubjectAttributeName() -> getUserCertificateSubjectAttributeName
    org.bouncycastle.jce.X509LDAPCertStoreParameters getInstance(java.security.cert.LDAPCertStoreParameters) -> getInstance
org.bouncycastle.jce.X509LDAPCertStoreParameters$1 -> org.bouncycastle.jce.X509LDAPCertStoreParameters$1:
org.bouncycastle.jce.X509LDAPCertStoreParameters$Builder -> org.bouncycastle.jce.X509LDAPCertStoreParameters$Builder:
    java.lang.String ldapURL -> ldapURL
    java.lang.String baseDN -> baseDN
    java.lang.String userCertificateAttribute -> userCertificateAttribute
    java.lang.String cACertificateAttribute -> cACertificateAttribute
    java.lang.String crossCertificateAttribute -> crossCertificateAttribute
    java.lang.String certificateRevocationListAttribute -> certificateRevocationListAttribute
    java.lang.String deltaRevocationListAttribute -> deltaRevocationListAttribute
    java.lang.String authorityRevocationListAttribute -> authorityRevocationListAttribute
    java.lang.String attributeCertificateAttributeAttribute -> attributeCertificateAttributeAttribute
    java.lang.String aACertificateAttribute -> aACertificateAttribute
    java.lang.String attributeDescriptorCertificateAttribute -> attributeDescriptorCertificateAttribute
    java.lang.String attributeCertificateRevocationListAttribute -> attributeCertificateRevocationListAttribute
    java.lang.String attributeAuthorityRevocationListAttribute -> attributeAuthorityRevocationListAttribute
    java.lang.String ldapUserCertificateAttributeName -> ldapUserCertificateAttributeName
    java.lang.String ldapCACertificateAttributeName -> ldapCACertificateAttributeName
    java.lang.String ldapCrossCertificateAttributeName -> ldapCrossCertificateAttributeName
    java.lang.String ldapCertificateRevocationListAttributeName -> ldapCertificateRevocationListAttributeName
    java.lang.String ldapDeltaRevocationListAttributeName -> ldapDeltaRevocationListAttributeName
    java.lang.String ldapAuthorityRevocationListAttributeName -> ldapAuthorityRevocationListAttributeName
    java.lang.String ldapAttributeCertificateAttributeAttributeName -> ldapAttributeCertificateAttributeAttributeName
    java.lang.String ldapAACertificateAttributeName -> ldapAACertificateAttributeName
    java.lang.String ldapAttributeDescriptorCertificateAttributeName -> ldapAttributeDescriptorCertificateAttributeName
    java.lang.String ldapAttributeCertificateRevocationListAttributeName -> ldapAttributeCertificateRevocationListAttributeName
    java.lang.String ldapAttributeAuthorityRevocationListAttributeName -> ldapAttributeAuthorityRevocationListAttributeName
    java.lang.String userCertificateSubjectAttributeName -> userCertificateSubjectAttributeName
    java.lang.String cACertificateSubjectAttributeName -> cACertificateSubjectAttributeName
    java.lang.String crossCertificateSubjectAttributeName -> crossCertificateSubjectAttributeName
    java.lang.String certificateRevocationListIssuerAttributeName -> certificateRevocationListIssuerAttributeName
    java.lang.String deltaRevocationListIssuerAttributeName -> deltaRevocationListIssuerAttributeName
    java.lang.String authorityRevocationListIssuerAttributeName -> authorityRevocationListIssuerAttributeName
    java.lang.String attributeCertificateAttributeSubjectAttributeName -> attributeCertificateAttributeSubjectAttributeName
    java.lang.String aACertificateSubjectAttributeName -> aACertificateSubjectAttributeName
    java.lang.String attributeDescriptorCertificateSubjectAttributeName -> attributeDescriptorCertificateSubjectAttributeName
    java.lang.String attributeCertificateRevocationListIssuerAttributeName -> attributeCertificateRevocationListIssuerAttributeName
    java.lang.String attributeAuthorityRevocationListIssuerAttributeName -> attributeAuthorityRevocationListIssuerAttributeName
    java.lang.String searchForSerialNumberIn -> searchForSerialNumberIn
    org.bouncycastle.jce.X509LDAPCertStoreParameters$Builder setUserCertificateAttribute(java.lang.String) -> setUserCertificateAttribute
    org.bouncycastle.jce.X509LDAPCertStoreParameters$Builder setCACertificateAttribute(java.lang.String) -> setCACertificateAttribute
    org.bouncycastle.jce.X509LDAPCertStoreParameters$Builder setCrossCertificateAttribute(java.lang.String) -> setCrossCertificateAttribute
    org.bouncycastle.jce.X509LDAPCertStoreParameters$Builder setCertificateRevocationListAttribute(java.lang.String) -> setCertificateRevocationListAttribute
    org.bouncycastle.jce.X509LDAPCertStoreParameters$Builder setDeltaRevocationListAttribute(java.lang.String) -> setDeltaRevocationListAttribute
    org.bouncycastle.jce.X509LDAPCertStoreParameters$Builder setAuthorityRevocationListAttribute(java.lang.String) -> setAuthorityRevocationListAttribute
    org.bouncycastle.jce.X509LDAPCertStoreParameters$Builder setAttributeCertificateAttributeAttribute(java.lang.String) -> setAttributeCertificateAttributeAttribute
    org.bouncycastle.jce.X509LDAPCertStoreParameters$Builder setAACertificateAttribute(java.lang.String) -> setAACertificateAttribute
    org.bouncycastle.jce.X509LDAPCertStoreParameters$Builder setAttributeDescriptorCertificateAttribute(java.lang.String) -> setAttributeDescriptorCertificateAttribute
    org.bouncycastle.jce.X509LDAPCertStoreParameters$Builder setAttributeCertificateRevocationListAttribute(java.lang.String) -> setAttributeCertificateRevocationListAttribute
    org.bouncycastle.jce.X509LDAPCertStoreParameters$Builder setAttributeAuthorityRevocationListAttribute(java.lang.String) -> setAttributeAuthorityRevocationListAttribute
    org.bouncycastle.jce.X509LDAPCertStoreParameters$Builder setLdapUserCertificateAttributeName(java.lang.String) -> setLdapUserCertificateAttributeName
    org.bouncycastle.jce.X509LDAPCertStoreParameters$Builder setLdapCACertificateAttributeName(java.lang.String) -> setLdapCACertificateAttributeName
    org.bouncycastle.jce.X509LDAPCertStoreParameters$Builder setLdapCrossCertificateAttributeName(java.lang.String) -> setLdapCrossCertificateAttributeName
    org.bouncycastle.jce.X509LDAPCertStoreParameters$Builder setLdapCertificateRevocationListAttributeName(java.lang.String) -> setLdapCertificateRevocationListAttributeName
    org.bouncycastle.jce.X509LDAPCertStoreParameters$Builder setLdapDeltaRevocationListAttributeName(java.lang.String) -> setLdapDeltaRevocationListAttributeName
    org.bouncycastle.jce.X509LDAPCertStoreParameters$Builder setLdapAuthorityRevocationListAttributeName(java.lang.String) -> setLdapAuthorityRevocationListAttributeName
    org.bouncycastle.jce.X509LDAPCertStoreParameters$Builder setLdapAttributeCertificateAttributeAttributeName(java.lang.String) -> setLdapAttributeCertificateAttributeAttributeName
    org.bouncycastle.jce.X509LDAPCertStoreParameters$Builder setLdapAACertificateAttributeName(java.lang.String) -> setLdapAACertificateAttributeName
    org.bouncycastle.jce.X509LDAPCertStoreParameters$Builder setLdapAttributeDescriptorCertificateAttributeName(java.lang.String) -> setLdapAttributeDescriptorCertificateAttributeName
    org.bouncycastle.jce.X509LDAPCertStoreParameters$Builder setLdapAttributeCertificateRevocationListAttributeName(java.lang.String) -> setLdapAttributeCertificateRevocationListAttributeName
    org.bouncycastle.jce.X509LDAPCertStoreParameters$Builder setLdapAttributeAuthorityRevocationListAttributeName(java.lang.String) -> setLdapAttributeAuthorityRevocationListAttributeName
    org.bouncycastle.jce.X509LDAPCertStoreParameters$Builder setUserCertificateSubjectAttributeName(java.lang.String) -> setUserCertificateSubjectAttributeName
    org.bouncycastle.jce.X509LDAPCertStoreParameters$Builder setCACertificateSubjectAttributeName(java.lang.String) -> setCACertificateSubjectAttributeName
    org.bouncycastle.jce.X509LDAPCertStoreParameters$Builder setCrossCertificateSubjectAttributeName(java.lang.String) -> setCrossCertificateSubjectAttributeName
    org.bouncycastle.jce.X509LDAPCertStoreParameters$Builder setCertificateRevocationListIssuerAttributeName(java.lang.String) -> setCertificateRevocationListIssuerAttributeName
    org.bouncycastle.jce.X509LDAPCertStoreParameters$Builder setDeltaRevocationListIssuerAttributeName(java.lang.String) -> setDeltaRevocationListIssuerAttributeName
    org.bouncycastle.jce.X509LDAPCertStoreParameters$Builder setAuthorityRevocationListIssuerAttributeName(java.lang.String) -> setAuthorityRevocationListIssuerAttributeName
    org.bouncycastle.jce.X509LDAPCertStoreParameters$Builder setAttributeCertificateAttributeSubjectAttributeName(java.lang.String) -> setAttributeCertificateAttributeSubjectAttributeName
    org.bouncycastle.jce.X509LDAPCertStoreParameters$Builder setAACertificateSubjectAttributeName(java.lang.String) -> setAACertificateSubjectAttributeName
    org.bouncycastle.jce.X509LDAPCertStoreParameters$Builder setAttributeDescriptorCertificateSubjectAttributeName(java.lang.String) -> setAttributeDescriptorCertificateSubjectAttributeName
    org.bouncycastle.jce.X509LDAPCertStoreParameters$Builder setAttributeCertificateRevocationListIssuerAttributeName(java.lang.String) -> setAttributeCertificateRevocationListIssuerAttributeName
    org.bouncycastle.jce.X509LDAPCertStoreParameters$Builder setAttributeAuthorityRevocationListIssuerAttributeName(java.lang.String) -> setAttributeAuthorityRevocationListIssuerAttributeName
    org.bouncycastle.jce.X509LDAPCertStoreParameters$Builder setSearchForSerialNumberIn(java.lang.String) -> setSearchForSerialNumberIn
    org.bouncycastle.jce.X509LDAPCertStoreParameters build() -> build
    java.lang.String access$100(org.bouncycastle.jce.X509LDAPCertStoreParameters$Builder) -> access$100
    java.lang.String access$200(org.bouncycastle.jce.X509LDAPCertStoreParameters$Builder) -> access$200
    java.lang.String access$300(org.bouncycastle.jce.X509LDAPCertStoreParameters$Builder) -> access$300
    java.lang.String access$400(org.bouncycastle.jce.X509LDAPCertStoreParameters$Builder) -> access$400
    java.lang.String access$500(org.bouncycastle.jce.X509LDAPCertStoreParameters$Builder) -> access$500
    java.lang.String access$600(org.bouncycastle.jce.X509LDAPCertStoreParameters$Builder) -> access$600
    java.lang.String access$700(org.bouncycastle.jce.X509LDAPCertStoreParameters$Builder) -> access$700
    java.lang.String access$800(org.bouncycastle.jce.X509LDAPCertStoreParameters$Builder) -> access$800
    java.lang.String access$900(org.bouncycastle.jce.X509LDAPCertStoreParameters$Builder) -> access$900
    java.lang.String access$1000(org.bouncycastle.jce.X509LDAPCertStoreParameters$Builder) -> access$1000
    java.lang.String access$1100(org.bouncycastle.jce.X509LDAPCertStoreParameters$Builder) -> access$1100
    java.lang.String access$1200(org.bouncycastle.jce.X509LDAPCertStoreParameters$Builder) -> access$1200
    java.lang.String access$1300(org.bouncycastle.jce.X509LDAPCertStoreParameters$Builder) -> access$1300
    java.lang.String access$1400(org.bouncycastle.jce.X509LDAPCertStoreParameters$Builder) -> access$1400
    java.lang.String access$1500(org.bouncycastle.jce.X509LDAPCertStoreParameters$Builder) -> access$1500
    java.lang.String access$1600(org.bouncycastle.jce.X509LDAPCertStoreParameters$Builder) -> access$1600
    java.lang.String access$1700(org.bouncycastle.jce.X509LDAPCertStoreParameters$Builder) -> access$1700
    java.lang.String access$1800(org.bouncycastle.jce.X509LDAPCertStoreParameters$Builder) -> access$1800
    java.lang.String access$1900(org.bouncycastle.jce.X509LDAPCertStoreParameters$Builder) -> access$1900
    java.lang.String access$2000(org.bouncycastle.jce.X509LDAPCertStoreParameters$Builder) -> access$2000
    java.lang.String access$2100(org.bouncycastle.jce.X509LDAPCertStoreParameters$Builder) -> access$2100
    java.lang.String access$2200(org.bouncycastle.jce.X509LDAPCertStoreParameters$Builder) -> access$2200
    java.lang.String access$2300(org.bouncycastle.jce.X509LDAPCertStoreParameters$Builder) -> access$2300
    java.lang.String access$2400(org.bouncycastle.jce.X509LDAPCertStoreParameters$Builder) -> access$2400
    java.lang.String access$2500(org.bouncycastle.jce.X509LDAPCertStoreParameters$Builder) -> access$2500
    java.lang.String access$2600(org.bouncycastle.jce.X509LDAPCertStoreParameters$Builder) -> access$2600
    java.lang.String access$2700(org.bouncycastle.jce.X509LDAPCertStoreParameters$Builder) -> access$2700
    java.lang.String access$2800(org.bouncycastle.jce.X509LDAPCertStoreParameters$Builder) -> access$2800
    java.lang.String access$2900(org.bouncycastle.jce.X509LDAPCertStoreParameters$Builder) -> access$2900
    java.lang.String access$3000(org.bouncycastle.jce.X509LDAPCertStoreParameters$Builder) -> access$3000
    java.lang.String access$3100(org.bouncycastle.jce.X509LDAPCertStoreParameters$Builder) -> access$3100
    java.lang.String access$3200(org.bouncycastle.jce.X509LDAPCertStoreParameters$Builder) -> access$3200
    java.lang.String access$3300(org.bouncycastle.jce.X509LDAPCertStoreParameters$Builder) -> access$3300
    java.lang.String access$3400(org.bouncycastle.jce.X509LDAPCertStoreParameters$Builder) -> access$3400
    java.lang.String access$3500(org.bouncycastle.jce.X509LDAPCertStoreParameters$Builder) -> access$3500
    java.lang.String access$3600(org.bouncycastle.jce.X509LDAPCertStoreParameters$Builder) -> access$3600
org.bouncycastle.jce.X509Principal -> org.bouncycastle.jce.X509Principal:
    org.bouncycastle.asn1.ASN1Sequence readSequence(org.bouncycastle.asn1.ASN1InputStream) -> readSequence
    java.lang.String getName() -> getName
    byte[] getEncoded() -> getEncoded
org.bouncycastle.jce.exception.ExtCertPathBuilderException -> org.bouncycastle.jce.exception.ExtCertPathBuilderException:
    java.lang.Throwable cause -> cause
    java.lang.Throwable getCause() -> getCause
org.bouncycastle.jce.exception.ExtCertPathValidatorException -> org.bouncycastle.jce.exception.ExtCertPathValidatorException:
    java.lang.Throwable cause -> cause
    java.lang.Throwable getCause() -> getCause
org.bouncycastle.jce.exception.ExtCertificateEncodingException -> org.bouncycastle.jce.exception.ExtCertificateEncodingException:
    java.lang.Throwable cause -> cause
    java.lang.Throwable getCause() -> getCause
org.bouncycastle.jce.exception.ExtException -> org.bouncycastle.jce.exception.ExtException:
    java.lang.Throwable getCause() -> getCause
org.bouncycastle.jce.exception.ExtIOException -> org.bouncycastle.jce.exception.ExtIOException:
    java.lang.Throwable cause -> cause
    java.lang.Throwable getCause() -> getCause
org.bouncycastle.jce.interfaces.BCKeyStore -> org.bouncycastle.jce.interfaces.BCKeyStore:
    void setRandom(java.security.SecureRandom) -> setRandom
org.bouncycastle.jce.interfaces.ECKey -> org.bouncycastle.jce.interfaces.ECKey:
    org.bouncycastle.jce.spec.ECParameterSpec getParameters() -> getParameters
org.bouncycastle.jce.interfaces.ECPointEncoder -> org.bouncycastle.jce.interfaces.ECPointEncoder:
    void setPointFormat(java.lang.String) -> setPointFormat
org.bouncycastle.jce.interfaces.ECPrivateKey -> org.bouncycastle.jce.interfaces.ECPrivateKey:
    java.math.BigInteger getD() -> getD
org.bouncycastle.jce.interfaces.ECPublicKey -> org.bouncycastle.jce.interfaces.ECPublicKey:
    org.bouncycastle.math.ec.ECPoint getQ() -> getQ
org.bouncycastle.jce.interfaces.ElGamalKey -> org.bouncycastle.jce.interfaces.ElGamalKey:
    org.bouncycastle.jce.spec.ElGamalParameterSpec getParameters() -> getParameters
org.bouncycastle.jce.interfaces.ElGamalPrivateKey -> org.bouncycastle.jce.interfaces.ElGamalPrivateKey:
    java.math.BigInteger getX() -> getX
org.bouncycastle.jce.interfaces.ElGamalPublicKey -> org.bouncycastle.jce.interfaces.ElGamalPublicKey:
    java.math.BigInteger getY() -> getY
org.bouncycastle.jce.interfaces.GOST3410Key -> org.bouncycastle.jce.interfaces.GOST3410Key:
    org.bouncycastle.jce.interfaces.GOST3410Params getParameters() -> getParameters
org.bouncycastle.jce.interfaces.GOST3410Params -> org.bouncycastle.jce.interfaces.GOST3410Params:
    java.lang.String getPublicKeyParamSetOID() -> getPublicKeyParamSetOID
    java.lang.String getDigestParamSetOID() -> getDigestParamSetOID
    java.lang.String getEncryptionParamSetOID() -> getEncryptionParamSetOID
    org.bouncycastle.jce.spec.GOST3410PublicKeyParameterSetSpec getPublicKeyParameters() -> getPublicKeyParameters
org.bouncycastle.jce.interfaces.GOST3410PrivateKey -> org.bouncycastle.jce.interfaces.GOST3410PrivateKey:
    java.math.BigInteger getX() -> getX
org.bouncycastle.jce.interfaces.GOST3410PublicKey -> org.bouncycastle.jce.interfaces.GOST3410PublicKey:
    java.math.BigInteger getY() -> getY
org.bouncycastle.jce.interfaces.IESKey -> org.bouncycastle.jce.interfaces.IESKey:
    java.security.PublicKey getPublic() -> getPublic
    java.security.PrivateKey getPrivate() -> getPrivate
org.bouncycastle.jce.interfaces.MQVPrivateKey -> org.bouncycastle.jce.interfaces.MQVPrivateKey:
    java.security.PrivateKey getStaticPrivateKey() -> getStaticPrivateKey
    java.security.PrivateKey getEphemeralPrivateKey() -> getEphemeralPrivateKey
    java.security.PublicKey getEphemeralPublicKey() -> getEphemeralPublicKey
org.bouncycastle.jce.interfaces.MQVPublicKey -> org.bouncycastle.jce.interfaces.MQVPublicKey:
    java.security.PublicKey getStaticKey() -> getStaticKey
    java.security.PublicKey getEphemeralKey() -> getEphemeralKey
org.bouncycastle.jce.interfaces.PKCS12BagAttributeCarrier -> org.bouncycastle.jce.interfaces.PKCS12BagAttributeCarrier:
    void setBagAttribute(org.bouncycastle.asn1.ASN1ObjectIdentifier,org.bouncycastle.asn1.ASN1Encodable) -> setBagAttribute
    org.bouncycastle.asn1.ASN1Encodable getBagAttribute(org.bouncycastle.asn1.ASN1ObjectIdentifier) -> getBagAttribute
    java.util.Enumeration getBagAttributeKeys() -> getBagAttributeKeys
org.bouncycastle.jce.netscape.NetscapeCertRequest -> org.bouncycastle.jce.netscape.NetscapeCertRequest:
    org.bouncycastle.asn1.x509.AlgorithmIdentifier sigAlg -> sigAlg
    org.bouncycastle.asn1.x509.AlgorithmIdentifier keyAlg -> keyAlg
    byte[] sigBits -> sigBits
    java.lang.String challenge -> challenge
    org.bouncycastle.asn1.DERBitString content -> content
    java.security.PublicKey pubkey -> pubkey
    org.bouncycastle.asn1.ASN1Sequence getReq(byte[]) -> getReq
    java.lang.String getChallenge() -> getChallenge
    void setChallenge(java.lang.String) -> setChallenge
    org.bouncycastle.asn1.x509.AlgorithmIdentifier getSigningAlgorithm() -> getSigningAlgorithm
    void setSigningAlgorithm(org.bouncycastle.asn1.x509.AlgorithmIdentifier) -> setSigningAlgorithm
    org.bouncycastle.asn1.x509.AlgorithmIdentifier getKeyAlgorithm() -> getKeyAlgorithm
    void setKeyAlgorithm(org.bouncycastle.asn1.x509.AlgorithmIdentifier) -> setKeyAlgorithm
    java.security.PublicKey getPublicKey() -> getPublicKey
    void setPublicKey(java.security.PublicKey) -> setPublicKey
    boolean verify(java.lang.String) -> verify
    void sign(java.security.PrivateKey) -> sign
    void sign(java.security.PrivateKey,java.security.SecureRandom) -> sign
    org.bouncycastle.asn1.ASN1Primitive getKeySpec() -> getKeySpec
    org.bouncycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
org.bouncycastle.jce.provider.AnnotatedException -> org.bouncycastle.jce.provider.AnnotatedException:
    java.lang.Throwable _underlyingException -> _underlyingException
    java.lang.Throwable getUnderlyingException() -> getUnderlyingException
    java.lang.Throwable getCause() -> getCause
org.bouncycastle.jce.provider.BouncyCastleProvider -> org.bouncycastle.jce.provider.BouncyCastleProvider:
    java.lang.String info -> info
    java.lang.String PROVIDER_NAME -> PROVIDER_NAME
    org.bouncycastle.jcajce.provider.config.ProviderConfiguration CONFIGURATION -> CONFIGURATION
    java.util.Map keyInfoConverters -> keyInfoConverters
    java.lang.String SYMMETRIC_PACKAGE -> SYMMETRIC_PACKAGE
    java.lang.String[] SYMMETRIC_GENERIC -> SYMMETRIC_GENERIC
    java.lang.String[] SYMMETRIC_MACS -> SYMMETRIC_MACS
    java.lang.String[] SYMMETRIC_CIPHERS -> SYMMETRIC_CIPHERS
    java.lang.String ASYMMETRIC_PACKAGE -> ASYMMETRIC_PACKAGE
    java.lang.String[] ASYMMETRIC_GENERIC -> ASYMMETRIC_GENERIC
    java.lang.String[] ASYMMETRIC_CIPHERS -> ASYMMETRIC_CIPHERS
    java.lang.String DIGEST_PACKAGE -> DIGEST_PACKAGE
    java.lang.String[] DIGESTS -> DIGESTS
    java.lang.String KEYSTORE_PACKAGE -> KEYSTORE_PACKAGE
    java.lang.String[] KEYSTORES -> KEYSTORES
    void setup() -> setup
    void loadAlgorithms(java.lang.String,java.lang.String[]) -> loadAlgorithms
    void setParameter(java.lang.String,java.lang.Object) -> setParameter
    boolean hasAlgorithm(java.lang.String,java.lang.String) -> hasAlgorithm
    void addAlgorithm(java.lang.String,java.lang.String) -> addAlgorithm
    void addKeyInfoConverter(org.bouncycastle.asn1.ASN1ObjectIdentifier,org.bouncycastle.jcajce.provider.util.AsymmetricKeyInfoConverter) -> addKeyInfoConverter
    java.security.PublicKey getPublicKey(org.bouncycastle.asn1.x509.SubjectPublicKeyInfo) -> getPublicKey
    java.security.PrivateKey getPrivateKey(org.bouncycastle.asn1.pkcs.PrivateKeyInfo) -> getPrivateKey
    void access$000(org.bouncycastle.jce.provider.BouncyCastleProvider) -> access$000
org.bouncycastle.jce.provider.BouncyCastleProvider$1 -> org.bouncycastle.jce.provider.BouncyCastleProvider$1:
    org.bouncycastle.jce.provider.BouncyCastleProvider this$0 -> this$0
    java.lang.Object run() -> run
org.bouncycastle.jce.provider.BouncyCastleProviderConfiguration -> org.bouncycastle.jce.provider.BouncyCastleProviderConfiguration:
    java.security.Permission BC_EC_LOCAL_PERMISSION -> BC_EC_LOCAL_PERMISSION
    java.security.Permission BC_EC_PERMISSION -> BC_EC_PERMISSION
    java.security.Permission BC_DH_LOCAL_PERMISSION -> BC_DH_LOCAL_PERMISSION
    java.security.Permission BC_DH_PERMISSION -> BC_DH_PERMISSION
    java.lang.ThreadLocal ecThreadSpec -> ecThreadSpec
    java.lang.ThreadLocal dhThreadSpec -> dhThreadSpec
    org.bouncycastle.jce.spec.ECParameterSpec ecImplicitCaParams -> ecImplicitCaParams
    java.lang.Object dhDefaultParams -> dhDefaultParams
    void setParameter(java.lang.String,java.lang.Object) -> setParameter
    org.bouncycastle.jce.spec.ECParameterSpec getEcImplicitlyCa() -> getEcImplicitlyCa
    javax.crypto.spec.DHParameterSpec getDHDefaultParameters(int) -> getDHDefaultParameters
org.bouncycastle.jce.provider.BrokenJCEBlockCipher -> org.bouncycastle.jce.provider.BrokenJCEBlockCipher:
    java.lang.Class[] availableSpecs -> availableSpecs
    org.bouncycastle.crypto.BufferedBlockCipher cipher -> cipher
    org.bouncycastle.crypto.params.ParametersWithIV ivParam -> ivParam
    int pbeType -> pbeType
    int pbeHash -> pbeHash
    int pbeKeySize -> pbeKeySize
    int pbeIvSize -> pbeIvSize
    int ivLength -> ivLength
    java.security.AlgorithmParameters engineParams -> engineParams
    int engineGetBlockSize() -> engineGetBlockSize
    byte[] engineGetIV() -> engineGetIV
    int engineGetKeySize(java.security.Key) -> engineGetKeySize
    int engineGetOutputSize(int) -> engineGetOutputSize
    java.security.AlgorithmParameters engineGetParameters() -> engineGetParameters
    void engineSetMode(java.lang.String) -> engineSetMode
    void engineSetPadding(java.lang.String) -> engineSetPadding
    void engineInit(int,java.security.Key,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom) -> engineInit
    void engineInit(int,java.security.Key,java.security.AlgorithmParameters,java.security.SecureRandom) -> engineInit
    void engineInit(int,java.security.Key,java.security.SecureRandom) -> engineInit
    byte[] engineUpdate(byte[],int,int) -> engineUpdate
    int engineUpdate(byte[],int,int,byte[],int) -> engineUpdate
    byte[] engineDoFinal(byte[],int,int) -> engineDoFinal
    int engineDoFinal(byte[],int,int,byte[],int) -> engineDoFinal
    byte[] engineWrap(java.security.Key) -> engineWrap
    java.security.Key engineUnwrap(byte[],java.lang.String,int) -> engineUnwrap
org.bouncycastle.jce.provider.BrokenJCEBlockCipher$BrokePBEWithMD5AndDES -> org.bouncycastle.jce.provider.BrokenJCEBlockCipher$BrokePBEWithMD5AndDES:
org.bouncycastle.jce.provider.BrokenJCEBlockCipher$BrokePBEWithSHA1AndDES -> org.bouncycastle.jce.provider.BrokenJCEBlockCipher$BrokePBEWithSHA1AndDES:
org.bouncycastle.jce.provider.BrokenJCEBlockCipher$BrokePBEWithSHAAndDES2Key -> org.bouncycastle.jce.provider.BrokenJCEBlockCipher$BrokePBEWithSHAAndDES2Key:
org.bouncycastle.jce.provider.BrokenJCEBlockCipher$BrokePBEWithSHAAndDES3Key -> org.bouncycastle.jce.provider.BrokenJCEBlockCipher$BrokePBEWithSHAAndDES3Key:
org.bouncycastle.jce.provider.BrokenJCEBlockCipher$OldPBEWithSHAAndDES3Key -> org.bouncycastle.jce.provider.BrokenJCEBlockCipher$OldPBEWithSHAAndDES3Key:
org.bouncycastle.jce.provider.BrokenJCEBlockCipher$OldPBEWithSHAAndTwofish -> org.bouncycastle.jce.provider.BrokenJCEBlockCipher$OldPBEWithSHAAndTwofish:
org.bouncycastle.jce.provider.BrokenKDF2BytesGenerator -> org.bouncycastle.jce.provider.BrokenKDF2BytesGenerator:
    org.bouncycastle.crypto.Digest digest -> digest
    byte[] shared -> shared
    byte[] iv -> iv
    void init(org.bouncycastle.crypto.DerivationParameters) -> init
    org.bouncycastle.crypto.Digest getDigest() -> getDigest
    int generateBytes(byte[],int,int) -> generateBytes
org.bouncycastle.jce.provider.BrokenPBE -> org.bouncycastle.jce.provider.BrokenPBE:
    int MD5 -> MD5
    int SHA1 -> SHA1
    int RIPEMD160 -> RIPEMD160
    int PKCS5S1 -> PKCS5S1
    int PKCS5S2 -> PKCS5S2
    int PKCS12 -> PKCS12
    int OLD_PKCS12 -> OLD_PKCS12
org.bouncycastle.jce.provider.BrokenPBE$Util -> org.bouncycastle.jce.provider.BrokenPBE$Util:
    void setOddParity(byte[]) -> setOddParity
    org.bouncycastle.crypto.PBEParametersGenerator makePBEGenerator(int,int) -> makePBEGenerator
    org.bouncycastle.crypto.CipherParameters makePBEParameters(org.bouncycastle.jcajce.provider.symmetric.util.BCPBEKey,java.security.spec.AlgorithmParameterSpec,int,int,java.lang.String,int,int) -> makePBEParameters
    org.bouncycastle.crypto.CipherParameters makePBEMacParameters(org.bouncycastle.jcajce.provider.symmetric.util.BCPBEKey,java.security.spec.AlgorithmParameterSpec,int,int,int) -> makePBEMacParameters
org.bouncycastle.jce.provider.CertPathValidatorUtilities -> org.bouncycastle.jce.provider.CertPathValidatorUtilities:
    org.bouncycastle.jce.provider.PKIXCRLUtil CRL_UTIL -> CRL_UTIL
    java.lang.String CERTIFICATE_POLICIES -> CERTIFICATE_POLICIES
    java.lang.String BASIC_CONSTRAINTS -> BASIC_CONSTRAINTS
    java.lang.String POLICY_MAPPINGS -> POLICY_MAPPINGS
    java.lang.String SUBJECT_ALTERNATIVE_NAME -> SUBJECT_ALTERNATIVE_NAME
    java.lang.String NAME_CONSTRAINTS -> NAME_CONSTRAINTS
    java.lang.String KEY_USAGE -> KEY_USAGE
    java.lang.String INHIBIT_ANY_POLICY -> INHIBIT_ANY_POLICY
    java.lang.String ISSUING_DISTRIBUTION_POINT -> ISSUING_DISTRIBUTION_POINT
    java.lang.String DELTA_CRL_INDICATOR -> DELTA_CRL_INDICATOR
    java.lang.String POLICY_CONSTRAINTS -> POLICY_CONSTRAINTS
    java.lang.String FRESHEST_CRL -> FRESHEST_CRL
    java.lang.String CRL_DISTRIBUTION_POINTS -> CRL_DISTRIBUTION_POINTS
    java.lang.String AUTHORITY_KEY_IDENTIFIER -> AUTHORITY_KEY_IDENTIFIER
    java.lang.String ANY_POLICY -> ANY_POLICY
    java.lang.String CRL_NUMBER -> CRL_NUMBER
    int KEY_CERT_SIGN -> KEY_CERT_SIGN
    int CRL_SIGN -> CRL_SIGN
    java.lang.String[] crlReasons -> crlReasons
    java.security.cert.TrustAnchor findTrustAnchor(java.security.cert.X509Certificate,java.util.Set) -> findTrustAnchor
    java.security.cert.TrustAnchor findTrustAnchor(java.security.cert.X509Certificate,java.util.Set,java.lang.String) -> findTrustAnchor
    void addAdditionalStoresFromAltNames(java.security.cert.X509Certificate,org.bouncycastle.x509.ExtendedPKIXParameters) -> addAdditionalStoresFromAltNames
    javax.security.auth.x500.X500Principal getEncodedIssuerPrincipal(java.lang.Object) -> getEncodedIssuerPrincipal
    java.util.Date getValidDate(java.security.cert.PKIXParameters) -> getValidDate
    javax.security.auth.x500.X500Principal getSubjectPrincipal(java.security.cert.X509Certificate) -> getSubjectPrincipal
    boolean isSelfIssued(java.security.cert.X509Certificate) -> isSelfIssued
    org.bouncycastle.asn1.ASN1Primitive getExtensionValue(java.security.cert.X509Extension,java.lang.String) -> getExtensionValue
    org.bouncycastle.asn1.ASN1Primitive getObject(java.lang.String,byte[]) -> getObject
    javax.security.auth.x500.X500Principal getIssuerPrincipal(java.security.cert.X509CRL) -> getIssuerPrincipal
    org.bouncycastle.asn1.x509.AlgorithmIdentifier getAlgorithmIdentifier(java.security.PublicKey) -> getAlgorithmIdentifier
    java.util.Set getQualifierSet(org.bouncycastle.asn1.ASN1Sequence) -> getQualifierSet
    org.bouncycastle.jce.provider.PKIXPolicyNode removePolicyNode(org.bouncycastle.jce.provider.PKIXPolicyNode,java.util.List[],org.bouncycastle.jce.provider.PKIXPolicyNode) -> removePolicyNode
    void removePolicyNodeRecurse(java.util.List[],org.bouncycastle.jce.provider.PKIXPolicyNode) -> removePolicyNodeRecurse
    boolean processCertD1i(int,java.util.List[],org.bouncycastle.asn1.ASN1ObjectIdentifier,java.util.Set) -> processCertD1i
    void processCertD1ii(int,java.util.List[],org.bouncycastle.asn1.ASN1ObjectIdentifier,java.util.Set) -> processCertD1ii
    void prepareNextCertB1(int,java.util.List[],java.lang.String,java.util.Map,java.security.cert.X509Certificate) -> prepareNextCertB1
    org.bouncycastle.jce.provider.PKIXPolicyNode prepareNextCertB2(int,java.util.List[],java.lang.String,org.bouncycastle.jce.provider.PKIXPolicyNode) -> prepareNextCertB2
    boolean isAnyPolicy(java.util.Set) -> isAnyPolicy
    void addAdditionalStoreFromLocation(java.lang.String,org.bouncycastle.x509.ExtendedPKIXParameters) -> addAdditionalStoreFromLocation
    java.util.Collection findCertificates(org.bouncycastle.x509.X509CertStoreSelector,java.util.List) -> findCertificates
    java.util.Collection findCertificates(org.bouncycastle.x509.X509AttributeCertStoreSelector,java.util.List) -> findCertificates
    void addAdditionalStoresFromCRLDistributionPoint(org.bouncycastle.asn1.x509.CRLDistPoint,org.bouncycastle.x509.ExtendedPKIXParameters) -> addAdditionalStoresFromCRLDistributionPoint
    void getCRLIssuersFromDistributionPoint(org.bouncycastle.asn1.x509.DistributionPoint,java.util.Collection,java.security.cert.X509CRLSelector,org.bouncycastle.x509.ExtendedPKIXParameters) -> getCRLIssuersFromDistributionPoint
    java.math.BigInteger getSerialNumber(java.lang.Object) -> getSerialNumber
    void getCertStatus(java.util.Date,java.security.cert.X509CRL,java.lang.Object,org.bouncycastle.jce.provider.CertStatus) -> getCertStatus
    java.util.Set getDeltaCRLs(java.util.Date,org.bouncycastle.x509.ExtendedPKIXParameters,java.security.cert.X509CRL) -> getDeltaCRLs
    boolean isDeltaCRL(java.security.cert.X509CRL) -> isDeltaCRL
    java.util.Set getCompleteCRLs(org.bouncycastle.asn1.x509.DistributionPoint,java.lang.Object,java.util.Date,org.bouncycastle.x509.ExtendedPKIXParameters) -> getCompleteCRLs
    java.util.Date getValidCertDateFromValidityModel(org.bouncycastle.x509.ExtendedPKIXParameters,java.security.cert.CertPath,int) -> getValidCertDateFromValidityModel
    java.security.PublicKey getNextWorkingKey(java.util.List,int) -> getNextWorkingKey
    java.util.Collection findIssuerCerts(java.security.cert.X509Certificate,org.bouncycastle.x509.ExtendedPKIXBuilderParameters) -> findIssuerCerts
    void verifyX509Certificate(java.security.cert.X509Certificate,java.security.PublicKey,java.lang.String) -> verifyX509Certificate
org.bouncycastle.jce.provider.CertStatus -> org.bouncycastle.jce.provider.CertStatus:
    int UNREVOKED -> UNREVOKED
    int UNDETERMINED -> UNDETERMINED
    int certStatus -> certStatus
    java.util.Date revocationDate -> revocationDate
    java.util.Date getRevocationDate() -> getRevocationDate
    void setRevocationDate(java.util.Date) -> setRevocationDate
    int getCertStatus() -> getCertStatus
    void setCertStatus(int) -> setCertStatus
org.bouncycastle.jce.provider.CertStoreCollectionSpi -> org.bouncycastle.jce.provider.CertStoreCollectionSpi:
    java.security.cert.CollectionCertStoreParameters params -> params
    java.util.Collection engineGetCertificates(java.security.cert.CertSelector) -> engineGetCertificates
    java.util.Collection engineGetCRLs(java.security.cert.CRLSelector) -> engineGetCRLs
org.bouncycastle.jce.provider.DHUtil -> org.bouncycastle.jce.provider.DHUtil:
    org.bouncycastle.crypto.params.AsymmetricKeyParameter generatePublicKeyParameter(java.security.PublicKey) -> generatePublicKeyParameter
    org.bouncycastle.crypto.params.AsymmetricKeyParameter generatePrivateKeyParameter(java.security.PrivateKey) -> generatePrivateKeyParameter
org.bouncycastle.jce.provider.ExtCRLException -> org.bouncycastle.jce.provider.ExtCRLException:
    java.lang.Throwable cause -> cause
    java.lang.Throwable getCause() -> getCause
org.bouncycastle.jce.provider.JCEDHPrivateKey -> org.bouncycastle.jce.provider.JCEDHPrivateKey:
    long serialVersionUID -> serialVersionUID
    java.math.BigInteger x -> x
    javax.crypto.spec.DHParameterSpec dhSpec -> dhSpec
    org.bouncycastle.asn1.pkcs.PrivateKeyInfo info -> info
    org.bouncycastle.jce.interfaces.PKCS12BagAttributeCarrier attrCarrier -> attrCarrier
    java.lang.String getAlgorithm() -> getAlgorithm
    java.lang.String getFormat() -> getFormat
    byte[] getEncoded() -> getEncoded
    javax.crypto.spec.DHParameterSpec getParams() -> getParams
    java.math.BigInteger getX() -> getX
    void readObject(java.io.ObjectInputStream) -> readObject
    void writeObject(java.io.ObjectOutputStream) -> writeObject
    void setBagAttribute(org.bouncycastle.asn1.ASN1ObjectIdentifier,org.bouncycastle.asn1.ASN1Encodable) -> setBagAttribute
    org.bouncycastle.asn1.ASN1Encodable getBagAttribute(org.bouncycastle.asn1.ASN1ObjectIdentifier) -> getBagAttribute
    java.util.Enumeration getBagAttributeKeys() -> getBagAttributeKeys
org.bouncycastle.jce.provider.JCEDHPublicKey -> org.bouncycastle.jce.provider.JCEDHPublicKey:
    long serialVersionUID -> serialVersionUID
    java.math.BigInteger y -> y
    javax.crypto.spec.DHParameterSpec dhSpec -> dhSpec
    org.bouncycastle.asn1.x509.SubjectPublicKeyInfo info -> info
    java.lang.String getAlgorithm() -> getAlgorithm
    java.lang.String getFormat() -> getFormat
    byte[] getEncoded() -> getEncoded
    javax.crypto.spec.DHParameterSpec getParams() -> getParams
    java.math.BigInteger getY() -> getY
    boolean isPKCSParam(org.bouncycastle.asn1.ASN1Sequence) -> isPKCSParam
    void readObject(java.io.ObjectInputStream) -> readObject
    void writeObject(java.io.ObjectOutputStream) -> writeObject
org.bouncycastle.jce.provider.JCEECPrivateKey -> org.bouncycastle.jce.provider.JCEECPrivateKey:
    java.lang.String algorithm -> algorithm
    java.math.BigInteger d -> d
    java.security.spec.ECParameterSpec ecSpec -> ecSpec
    boolean withCompression -> withCompression
    org.bouncycastle.asn1.DERBitString publicKey -> publicKey
    org.bouncycastle.jcajce.provider.asymmetric.util.PKCS12BagAttributeCarrierImpl attrCarrier -> attrCarrier
    void populateFromPrivKeyInfo(org.bouncycastle.asn1.pkcs.PrivateKeyInfo) -> populateFromPrivKeyInfo
    java.lang.String getAlgorithm() -> getAlgorithm
    java.lang.String getFormat() -> getFormat
    byte[] getEncoded() -> getEncoded
    java.security.spec.ECParameterSpec getParams() -> getParams
    org.bouncycastle.jce.spec.ECParameterSpec getParameters() -> getParameters
    org.bouncycastle.jce.spec.ECParameterSpec engineGetSpec() -> engineGetSpec
    java.math.BigInteger getS() -> getS
    java.math.BigInteger getD() -> getD
    void setBagAttribute(org.bouncycastle.asn1.ASN1ObjectIdentifier,org.bouncycastle.asn1.ASN1Encodable) -> setBagAttribute
    org.bouncycastle.asn1.ASN1Encodable getBagAttribute(org.bouncycastle.asn1.ASN1ObjectIdentifier) -> getBagAttribute
    java.util.Enumeration getBagAttributeKeys() -> getBagAttributeKeys
    void setPointFormat(java.lang.String) -> setPointFormat
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    org.bouncycastle.asn1.DERBitString getPublicKeyDetails(org.bouncycastle.jce.provider.JCEECPublicKey) -> getPublicKeyDetails
    void readObject(java.io.ObjectInputStream) -> readObject
    void writeObject(java.io.ObjectOutputStream) -> writeObject
org.bouncycastle.jce.provider.JCEECPublicKey -> org.bouncycastle.jce.provider.JCEECPublicKey:
    java.lang.String algorithm -> algorithm
    org.bouncycastle.math.ec.ECPoint q -> q
    java.security.spec.ECParameterSpec ecSpec -> ecSpec
    boolean withCompression -> withCompression
    org.bouncycastle.asn1.cryptopro.GOST3410PublicKeyAlgParameters gostParams -> gostParams
    java.security.spec.ECParameterSpec createSpec(java.security.spec.EllipticCurve,org.bouncycastle.crypto.params.ECDomainParameters) -> createSpec
    void populateFromPubKeyInfo(org.bouncycastle.asn1.x509.SubjectPublicKeyInfo) -> populateFromPubKeyInfo
    java.lang.String getAlgorithm() -> getAlgorithm
    java.lang.String getFormat() -> getFormat
    byte[] getEncoded() -> getEncoded
    void extractBytes(byte[],int,java.math.BigInteger) -> extractBytes
    java.security.spec.ECParameterSpec getParams() -> getParams
    org.bouncycastle.jce.spec.ECParameterSpec getParameters() -> getParameters
    java.security.spec.ECPoint getW() -> getW
    org.bouncycastle.math.ec.ECPoint getQ() -> getQ
    org.bouncycastle.math.ec.ECPoint engineGetQ() -> engineGetQ
    org.bouncycastle.jce.spec.ECParameterSpec engineGetSpec() -> engineGetSpec
    java.lang.String toString() -> toString
    void setPointFormat(java.lang.String) -> setPointFormat
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    void readObject(java.io.ObjectInputStream) -> readObject
    void writeObject(java.io.ObjectOutputStream) -> writeObject
org.bouncycastle.jce.provider.JCEElGamalPrivateKey -> org.bouncycastle.jce.provider.JCEElGamalPrivateKey:
    long serialVersionUID -> serialVersionUID
    java.math.BigInteger x -> x
    org.bouncycastle.jce.spec.ElGamalParameterSpec elSpec -> elSpec
    org.bouncycastle.jcajce.provider.asymmetric.util.PKCS12BagAttributeCarrierImpl attrCarrier -> attrCarrier
    java.lang.String getAlgorithm() -> getAlgorithm
    java.lang.String getFormat() -> getFormat
    byte[] getEncoded() -> getEncoded
    org.bouncycastle.jce.spec.ElGamalParameterSpec getParameters() -> getParameters
    javax.crypto.spec.DHParameterSpec getParams() -> getParams
    java.math.BigInteger getX() -> getX
    void readObject(java.io.ObjectInputStream) -> readObject
    void writeObject(java.io.ObjectOutputStream) -> writeObject
    void setBagAttribute(org.bouncycastle.asn1.ASN1ObjectIdentifier,org.bouncycastle.asn1.ASN1Encodable) -> setBagAttribute
    org.bouncycastle.asn1.ASN1Encodable getBagAttribute(org.bouncycastle.asn1.ASN1ObjectIdentifier) -> getBagAttribute
    java.util.Enumeration getBagAttributeKeys() -> getBagAttributeKeys
org.bouncycastle.jce.provider.JCEElGamalPublicKey -> org.bouncycastle.jce.provider.JCEElGamalPublicKey:
    long serialVersionUID -> serialVersionUID
    java.math.BigInteger y -> y
    org.bouncycastle.jce.spec.ElGamalParameterSpec elSpec -> elSpec
    java.lang.String getAlgorithm() -> getAlgorithm
    java.lang.String getFormat() -> getFormat
    byte[] getEncoded() -> getEncoded
    org.bouncycastle.jce.spec.ElGamalParameterSpec getParameters() -> getParameters
    javax.crypto.spec.DHParameterSpec getParams() -> getParams
    java.math.BigInteger getY() -> getY
    void readObject(java.io.ObjectInputStream) -> readObject
    void writeObject(java.io.ObjectOutputStream) -> writeObject
org.bouncycastle.jce.provider.JCERSAPrivateCrtKey -> org.bouncycastle.jce.provider.JCERSAPrivateCrtKey:
    long serialVersionUID -> serialVersionUID
    java.math.BigInteger publicExponent -> publicExponent
    java.math.BigInteger primeP -> primeP
    java.math.BigInteger primeQ -> primeQ
    java.math.BigInteger primeExponentP -> primeExponentP
    java.math.BigInteger primeExponentQ -> primeExponentQ
    java.math.BigInteger crtCoefficient -> crtCoefficient
    java.lang.String getFormat() -> getFormat
    byte[] getEncoded() -> getEncoded
    java.math.BigInteger getPublicExponent() -> getPublicExponent
    java.math.BigInteger getPrimeP() -> getPrimeP
    java.math.BigInteger getPrimeQ() -> getPrimeQ
    java.math.BigInteger getPrimeExponentP() -> getPrimeExponentP
    java.math.BigInteger getPrimeExponentQ() -> getPrimeExponentQ
    java.math.BigInteger getCrtCoefficient() -> getCrtCoefficient
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    java.lang.String toString() -> toString
org.bouncycastle.jce.provider.JCERSAPrivateKey -> org.bouncycastle.jce.provider.JCERSAPrivateKey:
    long serialVersionUID -> serialVersionUID
    java.math.BigInteger ZERO -> ZERO
    java.math.BigInteger modulus -> modulus
    java.math.BigInteger privateExponent -> privateExponent
    org.bouncycastle.jcajce.provider.asymmetric.util.PKCS12BagAttributeCarrierImpl attrCarrier -> attrCarrier
    java.math.BigInteger getModulus() -> getModulus
    java.math.BigInteger getPrivateExponent() -> getPrivateExponent
    java.lang.String getAlgorithm() -> getAlgorithm
    java.lang.String getFormat() -> getFormat
    byte[] getEncoded() -> getEncoded
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    void setBagAttribute(org.bouncycastle.asn1.ASN1ObjectIdentifier,org.bouncycastle.asn1.ASN1Encodable) -> setBagAttribute
    org.bouncycastle.asn1.ASN1Encodable getBagAttribute(org.bouncycastle.asn1.ASN1ObjectIdentifier) -> getBagAttribute
    java.util.Enumeration getBagAttributeKeys() -> getBagAttributeKeys
    void readObject(java.io.ObjectInputStream) -> readObject
    void writeObject(java.io.ObjectOutputStream) -> writeObject
org.bouncycastle.jce.provider.JCERSAPublicKey -> org.bouncycastle.jce.provider.JCERSAPublicKey:
    long serialVersionUID -> serialVersionUID
    java.math.BigInteger modulus -> modulus
    java.math.BigInteger publicExponent -> publicExponent
    java.math.BigInteger getModulus() -> getModulus
    java.math.BigInteger getPublicExponent() -> getPublicExponent
    java.lang.String getAlgorithm() -> getAlgorithm
    java.lang.String getFormat() -> getFormat
    byte[] getEncoded() -> getEncoded
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    java.lang.String toString() -> toString
org.bouncycastle.jce.provider.JCEStreamCipher -> org.bouncycastle.jce.provider.JCEStreamCipher:
    java.lang.Class[] availableSpecs -> availableSpecs
    org.bouncycastle.crypto.StreamCipher cipher -> cipher
    org.bouncycastle.crypto.params.ParametersWithIV ivParam -> ivParam
    int ivLength -> ivLength
    javax.crypto.spec.PBEParameterSpec pbeSpec -> pbeSpec
    java.lang.String pbeAlgorithm -> pbeAlgorithm
    java.security.AlgorithmParameters engineParams -> engineParams
    int engineGetBlockSize() -> engineGetBlockSize
    byte[] engineGetIV() -> engineGetIV
    int engineGetKeySize(java.security.Key) -> engineGetKeySize
    int engineGetOutputSize(int) -> engineGetOutputSize
    java.security.AlgorithmParameters engineGetParameters() -> engineGetParameters
    void engineSetMode(java.lang.String) -> engineSetMode
    void engineSetPadding(java.lang.String) -> engineSetPadding
    void engineInit(int,java.security.Key,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom) -> engineInit
    void engineInit(int,java.security.Key,java.security.AlgorithmParameters,java.security.SecureRandom) -> engineInit
    void engineInit(int,java.security.Key,java.security.SecureRandom) -> engineInit
    byte[] engineUpdate(byte[],int,int) -> engineUpdate
    int engineUpdate(byte[],int,int,byte[],int) -> engineUpdate
    byte[] engineDoFinal(byte[],int,int) -> engineDoFinal
    int engineDoFinal(byte[],int,int,byte[],int) -> engineDoFinal
    byte[] engineWrap(java.security.Key) -> engineWrap
    java.security.Key engineUnwrap(byte[],java.lang.String,int) -> engineUnwrap
org.bouncycastle.jce.provider.JCEStreamCipher$Blowfish_CFB8 -> org.bouncycastle.jce.provider.JCEStreamCipher$Blowfish_CFB8:
org.bouncycastle.jce.provider.JCEStreamCipher$Blowfish_OFB8 -> org.bouncycastle.jce.provider.JCEStreamCipher$Blowfish_OFB8:
org.bouncycastle.jce.provider.JCEStreamCipher$DES_CFB8 -> org.bouncycastle.jce.provider.JCEStreamCipher$DES_CFB8:
org.bouncycastle.jce.provider.JCEStreamCipher$DES_OFB8 -> org.bouncycastle.jce.provider.JCEStreamCipher$DES_OFB8:
org.bouncycastle.jce.provider.JCEStreamCipher$DESede_CFB8 -> org.bouncycastle.jce.provider.JCEStreamCipher$DESede_CFB8:
org.bouncycastle.jce.provider.JCEStreamCipher$DESede_OFB8 -> org.bouncycastle.jce.provider.JCEStreamCipher$DESede_OFB8:
org.bouncycastle.jce.provider.JCEStreamCipher$Skipjack_CFB8 -> org.bouncycastle.jce.provider.JCEStreamCipher$Skipjack_CFB8:
org.bouncycastle.jce.provider.JCEStreamCipher$Skipjack_OFB8 -> org.bouncycastle.jce.provider.JCEStreamCipher$Skipjack_OFB8:
org.bouncycastle.jce.provider.JCEStreamCipher$Twofish_CFB8 -> org.bouncycastle.jce.provider.JCEStreamCipher$Twofish_CFB8:
org.bouncycastle.jce.provider.JCEStreamCipher$Twofish_OFB8 -> org.bouncycastle.jce.provider.JCEStreamCipher$Twofish_OFB8:
org.bouncycastle.jce.provider.JDKDSAPrivateKey -> org.bouncycastle.jce.provider.JDKDSAPrivateKey:
    long serialVersionUID -> serialVersionUID
    java.math.BigInteger x -> x
    java.security.interfaces.DSAParams dsaSpec -> dsaSpec
    org.bouncycastle.jcajce.provider.asymmetric.util.PKCS12BagAttributeCarrierImpl attrCarrier -> attrCarrier
    java.lang.String getAlgorithm() -> getAlgorithm
    java.lang.String getFormat() -> getFormat
    byte[] getEncoded() -> getEncoded
    java.security.interfaces.DSAParams getParams() -> getParams
    java.math.BigInteger getX() -> getX
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    void setBagAttribute(org.bouncycastle.asn1.ASN1ObjectIdentifier,org.bouncycastle.asn1.ASN1Encodable) -> setBagAttribute
    org.bouncycastle.asn1.ASN1Encodable getBagAttribute(org.bouncycastle.asn1.ASN1ObjectIdentifier) -> getBagAttribute
    java.util.Enumeration getBagAttributeKeys() -> getBagAttributeKeys
    void readObject(java.io.ObjectInputStream) -> readObject
    void writeObject(java.io.ObjectOutputStream) -> writeObject
org.bouncycastle.jce.provider.JDKDSAPublicKey -> org.bouncycastle.jce.provider.JDKDSAPublicKey:
    long serialVersionUID -> serialVersionUID
    java.math.BigInteger y -> y
    java.security.interfaces.DSAParams dsaSpec -> dsaSpec
    boolean isNotNull(org.bouncycastle.asn1.ASN1Encodable) -> isNotNull
    java.lang.String getAlgorithm() -> getAlgorithm
    java.lang.String getFormat() -> getFormat
    byte[] getEncoded() -> getEncoded
    java.security.interfaces.DSAParams getParams() -> getParams
    java.math.BigInteger getY() -> getY
    java.lang.String toString() -> toString
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    void readObject(java.io.ObjectInputStream) -> readObject
    void writeObject(java.io.ObjectOutputStream) -> writeObject
org.bouncycastle.jce.provider.JDKPKCS12StoreParameter -> org.bouncycastle.jce.provider.JDKPKCS12StoreParameter:
    java.io.OutputStream outputStream -> outputStream
    java.security.KeyStore$ProtectionParameter protectionParameter -> protectionParameter
    boolean useDEREncoding -> useDEREncoding
    java.io.OutputStream getOutputStream() -> getOutputStream
    java.security.KeyStore$ProtectionParameter getProtectionParameter() -> getProtectionParameter
    boolean isUseDEREncoding() -> isUseDEREncoding
    void setOutputStream(java.io.OutputStream) -> setOutputStream
    void setPassword(char[]) -> setPassword
    void setProtectionParameter(java.security.KeyStore$ProtectionParameter) -> setProtectionParameter
    void setUseDEREncoding(boolean) -> setUseDEREncoding
org.bouncycastle.jce.provider.MultiCertStoreSpi -> org.bouncycastle.jce.provider.MultiCertStoreSpi:
    org.bouncycastle.jce.MultiCertStoreParameters params -> params
    java.util.Collection engineGetCertificates(java.security.cert.CertSelector) -> engineGetCertificates
    java.util.Collection engineGetCRLs(java.security.cert.CRLSelector) -> engineGetCRLs
org.bouncycastle.jce.provider.OldPKCS12ParametersGenerator -> org.bouncycastle.jce.provider.OldPKCS12ParametersGenerator:
    int KEY_MATERIAL -> KEY_MATERIAL
    int IV_MATERIAL -> IV_MATERIAL
    int MAC_MATERIAL -> MAC_MATERIAL
    org.bouncycastle.crypto.Digest digest -> digest
    int u -> u
    int v -> v
    void adjust(byte[],int,byte[]) -> adjust
    byte[] generateDerivedKey(int,int) -> generateDerivedKey
    org.bouncycastle.crypto.CipherParameters generateDerivedParameters(int) -> generateDerivedParameters
    org.bouncycastle.crypto.CipherParameters generateDerivedParameters(int,int) -> generateDerivedParameters
    org.bouncycastle.crypto.CipherParameters generateDerivedMacParameters(int) -> generateDerivedMacParameters
org.bouncycastle.jce.provider.PEMUtil -> org.bouncycastle.jce.provider.PEMUtil:
    java.lang.String _header1 -> _header1
    java.lang.String _header2 -> _header2
    java.lang.String _footer1 -> _footer1
    java.lang.String _footer2 -> _footer2
    java.lang.String readLine(java.io.InputStream) -> readLine
    org.bouncycastle.asn1.ASN1Sequence readPEMObject(java.io.InputStream) -> readPEMObject
org.bouncycastle.jce.provider.PKIXAttrCertPathBuilderSpi -> org.bouncycastle.jce.provider.PKIXAttrCertPathBuilderSpi:
    java.lang.Exception certPathException -> certPathException
    java.security.cert.CertPathBuilderResult engineBuild(java.security.cert.CertPathParameters) -> engineBuild
    java.security.cert.CertPathBuilderResult build(org.bouncycastle.x509.X509AttributeCertificate,java.security.cert.X509Certificate,org.bouncycastle.x509.ExtendedPKIXBuilderParameters,java.util.List) -> build
org.bouncycastle.jce.provider.PKIXAttrCertPathValidatorSpi -> org.bouncycastle.jce.provider.PKIXAttrCertPathValidatorSpi:
    java.security.cert.CertPathValidatorResult engineValidate(java.security.cert.CertPath,java.security.cert.CertPathParameters) -> engineValidate
org.bouncycastle.jce.provider.PKIXCRLUtil -> org.bouncycastle.jce.provider.PKIXCRLUtil:
    java.util.Set findCRLs(org.bouncycastle.x509.X509CRLStoreSelector,org.bouncycastle.x509.ExtendedPKIXParameters,java.util.Date) -> findCRLs
    java.util.Set findCRLs(org.bouncycastle.x509.X509CRLStoreSelector,java.security.cert.PKIXParameters) -> findCRLs
    java.util.Collection findCRLs(org.bouncycastle.x509.X509CRLStoreSelector,java.util.List) -> findCRLs
org.bouncycastle.jce.provider.PKIXCertPathBuilderSpi -> org.bouncycastle.jce.provider.PKIXCertPathBuilderSpi:
    java.lang.Exception certPathException -> certPathException
    java.security.cert.CertPathBuilderResult engineBuild(java.security.cert.CertPathParameters) -> engineBuild
    java.security.cert.CertPathBuilderResult build(java.security.cert.X509Certificate,org.bouncycastle.x509.ExtendedPKIXBuilderParameters,java.util.List) -> build
org.bouncycastle.jce.provider.PKIXCertPathValidatorSpi -> org.bouncycastle.jce.provider.PKIXCertPathValidatorSpi:
    java.security.cert.CertPathValidatorResult engineValidate(java.security.cert.CertPath,java.security.cert.CertPathParameters) -> engineValidate
org.bouncycastle.jce.provider.PKIXNameConstraintValidator -> org.bouncycastle.jce.provider.PKIXNameConstraintValidator:
    java.util.Set excludedSubtreesDN -> excludedSubtreesDN
    java.util.Set excludedSubtreesDNS -> excludedSubtreesDNS
    java.util.Set excludedSubtreesEmail -> excludedSubtreesEmail
    java.util.Set excludedSubtreesURI -> excludedSubtreesURI
    java.util.Set excludedSubtreesIP -> excludedSubtreesIP
    java.util.Set permittedSubtreesDN -> permittedSubtreesDN
    java.util.Set permittedSubtreesDNS -> permittedSubtreesDNS
    java.util.Set permittedSubtreesEmail -> permittedSubtreesEmail
    java.util.Set permittedSubtreesURI -> permittedSubtreesURI
    java.util.Set permittedSubtreesIP -> permittedSubtreesIP
    boolean withinDNSubtree(org.bouncycastle.asn1.ASN1Sequence,org.bouncycastle.asn1.ASN1Sequence) -> withinDNSubtree
    void checkPermittedDN(org.bouncycastle.asn1.ASN1Sequence) -> checkPermittedDN
    void checkExcludedDN(org.bouncycastle.asn1.ASN1Sequence) -> checkExcludedDN
    void checkPermittedDN(java.util.Set,org.bouncycastle.asn1.ASN1Sequence) -> checkPermittedDN
    void checkExcludedDN(java.util.Set,org.bouncycastle.asn1.ASN1Sequence) -> checkExcludedDN
    java.util.Set intersectDN(java.util.Set,java.util.Set) -> intersectDN
    java.util.Set unionDN(java.util.Set,org.bouncycastle.asn1.ASN1Sequence) -> unionDN
    java.util.Set intersectEmail(java.util.Set,java.util.Set) -> intersectEmail
    java.util.Set unionEmail(java.util.Set,java.lang.String) -> unionEmail
    java.util.Set intersectIP(java.util.Set,java.util.Set) -> intersectIP
    java.util.Set unionIP(java.util.Set,byte[]) -> unionIP
    java.util.Set unionIPRange(byte[],byte[]) -> unionIPRange
    java.util.Set intersectIPRange(byte[],byte[]) -> intersectIPRange
    byte[] ipWithSubnetMask(byte[],byte[]) -> ipWithSubnetMask
    byte[][] extractIPsAndSubnetMasks(byte[],byte[]) -> extractIPsAndSubnetMasks
    byte[][] minMaxIPs(byte[],byte[],byte[],byte[]) -> minMaxIPs
    void checkPermittedEmail(java.util.Set,java.lang.String) -> checkPermittedEmail
    void checkExcludedEmail(java.util.Set,java.lang.String) -> checkExcludedEmail
    void checkPermittedIP(java.util.Set,byte[]) -> checkPermittedIP
    void checkExcludedIP(java.util.Set,byte[]) -> checkExcludedIP
    boolean isIPConstrained(byte[],byte[]) -> isIPConstrained
    boolean emailIsConstrained(java.lang.String,java.lang.String) -> emailIsConstrained
    boolean withinDomain(java.lang.String,java.lang.String) -> withinDomain
    void checkPermittedDNS(java.util.Set,java.lang.String) -> checkPermittedDNS
    void checkExcludedDNS(java.util.Set,java.lang.String) -> checkExcludedDNS
    void unionEmail(java.lang.String,java.lang.String,java.util.Set) -> unionEmail
    void unionURI(java.lang.String,java.lang.String,java.util.Set) -> unionURI
    java.util.Set intersectDNS(java.util.Set,java.util.Set) -> intersectDNS
    java.util.Set unionDNS(java.util.Set,java.lang.String) -> unionDNS
    void intersectEmail(java.lang.String,java.lang.String,java.util.Set) -> intersectEmail
    void checkExcludedURI(java.util.Set,java.lang.String) -> checkExcludedURI
    java.util.Set intersectURI(java.util.Set,java.util.Set) -> intersectURI
    java.util.Set unionURI(java.util.Set,java.lang.String) -> unionURI
    void intersectURI(java.lang.String,java.lang.String,java.util.Set) -> intersectURI
    void checkPermittedURI(java.util.Set,java.lang.String) -> checkPermittedURI
    boolean isUriConstrained(java.lang.String,java.lang.String) -> isUriConstrained
    java.lang.String extractHostFromURL(java.lang.String) -> extractHostFromURL
    void checkPermitted(org.bouncycastle.asn1.x509.GeneralName) -> checkPermitted
    void checkExcluded(org.bouncycastle.asn1.x509.GeneralName) -> checkExcluded
    void intersectPermittedSubtree(org.bouncycastle.asn1.x509.GeneralSubtree) -> intersectPermittedSubtree
    void intersectPermittedSubtree(org.bouncycastle.asn1.x509.GeneralSubtree[]) -> intersectPermittedSubtree
    java.lang.String extractNameAsString(org.bouncycastle.asn1.x509.GeneralName) -> extractNameAsString
    void intersectEmptyPermittedSubtree(int) -> intersectEmptyPermittedSubtree
    void addExcludedSubtree(org.bouncycastle.asn1.x509.GeneralSubtree) -> addExcludedSubtree
    byte[] max(byte[],byte[]) -> max
    byte[] min(byte[],byte[]) -> min
    int compareTo(byte[],byte[]) -> compareTo
    byte[] or(byte[],byte[]) -> or
    int hashCode() -> hashCode
    int hashCollection(java.util.Collection) -> hashCollection
    boolean equals(java.lang.Object) -> equals
    boolean collectionsAreEqual(java.util.Collection,java.util.Collection) -> collectionsAreEqual
    boolean equals(java.lang.Object,java.lang.Object) -> equals
    java.lang.String stringifyIP(byte[]) -> stringifyIP
    java.lang.String stringifyIPCollection(java.util.Set) -> stringifyIPCollection
    java.lang.String toString() -> toString
org.bouncycastle.jce.provider.PKIXNameConstraintValidatorException -> org.bouncycastle.jce.provider.PKIXNameConstraintValidatorException:
org.bouncycastle.jce.provider.PKIXPolicyNode -> org.bouncycastle.jce.provider.PKIXPolicyNode:
    java.util.List children -> children
    int depth -> depth
    java.util.Set expectedPolicies -> expectedPolicies
    java.security.cert.PolicyNode parent -> parent
    java.util.Set policyQualifiers -> policyQualifiers
    java.lang.String validPolicy -> validPolicy
    boolean critical -> critical
    void addChild(org.bouncycastle.jce.provider.PKIXPolicyNode) -> addChild
    java.util.Iterator getChildren() -> getChildren
    int getDepth() -> getDepth
    java.util.Set getExpectedPolicies() -> getExpectedPolicies
    java.security.cert.PolicyNode getParent() -> getParent
    java.util.Set getPolicyQualifiers() -> getPolicyQualifiers
    java.lang.String getValidPolicy() -> getValidPolicy
    boolean hasChildren() -> hasChildren
    boolean isCritical() -> isCritical
    void removeChild(org.bouncycastle.jce.provider.PKIXPolicyNode) -> removeChild
    void setCritical(boolean) -> setCritical
    void setParent(org.bouncycastle.jce.provider.PKIXPolicyNode) -> setParent
    java.lang.String toString() -> toString
    java.lang.String toString(java.lang.String) -> toString
    java.lang.Object clone() -> clone
    org.bouncycastle.jce.provider.PKIXPolicyNode copy() -> copy
org.bouncycastle.jce.provider.RFC3280CertPathUtilities -> org.bouncycastle.jce.provider.RFC3280CertPathUtilities:
    org.bouncycastle.jce.provider.PKIXCRLUtil CRL_UTIL -> CRL_UTIL
    java.lang.String CERTIFICATE_POLICIES -> CERTIFICATE_POLICIES
    java.lang.String POLICY_MAPPINGS -> POLICY_MAPPINGS
    java.lang.String INHIBIT_ANY_POLICY -> INHIBIT_ANY_POLICY
    java.lang.String ISSUING_DISTRIBUTION_POINT -> ISSUING_DISTRIBUTION_POINT
    java.lang.String FRESHEST_CRL -> FRESHEST_CRL
    java.lang.String DELTA_CRL_INDICATOR -> DELTA_CRL_INDICATOR
    java.lang.String POLICY_CONSTRAINTS -> POLICY_CONSTRAINTS
    java.lang.String BASIC_CONSTRAINTS -> BASIC_CONSTRAINTS
    java.lang.String CRL_DISTRIBUTION_POINTS -> CRL_DISTRIBUTION_POINTS
    java.lang.String SUBJECT_ALTERNATIVE_NAME -> SUBJECT_ALTERNATIVE_NAME
    java.lang.String NAME_CONSTRAINTS -> NAME_CONSTRAINTS
    java.lang.String AUTHORITY_KEY_IDENTIFIER -> AUTHORITY_KEY_IDENTIFIER
    java.lang.String KEY_USAGE -> KEY_USAGE
    java.lang.String CRL_NUMBER -> CRL_NUMBER
    java.lang.String ANY_POLICY -> ANY_POLICY
    int KEY_CERT_SIGN -> KEY_CERT_SIGN
    int CRL_SIGN -> CRL_SIGN
    java.lang.String[] crlReasons -> crlReasons
    void processCRLB2(org.bouncycastle.asn1.x509.DistributionPoint,java.lang.Object,java.security.cert.X509CRL) -> processCRLB2
    void processCRLB1(org.bouncycastle.asn1.x509.DistributionPoint,java.lang.Object,java.security.cert.X509CRL) -> processCRLB1
    org.bouncycastle.jce.provider.ReasonsMask processCRLD(java.security.cert.X509CRL,org.bouncycastle.asn1.x509.DistributionPoint) -> processCRLD
    java.util.Set processCRLF(java.security.cert.X509CRL,java.lang.Object,java.security.cert.X509Certificate,java.security.PublicKey,org.bouncycastle.x509.ExtendedPKIXParameters,java.util.List) -> processCRLF
    java.security.PublicKey processCRLG(java.security.cert.X509CRL,java.util.Set) -> processCRLG
    java.security.cert.X509CRL processCRLH(java.util.Set,java.security.PublicKey) -> processCRLH
    java.util.Set processCRLA1i(java.util.Date,org.bouncycastle.x509.ExtendedPKIXParameters,java.security.cert.X509Certificate,java.security.cert.X509CRL) -> processCRLA1i
    java.util.Set[] processCRLA1ii(java.util.Date,org.bouncycastle.x509.ExtendedPKIXParameters,java.security.cert.X509Certificate,java.security.cert.X509CRL) -> processCRLA1ii
    void processCRLC(java.security.cert.X509CRL,java.security.cert.X509CRL,org.bouncycastle.x509.ExtendedPKIXParameters) -> processCRLC
    void processCRLI(java.util.Date,java.security.cert.X509CRL,java.lang.Object,org.bouncycastle.jce.provider.CertStatus,org.bouncycastle.x509.ExtendedPKIXParameters) -> processCRLI
    void processCRLJ(java.util.Date,java.security.cert.X509CRL,java.lang.Object,org.bouncycastle.jce.provider.CertStatus) -> processCRLJ
    org.bouncycastle.jce.provider.PKIXPolicyNode prepareCertB(java.security.cert.CertPath,int,java.util.List[],org.bouncycastle.jce.provider.PKIXPolicyNode,int) -> prepareCertB
    void prepareNextCertA(java.security.cert.CertPath,int) -> prepareNextCertA
    void processCertF(java.security.cert.CertPath,int,org.bouncycastle.jce.provider.PKIXPolicyNode,int) -> processCertF
    org.bouncycastle.jce.provider.PKIXPolicyNode processCertE(java.security.cert.CertPath,int,org.bouncycastle.jce.provider.PKIXPolicyNode) -> processCertE
    void processCertBC(java.security.cert.CertPath,int,org.bouncycastle.jce.provider.PKIXNameConstraintValidator) -> processCertBC
    org.bouncycastle.jce.provider.PKIXPolicyNode processCertD(java.security.cert.CertPath,int,java.util.Set,org.bouncycastle.jce.provider.PKIXPolicyNode,java.util.List[],int) -> processCertD
    void processCertA(java.security.cert.CertPath,org.bouncycastle.x509.ExtendedPKIXParameters,int,java.security.PublicKey,boolean,javax.security.auth.x500.X500Principal,java.security.cert.X509Certificate) -> processCertA
    int prepareNextCertI1(java.security.cert.CertPath,int,int) -> prepareNextCertI1
    int prepareNextCertI2(java.security.cert.CertPath,int,int) -> prepareNextCertI2
    void prepareNextCertG(java.security.cert.CertPath,int,org.bouncycastle.jce.provider.PKIXNameConstraintValidator) -> prepareNextCertG
    void checkCRL(org.bouncycastle.asn1.x509.DistributionPoint,org.bouncycastle.x509.ExtendedPKIXParameters,java.security.cert.X509Certificate,java.util.Date,java.security.cert.X509Certificate,java.security.PublicKey,org.bouncycastle.jce.provider.CertStatus,org.bouncycastle.jce.provider.ReasonsMask,java.util.List) -> checkCRL
    void checkCRLs(org.bouncycastle.x509.ExtendedPKIXParameters,java.security.cert.X509Certificate,java.util.Date,java.security.cert.X509Certificate,java.security.PublicKey,java.util.List) -> checkCRLs
    int prepareNextCertJ(java.security.cert.CertPath,int,int) -> prepareNextCertJ
    void prepareNextCertK(java.security.cert.CertPath,int) -> prepareNextCertK
    int prepareNextCertL(java.security.cert.CertPath,int,int) -> prepareNextCertL
    int prepareNextCertM(java.security.cert.CertPath,int,int) -> prepareNextCertM
    void prepareNextCertN(java.security.cert.CertPath,int) -> prepareNextCertN
    void prepareNextCertO(java.security.cert.CertPath,int,java.util.Set,java.util.List) -> prepareNextCertO
    int prepareNextCertH1(java.security.cert.CertPath,int,int) -> prepareNextCertH1
    int prepareNextCertH2(java.security.cert.CertPath,int,int) -> prepareNextCertH2
    int prepareNextCertH3(java.security.cert.CertPath,int,int) -> prepareNextCertH3
    int wrapupCertA(int,java.security.cert.X509Certificate) -> wrapupCertA
    int wrapupCertB(java.security.cert.CertPath,int,int) -> wrapupCertB
    void wrapupCertF(java.security.cert.CertPath,int,java.util.List,java.util.Set) -> wrapupCertF
    org.bouncycastle.jce.provider.PKIXPolicyNode wrapupCertG(java.security.cert.CertPath,org.bouncycastle.x509.ExtendedPKIXParameters,java.util.Set,int,java.util.List[],org.bouncycastle.jce.provider.PKIXPolicyNode,java.util.Set) -> wrapupCertG
org.bouncycastle.jce.provider.RFC3281CertPathUtilities -> org.bouncycastle.jce.provider.RFC3281CertPathUtilities:
    java.lang.String TARGET_INFORMATION -> TARGET_INFORMATION
    java.lang.String NO_REV_AVAIL -> NO_REV_AVAIL
    java.lang.String CRL_DISTRIBUTION_POINTS -> CRL_DISTRIBUTION_POINTS
    java.lang.String AUTHORITY_INFO_ACCESS -> AUTHORITY_INFO_ACCESS
    void processAttrCert7(org.bouncycastle.x509.X509AttributeCertificate,java.security.cert.CertPath,java.security.cert.CertPath,org.bouncycastle.x509.ExtendedPKIXParameters) -> processAttrCert7
    void checkCRLs(org.bouncycastle.x509.X509AttributeCertificate,org.bouncycastle.x509.ExtendedPKIXParameters,java.security.cert.X509Certificate,java.util.Date,java.util.List) -> checkCRLs
    void additionalChecks(org.bouncycastle.x509.X509AttributeCertificate,org.bouncycastle.x509.ExtendedPKIXParameters) -> additionalChecks
    void processAttrCert5(org.bouncycastle.x509.X509AttributeCertificate,org.bouncycastle.x509.ExtendedPKIXParameters) -> processAttrCert5
    void processAttrCert4(java.security.cert.X509Certificate,org.bouncycastle.x509.ExtendedPKIXParameters) -> processAttrCert4
    void processAttrCert3(java.security.cert.X509Certificate,org.bouncycastle.x509.ExtendedPKIXParameters) -> processAttrCert3
    java.security.cert.CertPathValidatorResult processAttrCert2(java.security.cert.CertPath,org.bouncycastle.x509.ExtendedPKIXParameters) -> processAttrCert2
    java.security.cert.CertPath processAttrCert1(org.bouncycastle.x509.X509AttributeCertificate,org.bouncycastle.x509.ExtendedPKIXParameters) -> processAttrCert1
    void checkCRL(org.bouncycastle.asn1.x509.DistributionPoint,org.bouncycastle.x509.X509AttributeCertificate,org.bouncycastle.x509.ExtendedPKIXParameters,java.util.Date,java.security.cert.X509Certificate,org.bouncycastle.jce.provider.CertStatus,org.bouncycastle.jce.provider.ReasonsMask,java.util.List) -> checkCRL
org.bouncycastle.jce.provider.ReasonsMask -> org.bouncycastle.jce.provider.ReasonsMask:
    int _reasons -> _reasons
    org.bouncycastle.jce.provider.ReasonsMask allReasons -> allReasons
    void addReasons(org.bouncycastle.jce.provider.ReasonsMask) -> addReasons
    boolean isAllReasons() -> isAllReasons
    org.bouncycastle.jce.provider.ReasonsMask intersect(org.bouncycastle.jce.provider.ReasonsMask) -> intersect
    boolean hasNewReasons(org.bouncycastle.jce.provider.ReasonsMask) -> hasNewReasons
    int getReasons() -> getReasons
org.bouncycastle.jce.provider.X509AttrCertParser -> org.bouncycastle.jce.provider.X509AttrCertParser:
    org.bouncycastle.jce.provider.PEMUtil PEM_PARSER -> PEM_PARSER
    org.bouncycastle.asn1.ASN1Set sData -> sData
    int sDataObjectCount -> sDataObjectCount
    java.io.InputStream currentStream -> currentStream
    org.bouncycastle.x509.X509AttributeCertificate readDERCertificate(java.io.InputStream) -> readDERCertificate
    org.bouncycastle.x509.X509AttributeCertificate getCertificate() -> getCertificate
    org.bouncycastle.x509.X509AttributeCertificate readPEMCertificate(java.io.InputStream) -> readPEMCertificate
    void engineInit(java.io.InputStream) -> engineInit
    java.lang.Object engineRead() -> engineRead
    java.util.Collection engineReadAll() -> engineReadAll
org.bouncycastle.jce.provider.X509CRLEntryObject -> org.bouncycastle.jce.provider.X509CRLEntryObject:
    org.bouncycastle.asn1.x509.TBSCertList$CRLEntry c -> c
    org.bouncycastle.asn1.x500.X500Name certificateIssuer -> certificateIssuer
    int hashValue -> hashValue
    boolean isHashValueSet -> isHashValueSet
    boolean hasUnsupportedCriticalExtension() -> hasUnsupportedCriticalExtension
    org.bouncycastle.asn1.x500.X500Name loadCertificateIssuer(boolean,org.bouncycastle.asn1.x500.X500Name) -> loadCertificateIssuer
    javax.security.auth.x500.X500Principal getCertificateIssuer() -> getCertificateIssuer
    java.util.Set getExtensionOIDs(boolean) -> getExtensionOIDs
    java.util.Set getCriticalExtensionOIDs() -> getCriticalExtensionOIDs
    java.util.Set getNonCriticalExtensionOIDs() -> getNonCriticalExtensionOIDs
    org.bouncycastle.asn1.x509.Extension getExtension(org.bouncycastle.asn1.ASN1ObjectIdentifier) -> getExtension
    byte[] getExtensionValue(java.lang.String) -> getExtensionValue
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    byte[] getEncoded() -> getEncoded
    java.math.BigInteger getSerialNumber() -> getSerialNumber
    java.util.Date getRevocationDate() -> getRevocationDate
    boolean hasExtensions() -> hasExtensions
    java.lang.String toString() -> toString
org.bouncycastle.jce.provider.X509CRLObject -> org.bouncycastle.jce.provider.X509CRLObject:
    org.bouncycastle.asn1.x509.CertificateList c -> c
    java.lang.String sigAlgName -> sigAlgName
    byte[] sigAlgParams -> sigAlgParams
    boolean isIndirect -> isIndirect
    boolean isHashCodeSet -> isHashCodeSet
    int hashCodeValue -> hashCodeValue
    boolean isIndirectCRL(java.security.cert.X509CRL) -> isIndirectCRL
    boolean hasUnsupportedCriticalExtension() -> hasUnsupportedCriticalExtension
    java.util.Set getExtensionOIDs(boolean) -> getExtensionOIDs
    java.util.Set getCriticalExtensionOIDs() -> getCriticalExtensionOIDs
    java.util.Set getNonCriticalExtensionOIDs() -> getNonCriticalExtensionOIDs
    byte[] getExtensionValue(java.lang.String) -> getExtensionValue
    byte[] getEncoded() -> getEncoded
    void verify(java.security.PublicKey) -> verify
    void verify(java.security.PublicKey,java.lang.String) -> verify
    int getVersion() -> getVersion
    java.security.Principal getIssuerDN() -> getIssuerDN
    javax.security.auth.x500.X500Principal getIssuerX500Principal() -> getIssuerX500Principal
    java.util.Date getThisUpdate() -> getThisUpdate
    java.util.Date getNextUpdate() -> getNextUpdate
    java.util.Set loadCRLEntries() -> loadCRLEntries
    java.security.cert.X509CRLEntry getRevokedCertificate(java.math.BigInteger) -> getRevokedCertificate
    java.util.Set getRevokedCertificates() -> getRevokedCertificates
    byte[] getTBSCertList() -> getTBSCertList
    byte[] getSignature() -> getSignature
    java.lang.String getSigAlgName() -> getSigAlgName
    java.lang.String getSigAlgOID() -> getSigAlgOID
    byte[] getSigAlgParams() -> getSigAlgParams
    java.lang.String toString() -> toString
    boolean isRevoked(java.security.cert.Certificate) -> isRevoked
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
org.bouncycastle.jce.provider.X509CRLParser -> org.bouncycastle.jce.provider.X509CRLParser:
    org.bouncycastle.jce.provider.PEMUtil PEM_PARSER -> PEM_PARSER
    org.bouncycastle.asn1.ASN1Set sData -> sData
    int sDataObjectCount -> sDataObjectCount
    java.io.InputStream currentStream -> currentStream
    java.security.cert.CRL readDERCRL(java.io.InputStream) -> readDERCRL
    java.security.cert.CRL getCRL() -> getCRL
    java.security.cert.CRL readPEMCRL(java.io.InputStream) -> readPEMCRL
    void engineInit(java.io.InputStream) -> engineInit
    java.lang.Object engineRead() -> engineRead
    java.util.Collection engineReadAll() -> engineReadAll
org.bouncycastle.jce.provider.X509CertPairParser -> org.bouncycastle.jce.provider.X509CertPairParser:
    java.io.InputStream currentStream -> currentStream
    org.bouncycastle.x509.X509CertificatePair readDERCrossCertificatePair(java.io.InputStream) -> readDERCrossCertificatePair
    void engineInit(java.io.InputStream) -> engineInit
    java.lang.Object engineRead() -> engineRead
    java.util.Collection engineReadAll() -> engineReadAll
org.bouncycastle.jce.provider.X509CertParser -> org.bouncycastle.jce.provider.X509CertParser:
    org.bouncycastle.jce.provider.PEMUtil PEM_PARSER -> PEM_PARSER
    org.bouncycastle.asn1.ASN1Set sData -> sData
    int sDataObjectCount -> sDataObjectCount
    java.io.InputStream currentStream -> currentStream
    java.security.cert.Certificate readDERCertificate(java.io.InputStream) -> readDERCertificate
    java.security.cert.Certificate getCertificate() -> getCertificate
    java.security.cert.Certificate readPEMCertificate(java.io.InputStream) -> readPEMCertificate
    void engineInit(java.io.InputStream) -> engineInit
    java.lang.Object engineRead() -> engineRead
    java.util.Collection engineReadAll() -> engineReadAll
org.bouncycastle.jce.provider.X509CertificateObject -> org.bouncycastle.jce.provider.X509CertificateObject:
    org.bouncycastle.asn1.x509.Certificate c -> c
    org.bouncycastle.asn1.x509.BasicConstraints basicConstraints -> basicConstraints
    boolean[] keyUsage -> keyUsage
    boolean hashValueSet -> hashValueSet
    int hashValue -> hashValue
    org.bouncycastle.jce.interfaces.PKCS12BagAttributeCarrier attrCarrier -> attrCarrier
    void checkValidity() -> checkValidity
    void checkValidity(java.util.Date) -> checkValidity
    int getVersion() -> getVersion
    java.math.BigInteger getSerialNumber() -> getSerialNumber
    java.security.Principal getIssuerDN() -> getIssuerDN
    javax.security.auth.x500.X500Principal getIssuerX500Principal() -> getIssuerX500Principal
    java.security.Principal getSubjectDN() -> getSubjectDN
    javax.security.auth.x500.X500Principal getSubjectX500Principal() -> getSubjectX500Principal
    java.util.Date getNotBefore() -> getNotBefore
    java.util.Date getNotAfter() -> getNotAfter
    byte[] getTBSCertificate() -> getTBSCertificate
    byte[] getSignature() -> getSignature
    java.lang.String getSigAlgName() -> getSigAlgName
    java.lang.String getSigAlgOID() -> getSigAlgOID
    byte[] getSigAlgParams() -> getSigAlgParams
    boolean[] getIssuerUniqueID() -> getIssuerUniqueID
    boolean[] getSubjectUniqueID() -> getSubjectUniqueID
    boolean[] getKeyUsage() -> getKeyUsage
    java.util.List getExtendedKeyUsage() -> getExtendedKeyUsage
    int getBasicConstraints() -> getBasicConstraints
    java.util.Collection getSubjectAlternativeNames() -> getSubjectAlternativeNames
    java.util.Collection getIssuerAlternativeNames() -> getIssuerAlternativeNames
    java.util.Set getCriticalExtensionOIDs() -> getCriticalExtensionOIDs
    byte[] getExtensionBytes(java.lang.String) -> getExtensionBytes
    byte[] getExtensionValue(java.lang.String) -> getExtensionValue
    java.util.Set getNonCriticalExtensionOIDs() -> getNonCriticalExtensionOIDs
    boolean hasUnsupportedCriticalExtension() -> hasUnsupportedCriticalExtension
    java.security.PublicKey getPublicKey() -> getPublicKey
    byte[] getEncoded() -> getEncoded
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    int calculateHashCode() -> calculateHashCode
    void setBagAttribute(org.bouncycastle.asn1.ASN1ObjectIdentifier,org.bouncycastle.asn1.ASN1Encodable) -> setBagAttribute
    org.bouncycastle.asn1.ASN1Encodable getBagAttribute(org.bouncycastle.asn1.ASN1ObjectIdentifier) -> getBagAttribute
    java.util.Enumeration getBagAttributeKeys() -> getBagAttributeKeys
    java.lang.String toString() -> toString
    void verify(java.security.PublicKey) -> verify
    void verify(java.security.PublicKey,java.lang.String) -> verify
    void checkSignature(java.security.PublicKey,java.security.Signature) -> checkSignature
    boolean isAlgIdEqual(org.bouncycastle.asn1.x509.AlgorithmIdentifier,org.bouncycastle.asn1.x509.AlgorithmIdentifier) -> isAlgIdEqual
    java.util.Collection getAlternativeNames(byte[]) -> getAlternativeNames
org.bouncycastle.jce.provider.X509LDAPCertStoreSpi -> org.bouncycastle.jce.provider.X509LDAPCertStoreSpi:
    org.bouncycastle.jce.X509LDAPCertStoreParameters params -> params
    java.lang.String LDAP_PROVIDER -> LDAP_PROVIDER
    java.lang.String REFERRALS_IGNORE -> REFERRALS_IGNORE
    java.lang.String SEARCH_SECURITY_LEVEL -> SEARCH_SECURITY_LEVEL
    java.lang.String URL_CONTEXT_PREFIX -> URL_CONTEXT_PREFIX
    javax.naming.directory.DirContext connectLDAP() -> connectLDAP
    java.lang.String parseDN(java.lang.String,java.lang.String) -> parseDN
    java.util.Collection engineGetCertificates(java.security.cert.CertSelector) -> engineGetCertificates
    java.util.Set certSubjectSerialSearch(java.security.cert.X509CertSelector,java.lang.String[],java.lang.String,java.lang.String) -> certSubjectSerialSearch
    java.util.Set getEndCertificates(java.security.cert.X509CertSelector) -> getEndCertificates
    java.util.Set getCACertificates(java.security.cert.X509CertSelector) -> getCACertificates
    java.util.Set getCrossCertificates(java.security.cert.X509CertSelector) -> getCrossCertificates
    java.util.Collection engineGetCRLs(java.security.cert.CRLSelector) -> engineGetCRLs
    java.util.Set search(java.lang.String,java.lang.String,java.lang.String[]) -> search
org.bouncycastle.jce.provider.X509SignatureUtil -> org.bouncycastle.jce.provider.X509SignatureUtil:
    org.bouncycastle.asn1.ASN1Null derNull -> derNull
    void setSignatureParameters(java.security.Signature,org.bouncycastle.asn1.ASN1Encodable) -> setSignatureParameters
    java.lang.String getSignatureName(org.bouncycastle.asn1.x509.AlgorithmIdentifier) -> getSignatureName
    java.lang.String getDigestAlgName(org.bouncycastle.asn1.ASN1ObjectIdentifier) -> getDigestAlgName
org.bouncycastle.jce.provider.X509StoreAttrCertCollection -> org.bouncycastle.jce.provider.X509StoreAttrCertCollection:
    org.bouncycastle.util.CollectionStore _store -> _store
    void engineInit(org.bouncycastle.x509.X509StoreParameters) -> engineInit
    java.util.Collection engineGetMatches(org.bouncycastle.util.Selector) -> engineGetMatches
org.bouncycastle.jce.provider.X509StoreCRLCollection -> org.bouncycastle.jce.provider.X509StoreCRLCollection:
    org.bouncycastle.util.CollectionStore _store -> _store
    void engineInit(org.bouncycastle.x509.X509StoreParameters) -> engineInit
    java.util.Collection engineGetMatches(org.bouncycastle.util.Selector) -> engineGetMatches
org.bouncycastle.jce.provider.X509StoreCertCollection -> org.bouncycastle.jce.provider.X509StoreCertCollection:
    org.bouncycastle.util.CollectionStore _store -> _store
    void engineInit(org.bouncycastle.x509.X509StoreParameters) -> engineInit
    java.util.Collection engineGetMatches(org.bouncycastle.util.Selector) -> engineGetMatches
org.bouncycastle.jce.provider.X509StoreCertPairCollection -> org.bouncycastle.jce.provider.X509StoreCertPairCollection:
    org.bouncycastle.util.CollectionStore _store -> _store
    void engineInit(org.bouncycastle.x509.X509StoreParameters) -> engineInit
    java.util.Collection engineGetMatches(org.bouncycastle.util.Selector) -> engineGetMatches
org.bouncycastle.jce.provider.X509StoreLDAPAttrCerts -> org.bouncycastle.jce.provider.X509StoreLDAPAttrCerts:
    org.bouncycastle.x509.util.LDAPStoreHelper helper -> helper
    void engineInit(org.bouncycastle.x509.X509StoreParameters) -> engineInit
    java.util.Collection engineGetMatches(org.bouncycastle.util.Selector) -> engineGetMatches
org.bouncycastle.jce.provider.X509StoreLDAPCRLs -> org.bouncycastle.jce.provider.X509StoreLDAPCRLs:
    org.bouncycastle.x509.util.LDAPStoreHelper helper -> helper
    void engineInit(org.bouncycastle.x509.X509StoreParameters) -> engineInit
    java.util.Collection engineGetMatches(org.bouncycastle.util.Selector) -> engineGetMatches
org.bouncycastle.jce.provider.X509StoreLDAPCertPairs -> org.bouncycastle.jce.provider.X509StoreLDAPCertPairs:
    org.bouncycastle.x509.util.LDAPStoreHelper helper -> helper
    void engineInit(org.bouncycastle.x509.X509StoreParameters) -> engineInit
    java.util.Collection engineGetMatches(org.bouncycastle.util.Selector) -> engineGetMatches
org.bouncycastle.jce.provider.X509StoreLDAPCerts -> org.bouncycastle.jce.provider.X509StoreLDAPCerts:
    org.bouncycastle.x509.util.LDAPStoreHelper helper -> helper
    void engineInit(org.bouncycastle.x509.X509StoreParameters) -> engineInit
    java.util.Collection engineGetMatches(org.bouncycastle.util.Selector) -> engineGetMatches
    java.util.Collection getCertificatesFromCrossCertificatePairs(org.bouncycastle.x509.X509CertStoreSelector) -> getCertificatesFromCrossCertificatePairs
org.bouncycastle.jce.spec.ECKeySpec -> org.bouncycastle.jce.spec.ECKeySpec:
    org.bouncycastle.jce.spec.ECParameterSpec spec -> spec
    org.bouncycastle.jce.spec.ECParameterSpec getParams() -> getParams
org.bouncycastle.jce.spec.ECNamedCurveGenParameterSpec -> org.bouncycastle.jce.spec.ECNamedCurveGenParameterSpec:
    java.lang.String name -> name
    java.lang.String getName() -> getName
org.bouncycastle.jce.spec.ECNamedCurveParameterSpec -> org.bouncycastle.jce.spec.ECNamedCurveParameterSpec:
    java.lang.String name -> name
    java.lang.String getName() -> getName
org.bouncycastle.jce.spec.ECNamedCurveSpec -> org.bouncycastle.jce.spec.ECNamedCurveSpec:
    java.lang.String name -> name
    java.security.spec.EllipticCurve convertCurve(org.bouncycastle.math.ec.ECCurve,byte[]) -> convertCurve
    java.security.spec.ECPoint convertPoint(org.bouncycastle.math.ec.ECPoint) -> convertPoint
    java.lang.String getName() -> getName
org.bouncycastle.jce.spec.ECParameterSpec -> org.bouncycastle.jce.spec.ECParameterSpec:
    org.bouncycastle.math.ec.ECCurve curve -> curve
    byte[] seed -> seed
    org.bouncycastle.math.ec.ECPoint G -> G
    java.math.BigInteger n -> n
    java.math.BigInteger h -> h
    org.bouncycastle.math.ec.ECCurve getCurve() -> getCurve
    org.bouncycastle.math.ec.ECPoint getG() -> getG
    java.math.BigInteger getN() -> getN
    java.math.BigInteger getH() -> getH
    byte[] getSeed() -> getSeed
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
org.bouncycastle.jce.spec.ECPrivateKeySpec -> org.bouncycastle.jce.spec.ECPrivateKeySpec:
    java.math.BigInteger d -> d
    java.math.BigInteger getD() -> getD
org.bouncycastle.jce.spec.ECPublicKeySpec -> org.bouncycastle.jce.spec.ECPublicKeySpec:
    org.bouncycastle.math.ec.ECPoint q -> q
    org.bouncycastle.math.ec.ECPoint getQ() -> getQ
org.bouncycastle.jce.spec.ElGamalGenParameterSpec -> org.bouncycastle.jce.spec.ElGamalGenParameterSpec:
    int primeSize -> primeSize
    int getPrimeSize() -> getPrimeSize
org.bouncycastle.jce.spec.ElGamalKeySpec -> org.bouncycastle.jce.spec.ElGamalKeySpec:
    org.bouncycastle.jce.spec.ElGamalParameterSpec spec -> spec
    org.bouncycastle.jce.spec.ElGamalParameterSpec getParams() -> getParams
org.bouncycastle.jce.spec.ElGamalParameterSpec -> org.bouncycastle.jce.spec.ElGamalParameterSpec:
    java.math.BigInteger p -> p
    java.math.BigInteger g -> g
    java.math.BigInteger getP() -> getP
    java.math.BigInteger getG() -> getG
org.bouncycastle.jce.spec.ElGamalPrivateKeySpec -> org.bouncycastle.jce.spec.ElGamalPrivateKeySpec:
    java.math.BigInteger x -> x
    java.math.BigInteger getX() -> getX
org.bouncycastle.jce.spec.ElGamalPublicKeySpec -> org.bouncycastle.jce.spec.ElGamalPublicKeySpec:
    java.math.BigInteger y -> y
    java.math.BigInteger getY() -> getY
org.bouncycastle.jce.spec.GOST28147ParameterSpec -> org.bouncycastle.jce.spec.GOST28147ParameterSpec:
org.bouncycastle.jce.spec.GOST3410ParameterSpec -> org.bouncycastle.jce.spec.GOST3410ParameterSpec:
    org.bouncycastle.jce.spec.GOST3410PublicKeyParameterSetSpec keyParameters -> keyParameters
    java.lang.String keyParamSetOID -> keyParamSetOID
    java.lang.String digestParamSetOID -> digestParamSetOID
    java.lang.String encryptionParamSetOID -> encryptionParamSetOID
    java.lang.String getPublicKeyParamSetOID() -> getPublicKeyParamSetOID
    org.bouncycastle.jce.spec.GOST3410PublicKeyParameterSetSpec getPublicKeyParameters() -> getPublicKeyParameters
    java.lang.String getDigestParamSetOID() -> getDigestParamSetOID
    java.lang.String getEncryptionParamSetOID() -> getEncryptionParamSetOID
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    org.bouncycastle.jce.spec.GOST3410ParameterSpec fromPublicKeyAlg(org.bouncycastle.asn1.cryptopro.GOST3410PublicKeyAlgParameters) -> fromPublicKeyAlg
org.bouncycastle.jce.spec.GOST3410PrivateKeySpec -> org.bouncycastle.jce.spec.GOST3410PrivateKeySpec:
    java.math.BigInteger x -> x
    java.math.BigInteger p -> p
    java.math.BigInteger q -> q
    java.math.BigInteger a -> a
    java.math.BigInteger getX() -> getX
    java.math.BigInteger getP() -> getP
    java.math.BigInteger getQ() -> getQ
    java.math.BigInteger getA() -> getA
org.bouncycastle.jce.spec.GOST3410PublicKeyParameterSetSpec -> org.bouncycastle.jce.spec.GOST3410PublicKeyParameterSetSpec:
    java.math.BigInteger p -> p
    java.math.BigInteger q -> q
    java.math.BigInteger a -> a
    java.math.BigInteger getP() -> getP
    java.math.BigInteger getQ() -> getQ
    java.math.BigInteger getA() -> getA
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
org.bouncycastle.jce.spec.GOST3410PublicKeySpec -> org.bouncycastle.jce.spec.GOST3410PublicKeySpec:
    java.math.BigInteger y -> y
    java.math.BigInteger p -> p
    java.math.BigInteger q -> q
    java.math.BigInteger a -> a
    java.math.BigInteger getY() -> getY
    java.math.BigInteger getP() -> getP
    java.math.BigInteger getQ() -> getQ
    java.math.BigInteger getA() -> getA
org.bouncycastle.jce.spec.IEKeySpec -> org.bouncycastle.jce.spec.IEKeySpec:
    java.security.PublicKey pubKey -> pubKey
    java.security.PrivateKey privKey -> privKey
    java.security.PublicKey getPublic() -> getPublic
    java.security.PrivateKey getPrivate() -> getPrivate
    java.lang.String getAlgorithm() -> getAlgorithm
    java.lang.String getFormat() -> getFormat
    byte[] getEncoded() -> getEncoded
org.bouncycastle.jce.spec.IESParameterSpec -> org.bouncycastle.jce.spec.IESParameterSpec:
    byte[] derivation -> derivation
    byte[] encoding -> encoding
    int macKeySize -> macKeySize
    int cipherKeySize -> cipherKeySize
    byte[] nonce -> nonce
    byte[] getDerivationV() -> getDerivationV
    byte[] getEncodingV() -> getEncodingV
    int getMacKeySize() -> getMacKeySize
    int getCipherKeySize() -> getCipherKeySize
    byte[] getNonce() -> getNonce
org.bouncycastle.jce.spec.MQVPrivateKeySpec -> org.bouncycastle.jce.spec.MQVPrivateKeySpec:
    java.security.PrivateKey staticPrivateKey -> staticPrivateKey
    java.security.PrivateKey ephemeralPrivateKey -> ephemeralPrivateKey
    java.security.PublicKey ephemeralPublicKey -> ephemeralPublicKey
    java.security.PrivateKey getStaticPrivateKey() -> getStaticPrivateKey
    java.security.PrivateKey getEphemeralPrivateKey() -> getEphemeralPrivateKey
    java.security.PublicKey getEphemeralPublicKey() -> getEphemeralPublicKey
    java.lang.String getAlgorithm() -> getAlgorithm
    java.lang.String getFormat() -> getFormat
    byte[] getEncoded() -> getEncoded
org.bouncycastle.jce.spec.MQVPublicKeySpec -> org.bouncycastle.jce.spec.MQVPublicKeySpec:
    java.security.PublicKey staticKey -> staticKey
    java.security.PublicKey ephemeralKey -> ephemeralKey
    java.security.PublicKey getStaticKey() -> getStaticKey
    java.security.PublicKey getEphemeralKey() -> getEphemeralKey
    java.lang.String getAlgorithm() -> getAlgorithm
    java.lang.String getFormat() -> getFormat
    byte[] getEncoded() -> getEncoded
org.bouncycastle.jce.spec.RepeatedSecretKeySpec -> org.bouncycastle.jce.spec.RepeatedSecretKeySpec:
    java.lang.String algorithm -> algorithm
org.bouncycastle.math.ec.AbstractECMultiplier -> org.bouncycastle.math.ec.AbstractECMultiplier:
    org.bouncycastle.math.ec.ECPoint multiply(org.bouncycastle.math.ec.ECPoint,java.math.BigInteger) -> multiply
    org.bouncycastle.math.ec.ECPoint multiplyPositive(org.bouncycastle.math.ec.ECPoint,java.math.BigInteger) -> multiplyPositive
org.bouncycastle.math.ec.DoubleAddMultiplier -> org.bouncycastle.math.ec.DoubleAddMultiplier:
    org.bouncycastle.math.ec.ECPoint multiplyPositive(org.bouncycastle.math.ec.ECPoint,java.math.BigInteger) -> multiplyPositive
org.bouncycastle.math.ec.ECAlgorithms -> org.bouncycastle.math.ec.ECAlgorithms:
    boolean isF2mCurve(org.bouncycastle.math.ec.ECCurve) -> isF2mCurve
    boolean isFpCurve(org.bouncycastle.math.ec.ECCurve) -> isFpCurve
    org.bouncycastle.math.ec.ECPoint sumOfMultiplies(org.bouncycastle.math.ec.ECPoint[],java.math.BigInteger[]) -> sumOfMultiplies
    org.bouncycastle.math.ec.ECPoint sumOfTwoMultiplies(org.bouncycastle.math.ec.ECPoint,java.math.BigInteger,org.bouncycastle.math.ec.ECPoint,java.math.BigInteger) -> sumOfTwoMultiplies
    org.bouncycastle.math.ec.ECPoint shamirsTrick(org.bouncycastle.math.ec.ECPoint,java.math.BigInteger,org.bouncycastle.math.ec.ECPoint,java.math.BigInteger) -> shamirsTrick
    org.bouncycastle.math.ec.ECPoint importPoint(org.bouncycastle.math.ec.ECCurve,org.bouncycastle.math.ec.ECPoint) -> importPoint
    void montgomeryTrick(org.bouncycastle.math.ec.ECFieldElement[],int,int) -> montgomeryTrick
    org.bouncycastle.math.ec.ECPoint referenceMultiply(org.bouncycastle.math.ec.ECPoint,java.math.BigInteger) -> referenceMultiply
    org.bouncycastle.math.ec.ECPoint validatePoint(org.bouncycastle.math.ec.ECPoint) -> validatePoint
    org.bouncycastle.math.ec.ECPoint implShamirsTrickJsf(org.bouncycastle.math.ec.ECPoint,java.math.BigInteger,org.bouncycastle.math.ec.ECPoint,java.math.BigInteger) -> implShamirsTrickJsf
    org.bouncycastle.math.ec.ECPoint implShamirsTrickWNaf(org.bouncycastle.math.ec.ECPoint,java.math.BigInteger,org.bouncycastle.math.ec.ECPoint,java.math.BigInteger) -> implShamirsTrickWNaf
    org.bouncycastle.math.ec.ECPoint implShamirsTrickWNaf(org.bouncycastle.math.ec.ECPoint,java.math.BigInteger,org.bouncycastle.math.ec.ECPointMap,java.math.BigInteger) -> implShamirsTrickWNaf
    org.bouncycastle.math.ec.ECPoint implShamirsTrickWNaf(org.bouncycastle.math.ec.ECPoint[],org.bouncycastle.math.ec.ECPoint[],byte[],org.bouncycastle.math.ec.ECPoint[],org.bouncycastle.math.ec.ECPoint[],byte[]) -> implShamirsTrickWNaf
    org.bouncycastle.math.ec.ECPoint implSumOfMultiplies(org.bouncycastle.math.ec.ECPoint[],java.math.BigInteger[]) -> implSumOfMultiplies
    org.bouncycastle.math.ec.ECPoint implSumOfMultipliesGLV(org.bouncycastle.math.ec.ECPoint[],java.math.BigInteger[],org.bouncycastle.math.ec.endo.GLVEndomorphism) -> implSumOfMultipliesGLV
    org.bouncycastle.math.ec.ECPoint implSumOfMultiplies(org.bouncycastle.math.ec.ECPoint[],org.bouncycastle.math.ec.ECPointMap,java.math.BigInteger[]) -> implSumOfMultiplies
    org.bouncycastle.math.ec.ECPoint implSumOfMultiplies(boolean[],org.bouncycastle.math.ec.WNafPreCompInfo[],byte[][]) -> implSumOfMultiplies
org.bouncycastle.math.ec.ECConstants -> org.bouncycastle.math.ec.ECConstants:
    java.math.BigInteger ZERO -> ZERO
    java.math.BigInteger ONE -> ONE
    java.math.BigInteger TWO -> TWO
    java.math.BigInteger THREE -> THREE
    java.math.BigInteger FOUR -> FOUR
org.bouncycastle.math.ec.ECCurve -> org.bouncycastle.math.ec.ECCurve:
    int COORD_AFFINE -> COORD_AFFINE
    int COORD_HOMOGENEOUS -> COORD_HOMOGENEOUS
    int COORD_JACOBIAN -> COORD_JACOBIAN
    int COORD_JACOBIAN_CHUDNOVSKY -> COORD_JACOBIAN_CHUDNOVSKY
    int COORD_JACOBIAN_MODIFIED -> COORD_JACOBIAN_MODIFIED
    int COORD_LAMBDA_AFFINE -> COORD_LAMBDA_AFFINE
    int COORD_LAMBDA_PROJECTIVE -> COORD_LAMBDA_PROJECTIVE
    int COORD_SKEWED -> COORD_SKEWED
    org.bouncycastle.math.field.FiniteField field -> field
    org.bouncycastle.math.ec.ECFieldElement a -> a
    org.bouncycastle.math.ec.ECFieldElement b -> b
    java.math.BigInteger order -> order
    java.math.BigInteger cofactor -> cofactor
    int coord -> coord
    org.bouncycastle.math.ec.endo.ECEndomorphism endomorphism -> endomorphism
    org.bouncycastle.math.ec.ECMultiplier multiplier -> multiplier
    int[] getAllCoordinateSystems() -> getAllCoordinateSystems
    int getFieldSize() -> getFieldSize
    org.bouncycastle.math.ec.ECFieldElement fromBigInteger(java.math.BigInteger) -> fromBigInteger
    org.bouncycastle.math.ec.ECCurve$Config configure() -> configure
    org.bouncycastle.math.ec.ECPoint validatePoint(java.math.BigInteger,java.math.BigInteger) -> validatePoint
    org.bouncycastle.math.ec.ECPoint validatePoint(java.math.BigInteger,java.math.BigInteger,boolean) -> validatePoint
    org.bouncycastle.math.ec.ECPoint createPoint(java.math.BigInteger,java.math.BigInteger) -> createPoint
    org.bouncycastle.math.ec.ECPoint createPoint(java.math.BigInteger,java.math.BigInteger,boolean) -> createPoint
    org.bouncycastle.math.ec.ECCurve cloneCurve() -> cloneCurve
    org.bouncycastle.math.ec.ECPoint createRawPoint(org.bouncycastle.math.ec.ECFieldElement,org.bouncycastle.math.ec.ECFieldElement,boolean) -> createRawPoint
    org.bouncycastle.math.ec.ECPoint createRawPoint(org.bouncycastle.math.ec.ECFieldElement,org.bouncycastle.math.ec.ECFieldElement,org.bouncycastle.math.ec.ECFieldElement[],boolean) -> createRawPoint
    org.bouncycastle.math.ec.ECMultiplier createDefaultMultiplier() -> createDefaultMultiplier
    boolean supportsCoordinateSystem(int) -> supportsCoordinateSystem
    org.bouncycastle.math.ec.PreCompInfo getPreCompInfo(org.bouncycastle.math.ec.ECPoint,java.lang.String) -> getPreCompInfo
    void setPreCompInfo(org.bouncycastle.math.ec.ECPoint,java.lang.String,org.bouncycastle.math.ec.PreCompInfo) -> setPreCompInfo
    org.bouncycastle.math.ec.ECPoint importPoint(org.bouncycastle.math.ec.ECPoint) -> importPoint
    void normalizeAll(org.bouncycastle.math.ec.ECPoint[]) -> normalizeAll
    org.bouncycastle.math.ec.ECPoint getInfinity() -> getInfinity
    org.bouncycastle.math.field.FiniteField getField() -> getField
    org.bouncycastle.math.ec.ECFieldElement getA() -> getA
    org.bouncycastle.math.ec.ECFieldElement getB() -> getB
    java.math.BigInteger getOrder() -> getOrder
    java.math.BigInteger getCofactor() -> getCofactor
    int getCoordinateSystem() -> getCoordinateSystem
    org.bouncycastle.math.ec.ECPoint decompressPoint(int,java.math.BigInteger) -> decompressPoint
    org.bouncycastle.math.ec.endo.ECEndomorphism getEndomorphism() -> getEndomorphism
    org.bouncycastle.math.ec.ECMultiplier getMultiplier() -> getMultiplier
    org.bouncycastle.math.ec.ECPoint decodePoint(byte[]) -> decodePoint
    void checkPoint(org.bouncycastle.math.ec.ECPoint) -> checkPoint
    void checkPoints(org.bouncycastle.math.ec.ECPoint[]) -> checkPoints
    boolean equals(org.bouncycastle.math.ec.ECCurve) -> equals
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
org.bouncycastle.math.ec.ECCurve$AbstractF2m -> org.bouncycastle.math.ec.ECCurve$AbstractF2m:
    org.bouncycastle.math.field.FiniteField buildField(int,int,int,int) -> buildField
org.bouncycastle.math.ec.ECCurve$AbstractFp -> org.bouncycastle.math.ec.ECCurve$AbstractFp:
    org.bouncycastle.math.ec.ECPoint decompressPoint(int,java.math.BigInteger) -> decompressPoint
org.bouncycastle.math.ec.ECCurve$Config -> org.bouncycastle.math.ec.ECCurve$Config:
    int coord -> coord
    org.bouncycastle.math.ec.endo.ECEndomorphism endomorphism -> endomorphism
    org.bouncycastle.math.ec.ECMultiplier multiplier -> multiplier
    org.bouncycastle.math.ec.ECCurve this$0 -> this$0
    org.bouncycastle.math.ec.ECCurve$Config setCoordinateSystem(int) -> setCoordinateSystem
    org.bouncycastle.math.ec.ECCurve$Config setEndomorphism(org.bouncycastle.math.ec.endo.ECEndomorphism) -> setEndomorphism
    org.bouncycastle.math.ec.ECCurve$Config setMultiplier(org.bouncycastle.math.ec.ECMultiplier) -> setMultiplier
    org.bouncycastle.math.ec.ECCurve create() -> create
org.bouncycastle.math.ec.ECCurve$F2m -> org.bouncycastle.math.ec.ECCurve$F2m:
    int F2M_DEFAULT_COORDS -> F2M_DEFAULT_COORDS
    int m -> m
    int k1 -> k1
    int k2 -> k2
    int k3 -> k3
    org.bouncycastle.math.ec.ECPoint$F2m infinity -> infinity
    byte mu -> mu
    java.math.BigInteger[] si -> si
    org.bouncycastle.math.ec.ECCurve cloneCurve() -> cloneCurve
    boolean supportsCoordinateSystem(int) -> supportsCoordinateSystem
    org.bouncycastle.math.ec.ECMultiplier createDefaultMultiplier() -> createDefaultMultiplier
    int getFieldSize() -> getFieldSize
    org.bouncycastle.math.ec.ECFieldElement fromBigInteger(java.math.BigInteger) -> fromBigInteger
    org.bouncycastle.math.ec.ECPoint createPoint(java.math.BigInteger,java.math.BigInteger,boolean) -> createPoint
    org.bouncycastle.math.ec.ECPoint createRawPoint(org.bouncycastle.math.ec.ECFieldElement,org.bouncycastle.math.ec.ECFieldElement,boolean) -> createRawPoint
    org.bouncycastle.math.ec.ECPoint createRawPoint(org.bouncycastle.math.ec.ECFieldElement,org.bouncycastle.math.ec.ECFieldElement,org.bouncycastle.math.ec.ECFieldElement[],boolean) -> createRawPoint
    org.bouncycastle.math.ec.ECPoint getInfinity() -> getInfinity
    boolean isKoblitz() -> isKoblitz
    byte getMu() -> getMu
    java.math.BigInteger[] getSi() -> getSi
    org.bouncycastle.math.ec.ECPoint decompressPoint(int,java.math.BigInteger) -> decompressPoint
    org.bouncycastle.math.ec.ECFieldElement solveQuadraticEquation(org.bouncycastle.math.ec.ECFieldElement) -> solveQuadraticEquation
    int getM() -> getM
    boolean isTrinomial() -> isTrinomial
    int getK1() -> getK1
    int getK2() -> getK2
    int getK3() -> getK3
    java.math.BigInteger getN() -> getN
    java.math.BigInteger getH() -> getH
org.bouncycastle.math.ec.ECCurve$Fp -> org.bouncycastle.math.ec.ECCurve$Fp:
    int FP_DEFAULT_COORDS -> FP_DEFAULT_COORDS
    java.math.BigInteger q -> q
    java.math.BigInteger r -> r
    org.bouncycastle.math.ec.ECPoint$Fp infinity -> infinity
    org.bouncycastle.math.ec.ECCurve cloneCurve() -> cloneCurve
    boolean supportsCoordinateSystem(int) -> supportsCoordinateSystem
    java.math.BigInteger getQ() -> getQ
    int getFieldSize() -> getFieldSize
    org.bouncycastle.math.ec.ECFieldElement fromBigInteger(java.math.BigInteger) -> fromBigInteger
    org.bouncycastle.math.ec.ECPoint createRawPoint(org.bouncycastle.math.ec.ECFieldElement,org.bouncycastle.math.ec.ECFieldElement,boolean) -> createRawPoint
    org.bouncycastle.math.ec.ECPoint createRawPoint(org.bouncycastle.math.ec.ECFieldElement,org.bouncycastle.math.ec.ECFieldElement,org.bouncycastle.math.ec.ECFieldElement[],boolean) -> createRawPoint
    org.bouncycastle.math.ec.ECPoint importPoint(org.bouncycastle.math.ec.ECPoint) -> importPoint
    org.bouncycastle.math.ec.ECPoint getInfinity() -> getInfinity
org.bouncycastle.math.ec.ECFieldElement -> org.bouncycastle.math.ec.ECFieldElement:
    java.math.BigInteger toBigInteger() -> toBigInteger
    java.lang.String getFieldName() -> getFieldName
    int getFieldSize() -> getFieldSize
    org.bouncycastle.math.ec.ECFieldElement add(org.bouncycastle.math.ec.ECFieldElement) -> add
    org.bouncycastle.math.ec.ECFieldElement addOne() -> addOne
    org.bouncycastle.math.ec.ECFieldElement subtract(org.bouncycastle.math.ec.ECFieldElement) -> subtract
    org.bouncycastle.math.ec.ECFieldElement multiply(org.bouncycastle.math.ec.ECFieldElement) -> multiply
    org.bouncycastle.math.ec.ECFieldElement divide(org.bouncycastle.math.ec.ECFieldElement) -> divide
    org.bouncycastle.math.ec.ECFieldElement negate() -> negate
    org.bouncycastle.math.ec.ECFieldElement square() -> square
    org.bouncycastle.math.ec.ECFieldElement invert() -> invert
    org.bouncycastle.math.ec.ECFieldElement sqrt() -> sqrt
    int bitLength() -> bitLength
    boolean isOne() -> isOne
    boolean isZero() -> isZero
    org.bouncycastle.math.ec.ECFieldElement multiplyMinusProduct(org.bouncycastle.math.ec.ECFieldElement,org.bouncycastle.math.ec.ECFieldElement,org.bouncycastle.math.ec.ECFieldElement) -> multiplyMinusProduct
    org.bouncycastle.math.ec.ECFieldElement multiplyPlusProduct(org.bouncycastle.math.ec.ECFieldElement,org.bouncycastle.math.ec.ECFieldElement,org.bouncycastle.math.ec.ECFieldElement) -> multiplyPlusProduct
    org.bouncycastle.math.ec.ECFieldElement squareMinusProduct(org.bouncycastle.math.ec.ECFieldElement,org.bouncycastle.math.ec.ECFieldElement) -> squareMinusProduct
    org.bouncycastle.math.ec.ECFieldElement squarePlusProduct(org.bouncycastle.math.ec.ECFieldElement,org.bouncycastle.math.ec.ECFieldElement) -> squarePlusProduct
    boolean testBitZero() -> testBitZero
    java.lang.String toString() -> toString
    byte[] getEncoded() -> getEncoded
org.bouncycastle.math.ec.ECFieldElement$F2m -> org.bouncycastle.math.ec.ECFieldElement$F2m:
    int GNB -> GNB
    int TPB -> TPB
    int PPB -> PPB
    int representation -> representation
    int m -> m
    int[] ks -> ks
    org.bouncycastle.math.ec.LongArray x -> x
    int bitLength() -> bitLength
    boolean isOne() -> isOne
    boolean isZero() -> isZero
    boolean testBitZero() -> testBitZero
    java.math.BigInteger toBigInteger() -> toBigInteger
    java.lang.String getFieldName() -> getFieldName
    int getFieldSize() -> getFieldSize
    void checkFieldElements(org.bouncycastle.math.ec.ECFieldElement,org.bouncycastle.math.ec.ECFieldElement) -> checkFieldElements
    org.bouncycastle.math.ec.ECFieldElement add(org.bouncycastle.math.ec.ECFieldElement) -> add
    org.bouncycastle.math.ec.ECFieldElement addOne() -> addOne
    org.bouncycastle.math.ec.ECFieldElement subtract(org.bouncycastle.math.ec.ECFieldElement) -> subtract
    org.bouncycastle.math.ec.ECFieldElement multiply(org.bouncycastle.math.ec.ECFieldElement) -> multiply
    org.bouncycastle.math.ec.ECFieldElement multiplyMinusProduct(org.bouncycastle.math.ec.ECFieldElement,org.bouncycastle.math.ec.ECFieldElement,org.bouncycastle.math.ec.ECFieldElement) -> multiplyMinusProduct
    org.bouncycastle.math.ec.ECFieldElement multiplyPlusProduct(org.bouncycastle.math.ec.ECFieldElement,org.bouncycastle.math.ec.ECFieldElement,org.bouncycastle.math.ec.ECFieldElement) -> multiplyPlusProduct
    org.bouncycastle.math.ec.ECFieldElement divide(org.bouncycastle.math.ec.ECFieldElement) -> divide
    org.bouncycastle.math.ec.ECFieldElement negate() -> negate
    org.bouncycastle.math.ec.ECFieldElement square() -> square
    org.bouncycastle.math.ec.ECFieldElement squareMinusProduct(org.bouncycastle.math.ec.ECFieldElement,org.bouncycastle.math.ec.ECFieldElement) -> squareMinusProduct
    org.bouncycastle.math.ec.ECFieldElement squarePlusProduct(org.bouncycastle.math.ec.ECFieldElement,org.bouncycastle.math.ec.ECFieldElement) -> squarePlusProduct
    org.bouncycastle.math.ec.ECFieldElement invert() -> invert
    org.bouncycastle.math.ec.ECFieldElement sqrt() -> sqrt
    int getRepresentation() -> getRepresentation
    int getM() -> getM
    int getK1() -> getK1
    int getK2() -> getK2
    int getK3() -> getK3
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
org.bouncycastle.math.ec.ECFieldElement$Fp -> org.bouncycastle.math.ec.ECFieldElement$Fp:
    java.math.BigInteger q -> q
    java.math.BigInteger r -> r
    java.math.BigInteger x -> x
    java.math.BigInteger calculateResidue(java.math.BigInteger) -> calculateResidue
    java.math.BigInteger toBigInteger() -> toBigInteger
    java.lang.String getFieldName() -> getFieldName
    int getFieldSize() -> getFieldSize
    java.math.BigInteger getQ() -> getQ
    org.bouncycastle.math.ec.ECFieldElement add(org.bouncycastle.math.ec.ECFieldElement) -> add
    org.bouncycastle.math.ec.ECFieldElement addOne() -> addOne
    org.bouncycastle.math.ec.ECFieldElement subtract(org.bouncycastle.math.ec.ECFieldElement) -> subtract
    org.bouncycastle.math.ec.ECFieldElement multiply(org.bouncycastle.math.ec.ECFieldElement) -> multiply
    org.bouncycastle.math.ec.ECFieldElement multiplyMinusProduct(org.bouncycastle.math.ec.ECFieldElement,org.bouncycastle.math.ec.ECFieldElement,org.bouncycastle.math.ec.ECFieldElement) -> multiplyMinusProduct
    org.bouncycastle.math.ec.ECFieldElement multiplyPlusProduct(org.bouncycastle.math.ec.ECFieldElement,org.bouncycastle.math.ec.ECFieldElement,org.bouncycastle.math.ec.ECFieldElement) -> multiplyPlusProduct
    org.bouncycastle.math.ec.ECFieldElement divide(org.bouncycastle.math.ec.ECFieldElement) -> divide
    org.bouncycastle.math.ec.ECFieldElement negate() -> negate
    org.bouncycastle.math.ec.ECFieldElement square() -> square
    org.bouncycastle.math.ec.ECFieldElement squareMinusProduct(org.bouncycastle.math.ec.ECFieldElement,org.bouncycastle.math.ec.ECFieldElement) -> squareMinusProduct
    org.bouncycastle.math.ec.ECFieldElement squarePlusProduct(org.bouncycastle.math.ec.ECFieldElement,org.bouncycastle.math.ec.ECFieldElement) -> squarePlusProduct
    org.bouncycastle.math.ec.ECFieldElement invert() -> invert
    org.bouncycastle.math.ec.ECFieldElement sqrt() -> sqrt
    org.bouncycastle.math.ec.ECFieldElement checkSqrt(org.bouncycastle.math.ec.ECFieldElement) -> checkSqrt
    java.math.BigInteger[] lucasSequence(java.math.BigInteger,java.math.BigInteger,java.math.BigInteger) -> lucasSequence
    java.math.BigInteger modAdd(java.math.BigInteger,java.math.BigInteger) -> modAdd
    java.math.BigInteger modDouble(java.math.BigInteger) -> modDouble
    java.math.BigInteger modHalf(java.math.BigInteger) -> modHalf
    java.math.BigInteger modHalfAbs(java.math.BigInteger) -> modHalfAbs
    java.math.BigInteger modInverse(java.math.BigInteger) -> modInverse
    java.math.BigInteger modMult(java.math.BigInteger,java.math.BigInteger) -> modMult
    java.math.BigInteger modReduce(java.math.BigInteger) -> modReduce
    java.math.BigInteger modSubtract(java.math.BigInteger,java.math.BigInteger) -> modSubtract
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
org.bouncycastle.math.ec.ECMultiplier -> org.bouncycastle.math.ec.ECMultiplier:
    org.bouncycastle.math.ec.ECPoint multiply(org.bouncycastle.math.ec.ECPoint,java.math.BigInteger) -> multiply
org.bouncycastle.math.ec.ECPoint -> org.bouncycastle.math.ec.ECPoint:
    org.bouncycastle.math.ec.ECFieldElement[] EMPTY_ZS -> EMPTY_ZS
    org.bouncycastle.math.ec.ECCurve curve -> curve
    org.bouncycastle.math.ec.ECFieldElement x -> x
    org.bouncycastle.math.ec.ECFieldElement y -> y
    org.bouncycastle.math.ec.ECFieldElement[] zs -> zs
    boolean withCompression -> withCompression
    java.util.Hashtable preCompTable -> preCompTable
    org.bouncycastle.math.ec.ECFieldElement[] getInitialZCoords(org.bouncycastle.math.ec.ECCurve) -> getInitialZCoords
    boolean satisfiesCofactor() -> satisfiesCofactor
    boolean satisfiesCurveEquation() -> satisfiesCurveEquation
    org.bouncycastle.math.ec.ECPoint getDetachedPoint() -> getDetachedPoint
    org.bouncycastle.math.ec.ECCurve getCurve() -> getCurve
    org.bouncycastle.math.ec.ECPoint detach() -> detach
    int getCurveCoordinateSystem() -> getCurveCoordinateSystem
    org.bouncycastle.math.ec.ECFieldElement getX() -> getX
    org.bouncycastle.math.ec.ECFieldElement getY() -> getY
    org.bouncycastle.math.ec.ECFieldElement getAffineXCoord() -> getAffineXCoord
    org.bouncycastle.math.ec.ECFieldElement getAffineYCoord() -> getAffineYCoord
    org.bouncycastle.math.ec.ECFieldElement getXCoord() -> getXCoord
    org.bouncycastle.math.ec.ECFieldElement getYCoord() -> getYCoord
    org.bouncycastle.math.ec.ECFieldElement getZCoord(int) -> getZCoord
    org.bouncycastle.math.ec.ECFieldElement[] getZCoords() -> getZCoords
    org.bouncycastle.math.ec.ECFieldElement getRawXCoord() -> getRawXCoord
    org.bouncycastle.math.ec.ECFieldElement getRawYCoord() -> getRawYCoord
    org.bouncycastle.math.ec.ECFieldElement[] getRawZCoords() -> getRawZCoords
    void checkNormalized() -> checkNormalized
    boolean isNormalized() -> isNormalized
    org.bouncycastle.math.ec.ECPoint normalize() -> normalize
    org.bouncycastle.math.ec.ECPoint normalize(org.bouncycastle.math.ec.ECFieldElement) -> normalize
    org.bouncycastle.math.ec.ECPoint createScaledPoint(org.bouncycastle.math.ec.ECFieldElement,org.bouncycastle.math.ec.ECFieldElement) -> createScaledPoint
    boolean isInfinity() -> isInfinity
    boolean isCompressed() -> isCompressed
    boolean isValid() -> isValid
    org.bouncycastle.math.ec.ECPoint scaleX(org.bouncycastle.math.ec.ECFieldElement) -> scaleX
    org.bouncycastle.math.ec.ECPoint scaleY(org.bouncycastle.math.ec.ECFieldElement) -> scaleY
    boolean equals(org.bouncycastle.math.ec.ECPoint) -> equals
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    byte[] getEncoded() -> getEncoded
    byte[] getEncoded(boolean) -> getEncoded
    boolean getCompressionYTilde() -> getCompressionYTilde
    org.bouncycastle.math.ec.ECPoint add(org.bouncycastle.math.ec.ECPoint) -> add
    org.bouncycastle.math.ec.ECPoint negate() -> negate
    org.bouncycastle.math.ec.ECPoint subtract(org.bouncycastle.math.ec.ECPoint) -> subtract
    org.bouncycastle.math.ec.ECPoint timesPow2(int) -> timesPow2
    org.bouncycastle.math.ec.ECPoint twice() -> twice
    org.bouncycastle.math.ec.ECPoint twicePlus(org.bouncycastle.math.ec.ECPoint) -> twicePlus
    org.bouncycastle.math.ec.ECPoint threeTimes() -> threeTimes
    org.bouncycastle.math.ec.ECPoint multiply(java.math.BigInteger) -> multiply
org.bouncycastle.math.ec.ECPoint$AbstractF2m -> org.bouncycastle.math.ec.ECPoint$AbstractF2m:
    boolean satisfiesCurveEquation() -> satisfiesCurveEquation
org.bouncycastle.math.ec.ECPoint$AbstractFp -> org.bouncycastle.math.ec.ECPoint$AbstractFp:
    boolean getCompressionYTilde() -> getCompressionYTilde
    boolean satisfiesCurveEquation() -> satisfiesCurveEquation
    org.bouncycastle.math.ec.ECPoint subtract(org.bouncycastle.math.ec.ECPoint) -> subtract
org.bouncycastle.math.ec.ECPoint$F2m -> org.bouncycastle.math.ec.ECPoint$F2m:
    org.bouncycastle.math.ec.ECPoint detach() -> detach
    org.bouncycastle.math.ec.ECFieldElement getYCoord() -> getYCoord
    org.bouncycastle.math.ec.ECPoint scaleX(org.bouncycastle.math.ec.ECFieldElement) -> scaleX
    org.bouncycastle.math.ec.ECPoint scaleY(org.bouncycastle.math.ec.ECFieldElement) -> scaleY
    boolean getCompressionYTilde() -> getCompressionYTilde
    void checkPoints(org.bouncycastle.math.ec.ECPoint,org.bouncycastle.math.ec.ECPoint) -> checkPoints
    org.bouncycastle.math.ec.ECPoint add(org.bouncycastle.math.ec.ECPoint) -> add
    org.bouncycastle.math.ec.ECPoint$F2m addSimple(org.bouncycastle.math.ec.ECPoint$F2m) -> addSimple
    org.bouncycastle.math.ec.ECPoint subtract(org.bouncycastle.math.ec.ECPoint) -> subtract
    org.bouncycastle.math.ec.ECPoint$F2m subtractSimple(org.bouncycastle.math.ec.ECPoint$F2m) -> subtractSimple
    org.bouncycastle.math.ec.ECPoint$F2m tau() -> tau
    org.bouncycastle.math.ec.ECPoint twice() -> twice
    org.bouncycastle.math.ec.ECPoint twicePlus(org.bouncycastle.math.ec.ECPoint) -> twicePlus
    org.bouncycastle.math.ec.ECPoint negate() -> negate
org.bouncycastle.math.ec.ECPoint$Fp -> org.bouncycastle.math.ec.ECPoint$Fp:
    org.bouncycastle.math.ec.ECPoint detach() -> detach
    org.bouncycastle.math.ec.ECFieldElement getZCoord(int) -> getZCoord
    org.bouncycastle.math.ec.ECPoint add(org.bouncycastle.math.ec.ECPoint) -> add
    org.bouncycastle.math.ec.ECPoint twice() -> twice
    org.bouncycastle.math.ec.ECPoint twicePlus(org.bouncycastle.math.ec.ECPoint) -> twicePlus
    org.bouncycastle.math.ec.ECPoint threeTimes() -> threeTimes
    org.bouncycastle.math.ec.ECPoint timesPow2(int) -> timesPow2
    org.bouncycastle.math.ec.ECFieldElement two(org.bouncycastle.math.ec.ECFieldElement) -> two
    org.bouncycastle.math.ec.ECFieldElement three(org.bouncycastle.math.ec.ECFieldElement) -> three
    org.bouncycastle.math.ec.ECFieldElement four(org.bouncycastle.math.ec.ECFieldElement) -> four
    org.bouncycastle.math.ec.ECFieldElement eight(org.bouncycastle.math.ec.ECFieldElement) -> eight
    org.bouncycastle.math.ec.ECFieldElement doubleProductFromSquares(org.bouncycastle.math.ec.ECFieldElement,org.bouncycastle.math.ec.ECFieldElement,org.bouncycastle.math.ec.ECFieldElement,org.bouncycastle.math.ec.ECFieldElement) -> doubleProductFromSquares
    org.bouncycastle.math.ec.ECPoint negate() -> negate
    org.bouncycastle.math.ec.ECFieldElement calculateJacobianModifiedW(org.bouncycastle.math.ec.ECFieldElement,org.bouncycastle.math.ec.ECFieldElement) -> calculateJacobianModifiedW
    org.bouncycastle.math.ec.ECFieldElement getJacobianModifiedW() -> getJacobianModifiedW
    org.bouncycastle.math.ec.ECPoint$Fp twiceJacobianModified(boolean) -> twiceJacobianModified
org.bouncycastle.math.ec.ECPointMap -> org.bouncycastle.math.ec.ECPointMap:
    org.bouncycastle.math.ec.ECPoint map(org.bouncycastle.math.ec.ECPoint) -> map
org.bouncycastle.math.ec.FixedPointCombMultiplier -> org.bouncycastle.math.ec.FixedPointCombMultiplier:
    org.bouncycastle.math.ec.ECPoint multiplyPositive(org.bouncycastle.math.ec.ECPoint,java.math.BigInteger) -> multiplyPositive
    int getWidthForCombSize(int) -> getWidthForCombSize
org.bouncycastle.math.ec.FixedPointPreCompInfo -> org.bouncycastle.math.ec.FixedPointPreCompInfo:
    org.bouncycastle.math.ec.ECPoint[] preComp -> preComp
    int width -> width
    org.bouncycastle.math.ec.ECPoint[] getPreComp() -> getPreComp
    void setPreComp(org.bouncycastle.math.ec.ECPoint[]) -> setPreComp
    int getWidth() -> getWidth
    void setWidth(int) -> setWidth
org.bouncycastle.math.ec.FixedPointUtil -> org.bouncycastle.math.ec.FixedPointUtil:
    java.lang.String PRECOMP_NAME -> PRECOMP_NAME
    int getCombSize(org.bouncycastle.math.ec.ECCurve) -> getCombSize
    org.bouncycastle.math.ec.FixedPointPreCompInfo getFixedPointPreCompInfo(org.bouncycastle.math.ec.PreCompInfo) -> getFixedPointPreCompInfo
    org.bouncycastle.math.ec.FixedPointPreCompInfo precompute(org.bouncycastle.math.ec.ECPoint,int) -> precompute
org.bouncycastle.math.ec.GLVMultiplier -> org.bouncycastle.math.ec.GLVMultiplier:
    org.bouncycastle.math.ec.ECCurve curve -> curve
    org.bouncycastle.math.ec.endo.GLVEndomorphism glvEndomorphism -> glvEndomorphism
    org.bouncycastle.math.ec.ECPoint multiplyPositive(org.bouncycastle.math.ec.ECPoint,java.math.BigInteger) -> multiplyPositive
org.bouncycastle.math.ec.LongArray -> org.bouncycastle.math.ec.LongArray:
    int[] INTERLEAVE2_TABLE -> INTERLEAVE2_TABLE
    int[] INTERLEAVE3_TABLE -> INTERLEAVE3_TABLE
    int[] INTERLEAVE4_TABLE -> INTERLEAVE4_TABLE
    int[] INTERLEAVE5_TABLE -> INTERLEAVE5_TABLE
    long[] INTERLEAVE7_TABLE -> INTERLEAVE7_TABLE
    java.lang.String ZEROES -> ZEROES
    byte[] bitLengths -> bitLengths
    long[] m_ints -> m_ints
    boolean isOne() -> isOne
    boolean isZero() -> isZero
    int getUsedLength() -> getUsedLength
    int getUsedLengthFrom(int) -> getUsedLengthFrom
    int degree() -> degree
    int degreeFrom(int) -> degreeFrom
    int bitLength(long) -> bitLength
    long[] resizedInts(int) -> resizedInts
    java.math.BigInteger toBigInteger() -> toBigInteger
    long shiftUp(long[],int,int,int) -> shiftUp
    long shiftUp(long[],int,long[],int,int,int) -> shiftUp
    org.bouncycastle.math.ec.LongArray addOne() -> addOne
    void addShiftedByBitsSafe(org.bouncycastle.math.ec.LongArray,int,int) -> addShiftedByBitsSafe
    long addShiftedUp(long[],int,long[],int,int,int) -> addShiftedUp
    long addShiftedDown(long[],int,long[],int,int,int) -> addShiftedDown
    void addShiftedByWords(org.bouncycastle.math.ec.LongArray,int) -> addShiftedByWords
    void add(long[],int,long[],int,int) -> add
    void add(long[],int,long[],int,long[],int,int) -> add
    void addBoth(long[],int,long[],int,long[],int,int) -> addBoth
    void distribute(long[],int,int,int,int) -> distribute
    int getLength() -> getLength
    void flipWord(long[],int,int,long) -> flipWord
    boolean testBitZero() -> testBitZero
    boolean testBit(long[],int,int) -> testBit
    void flipBit(long[],int,int) -> flipBit
    void multiplyWord(long,long[],int,long[],int) -> multiplyWord
    org.bouncycastle.math.ec.LongArray modMultiplyLD(org.bouncycastle.math.ec.LongArray,int,int[]) -> modMultiplyLD
    org.bouncycastle.math.ec.LongArray modMultiply(org.bouncycastle.math.ec.LongArray,int,int[]) -> modMultiply
    org.bouncycastle.math.ec.LongArray modMultiplyAlt(org.bouncycastle.math.ec.LongArray,int,int[]) -> modMultiplyAlt
    org.bouncycastle.math.ec.LongArray modReduce(int,int[]) -> modReduce
    org.bouncycastle.math.ec.LongArray multiply(org.bouncycastle.math.ec.LongArray,int,int[]) -> multiply
    void reduce(int,int[]) -> reduce
    org.bouncycastle.math.ec.LongArray reduceResult(long[],int,int,int,int[]) -> reduceResult
    int reduceInPlace(long[],int,int,int,int[]) -> reduceInPlace
    void reduceBitWise(long[],int,int,int,int[]) -> reduceBitWise
    void reduceBit(long[],int,int,int,int[]) -> reduceBit
    void reduceWordWise(long[],int,int,int,int,int[]) -> reduceWordWise
    void reduceWord(long[],int,int,long,int,int[]) -> reduceWord
    void reduceVectorWise(long[],int,int,int,int,int[]) -> reduceVectorWise
    void flipVector(long[],int,long[],int,int,int) -> flipVector
    org.bouncycastle.math.ec.LongArray modSquare(int,int[]) -> modSquare
    org.bouncycastle.math.ec.LongArray modSquareN(int,int,int[]) -> modSquareN
    org.bouncycastle.math.ec.LongArray square(int,int[]) -> square
    void squareInPlace(long[],int,int,int[]) -> squareInPlace
    void interleave(long[],int,long[],int,int,int) -> interleave
    void interleave3(long[],int,long[],int,int) -> interleave3
    long interleave3(long) -> interleave3
    long interleave3_21to63(int) -> interleave3_21to63
    void interleave5(long[],int,long[],int,int) -> interleave5
    long interleave5(long) -> interleave5
    long interleave3_13to65(int) -> interleave3_13to65
    void interleave7(long[],int,long[],int,int) -> interleave7
    long interleave7(long) -> interleave7
    void interleave2_n(long[],int,long[],int,int,int) -> interleave2_n
    long interleave2_n(long,int) -> interleave2_n
    long interleave4_16to64(int) -> interleave4_16to64
    long interleave2_32to64(int) -> interleave2_32to64
    org.bouncycastle.math.ec.LongArray modInverse(int,int[]) -> modInverse
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.Object clone() -> clone
    java.lang.String toString() -> toString
org.bouncycastle.math.ec.MixedNafR2LMultiplier -> org.bouncycastle.math.ec.MixedNafR2LMultiplier:
    int additionCoord -> additionCoord
    int doublingCoord -> doublingCoord
    org.bouncycastle.math.ec.ECPoint multiplyPositive(org.bouncycastle.math.ec.ECPoint,java.math.BigInteger) -> multiplyPositive
    org.bouncycastle.math.ec.ECCurve configureCurve(org.bouncycastle.math.ec.ECCurve,int) -> configureCurve
org.bouncycastle.math.ec.MontgomeryLadderMultiplier -> org.bouncycastle.math.ec.MontgomeryLadderMultiplier:
    org.bouncycastle.math.ec.ECPoint multiplyPositive(org.bouncycastle.math.ec.ECPoint,java.math.BigInteger) -> multiplyPositive
org.bouncycastle.math.ec.NafL2RMultiplier -> org.bouncycastle.math.ec.NafL2RMultiplier:
    org.bouncycastle.math.ec.ECPoint multiplyPositive(org.bouncycastle.math.ec.ECPoint,java.math.BigInteger) -> multiplyPositive
org.bouncycastle.math.ec.NafR2LMultiplier -> org.bouncycastle.math.ec.NafR2LMultiplier:
    org.bouncycastle.math.ec.ECPoint multiplyPositive(org.bouncycastle.math.ec.ECPoint,java.math.BigInteger) -> multiplyPositive
org.bouncycastle.math.ec.PreCompInfo -> org.bouncycastle.math.ec.PreCompInfo:
org.bouncycastle.math.ec.ReferenceMultiplier -> org.bouncycastle.math.ec.ReferenceMultiplier:
    org.bouncycastle.math.ec.ECPoint multiplyPositive(org.bouncycastle.math.ec.ECPoint,java.math.BigInteger) -> multiplyPositive
org.bouncycastle.math.ec.ScaleXPointMap -> org.bouncycastle.math.ec.ScaleXPointMap:
    org.bouncycastle.math.ec.ECFieldElement scale -> scale
    org.bouncycastle.math.ec.ECPoint map(org.bouncycastle.math.ec.ECPoint) -> map
org.bouncycastle.math.ec.ScaleYPointMap -> org.bouncycastle.math.ec.ScaleYPointMap:
    org.bouncycastle.math.ec.ECFieldElement scale -> scale
    org.bouncycastle.math.ec.ECPoint map(org.bouncycastle.math.ec.ECPoint) -> map
org.bouncycastle.math.ec.SimpleBigDecimal -> org.bouncycastle.math.ec.SimpleBigDecimal:
    long serialVersionUID -> serialVersionUID
    java.math.BigInteger bigInt -> bigInt
    int scale -> scale
    org.bouncycastle.math.ec.SimpleBigDecimal getInstance(java.math.BigInteger,int) -> getInstance
    void checkScale(org.bouncycastle.math.ec.SimpleBigDecimal) -> checkScale
    org.bouncycastle.math.ec.SimpleBigDecimal adjustScale(int) -> adjustScale
    org.bouncycastle.math.ec.SimpleBigDecimal add(org.bouncycastle.math.ec.SimpleBigDecimal) -> add
    org.bouncycastle.math.ec.SimpleBigDecimal add(java.math.BigInteger) -> add
    org.bouncycastle.math.ec.SimpleBigDecimal negate() -> negate
    org.bouncycastle.math.ec.SimpleBigDecimal subtract(org.bouncycastle.math.ec.SimpleBigDecimal) -> subtract
    org.bouncycastle.math.ec.SimpleBigDecimal subtract(java.math.BigInteger) -> subtract
    org.bouncycastle.math.ec.SimpleBigDecimal multiply(org.bouncycastle.math.ec.SimpleBigDecimal) -> multiply
    org.bouncycastle.math.ec.SimpleBigDecimal multiply(java.math.BigInteger) -> multiply
    org.bouncycastle.math.ec.SimpleBigDecimal divide(org.bouncycastle.math.ec.SimpleBigDecimal) -> divide
    org.bouncycastle.math.ec.SimpleBigDecimal divide(java.math.BigInteger) -> divide
    org.bouncycastle.math.ec.SimpleBigDecimal shiftLeft(int) -> shiftLeft
    int compareTo(org.bouncycastle.math.ec.SimpleBigDecimal) -> compareTo
    int compareTo(java.math.BigInteger) -> compareTo
    java.math.BigInteger floor() -> floor
    java.math.BigInteger round() -> round
    int intValue() -> intValue
    long longValue() -> longValue
    int getScale() -> getScale
    java.lang.String toString() -> toString
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
org.bouncycastle.math.ec.Tnaf -> org.bouncycastle.math.ec.Tnaf:
    java.math.BigInteger MINUS_ONE -> MINUS_ONE
    java.math.BigInteger MINUS_TWO -> MINUS_TWO
    java.math.BigInteger MINUS_THREE -> MINUS_THREE
    byte WIDTH -> WIDTH
    byte POW_2_WIDTH -> POW_2_WIDTH
    org.bouncycastle.math.ec.ZTauElement[] alpha0 -> alpha0
    byte[][] alpha0Tnaf -> alpha0Tnaf
    org.bouncycastle.math.ec.ZTauElement[] alpha1 -> alpha1
    byte[][] alpha1Tnaf -> alpha1Tnaf
    java.math.BigInteger norm(byte,org.bouncycastle.math.ec.ZTauElement) -> norm
    org.bouncycastle.math.ec.SimpleBigDecimal norm(byte,org.bouncycastle.math.ec.SimpleBigDecimal,org.bouncycastle.math.ec.SimpleBigDecimal) -> norm
    org.bouncycastle.math.ec.ZTauElement round(org.bouncycastle.math.ec.SimpleBigDecimal,org.bouncycastle.math.ec.SimpleBigDecimal,byte) -> round
    org.bouncycastle.math.ec.SimpleBigDecimal approximateDivisionByN(java.math.BigInteger,java.math.BigInteger,java.math.BigInteger,byte,int,int) -> approximateDivisionByN
    byte[] tauAdicNaf(byte,org.bouncycastle.math.ec.ZTauElement) -> tauAdicNaf
    org.bouncycastle.math.ec.ECPoint$F2m tau(org.bouncycastle.math.ec.ECPoint$F2m) -> tau
    byte getMu(org.bouncycastle.math.ec.ECCurve$F2m) -> getMu
    java.math.BigInteger[] getLucas(byte,int,boolean) -> getLucas
    java.math.BigInteger getTw(byte,int) -> getTw
    java.math.BigInteger[] getSi(org.bouncycastle.math.ec.ECCurve$F2m) -> getSi
    int getShiftsForCofactor(java.math.BigInteger) -> getShiftsForCofactor
    org.bouncycastle.math.ec.ZTauElement partModReduction(java.math.BigInteger,int,byte,java.math.BigInteger[],byte,byte) -> partModReduction
    org.bouncycastle.math.ec.ECPoint$F2m multiplyRTnaf(org.bouncycastle.math.ec.ECPoint$F2m,java.math.BigInteger) -> multiplyRTnaf
    org.bouncycastle.math.ec.ECPoint$F2m multiplyTnaf(org.bouncycastle.math.ec.ECPoint$F2m,org.bouncycastle.math.ec.ZTauElement) -> multiplyTnaf
    org.bouncycastle.math.ec.ECPoint$F2m multiplyFromTnaf(org.bouncycastle.math.ec.ECPoint$F2m,byte[]) -> multiplyFromTnaf
    byte[] tauAdicWNaf(byte,org.bouncycastle.math.ec.ZTauElement,byte,java.math.BigInteger,java.math.BigInteger,org.bouncycastle.math.ec.ZTauElement[]) -> tauAdicWNaf
    org.bouncycastle.math.ec.ECPoint$F2m[] getPreComp(org.bouncycastle.math.ec.ECPoint$F2m,byte) -> getPreComp
org.bouncycastle.math.ec.WNafL2RMultiplier -> org.bouncycastle.math.ec.WNafL2RMultiplier:
    org.bouncycastle.math.ec.ECPoint multiplyPositive(org.bouncycastle.math.ec.ECPoint,java.math.BigInteger) -> multiplyPositive
    int getWindowSize(int) -> getWindowSize
org.bouncycastle.math.ec.WNafPreCompInfo -> org.bouncycastle.math.ec.WNafPreCompInfo:
    org.bouncycastle.math.ec.ECPoint[] preComp -> preComp
    org.bouncycastle.math.ec.ECPoint[] preCompNeg -> preCompNeg
    org.bouncycastle.math.ec.ECPoint twice -> twice
    org.bouncycastle.math.ec.ECPoint[] getPreComp() -> getPreComp
    void setPreComp(org.bouncycastle.math.ec.ECPoint[]) -> setPreComp
    org.bouncycastle.math.ec.ECPoint[] getPreCompNeg() -> getPreCompNeg
    void setPreCompNeg(org.bouncycastle.math.ec.ECPoint[]) -> setPreCompNeg
    org.bouncycastle.math.ec.ECPoint getTwice() -> getTwice
    void setTwice(org.bouncycastle.math.ec.ECPoint) -> setTwice
org.bouncycastle.math.ec.WNafUtil -> org.bouncycastle.math.ec.WNafUtil:
    java.lang.String PRECOMP_NAME -> PRECOMP_NAME
    int[] DEFAULT_WINDOW_SIZE_CUTOFFS -> DEFAULT_WINDOW_SIZE_CUTOFFS
    byte[] EMPTY_BYTES -> EMPTY_BYTES
    int[] EMPTY_INTS -> EMPTY_INTS
    int[] generateCompactNaf(java.math.BigInteger) -> generateCompactNaf
    int[] generateCompactWindowNaf(int,java.math.BigInteger) -> generateCompactWindowNaf
    byte[] generateJSF(java.math.BigInteger,java.math.BigInteger) -> generateJSF
    byte[] generateNaf(java.math.BigInteger) -> generateNaf
    byte[] generateWindowNaf(int,java.math.BigInteger) -> generateWindowNaf
    int getNafWeight(java.math.BigInteger) -> getNafWeight
    org.bouncycastle.math.ec.WNafPreCompInfo getWNafPreCompInfo(org.bouncycastle.math.ec.ECPoint) -> getWNafPreCompInfo
    org.bouncycastle.math.ec.WNafPreCompInfo getWNafPreCompInfo(org.bouncycastle.math.ec.PreCompInfo) -> getWNafPreCompInfo
    int getWindowSize(int) -> getWindowSize
    int getWindowSize(int,int[]) -> getWindowSize
    org.bouncycastle.math.ec.ECPoint mapPointWithPrecomp(org.bouncycastle.math.ec.ECPoint,int,boolean,org.bouncycastle.math.ec.ECPointMap) -> mapPointWithPrecomp
    org.bouncycastle.math.ec.WNafPreCompInfo precompute(org.bouncycastle.math.ec.ECPoint,int,boolean) -> precompute
    byte[] trim(byte[],int) -> trim
    int[] trim(int[],int) -> trim
    org.bouncycastle.math.ec.ECPoint[] resizeTable(org.bouncycastle.math.ec.ECPoint[],int) -> resizeTable
org.bouncycastle.math.ec.WTauNafMultiplier -> org.bouncycastle.math.ec.WTauNafMultiplier:
    java.lang.String PRECOMP_NAME -> PRECOMP_NAME
    org.bouncycastle.math.ec.ECPoint multiplyPositive(org.bouncycastle.math.ec.ECPoint,java.math.BigInteger) -> multiplyPositive
    org.bouncycastle.math.ec.ECPoint$F2m multiplyWTnaf(org.bouncycastle.math.ec.ECPoint$F2m,org.bouncycastle.math.ec.ZTauElement,org.bouncycastle.math.ec.PreCompInfo,byte,byte) -> multiplyWTnaf
    org.bouncycastle.math.ec.ECPoint$F2m multiplyFromWTnaf(org.bouncycastle.math.ec.ECPoint$F2m,byte[],org.bouncycastle.math.ec.PreCompInfo) -> multiplyFromWTnaf
org.bouncycastle.math.ec.WTauNafPreCompInfo -> org.bouncycastle.math.ec.WTauNafPreCompInfo:
    org.bouncycastle.math.ec.ECPoint$F2m[] preComp -> preComp
    org.bouncycastle.math.ec.ECPoint$F2m[] getPreComp() -> getPreComp
    void setPreComp(org.bouncycastle.math.ec.ECPoint$F2m[]) -> setPreComp
org.bouncycastle.math.ec.ZSignedDigitL2RMultiplier -> org.bouncycastle.math.ec.ZSignedDigitL2RMultiplier:
    org.bouncycastle.math.ec.ECPoint multiplyPositive(org.bouncycastle.math.ec.ECPoint,java.math.BigInteger) -> multiplyPositive
org.bouncycastle.math.ec.ZSignedDigitR2LMultiplier -> org.bouncycastle.math.ec.ZSignedDigitR2LMultiplier:
    org.bouncycastle.math.ec.ECPoint multiplyPositive(org.bouncycastle.math.ec.ECPoint,java.math.BigInteger) -> multiplyPositive
org.bouncycastle.math.ec.ZTauElement -> org.bouncycastle.math.ec.ZTauElement:
    java.math.BigInteger u -> u
    java.math.BigInteger v -> v
org.bouncycastle.math.ec.custom.djb.Curve25519 -> org.bouncycastle.math.ec.custom.djb.Curve25519:
    java.math.BigInteger q -> q
    int Curve25519_DEFAULT_COORDS -> Curve25519_DEFAULT_COORDS
    org.bouncycastle.math.ec.custom.djb.Curve25519Point infinity -> infinity
    org.bouncycastle.math.ec.ECCurve cloneCurve() -> cloneCurve
    boolean supportsCoordinateSystem(int) -> supportsCoordinateSystem
    java.math.BigInteger getQ() -> getQ
    int getFieldSize() -> getFieldSize
    org.bouncycastle.math.ec.ECFieldElement fromBigInteger(java.math.BigInteger) -> fromBigInteger
    org.bouncycastle.math.ec.ECPoint createRawPoint(org.bouncycastle.math.ec.ECFieldElement,org.bouncycastle.math.ec.ECFieldElement,boolean) -> createRawPoint
    org.bouncycastle.math.ec.ECPoint createRawPoint(org.bouncycastle.math.ec.ECFieldElement,org.bouncycastle.math.ec.ECFieldElement,org.bouncycastle.math.ec.ECFieldElement[],boolean) -> createRawPoint
    org.bouncycastle.math.ec.ECPoint getInfinity() -> getInfinity
org.bouncycastle.math.ec.custom.djb.Curve25519Field -> org.bouncycastle.math.ec.custom.djb.Curve25519Field:
    long M -> M
    int[] P -> P
    int P7 -> P7
    int[] PExt -> PExt
    int PInv -> PInv
    void add(int[],int[],int[]) -> add
    void addExt(int[],int[],int[]) -> addExt
    void addOne(int[],int[]) -> addOne
    int[] fromBigInteger(java.math.BigInteger) -> fromBigInteger
    void half(int[],int[]) -> half
    void multiply(int[],int[],int[]) -> multiply
    void multiplyAddToExt(int[],int[],int[]) -> multiplyAddToExt
    void negate(int[],int[]) -> negate
    void reduce(int[],int[]) -> reduce
    void reduce27(int,int[]) -> reduce27
    void square(int[],int[]) -> square
    void squareN(int[],int,int[]) -> squareN
    void subtract(int[],int[],int[]) -> subtract
    void subtractExt(int[],int[],int[]) -> subtractExt
    void twice(int[],int[]) -> twice
    int addPTo(int[]) -> addPTo
    int addPExtTo(int[]) -> addPExtTo
    int subPFrom(int[]) -> subPFrom
    int subPExtFrom(int[]) -> subPExtFrom
org.bouncycastle.math.ec.custom.djb.Curve25519FieldElement -> org.bouncycastle.math.ec.custom.djb.Curve25519FieldElement:
    java.math.BigInteger Q -> Q
    int[] PRECOMP_POW2 -> PRECOMP_POW2
    int[] x -> x
    boolean isZero() -> isZero
    boolean isOne() -> isOne
    boolean testBitZero() -> testBitZero
    java.math.BigInteger toBigInteger() -> toBigInteger
    java.lang.String getFieldName() -> getFieldName
    int getFieldSize() -> getFieldSize
    org.bouncycastle.math.ec.ECFieldElement add(org.bouncycastle.math.ec.ECFieldElement) -> add
    org.bouncycastle.math.ec.ECFieldElement addOne() -> addOne
    org.bouncycastle.math.ec.ECFieldElement subtract(org.bouncycastle.math.ec.ECFieldElement) -> subtract
    org.bouncycastle.math.ec.ECFieldElement multiply(org.bouncycastle.math.ec.ECFieldElement) -> multiply
    org.bouncycastle.math.ec.ECFieldElement divide(org.bouncycastle.math.ec.ECFieldElement) -> divide
    org.bouncycastle.math.ec.ECFieldElement negate() -> negate
    org.bouncycastle.math.ec.ECFieldElement square() -> square
    org.bouncycastle.math.ec.ECFieldElement invert() -> invert
    org.bouncycastle.math.ec.ECFieldElement sqrt() -> sqrt
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
org.bouncycastle.math.ec.custom.djb.Curve25519Point -> org.bouncycastle.math.ec.custom.djb.Curve25519Point:
    org.bouncycastle.math.ec.ECPoint detach() -> detach
    org.bouncycastle.math.ec.ECFieldElement getZCoord(int) -> getZCoord
    org.bouncycastle.math.ec.ECPoint add(org.bouncycastle.math.ec.ECPoint) -> add
    org.bouncycastle.math.ec.ECPoint twice() -> twice
    org.bouncycastle.math.ec.ECPoint twicePlus(org.bouncycastle.math.ec.ECPoint) -> twicePlus
    org.bouncycastle.math.ec.ECPoint threeTimes() -> threeTimes
    org.bouncycastle.math.ec.ECPoint negate() -> negate
    org.bouncycastle.math.ec.custom.djb.Curve25519FieldElement calculateJacobianModifiedW(org.bouncycastle.math.ec.custom.djb.Curve25519FieldElement,int[]) -> calculateJacobianModifiedW
    org.bouncycastle.math.ec.custom.djb.Curve25519FieldElement getJacobianModifiedW() -> getJacobianModifiedW
    org.bouncycastle.math.ec.custom.djb.Curve25519Point twiceJacobianModified(boolean) -> twiceJacobianModified
org.bouncycastle.math.ec.custom.sec.SecP192K1Curve -> org.bouncycastle.math.ec.custom.sec.SecP192K1Curve:
    java.math.BigInteger q -> q
    int SecP192K1_DEFAULT_COORDS -> SecP192K1_DEFAULT_COORDS
    org.bouncycastle.math.ec.custom.sec.SecP192K1Point infinity -> infinity
    org.bouncycastle.math.ec.ECCurve cloneCurve() -> cloneCurve
    boolean supportsCoordinateSystem(int) -> supportsCoordinateSystem
    java.math.BigInteger getQ() -> getQ
    int getFieldSize() -> getFieldSize
    org.bouncycastle.math.ec.ECFieldElement fromBigInteger(java.math.BigInteger) -> fromBigInteger
    org.bouncycastle.math.ec.ECPoint createRawPoint(org.bouncycastle.math.ec.ECFieldElement,org.bouncycastle.math.ec.ECFieldElement,boolean) -> createRawPoint
    org.bouncycastle.math.ec.ECPoint createRawPoint(org.bouncycastle.math.ec.ECFieldElement,org.bouncycastle.math.ec.ECFieldElement,org.bouncycastle.math.ec.ECFieldElement[],boolean) -> createRawPoint
    org.bouncycastle.math.ec.ECPoint getInfinity() -> getInfinity
org.bouncycastle.math.ec.custom.sec.SecP192K1Field -> org.bouncycastle.math.ec.custom.sec.SecP192K1Field:
    int[] P -> P
    int[] PExt -> PExt
    int[] PExtInv -> PExtInv
    int P5 -> P5
    int PExt11 -> PExt11
    int PInv33 -> PInv33
    void add(int[],int[],int[]) -> add
    void addExt(int[],int[],int[]) -> addExt
    void addOne(int[],int[]) -> addOne
    int[] fromBigInteger(java.math.BigInteger) -> fromBigInteger
    void half(int[],int[]) -> half
    void multiply(int[],int[],int[]) -> multiply
    void multiplyAddToExt(int[],int[],int[]) -> multiplyAddToExt
    void negate(int[],int[]) -> negate
    void reduce(int[],int[]) -> reduce
    void reduce32(int,int[]) -> reduce32
    void square(int[],int[]) -> square
    void squareN(int[],int,int[]) -> squareN
    void subtract(int[],int[],int[]) -> subtract
    void subtractExt(int[],int[],int[]) -> subtractExt
    void twice(int[],int[]) -> twice
org.bouncycastle.math.ec.custom.sec.SecP192K1FieldElement -> org.bouncycastle.math.ec.custom.sec.SecP192K1FieldElement:
    java.math.BigInteger Q -> Q
    int[] x -> x
    boolean isZero() -> isZero
    boolean isOne() -> isOne
    boolean testBitZero() -> testBitZero
    java.math.BigInteger toBigInteger() -> toBigInteger
    java.lang.String getFieldName() -> getFieldName
    int getFieldSize() -> getFieldSize
    org.bouncycastle.math.ec.ECFieldElement add(org.bouncycastle.math.ec.ECFieldElement) -> add
    org.bouncycastle.math.ec.ECFieldElement addOne() -> addOne
    org.bouncycastle.math.ec.ECFieldElement subtract(org.bouncycastle.math.ec.ECFieldElement) -> subtract
    org.bouncycastle.math.ec.ECFieldElement multiply(org.bouncycastle.math.ec.ECFieldElement) -> multiply
    org.bouncycastle.math.ec.ECFieldElement divide(org.bouncycastle.math.ec.ECFieldElement) -> divide
    org.bouncycastle.math.ec.ECFieldElement negate() -> negate
    org.bouncycastle.math.ec.ECFieldElement square() -> square
    org.bouncycastle.math.ec.ECFieldElement invert() -> invert
    org.bouncycastle.math.ec.ECFieldElement sqrt() -> sqrt
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
org.bouncycastle.math.ec.custom.sec.SecP192K1Point -> org.bouncycastle.math.ec.custom.sec.SecP192K1Point:
    org.bouncycastle.math.ec.ECPoint detach() -> detach
    org.bouncycastle.math.ec.ECPoint add(org.bouncycastle.math.ec.ECPoint) -> add
    org.bouncycastle.math.ec.ECPoint twice() -> twice
    org.bouncycastle.math.ec.ECPoint twicePlus(org.bouncycastle.math.ec.ECPoint) -> twicePlus
    org.bouncycastle.math.ec.ECPoint threeTimes() -> threeTimes
    org.bouncycastle.math.ec.ECPoint negate() -> negate
org.bouncycastle.math.ec.custom.sec.SecP192R1Curve -> org.bouncycastle.math.ec.custom.sec.SecP192R1Curve:
    java.math.BigInteger q -> q
    int SecP192R1_DEFAULT_COORDS -> SecP192R1_DEFAULT_COORDS
    org.bouncycastle.math.ec.custom.sec.SecP192R1Point infinity -> infinity
    org.bouncycastle.math.ec.ECCurve cloneCurve() -> cloneCurve
    boolean supportsCoordinateSystem(int) -> supportsCoordinateSystem
    java.math.BigInteger getQ() -> getQ
    int getFieldSize() -> getFieldSize
    org.bouncycastle.math.ec.ECFieldElement fromBigInteger(java.math.BigInteger) -> fromBigInteger
    org.bouncycastle.math.ec.ECPoint createRawPoint(org.bouncycastle.math.ec.ECFieldElement,org.bouncycastle.math.ec.ECFieldElement,boolean) -> createRawPoint
    org.bouncycastle.math.ec.ECPoint createRawPoint(org.bouncycastle.math.ec.ECFieldElement,org.bouncycastle.math.ec.ECFieldElement,org.bouncycastle.math.ec.ECFieldElement[],boolean) -> createRawPoint
    org.bouncycastle.math.ec.ECPoint getInfinity() -> getInfinity
org.bouncycastle.math.ec.custom.sec.SecP192R1Field -> org.bouncycastle.math.ec.custom.sec.SecP192R1Field:
    long M -> M
    int[] P -> P
    int[] PExt -> PExt
    int[] PExtInv -> PExtInv
    int P5 -> P5
    int PExt11 -> PExt11
    void add(int[],int[],int[]) -> add
    void addExt(int[],int[],int[]) -> addExt
    void addOne(int[],int[]) -> addOne
    int[] fromBigInteger(java.math.BigInteger) -> fromBigInteger
    void half(int[],int[]) -> half
    void multiply(int[],int[],int[]) -> multiply
    void multiplyAddToExt(int[],int[],int[]) -> multiplyAddToExt
    void negate(int[],int[]) -> negate
    void reduce(int[],int[]) -> reduce
    void reduce32(int,int[]) -> reduce32
    void square(int[],int[]) -> square
    void squareN(int[],int,int[]) -> squareN
    void subtract(int[],int[],int[]) -> subtract
    void subtractExt(int[],int[],int[]) -> subtractExt
    void twice(int[],int[]) -> twice
    void addPInvTo(int[]) -> addPInvTo
    void subPInvFrom(int[]) -> subPInvFrom
org.bouncycastle.math.ec.custom.sec.SecP192R1FieldElement -> org.bouncycastle.math.ec.custom.sec.SecP192R1FieldElement:
    java.math.BigInteger Q -> Q
    int[] x -> x
    boolean isZero() -> isZero
    boolean isOne() -> isOne
    boolean testBitZero() -> testBitZero
    java.math.BigInteger toBigInteger() -> toBigInteger
    java.lang.String getFieldName() -> getFieldName
    int getFieldSize() -> getFieldSize
    org.bouncycastle.math.ec.ECFieldElement add(org.bouncycastle.math.ec.ECFieldElement) -> add
    org.bouncycastle.math.ec.ECFieldElement addOne() -> addOne
    org.bouncycastle.math.ec.ECFieldElement subtract(org.bouncycastle.math.ec.ECFieldElement) -> subtract
    org.bouncycastle.math.ec.ECFieldElement multiply(org.bouncycastle.math.ec.ECFieldElement) -> multiply
    org.bouncycastle.math.ec.ECFieldElement divide(org.bouncycastle.math.ec.ECFieldElement) -> divide
    org.bouncycastle.math.ec.ECFieldElement negate() -> negate
    org.bouncycastle.math.ec.ECFieldElement square() -> square
    org.bouncycastle.math.ec.ECFieldElement invert() -> invert
    org.bouncycastle.math.ec.ECFieldElement sqrt() -> sqrt
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
org.bouncycastle.math.ec.custom.sec.SecP192R1Point -> org.bouncycastle.math.ec.custom.sec.SecP192R1Point:
    org.bouncycastle.math.ec.ECPoint detach() -> detach
    org.bouncycastle.math.ec.ECPoint add(org.bouncycastle.math.ec.ECPoint) -> add
    org.bouncycastle.math.ec.ECPoint twice() -> twice
    org.bouncycastle.math.ec.ECPoint twicePlus(org.bouncycastle.math.ec.ECPoint) -> twicePlus
    org.bouncycastle.math.ec.ECPoint threeTimes() -> threeTimes
    org.bouncycastle.math.ec.ECPoint negate() -> negate
org.bouncycastle.math.ec.custom.sec.SecP224K1Curve -> org.bouncycastle.math.ec.custom.sec.SecP224K1Curve:
    java.math.BigInteger q -> q
    int SECP224K1_DEFAULT_COORDS -> SECP224K1_DEFAULT_COORDS
    org.bouncycastle.math.ec.custom.sec.SecP224K1Point infinity -> infinity
    org.bouncycastle.math.ec.ECCurve cloneCurve() -> cloneCurve
    boolean supportsCoordinateSystem(int) -> supportsCoordinateSystem
    java.math.BigInteger getQ() -> getQ
    int getFieldSize() -> getFieldSize
    org.bouncycastle.math.ec.ECFieldElement fromBigInteger(java.math.BigInteger) -> fromBigInteger
    org.bouncycastle.math.ec.ECPoint createRawPoint(org.bouncycastle.math.ec.ECFieldElement,org.bouncycastle.math.ec.ECFieldElement,boolean) -> createRawPoint
    org.bouncycastle.math.ec.ECPoint createRawPoint(org.bouncycastle.math.ec.ECFieldElement,org.bouncycastle.math.ec.ECFieldElement,org.bouncycastle.math.ec.ECFieldElement[],boolean) -> createRawPoint
    org.bouncycastle.math.ec.ECPoint getInfinity() -> getInfinity
org.bouncycastle.math.ec.custom.sec.SecP224K1Field -> org.bouncycastle.math.ec.custom.sec.SecP224K1Field:
    int[] P -> P
    int[] PExt -> PExt
    int[] PExtInv -> PExtInv
    int P6 -> P6
    int PExt13 -> PExt13
    int PInv33 -> PInv33
    void add(int[],int[],int[]) -> add
    void addExt(int[],int[],int[]) -> addExt
    void addOne(int[],int[]) -> addOne
    int[] fromBigInteger(java.math.BigInteger) -> fromBigInteger
    void half(int[],int[]) -> half
    void multiply(int[],int[],int[]) -> multiply
    void multiplyAddToExt(int[],int[],int[]) -> multiplyAddToExt
    void negate(int[],int[]) -> negate
    void reduce(int[],int[]) -> reduce
    void reduce32(int,int[]) -> reduce32
    void square(int[],int[]) -> square
    void squareN(int[],int,int[]) -> squareN
    void subtract(int[],int[],int[]) -> subtract
    void subtractExt(int[],int[],int[]) -> subtractExt
    void twice(int[],int[]) -> twice
org.bouncycastle.math.ec.custom.sec.SecP224K1FieldElement -> org.bouncycastle.math.ec.custom.sec.SecP224K1FieldElement:
    java.math.BigInteger Q -> Q
    int[] PRECOMP_POW2 -> PRECOMP_POW2
    int[] x -> x
    boolean isZero() -> isZero
    boolean isOne() -> isOne
    boolean testBitZero() -> testBitZero
    java.math.BigInteger toBigInteger() -> toBigInteger
    java.lang.String getFieldName() -> getFieldName
    int getFieldSize() -> getFieldSize
    org.bouncycastle.math.ec.ECFieldElement add(org.bouncycastle.math.ec.ECFieldElement) -> add
    org.bouncycastle.math.ec.ECFieldElement addOne() -> addOne
    org.bouncycastle.math.ec.ECFieldElement subtract(org.bouncycastle.math.ec.ECFieldElement) -> subtract
    org.bouncycastle.math.ec.ECFieldElement multiply(org.bouncycastle.math.ec.ECFieldElement) -> multiply
    org.bouncycastle.math.ec.ECFieldElement divide(org.bouncycastle.math.ec.ECFieldElement) -> divide
    org.bouncycastle.math.ec.ECFieldElement negate() -> negate
    org.bouncycastle.math.ec.ECFieldElement square() -> square
    org.bouncycastle.math.ec.ECFieldElement invert() -> invert
    org.bouncycastle.math.ec.ECFieldElement sqrt() -> sqrt
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
org.bouncycastle.math.ec.custom.sec.SecP224K1Point -> org.bouncycastle.math.ec.custom.sec.SecP224K1Point:
    org.bouncycastle.math.ec.ECPoint detach() -> detach
    org.bouncycastle.math.ec.ECPoint add(org.bouncycastle.math.ec.ECPoint) -> add
    org.bouncycastle.math.ec.ECPoint twice() -> twice
    org.bouncycastle.math.ec.ECPoint twicePlus(org.bouncycastle.math.ec.ECPoint) -> twicePlus
    org.bouncycastle.math.ec.ECPoint threeTimes() -> threeTimes
    org.bouncycastle.math.ec.ECPoint negate() -> negate
org.bouncycastle.math.ec.custom.sec.SecP224R1Curve -> org.bouncycastle.math.ec.custom.sec.SecP224R1Curve:
    java.math.BigInteger q -> q
    int SecP224R1_DEFAULT_COORDS -> SecP224R1_DEFAULT_COORDS
    org.bouncycastle.math.ec.custom.sec.SecP224R1Point infinity -> infinity
    org.bouncycastle.math.ec.ECCurve cloneCurve() -> cloneCurve
    boolean supportsCoordinateSystem(int) -> supportsCoordinateSystem
    java.math.BigInteger getQ() -> getQ
    int getFieldSize() -> getFieldSize
    org.bouncycastle.math.ec.ECFieldElement fromBigInteger(java.math.BigInteger) -> fromBigInteger
    org.bouncycastle.math.ec.ECPoint createRawPoint(org.bouncycastle.math.ec.ECFieldElement,org.bouncycastle.math.ec.ECFieldElement,boolean) -> createRawPoint
    org.bouncycastle.math.ec.ECPoint createRawPoint(org.bouncycastle.math.ec.ECFieldElement,org.bouncycastle.math.ec.ECFieldElement,org.bouncycastle.math.ec.ECFieldElement[],boolean) -> createRawPoint
    org.bouncycastle.math.ec.ECPoint getInfinity() -> getInfinity
org.bouncycastle.math.ec.custom.sec.SecP224R1Field -> org.bouncycastle.math.ec.custom.sec.SecP224R1Field:
    long M -> M
    int[] P -> P
    int[] PExt -> PExt
    int[] PExtInv -> PExtInv
    int P6 -> P6
    int PExt13 -> PExt13
    void add(int[],int[],int[]) -> add
    void addExt(int[],int[],int[]) -> addExt
    void addOne(int[],int[]) -> addOne
    int[] fromBigInteger(java.math.BigInteger) -> fromBigInteger
    void half(int[],int[]) -> half
    void multiply(int[],int[],int[]) -> multiply
    void multiplyAddToExt(int[],int[],int[]) -> multiplyAddToExt
    void negate(int[],int[]) -> negate
    void reduce(int[],int[]) -> reduce
    void reduce32(int,int[]) -> reduce32
    void square(int[],int[]) -> square
    void squareN(int[],int,int[]) -> squareN
    void subtract(int[],int[],int[]) -> subtract
    void subtractExt(int[],int[],int[]) -> subtractExt
    void twice(int[],int[]) -> twice
    void addPInvTo(int[]) -> addPInvTo
    void subPInvFrom(int[]) -> subPInvFrom
org.bouncycastle.math.ec.custom.sec.SecP224R1FieldElement -> org.bouncycastle.math.ec.custom.sec.SecP224R1FieldElement:
    java.math.BigInteger Q -> Q
    int[] x -> x
    boolean isZero() -> isZero
    boolean isOne() -> isOne
    boolean testBitZero() -> testBitZero
    java.math.BigInteger toBigInteger() -> toBigInteger
    java.lang.String getFieldName() -> getFieldName
    int getFieldSize() -> getFieldSize
    org.bouncycastle.math.ec.ECFieldElement add(org.bouncycastle.math.ec.ECFieldElement) -> add
    org.bouncycastle.math.ec.ECFieldElement addOne() -> addOne
    org.bouncycastle.math.ec.ECFieldElement subtract(org.bouncycastle.math.ec.ECFieldElement) -> subtract
    org.bouncycastle.math.ec.ECFieldElement multiply(org.bouncycastle.math.ec.ECFieldElement) -> multiply
    org.bouncycastle.math.ec.ECFieldElement divide(org.bouncycastle.math.ec.ECFieldElement) -> divide
    org.bouncycastle.math.ec.ECFieldElement negate() -> negate
    org.bouncycastle.math.ec.ECFieldElement square() -> square
    org.bouncycastle.math.ec.ECFieldElement invert() -> invert
    org.bouncycastle.math.ec.ECFieldElement sqrt() -> sqrt
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    boolean isSquare(int[]) -> isSquare
    void RM(int[],int[],int[],int[],int[],int[],int[]) -> RM
    void RP(int[],int[],int[],int[],int[]) -> RP
    void RS(int[],int[],int[],int[]) -> RS
    boolean trySqrt(int[],int[],int[]) -> trySqrt
org.bouncycastle.math.ec.custom.sec.SecP224R1Point -> org.bouncycastle.math.ec.custom.sec.SecP224R1Point:
    org.bouncycastle.math.ec.ECPoint detach() -> detach
    org.bouncycastle.math.ec.ECPoint add(org.bouncycastle.math.ec.ECPoint) -> add
    org.bouncycastle.math.ec.ECPoint twice() -> twice
    org.bouncycastle.math.ec.ECPoint twicePlus(org.bouncycastle.math.ec.ECPoint) -> twicePlus
    org.bouncycastle.math.ec.ECPoint threeTimes() -> threeTimes
    org.bouncycastle.math.ec.ECPoint negate() -> negate
org.bouncycastle.math.ec.custom.sec.SecP256K1Curve -> org.bouncycastle.math.ec.custom.sec.SecP256K1Curve:
    java.math.BigInteger q -> q
    int SECP256K1_DEFAULT_COORDS -> SECP256K1_DEFAULT_COORDS
    org.bouncycastle.math.ec.custom.sec.SecP256K1Point infinity -> infinity
    org.bouncycastle.math.ec.ECCurve cloneCurve() -> cloneCurve
    boolean supportsCoordinateSystem(int) -> supportsCoordinateSystem
    java.math.BigInteger getQ() -> getQ
    int getFieldSize() -> getFieldSize
    org.bouncycastle.math.ec.ECFieldElement fromBigInteger(java.math.BigInteger) -> fromBigInteger
    org.bouncycastle.math.ec.ECPoint createRawPoint(org.bouncycastle.math.ec.ECFieldElement,org.bouncycastle.math.ec.ECFieldElement,boolean) -> createRawPoint
    org.bouncycastle.math.ec.ECPoint createRawPoint(org.bouncycastle.math.ec.ECFieldElement,org.bouncycastle.math.ec.ECFieldElement,org.bouncycastle.math.ec.ECFieldElement[],boolean) -> createRawPoint
    org.bouncycastle.math.ec.ECPoint getInfinity() -> getInfinity
org.bouncycastle.math.ec.custom.sec.SecP256K1Field -> org.bouncycastle.math.ec.custom.sec.SecP256K1Field:
    int[] P -> P
    int[] PExt -> PExt
    int[] PExtInv -> PExtInv
    int P7 -> P7
    int PExt15 -> PExt15
    int PInv33 -> PInv33
    void add(int[],int[],int[]) -> add
    void addExt(int[],int[],int[]) -> addExt
    void addOne(int[],int[]) -> addOne
    int[] fromBigInteger(java.math.BigInteger) -> fromBigInteger
    void half(int[],int[]) -> half
    void multiply(int[],int[],int[]) -> multiply
    void multiplyAddToExt(int[],int[],int[]) -> multiplyAddToExt
    void negate(int[],int[]) -> negate
    void reduce(int[],int[]) -> reduce
    void reduce32(int,int[]) -> reduce32
    void square(int[],int[]) -> square
    void squareN(int[],int,int[]) -> squareN
    void subtract(int[],int[],int[]) -> subtract
    void subtractExt(int[],int[],int[]) -> subtractExt
    void twice(int[],int[]) -> twice
org.bouncycastle.math.ec.custom.sec.SecP256K1FieldElement -> org.bouncycastle.math.ec.custom.sec.SecP256K1FieldElement:
    java.math.BigInteger Q -> Q
    int[] x -> x
    boolean isZero() -> isZero
    boolean isOne() -> isOne
    boolean testBitZero() -> testBitZero
    java.math.BigInteger toBigInteger() -> toBigInteger
    java.lang.String getFieldName() -> getFieldName
    int getFieldSize() -> getFieldSize
    org.bouncycastle.math.ec.ECFieldElement add(org.bouncycastle.math.ec.ECFieldElement) -> add
    org.bouncycastle.math.ec.ECFieldElement addOne() -> addOne
    org.bouncycastle.math.ec.ECFieldElement subtract(org.bouncycastle.math.ec.ECFieldElement) -> subtract
    org.bouncycastle.math.ec.ECFieldElement multiply(org.bouncycastle.math.ec.ECFieldElement) -> multiply
    org.bouncycastle.math.ec.ECFieldElement divide(org.bouncycastle.math.ec.ECFieldElement) -> divide
    org.bouncycastle.math.ec.ECFieldElement negate() -> negate
    org.bouncycastle.math.ec.ECFieldElement square() -> square
    org.bouncycastle.math.ec.ECFieldElement invert() -> invert
    org.bouncycastle.math.ec.ECFieldElement sqrt() -> sqrt
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
org.bouncycastle.math.ec.custom.sec.SecP256K1Point -> org.bouncycastle.math.ec.custom.sec.SecP256K1Point:
    org.bouncycastle.math.ec.ECPoint detach() -> detach
    org.bouncycastle.math.ec.ECPoint add(org.bouncycastle.math.ec.ECPoint) -> add
    org.bouncycastle.math.ec.ECPoint twice() -> twice
    org.bouncycastle.math.ec.ECPoint twicePlus(org.bouncycastle.math.ec.ECPoint) -> twicePlus
    org.bouncycastle.math.ec.ECPoint threeTimes() -> threeTimes
    org.bouncycastle.math.ec.ECPoint negate() -> negate
org.bouncycastle.math.ec.custom.sec.SecP256R1Curve -> org.bouncycastle.math.ec.custom.sec.SecP256R1Curve:
    java.math.BigInteger q -> q
    int SecP256R1_DEFAULT_COORDS -> SecP256R1_DEFAULT_COORDS
    org.bouncycastle.math.ec.custom.sec.SecP256R1Point infinity -> infinity
    org.bouncycastle.math.ec.ECCurve cloneCurve() -> cloneCurve
    boolean supportsCoordinateSystem(int) -> supportsCoordinateSystem
    java.math.BigInteger getQ() -> getQ
    int getFieldSize() -> getFieldSize
    org.bouncycastle.math.ec.ECFieldElement fromBigInteger(java.math.BigInteger) -> fromBigInteger
    org.bouncycastle.math.ec.ECPoint createRawPoint(org.bouncycastle.math.ec.ECFieldElement,org.bouncycastle.math.ec.ECFieldElement,boolean) -> createRawPoint
    org.bouncycastle.math.ec.ECPoint createRawPoint(org.bouncycastle.math.ec.ECFieldElement,org.bouncycastle.math.ec.ECFieldElement,org.bouncycastle.math.ec.ECFieldElement[],boolean) -> createRawPoint
    org.bouncycastle.math.ec.ECPoint getInfinity() -> getInfinity
org.bouncycastle.math.ec.custom.sec.SecP256R1Field -> org.bouncycastle.math.ec.custom.sec.SecP256R1Field:
    long M -> M
    int[] P -> P
    int[] PExt -> PExt
    int P7 -> P7
    int PExt15 -> PExt15
    void add(int[],int[],int[]) -> add
    void addExt(int[],int[],int[]) -> addExt
    void addOne(int[],int[]) -> addOne
    int[] fromBigInteger(java.math.BigInteger) -> fromBigInteger
    void half(int[],int[]) -> half
    void multiply(int[],int[],int[]) -> multiply
    void multiplyAddToExt(int[],int[],int[]) -> multiplyAddToExt
    void negate(int[],int[]) -> negate
    void reduce(int[],int[]) -> reduce
    void reduce32(int,int[]) -> reduce32
    void square(int[],int[]) -> square
    void squareN(int[],int,int[]) -> squareN
    void subtract(int[],int[],int[]) -> subtract
    void subtractExt(int[],int[],int[]) -> subtractExt
    void twice(int[],int[]) -> twice
    void addPInvTo(int[]) -> addPInvTo
    void subPInvFrom(int[]) -> subPInvFrom
org.bouncycastle.math.ec.custom.sec.SecP256R1FieldElement -> org.bouncycastle.math.ec.custom.sec.SecP256R1FieldElement:
    java.math.BigInteger Q -> Q
    int[] x -> x
    boolean isZero() -> isZero
    boolean isOne() -> isOne
    boolean testBitZero() -> testBitZero
    java.math.BigInteger toBigInteger() -> toBigInteger
    java.lang.String getFieldName() -> getFieldName
    int getFieldSize() -> getFieldSize
    org.bouncycastle.math.ec.ECFieldElement add(org.bouncycastle.math.ec.ECFieldElement) -> add
    org.bouncycastle.math.ec.ECFieldElement addOne() -> addOne
    org.bouncycastle.math.ec.ECFieldElement subtract(org.bouncycastle.math.ec.ECFieldElement) -> subtract
    org.bouncycastle.math.ec.ECFieldElement multiply(org.bouncycastle.math.ec.ECFieldElement) -> multiply
    org.bouncycastle.math.ec.ECFieldElement divide(org.bouncycastle.math.ec.ECFieldElement) -> divide
    org.bouncycastle.math.ec.ECFieldElement negate() -> negate
    org.bouncycastle.math.ec.ECFieldElement square() -> square
    org.bouncycastle.math.ec.ECFieldElement invert() -> invert
    org.bouncycastle.math.ec.ECFieldElement sqrt() -> sqrt
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
org.bouncycastle.math.ec.custom.sec.SecP256R1Point -> org.bouncycastle.math.ec.custom.sec.SecP256R1Point:
    org.bouncycastle.math.ec.ECPoint detach() -> detach
    org.bouncycastle.math.ec.ECPoint add(org.bouncycastle.math.ec.ECPoint) -> add
    org.bouncycastle.math.ec.ECPoint twice() -> twice
    org.bouncycastle.math.ec.ECPoint twicePlus(org.bouncycastle.math.ec.ECPoint) -> twicePlus
    org.bouncycastle.math.ec.ECPoint threeTimes() -> threeTimes
    org.bouncycastle.math.ec.ECPoint negate() -> negate
org.bouncycastle.math.ec.custom.sec.SecP384R1Curve -> org.bouncycastle.math.ec.custom.sec.SecP384R1Curve:
    java.math.BigInteger q -> q
    int SecP384R1_DEFAULT_COORDS -> SecP384R1_DEFAULT_COORDS
    org.bouncycastle.math.ec.custom.sec.SecP384R1Point infinity -> infinity
    org.bouncycastle.math.ec.ECCurve cloneCurve() -> cloneCurve
    boolean supportsCoordinateSystem(int) -> supportsCoordinateSystem
    java.math.BigInteger getQ() -> getQ
    int getFieldSize() -> getFieldSize
    org.bouncycastle.math.ec.ECFieldElement fromBigInteger(java.math.BigInteger) -> fromBigInteger
    org.bouncycastle.math.ec.ECPoint createRawPoint(org.bouncycastle.math.ec.ECFieldElement,org.bouncycastle.math.ec.ECFieldElement,boolean) -> createRawPoint
    org.bouncycastle.math.ec.ECPoint createRawPoint(org.bouncycastle.math.ec.ECFieldElement,org.bouncycastle.math.ec.ECFieldElement,org.bouncycastle.math.ec.ECFieldElement[],boolean) -> createRawPoint
    org.bouncycastle.math.ec.ECPoint getInfinity() -> getInfinity
org.bouncycastle.math.ec.custom.sec.SecP384R1Field -> org.bouncycastle.math.ec.custom.sec.SecP384R1Field:
    long M -> M
    int[] P -> P
    int[] PExt -> PExt
    int[] PExtInv -> PExtInv
    int P11 -> P11
    int PExt23 -> PExt23
    void add(int[],int[],int[]) -> add
    void addExt(int[],int[],int[]) -> addExt
    void addOne(int[],int[]) -> addOne
    int[] fromBigInteger(java.math.BigInteger) -> fromBigInteger
    void half(int[],int[]) -> half
    void multiply(int[],int[],int[]) -> multiply
    void negate(int[],int[]) -> negate
    void reduce(int[],int[]) -> reduce
    void reduce32(int,int[]) -> reduce32
    void square(int[],int[]) -> square
    void squareN(int[],int,int[]) -> squareN
    void subtract(int[],int[],int[]) -> subtract
    void subtractExt(int[],int[],int[]) -> subtractExt
    void twice(int[],int[]) -> twice
    void addPInvTo(int[]) -> addPInvTo
    void subPInvFrom(int[]) -> subPInvFrom
org.bouncycastle.math.ec.custom.sec.SecP384R1FieldElement -> org.bouncycastle.math.ec.custom.sec.SecP384R1FieldElement:
    java.math.BigInteger Q -> Q
    int[] x -> x
    boolean isZero() -> isZero
    boolean isOne() -> isOne
    boolean testBitZero() -> testBitZero
    java.math.BigInteger toBigInteger() -> toBigInteger
    java.lang.String getFieldName() -> getFieldName
    int getFieldSize() -> getFieldSize
    org.bouncycastle.math.ec.ECFieldElement add(org.bouncycastle.math.ec.ECFieldElement) -> add
    org.bouncycastle.math.ec.ECFieldElement addOne() -> addOne
    org.bouncycastle.math.ec.ECFieldElement subtract(org.bouncycastle.math.ec.ECFieldElement) -> subtract
    org.bouncycastle.math.ec.ECFieldElement multiply(org.bouncycastle.math.ec.ECFieldElement) -> multiply
    org.bouncycastle.math.ec.ECFieldElement divide(org.bouncycastle.math.ec.ECFieldElement) -> divide
    org.bouncycastle.math.ec.ECFieldElement negate() -> negate
    org.bouncycastle.math.ec.ECFieldElement square() -> square
    org.bouncycastle.math.ec.ECFieldElement invert() -> invert
    org.bouncycastle.math.ec.ECFieldElement sqrt() -> sqrt
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
org.bouncycastle.math.ec.custom.sec.SecP384R1Point -> org.bouncycastle.math.ec.custom.sec.SecP384R1Point:
    org.bouncycastle.math.ec.ECPoint detach() -> detach
    org.bouncycastle.math.ec.ECPoint add(org.bouncycastle.math.ec.ECPoint) -> add
    org.bouncycastle.math.ec.ECPoint twice() -> twice
    org.bouncycastle.math.ec.ECPoint twicePlus(org.bouncycastle.math.ec.ECPoint) -> twicePlus
    org.bouncycastle.math.ec.ECPoint threeTimes() -> threeTimes
    org.bouncycastle.math.ec.ECPoint negate() -> negate
org.bouncycastle.math.ec.custom.sec.SecP521R1Curve -> org.bouncycastle.math.ec.custom.sec.SecP521R1Curve:
    java.math.BigInteger q -> q
    int SecP521R1_DEFAULT_COORDS -> SecP521R1_DEFAULT_COORDS
    org.bouncycastle.math.ec.custom.sec.SecP521R1Point infinity -> infinity
    org.bouncycastle.math.ec.ECCurve cloneCurve() -> cloneCurve
    boolean supportsCoordinateSystem(int) -> supportsCoordinateSystem
    java.math.BigInteger getQ() -> getQ
    int getFieldSize() -> getFieldSize
    org.bouncycastle.math.ec.ECFieldElement fromBigInteger(java.math.BigInteger) -> fromBigInteger
    org.bouncycastle.math.ec.ECPoint createRawPoint(org.bouncycastle.math.ec.ECFieldElement,org.bouncycastle.math.ec.ECFieldElement,boolean) -> createRawPoint
    org.bouncycastle.math.ec.ECPoint createRawPoint(org.bouncycastle.math.ec.ECFieldElement,org.bouncycastle.math.ec.ECFieldElement,org.bouncycastle.math.ec.ECFieldElement[],boolean) -> createRawPoint
    org.bouncycastle.math.ec.ECPoint getInfinity() -> getInfinity
org.bouncycastle.math.ec.custom.sec.SecP521R1Field -> org.bouncycastle.math.ec.custom.sec.SecP521R1Field:
    int[] P -> P
    int P16 -> P16
    void add(int[],int[],int[]) -> add
    void addOne(int[],int[]) -> addOne
    int[] fromBigInteger(java.math.BigInteger) -> fromBigInteger
    void half(int[],int[]) -> half
    void multiply(int[],int[],int[]) -> multiply
    void negate(int[],int[]) -> negate
    void reduce(int[],int[]) -> reduce
    void reduce23(int[]) -> reduce23
    void square(int[],int[]) -> square
    void squareN(int[],int,int[]) -> squareN
    void subtract(int[],int[],int[]) -> subtract
    void twice(int[],int[]) -> twice
    void implMultiply(int[],int[],int[]) -> implMultiply
    void implSquare(int[],int[]) -> implSquare
org.bouncycastle.math.ec.custom.sec.SecP521R1FieldElement -> org.bouncycastle.math.ec.custom.sec.SecP521R1FieldElement:
    java.math.BigInteger Q -> Q
    int[] x -> x
    boolean isZero() -> isZero
    boolean isOne() -> isOne
    boolean testBitZero() -> testBitZero
    java.math.BigInteger toBigInteger() -> toBigInteger
    java.lang.String getFieldName() -> getFieldName
    int getFieldSize() -> getFieldSize
    org.bouncycastle.math.ec.ECFieldElement add(org.bouncycastle.math.ec.ECFieldElement) -> add
    org.bouncycastle.math.ec.ECFieldElement addOne() -> addOne
    org.bouncycastle.math.ec.ECFieldElement subtract(org.bouncycastle.math.ec.ECFieldElement) -> subtract
    org.bouncycastle.math.ec.ECFieldElement multiply(org.bouncycastle.math.ec.ECFieldElement) -> multiply
    org.bouncycastle.math.ec.ECFieldElement divide(org.bouncycastle.math.ec.ECFieldElement) -> divide
    org.bouncycastle.math.ec.ECFieldElement negate() -> negate
    org.bouncycastle.math.ec.ECFieldElement square() -> square
    org.bouncycastle.math.ec.ECFieldElement invert() -> invert
    org.bouncycastle.math.ec.ECFieldElement sqrt() -> sqrt
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
org.bouncycastle.math.ec.custom.sec.SecP521R1Point -> org.bouncycastle.math.ec.custom.sec.SecP521R1Point:
    org.bouncycastle.math.ec.ECPoint detach() -> detach
    org.bouncycastle.math.ec.ECPoint add(org.bouncycastle.math.ec.ECPoint) -> add
    org.bouncycastle.math.ec.ECPoint twice() -> twice
    org.bouncycastle.math.ec.ECPoint twicePlus(org.bouncycastle.math.ec.ECPoint) -> twicePlus
    org.bouncycastle.math.ec.ECPoint threeTimes() -> threeTimes
    org.bouncycastle.math.ec.ECFieldElement two(org.bouncycastle.math.ec.ECFieldElement) -> two
    org.bouncycastle.math.ec.ECFieldElement three(org.bouncycastle.math.ec.ECFieldElement) -> three
    org.bouncycastle.math.ec.ECFieldElement four(org.bouncycastle.math.ec.ECFieldElement) -> four
    org.bouncycastle.math.ec.ECFieldElement eight(org.bouncycastle.math.ec.ECFieldElement) -> eight
    org.bouncycastle.math.ec.ECFieldElement doubleProductFromSquares(org.bouncycastle.math.ec.ECFieldElement,org.bouncycastle.math.ec.ECFieldElement,org.bouncycastle.math.ec.ECFieldElement,org.bouncycastle.math.ec.ECFieldElement) -> doubleProductFromSquares
    org.bouncycastle.math.ec.ECPoint negate() -> negate
org.bouncycastle.math.ec.endo.ECEndomorphism -> org.bouncycastle.math.ec.endo.ECEndomorphism:
    org.bouncycastle.math.ec.ECPointMap getPointMap() -> getPointMap
    boolean hasEfficientPointMap() -> hasEfficientPointMap
org.bouncycastle.math.ec.endo.GLVEndomorphism -> org.bouncycastle.math.ec.endo.GLVEndomorphism:
    java.math.BigInteger[] decomposeScalar(java.math.BigInteger) -> decomposeScalar
org.bouncycastle.math.ec.endo.GLVTypeBEndomorphism -> org.bouncycastle.math.ec.endo.GLVTypeBEndomorphism:
    org.bouncycastle.math.ec.ECCurve curve -> curve
    org.bouncycastle.math.ec.endo.GLVTypeBParameters parameters -> parameters
    org.bouncycastle.math.ec.ECPointMap pointMap -> pointMap
    java.math.BigInteger[] decomposeScalar(java.math.BigInteger) -> decomposeScalar
    org.bouncycastle.math.ec.ECPointMap getPointMap() -> getPointMap
    boolean hasEfficientPointMap() -> hasEfficientPointMap
    java.math.BigInteger calculateB(java.math.BigInteger,java.math.BigInteger,int) -> calculateB
org.bouncycastle.math.ec.endo.GLVTypeBParameters -> org.bouncycastle.math.ec.endo.GLVTypeBParameters:
    java.math.BigInteger beta -> beta
    java.math.BigInteger lambda -> lambda
    java.math.BigInteger[] v1 -> v1
    java.math.BigInteger[] v2 -> v2
    java.math.BigInteger g1 -> g1
    java.math.BigInteger g2 -> g2
    int bits -> bits
    java.math.BigInteger getBeta() -> getBeta
    java.math.BigInteger getLambda() -> getLambda
    java.math.BigInteger[] getV1() -> getV1
    java.math.BigInteger[] getV2() -> getV2
    java.math.BigInteger getG1() -> getG1
    java.math.BigInteger getG2() -> getG2
    int getBits() -> getBits
org.bouncycastle.math.ec.tools.DiscoverEndomorphisms -> org.bouncycastle.math.ec.tools.DiscoverEndomorphisms:
    int radix -> radix
    void main(java.lang.String[]) -> main
    void discoverEndomorphism(java.lang.String) -> discoverEndomorphism
    void printGLVTypeBParameters(org.bouncycastle.asn1.x9.X9ECParameters) -> printGLVTypeBParameters
    void printProperty(java.lang.String,java.lang.Object) -> printProperty
    boolean areRelativelyPrime(java.math.BigInteger,java.math.BigInteger) -> areRelativelyPrime
    java.math.BigInteger[] calculateRange(java.math.BigInteger,java.math.BigInteger,java.math.BigInteger) -> calculateRange
    java.math.BigInteger[] extEuclidBezout(java.math.BigInteger[]) -> extEuclidBezout
    java.math.BigInteger[] extEuclidGLV(java.math.BigInteger,java.math.BigInteger) -> extEuclidGLV
    java.math.BigInteger[] chooseShortest(java.math.BigInteger[],java.math.BigInteger[]) -> chooseShortest
    java.math.BigInteger[] intersect(java.math.BigInteger[],java.math.BigInteger[]) -> intersect
    boolean isLessThanSqrt(java.math.BigInteger,java.math.BigInteger) -> isLessThanSqrt
    boolean isShorter(java.math.BigInteger[],java.math.BigInteger[]) -> isShorter
    boolean isVectorBoundedBySqrt(java.math.BigInteger[],java.math.BigInteger) -> isVectorBoundedBySqrt
    java.math.BigInteger[] order(java.math.BigInteger,java.math.BigInteger) -> order
    java.math.BigInteger roundQuotient(java.math.BigInteger,java.math.BigInteger) -> roundQuotient
    java.math.BigInteger solveQuadraticEquation(java.math.BigInteger,java.math.BigInteger,java.math.BigInteger) -> solveQuadraticEquation
    java.math.BigInteger isqrt(java.math.BigInteger) -> isqrt
    void swap(java.math.BigInteger[]) -> swap
org.bouncycastle.math.field.ExtensionField -> org.bouncycastle.math.field.ExtensionField:
    org.bouncycastle.math.field.FiniteField getSubfield() -> getSubfield
    int getDegree() -> getDegree
org.bouncycastle.math.field.FiniteField -> org.bouncycastle.math.field.FiniteField:
    java.math.BigInteger getCharacteristic() -> getCharacteristic
    int getDimension() -> getDimension
org.bouncycastle.math.field.FiniteFields -> org.bouncycastle.math.field.FiniteFields:
    org.bouncycastle.math.field.FiniteField GF_2 -> GF_2
    org.bouncycastle.math.field.FiniteField GF_3 -> GF_3
    org.bouncycastle.math.field.PolynomialExtensionField getBinaryExtensionField(int[]) -> getBinaryExtensionField
    org.bouncycastle.math.field.FiniteField getPrimeField(java.math.BigInteger) -> getPrimeField
org.bouncycastle.math.field.GF2Polynomial -> org.bouncycastle.math.field.GF2Polynomial:
    int[] exponents -> exponents
    int getDegree() -> getDegree
    int[] getExponentsPresent() -> getExponentsPresent
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
org.bouncycastle.math.field.GenericPolynomialExtensionField -> org.bouncycastle.math.field.GenericPolynomialExtensionField:
    org.bouncycastle.math.field.FiniteField subfield -> subfield
    org.bouncycastle.math.field.Polynomial minimalPolynomial -> minimalPolynomial
    java.math.BigInteger getCharacteristic() -> getCharacteristic
    int getDimension() -> getDimension
    org.bouncycastle.math.field.FiniteField getSubfield() -> getSubfield
    int getDegree() -> getDegree
    org.bouncycastle.math.field.Polynomial getMinimalPolynomial() -> getMinimalPolynomial
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
org.bouncycastle.math.field.Polynomial -> org.bouncycastle.math.field.Polynomial:
    int getDegree() -> getDegree
    int[] getExponentsPresent() -> getExponentsPresent
org.bouncycastle.math.field.PolynomialExtensionField -> org.bouncycastle.math.field.PolynomialExtensionField:
    org.bouncycastle.math.field.Polynomial getMinimalPolynomial() -> getMinimalPolynomial
org.bouncycastle.math.field.PrimeField -> org.bouncycastle.math.field.PrimeField:
    java.math.BigInteger characteristic -> characteristic
    java.math.BigInteger getCharacteristic() -> getCharacteristic
    int getDimension() -> getDimension
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
org.bouncycastle.math.raw.Mod -> org.bouncycastle.math.raw.Mod:
    int inverse32(int) -> inverse32
    void invert(int[],int[],int[]) -> invert
    int[] random(int[]) -> random
    void add(int[],int[],int[],int[]) -> add
    void subtract(int[],int[],int[],int[]) -> subtract
    void inversionResult(int[],int,int[],int[]) -> inversionResult
    int inversionStep(int[],int[],int,int[],int) -> inversionStep
    int getTrailingZeroes(int) -> getTrailingZeroes
org.bouncycastle.math.raw.Mont256 -> org.bouncycastle.math.raw.Mont256:
    long M -> M
    int inverse32(int) -> inverse32
    void multAdd(int[],int[],int[],int[],int) -> multAdd
    void multAddXF(int[],int[],int[],int[]) -> multAddXF
    void reduce(int[],int[],int) -> reduce
    void reduceXF(int[],int[]) -> reduceXF
org.bouncycastle.math.raw.Nat -> org.bouncycastle.math.raw.Nat:
    long M -> M
    int add(int,int[],int[],int[]) -> add
    int add33At(int,int,int[],int) -> add33At
    int add33At(int,int,int[],int,int) -> add33At
    int add33To(int,int,int[]) -> add33To
    int add33To(int,int,int[],int) -> add33To
    int addBothTo(int,int[],int[],int[]) -> addBothTo
    int addBothTo(int,int[],int,int[],int,int[],int) -> addBothTo
    int addDWordAt(int,long,int[],int) -> addDWordAt
    int addDWordAt(int,long,int[],int,int) -> addDWordAt
    int addDWordTo(int,long,int[]) -> addDWordTo
    int addDWordTo(int,long,int[],int) -> addDWordTo
    int addTo(int,int[],int[]) -> addTo
    int addTo(int,int[],int,int[],int) -> addTo
    int addWordAt(int,int,int[],int) -> addWordAt
    int addWordAt(int,int,int[],int,int) -> addWordAt
    int addWordTo(int,int,int[]) -> addWordTo
    int addWordTo(int,int,int[],int) -> addWordTo
    int[] copy(int,int[]) -> copy
    void copy(int,int[],int[]) -> copy
    int[] create(int) -> create
    int dec(int,int[]) -> dec
    int dec(int,int[],int[]) -> dec
    int decAt(int,int[],int) -> decAt
    int decAt(int,int[],int,int) -> decAt
    boolean eq(int,int[],int[]) -> eq
    int[] fromBigInteger(int,java.math.BigInteger) -> fromBigInteger
    int getBit(int[],int) -> getBit
    boolean gte(int,int[],int[]) -> gte
    int inc(int,int[]) -> inc
    int inc(int,int[],int[]) -> inc
    int incAt(int,int[],int) -> incAt
    int incAt(int,int[],int,int) -> incAt
    boolean isOne(int,int[]) -> isOne
    boolean isZero(int,int[]) -> isZero
    void mul(int,int[],int[],int[]) -> mul
    void mul(int,int[],int,int[],int,int[],int) -> mul
    int mulAddTo(int,int[],int[],int[]) -> mulAddTo
    int mulAddTo(int,int[],int,int[],int,int[],int) -> mulAddTo
    int mul31BothAdd(int,int,int[],int,int[],int[],int) -> mul31BothAdd
    int mulWord(int,int,int[],int[]) -> mulWord
    int mulWord(int,int,int[],int,int[],int) -> mulWord
    int mulWordAddTo(int,int,int[],int,int[],int) -> mulWordAddTo
    int mulWordDwordAddAt(int,int,long,int[],int) -> mulWordDwordAddAt
    int shiftDownBit(int,int[],int) -> shiftDownBit
    int shiftDownBit(int,int[],int,int) -> shiftDownBit
    int shiftDownBit(int,int[],int,int[]) -> shiftDownBit
    int shiftDownBit(int,int[],int,int,int[],int) -> shiftDownBit
    int shiftDownBits(int,int[],int,int) -> shiftDownBits
    int shiftDownBits(int,int[],int,int,int) -> shiftDownBits
    int shiftDownBits(int,int[],int,int,int[]) -> shiftDownBits
    int shiftDownBits(int,int[],int,int,int,int[],int) -> shiftDownBits
    int shiftDownWord(int,int[],int) -> shiftDownWord
    int shiftUpBit(int,int[],int) -> shiftUpBit
    int shiftUpBit(int,int[],int,int) -> shiftUpBit
    int shiftUpBit(int,int[],int,int[]) -> shiftUpBit
    int shiftUpBit(int,int[],int,int,int[],int) -> shiftUpBit
    int shiftUpBits(int,int[],int,int) -> shiftUpBits
    int shiftUpBits(int,int[],int,int,int) -> shiftUpBits
    int shiftUpBits(int,int[],int,int,int[]) -> shiftUpBits
    int shiftUpBits(int,int[],int,int,int,int[],int) -> shiftUpBits
    void square(int,int[],int[]) -> square
    void square(int,int[],int,int[],int) -> square
    int squareWordAdd(int[],int,int[]) -> squareWordAdd
    int squareWordAdd(int[],int,int,int[],int) -> squareWordAdd
    int sub(int,int[],int[],int[]) -> sub
    int sub(int,int[],int,int[],int,int[],int) -> sub
    int sub33At(int,int,int[],int) -> sub33At
    int sub33At(int,int,int[],int,int) -> sub33At
    int sub33From(int,int,int[]) -> sub33From
    int sub33From(int,int,int[],int) -> sub33From
    int subBothFrom(int,int[],int[],int[]) -> subBothFrom
    int subBothFrom(int,int[],int,int[],int,int[],int) -> subBothFrom
    int subDWordAt(int,long,int[],int) -> subDWordAt
    int subDWordAt(int,long,int[],int,int) -> subDWordAt
    int subDWordFrom(int,long,int[]) -> subDWordFrom
    int subDWordFrom(int,long,int[],int) -> subDWordFrom
    int subFrom(int,int[],int[]) -> subFrom
    int subFrom(int,int[],int,int[],int) -> subFrom
    int subWordAt(int,int,int[],int) -> subWordAt
    int subWordAt(int,int,int[],int,int) -> subWordAt
    int subWordFrom(int,int,int[]) -> subWordFrom
    int subWordFrom(int,int,int[],int) -> subWordFrom
    java.math.BigInteger toBigInteger(int,int[]) -> toBigInteger
    void zero(int,int[]) -> zero
org.bouncycastle.math.raw.Nat192 -> org.bouncycastle.math.raw.Nat192:
    long M -> M
    int add(int[],int[],int[]) -> add
    int addBothTo(int[],int[],int[]) -> addBothTo
    int addTo(int[],int[]) -> addTo
    int addTo(int[],int,int[],int,int) -> addTo
    int addToEachOther(int[],int,int[],int) -> addToEachOther
    void copy(int[],int[]) -> copy
    int[] create() -> create
    int[] createExt() -> createExt
    boolean diff(int[],int,int[],int,int[],int) -> diff
    boolean eq(int[],int[]) -> eq
    int[] fromBigInteger(java.math.BigInteger) -> fromBigInteger
    int getBit(int[],int) -> getBit
    boolean gte(int[],int[]) -> gte
    boolean gte(int[],int,int[],int) -> gte
    boolean isOne(int[]) -> isOne
    boolean isZero(int[]) -> isZero
    void mul(int[],int[],int[]) -> mul
    void mul(int[],int,int[],int,int[],int) -> mul
    int mulAddTo(int[],int[],int[]) -> mulAddTo
    int mulAddTo(int[],int,int[],int,int[],int) -> mulAddTo
    long mul33Add(int,int[],int,int[],int,int[],int) -> mul33Add
    int mulWordAddExt(int,int[],int,int[],int) -> mulWordAddExt
    int mul33DWordAdd(int,long,int[],int) -> mul33DWordAdd
    int mul33WordAdd(int,int,int[],int) -> mul33WordAdd
    int mulWordDwordAdd(int,long,int[],int) -> mulWordDwordAdd
    int mulWord(int,int[],int[],int) -> mulWord
    void square(int[],int[]) -> square
    void square(int[],int,int[],int) -> square
    int sub(int[],int[],int[]) -> sub
    int sub(int[],int,int[],int,int[],int) -> sub
    int subBothFrom(int[],int[],int[]) -> subBothFrom
    int subFrom(int[],int[]) -> subFrom
    int subFrom(int[],int,int[],int) -> subFrom
    java.math.BigInteger toBigInteger(int[]) -> toBigInteger
    void zero(int[]) -> zero
org.bouncycastle.math.raw.Nat224 -> org.bouncycastle.math.raw.Nat224:
    long M -> M
    int add(int[],int[],int[]) -> add
    int add(int[],int,int[],int,int[],int) -> add
    int addBothTo(int[],int[],int[]) -> addBothTo
    int addBothTo(int[],int,int[],int,int[],int) -> addBothTo
    int addTo(int[],int[]) -> addTo
    int addTo(int[],int,int[],int,int) -> addTo
    int addToEachOther(int[],int,int[],int) -> addToEachOther
    void copy(int[],int[]) -> copy
    int[] create() -> create
    int[] createExt() -> createExt
    boolean diff(int[],int,int[],int,int[],int) -> diff
    boolean eq(int[],int[]) -> eq
    int[] fromBigInteger(java.math.BigInteger) -> fromBigInteger
    int getBit(int[],int) -> getBit
    boolean gte(int[],int[]) -> gte
    boolean gte(int[],int,int[],int) -> gte
    boolean isOne(int[]) -> isOne
    boolean isZero(int[]) -> isZero
    void mul(int[],int[],int[]) -> mul
    void mul(int[],int,int[],int,int[],int) -> mul
    int mulAddTo(int[],int[],int[]) -> mulAddTo
    int mulAddTo(int[],int,int[],int,int[],int) -> mulAddTo
    long mul33Add(int,int[],int,int[],int,int[],int) -> mul33Add
    int mulByWord(int,int[]) -> mulByWord
    int mulByWordAddTo(int,int[],int[]) -> mulByWordAddTo
    int mulWordAddTo(int,int[],int,int[],int) -> mulWordAddTo
    int mul33DWordAdd(int,long,int[],int) -> mul33DWordAdd
    int mul33WordAdd(int,int,int[],int) -> mul33WordAdd
    int mulWordDwordAdd(int,long,int[],int) -> mulWordDwordAdd
    int mulWord(int,int[],int[],int) -> mulWord
    void square(int[],int[]) -> square
    void square(int[],int,int[],int) -> square
    int sub(int[],int[],int[]) -> sub
    int sub(int[],int,int[],int,int[],int) -> sub
    int subBothFrom(int[],int[],int[]) -> subBothFrom
    int subFrom(int[],int[]) -> subFrom
    int subFrom(int[],int,int[],int) -> subFrom
    java.math.BigInteger toBigInteger(int[]) -> toBigInteger
    void zero(int[]) -> zero
org.bouncycastle.math.raw.Nat256 -> org.bouncycastle.math.raw.Nat256:
    long M -> M
    int add(int[],int[],int[]) -> add
    int add(int[],int,int[],int,int[],int) -> add
    int addBothTo(int[],int[],int[]) -> addBothTo
    int addBothTo(int[],int,int[],int,int[],int) -> addBothTo
    int addTo(int[],int[]) -> addTo
    int addTo(int[],int,int[],int,int) -> addTo
    int addToEachOther(int[],int,int[],int) -> addToEachOther
    void copy(int[],int[]) -> copy
    int[] create() -> create
    int[] createExt() -> createExt
    boolean diff(int[],int,int[],int,int[],int) -> diff
    boolean eq(int[],int[]) -> eq
    int[] fromBigInteger(java.math.BigInteger) -> fromBigInteger
    int getBit(int[],int) -> getBit
    boolean gte(int[],int[]) -> gte
    boolean gte(int[],int,int[],int) -> gte
    boolean isOne(int[]) -> isOne
    boolean isZero(int[]) -> isZero
    void mul(int[],int[],int[]) -> mul
    void mul(int[],int,int[],int,int[],int) -> mul
    int mulAddTo(int[],int[],int[]) -> mulAddTo
    int mulAddTo(int[],int,int[],int,int[],int) -> mulAddTo
    long mul33Add(int,int[],int,int[],int,int[],int) -> mul33Add
    int mulByWord(int,int[]) -> mulByWord
    int mulByWordAddTo(int,int[],int[]) -> mulByWordAddTo
    int mulWordAddTo(int,int[],int,int[],int) -> mulWordAddTo
    int mul33DWordAdd(int,long,int[],int) -> mul33DWordAdd
    int mul33WordAdd(int,int,int[],int) -> mul33WordAdd
    int mulWordDwordAdd(int,long,int[],int) -> mulWordDwordAdd
    int mulWord(int,int[],int[],int) -> mulWord
    void square(int[],int[]) -> square
    void square(int[],int,int[],int) -> square
    int sub(int[],int[],int[]) -> sub
    int sub(int[],int,int[],int,int[],int) -> sub
    int subBothFrom(int[],int[],int[]) -> subBothFrom
    int subFrom(int[],int[]) -> subFrom
    int subFrom(int[],int,int[],int) -> subFrom
    java.math.BigInteger toBigInteger(int[]) -> toBigInteger
    void zero(int[]) -> zero
org.bouncycastle.math.raw.Nat384 -> org.bouncycastle.math.raw.Nat384:
    void mul(int[],int[],int[]) -> mul
    void square(int[],int[]) -> square
org.bouncycastle.math.raw.Nat512 -> org.bouncycastle.math.raw.Nat512:
    void mul(int[],int[],int[]) -> mul
    void square(int[],int[]) -> square
org.bouncycastle.pqc.asn1.GMSSPrivateKey -> org.bouncycastle.pqc.asn1.GMSSPrivateKey:
    org.bouncycastle.asn1.ASN1Primitive primitive -> primitive
    org.bouncycastle.asn1.ASN1Primitive encode(int[],byte[][],byte[][],byte[][][],byte[][][],byte[][][],org.bouncycastle.pqc.crypto.gmss.Treehash[][],org.bouncycastle.pqc.crypto.gmss.Treehash[][],java.util.Vector[],java.util.Vector[],java.util.Vector[][],java.util.Vector[][],org.bouncycastle.pqc.crypto.gmss.GMSSLeaf[],org.bouncycastle.pqc.crypto.gmss.GMSSLeaf[],org.bouncycastle.pqc.crypto.gmss.GMSSLeaf[],int[],byte[][],org.bouncycastle.pqc.crypto.gmss.GMSSRootCalc[],byte[][],org.bouncycastle.pqc.crypto.gmss.GMSSRootSig[],org.bouncycastle.pqc.crypto.gmss.GMSSParameters,org.bouncycastle.asn1.x509.AlgorithmIdentifier[]) -> encode
    int checkBigIntegerInIntRange(org.bouncycastle.asn1.ASN1Encodable) -> checkBigIntegerInIntRange
    org.bouncycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
org.bouncycastle.pqc.asn1.GMSSPublicKey -> org.bouncycastle.pqc.asn1.GMSSPublicKey:
    org.bouncycastle.asn1.ASN1Integer version -> version
    byte[] publicKey -> publicKey
    org.bouncycastle.pqc.asn1.GMSSPublicKey getInstance(java.lang.Object) -> getInstance
    byte[] getPublicKey() -> getPublicKey
    org.bouncycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
org.bouncycastle.pqc.asn1.McElieceCCA2PrivateKey -> org.bouncycastle.pqc.asn1.McElieceCCA2PrivateKey:
    org.bouncycastle.asn1.ASN1ObjectIdentifier oid -> oid
    int n -> n
    int k -> k
    byte[] encField -> encField
    byte[] encGp -> encGp
    byte[] encP -> encP
    byte[] encH -> encH
    byte[][] encqInv -> encqInv
    org.bouncycastle.asn1.ASN1ObjectIdentifier getOID() -> getOID
    int getN() -> getN
    int getK() -> getK
    org.bouncycastle.pqc.math.linearalgebra.GF2mField getField() -> getField
    org.bouncycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM getGoppaPoly() -> getGoppaPoly
    org.bouncycastle.pqc.math.linearalgebra.Permutation getP() -> getP
    org.bouncycastle.pqc.math.linearalgebra.GF2Matrix getH() -> getH
    org.bouncycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM[] getQInv() -> getQInv
    org.bouncycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
    org.bouncycastle.pqc.asn1.McElieceCCA2PrivateKey getInstance(java.lang.Object) -> getInstance
org.bouncycastle.pqc.asn1.McElieceCCA2PublicKey -> org.bouncycastle.pqc.asn1.McElieceCCA2PublicKey:
    org.bouncycastle.asn1.ASN1ObjectIdentifier oid -> oid
    int n -> n
    int t -> t
    byte[] matrixG -> matrixG
    org.bouncycastle.asn1.ASN1ObjectIdentifier getOID() -> getOID
    int getN() -> getN
    int getT() -> getT
    org.bouncycastle.pqc.math.linearalgebra.GF2Matrix getG() -> getG
    org.bouncycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
    org.bouncycastle.pqc.asn1.McElieceCCA2PublicKey getInstance(java.lang.Object) -> getInstance
org.bouncycastle.pqc.asn1.McEliecePrivateKey -> org.bouncycastle.pqc.asn1.McEliecePrivateKey:
    org.bouncycastle.asn1.ASN1ObjectIdentifier oid -> oid
    int n -> n
    int k -> k
    byte[] encField -> encField
    byte[] encGp -> encGp
    byte[] encSInv -> encSInv
    byte[] encP1 -> encP1
    byte[] encP2 -> encP2
    byte[] encH -> encH
    byte[][] encqInv -> encqInv
    org.bouncycastle.pqc.asn1.McEliecePrivateKey getInstance(java.lang.Object) -> getInstance
    org.bouncycastle.asn1.ASN1ObjectIdentifier getOID() -> getOID
    int getN() -> getN
    int getK() -> getK
    org.bouncycastle.pqc.math.linearalgebra.GF2mField getField() -> getField
    org.bouncycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM getGoppaPoly() -> getGoppaPoly
    org.bouncycastle.pqc.math.linearalgebra.GF2Matrix getSInv() -> getSInv
    org.bouncycastle.pqc.math.linearalgebra.Permutation getP1() -> getP1
    org.bouncycastle.pqc.math.linearalgebra.Permutation getP2() -> getP2
    org.bouncycastle.pqc.math.linearalgebra.GF2Matrix getH() -> getH
    org.bouncycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM[] getQInv() -> getQInv
    org.bouncycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
org.bouncycastle.pqc.asn1.McEliecePublicKey -> org.bouncycastle.pqc.asn1.McEliecePublicKey:
    org.bouncycastle.asn1.ASN1ObjectIdentifier oid -> oid
    int n -> n
    int t -> t
    byte[] matrixG -> matrixG
    org.bouncycastle.asn1.ASN1ObjectIdentifier getOID() -> getOID
    int getN() -> getN
    int getT() -> getT
    org.bouncycastle.pqc.math.linearalgebra.GF2Matrix getG() -> getG
    org.bouncycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
    org.bouncycastle.pqc.asn1.McEliecePublicKey getInstance(java.lang.Object) -> getInstance
org.bouncycastle.pqc.asn1.PQCObjectIdentifiers -> org.bouncycastle.pqc.asn1.PQCObjectIdentifiers:
    org.bouncycastle.asn1.ASN1ObjectIdentifier rainbow -> rainbow
    org.bouncycastle.asn1.ASN1ObjectIdentifier rainbowWithSha1 -> rainbowWithSha1
    org.bouncycastle.asn1.ASN1ObjectIdentifier rainbowWithSha224 -> rainbowWithSha224
    org.bouncycastle.asn1.ASN1ObjectIdentifier rainbowWithSha256 -> rainbowWithSha256
    org.bouncycastle.asn1.ASN1ObjectIdentifier rainbowWithSha384 -> rainbowWithSha384
    org.bouncycastle.asn1.ASN1ObjectIdentifier rainbowWithSha512 -> rainbowWithSha512
    org.bouncycastle.asn1.ASN1ObjectIdentifier gmss -> gmss
    org.bouncycastle.asn1.ASN1ObjectIdentifier gmssWithSha1 -> gmssWithSha1
    org.bouncycastle.asn1.ASN1ObjectIdentifier gmssWithSha224 -> gmssWithSha224
    org.bouncycastle.asn1.ASN1ObjectIdentifier gmssWithSha256 -> gmssWithSha256
    org.bouncycastle.asn1.ASN1ObjectIdentifier gmssWithSha384 -> gmssWithSha384
    org.bouncycastle.asn1.ASN1ObjectIdentifier gmssWithSha512 -> gmssWithSha512
    org.bouncycastle.asn1.ASN1ObjectIdentifier mcEliece -> mcEliece
    org.bouncycastle.asn1.ASN1ObjectIdentifier mcElieceCca2 -> mcElieceCca2
org.bouncycastle.pqc.asn1.ParSet -> org.bouncycastle.pqc.asn1.ParSet:
    java.math.BigInteger ZERO -> ZERO
    int t -> t
    int[] h -> h
    int[] w -> w
    int[] k -> k
    int checkBigIntegerInIntRangeAndPositive(java.math.BigInteger) -> checkBigIntegerInIntRangeAndPositive
    org.bouncycastle.pqc.asn1.ParSet getInstance(java.lang.Object) -> getInstance
    int getT() -> getT
    int[] getH() -> getH
    int[] getW() -> getW
    int[] getK() -> getK
    org.bouncycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
org.bouncycastle.pqc.asn1.RainbowPrivateKey -> org.bouncycastle.pqc.asn1.RainbowPrivateKey:
    org.bouncycastle.asn1.ASN1Integer version -> version
    org.bouncycastle.asn1.ASN1ObjectIdentifier oid -> oid
    byte[][] invA1 -> invA1
    byte[] b1 -> b1
    byte[][] invA2 -> invA2
    byte[] b2 -> b2
    byte[] vi -> vi
    org.bouncycastle.pqc.crypto.rainbow.Layer[] layers -> layers
    org.bouncycastle.pqc.asn1.RainbowPrivateKey getInstance(java.lang.Object) -> getInstance
    org.bouncycastle.asn1.ASN1Integer getVersion() -> getVersion
    short[][] getInvA1() -> getInvA1
    short[] getB1() -> getB1
    short[] getB2() -> getB2
    short[][] getInvA2() -> getInvA2
    org.bouncycastle.pqc.crypto.rainbow.Layer[] getLayers() -> getLayers
    int[] getVi() -> getVi
    org.bouncycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
org.bouncycastle.pqc.asn1.RainbowPublicKey -> org.bouncycastle.pqc.asn1.RainbowPublicKey:
    org.bouncycastle.asn1.ASN1Integer version -> version
    org.bouncycastle.asn1.ASN1ObjectIdentifier oid -> oid
    org.bouncycastle.asn1.ASN1Integer docLength -> docLength
    byte[][] coeffQuadratic -> coeffQuadratic
    byte[][] coeffSingular -> coeffSingular
    byte[] coeffScalar -> coeffScalar
    org.bouncycastle.pqc.asn1.RainbowPublicKey getInstance(java.lang.Object) -> getInstance
    org.bouncycastle.asn1.ASN1Integer getVersion() -> getVersion
    int getDocLength() -> getDocLength
    short[][] getCoeffQuadratic() -> getCoeffQuadratic
    short[][] getCoeffSingular() -> getCoeffSingular
    short[] getCoeffScalar() -> getCoeffScalar
    org.bouncycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
org.bouncycastle.pqc.crypto.DigestingMessageSigner -> org.bouncycastle.pqc.crypto.DigestingMessageSigner:
    org.bouncycastle.crypto.Digest messDigest -> messDigest
    org.bouncycastle.pqc.crypto.MessageSigner messSigner -> messSigner
    boolean forSigning -> forSigning
    void init(boolean,org.bouncycastle.crypto.CipherParameters) -> init
    byte[] generateSignature() -> generateSignature
    boolean verify(byte[]) -> verify
    void update(byte) -> update
    void update(byte[],int,int) -> update
    void reset() -> reset
    boolean verifySignature(byte[]) -> verifySignature
org.bouncycastle.pqc.crypto.MessageEncryptor -> org.bouncycastle.pqc.crypto.MessageEncryptor:
    void init(boolean,org.bouncycastle.crypto.CipherParameters) -> init
    byte[] messageEncrypt(byte[]) -> messageEncrypt
    byte[] messageDecrypt(byte[]) -> messageDecrypt
org.bouncycastle.pqc.crypto.MessageSigner -> org.bouncycastle.pqc.crypto.MessageSigner:
    void init(boolean,org.bouncycastle.crypto.CipherParameters) -> init
    byte[] generateSignature(byte[]) -> generateSignature
    boolean verifySignature(byte[],byte[]) -> verifySignature
org.bouncycastle.pqc.crypto.gmss.GMSSDigestProvider -> org.bouncycastle.pqc.crypto.gmss.GMSSDigestProvider:
    org.bouncycastle.crypto.Digest get() -> get
org.bouncycastle.pqc.crypto.gmss.GMSSKeyGenerationParameters -> org.bouncycastle.pqc.crypto.gmss.GMSSKeyGenerationParameters:
    org.bouncycastle.pqc.crypto.gmss.GMSSParameters params -> params
    org.bouncycastle.pqc.crypto.gmss.GMSSParameters getParameters() -> getParameters
org.bouncycastle.pqc.crypto.gmss.GMSSKeyPairGenerator -> org.bouncycastle.pqc.crypto.gmss.GMSSKeyPairGenerator:
    org.bouncycastle.pqc.crypto.gmss.util.GMSSRandom gmssRandom -> gmssRandom
    org.bouncycastle.crypto.Digest messDigestTree -> messDigestTree
    byte[][] currentSeeds -> currentSeeds
    byte[][] nextNextSeeds -> nextNextSeeds
    byte[][] currentRootSigs -> currentRootSigs
    org.bouncycastle.pqc.crypto.gmss.GMSSDigestProvider digestProvider -> digestProvider
    int mdLength -> mdLength
    int numLayer -> numLayer
    boolean initialized -> initialized
    org.bouncycastle.pqc.crypto.gmss.GMSSParameters gmssPS -> gmssPS
    int[] heightOfTrees -> heightOfTrees
    int[] otsIndex -> otsIndex
    int[] K -> K
    org.bouncycastle.pqc.crypto.gmss.GMSSKeyGenerationParameters gmssParams -> gmssParams
    java.lang.String OID -> OID
    org.bouncycastle.crypto.AsymmetricCipherKeyPair genKeyPair() -> genKeyPair
    org.bouncycastle.pqc.crypto.gmss.GMSSRootCalc generateCurrentAuthpathAndRoot(byte[],java.util.Vector,byte[],int) -> generateCurrentAuthpathAndRoot
    org.bouncycastle.pqc.crypto.gmss.GMSSRootCalc generateNextAuthpathAndRoot(java.util.Vector,byte[],int) -> generateNextAuthpathAndRoot
    void initialize(int,java.security.SecureRandom) -> initialize
    void initialize(org.bouncycastle.crypto.KeyGenerationParameters) -> initialize
    void initializeDefault() -> initializeDefault
    void init(org.bouncycastle.crypto.KeyGenerationParameters) -> init
    org.bouncycastle.crypto.AsymmetricCipherKeyPair generateKeyPair() -> generateKeyPair
org.bouncycastle.pqc.crypto.gmss.GMSSKeyParameters -> org.bouncycastle.pqc.crypto.gmss.GMSSKeyParameters:
    org.bouncycastle.pqc.crypto.gmss.GMSSParameters params -> params
    org.bouncycastle.pqc.crypto.gmss.GMSSParameters getParameters() -> getParameters
org.bouncycastle.pqc.crypto.gmss.GMSSLeaf -> org.bouncycastle.pqc.crypto.gmss.GMSSLeaf:
    org.bouncycastle.crypto.Digest messDigestOTS -> messDigestOTS
    int mdsize -> mdsize
    int keysize -> keysize
    org.bouncycastle.pqc.crypto.gmss.util.GMSSRandom gmssRandom -> gmssRandom
    byte[] leaf -> leaf
    byte[] concHashs -> concHashs
    int i -> i
    int j -> j
    int two_power_w -> two_power_w
    int w -> w
    int steps -> steps
    byte[] seed -> seed
    byte[] privateKeyOTS -> privateKeyOTS
    void initLeafCalc(byte[]) -> initLeafCalc
    org.bouncycastle.pqc.crypto.gmss.GMSSLeaf nextLeaf() -> nextLeaf
    void updateLeafCalc() -> updateLeafCalc
    byte[] getLeaf() -> getLeaf
    int getLog(int) -> getLog
    byte[][] getStatByte() -> getStatByte
    int[] getStatInt() -> getStatInt
    java.lang.String toString() -> toString
org.bouncycastle.pqc.crypto.gmss.GMSSParameters -> org.bouncycastle.pqc.crypto.gmss.GMSSParameters:
    int numOfLayers -> numOfLayers
    int[] heightOfTrees -> heightOfTrees
    int[] winternitzParameter -> winternitzParameter
    int[] K -> K
    void init(int,int[],int[],int[]) -> init
    int getNumOfLayers() -> getNumOfLayers
    int[] getHeightOfTrees() -> getHeightOfTrees
    int[] getWinternitzParameter() -> getWinternitzParameter
    int[] getK() -> getK
org.bouncycastle.pqc.crypto.gmss.GMSSPrivateKeyParameters -> org.bouncycastle.pqc.crypto.gmss.GMSSPrivateKeyParameters:
    int[] index -> index
    byte[][] currentSeeds -> currentSeeds
    byte[][] nextNextSeeds -> nextNextSeeds
    byte[][][] currentAuthPaths -> currentAuthPaths
    byte[][][] nextAuthPaths -> nextAuthPaths
    org.bouncycastle.pqc.crypto.gmss.Treehash[][] currentTreehash -> currentTreehash
    org.bouncycastle.pqc.crypto.gmss.Treehash[][] nextTreehash -> nextTreehash
    java.util.Vector[] currentStack -> currentStack
    java.util.Vector[] nextStack -> nextStack
    java.util.Vector[][] currentRetain -> currentRetain
    java.util.Vector[][] nextRetain -> nextRetain
    byte[][][] keep -> keep
    org.bouncycastle.pqc.crypto.gmss.GMSSLeaf[] nextNextLeaf -> nextNextLeaf
    org.bouncycastle.pqc.crypto.gmss.GMSSLeaf[] upperLeaf -> upperLeaf
    org.bouncycastle.pqc.crypto.gmss.GMSSLeaf[] upperTreehashLeaf -> upperTreehashLeaf
    int[] minTreehash -> minTreehash
    org.bouncycastle.pqc.crypto.gmss.GMSSParameters gmssPS -> gmssPS
    byte[][] nextRoot -> nextRoot
    org.bouncycastle.pqc.crypto.gmss.GMSSRootCalc[] nextNextRoot -> nextNextRoot
    byte[][] currentRootSig -> currentRootSig
    org.bouncycastle.pqc.crypto.gmss.GMSSRootSig[] nextRootSig -> nextRootSig
    org.bouncycastle.pqc.crypto.gmss.GMSSDigestProvider digestProvider -> digestProvider
    boolean used -> used
    int[] heightOfTrees -> heightOfTrees
    int[] otsIndex -> otsIndex
    int[] K -> K
    int numLayer -> numLayer
    org.bouncycastle.crypto.Digest messDigestTrees -> messDigestTrees
    int mdLength -> mdLength
    org.bouncycastle.pqc.crypto.gmss.util.GMSSRandom gmssRandom -> gmssRandom
    int[] numLeafs -> numLeafs
    boolean isUsed() -> isUsed
    void markUsed() -> markUsed
    org.bouncycastle.pqc.crypto.gmss.GMSSPrivateKeyParameters nextKey() -> nextKey
    void nextKey(int) -> nextKey
    void nextTree(int) -> nextTree
    void updateKey(int) -> updateKey
    int getMinTreehashIndex(int) -> getMinTreehashIndex
    void computeAuthPaths(int) -> computeAuthPaths
    int heightOfPhi(int) -> heightOfPhi
    void updateNextNextAuthRoot(int) -> updateNextNextAuthRoot
    int[] getIndex() -> getIndex
    int getIndex(int) -> getIndex
    byte[][] getCurrentSeeds() -> getCurrentSeeds
    byte[][][] getCurrentAuthPaths() -> getCurrentAuthPaths
    byte[] getSubtreeRootSig(int) -> getSubtreeRootSig
    org.bouncycastle.pqc.crypto.gmss.GMSSDigestProvider getName() -> getName
    int getNumLeafs(int) -> getNumLeafs
org.bouncycastle.pqc.crypto.gmss.GMSSPublicKeyParameters -> org.bouncycastle.pqc.crypto.gmss.GMSSPublicKeyParameters:
    byte[] gmssPublicKey -> gmssPublicKey
    byte[] getPublicKey() -> getPublicKey
org.bouncycastle.pqc.crypto.gmss.GMSSRootCalc -> org.bouncycastle.pqc.crypto.gmss.GMSSRootCalc:
    int heightOfTree -> heightOfTree
    int mdLength -> mdLength
    org.bouncycastle.pqc.crypto.gmss.Treehash[] treehash -> treehash
    java.util.Vector[] retain -> retain
    byte[] root -> root
    byte[][] AuthPath -> AuthPath
    int K -> K
    java.util.Vector tailStack -> tailStack
    java.util.Vector heightOfNodes -> heightOfNodes
    org.bouncycastle.crypto.Digest messDigestTree -> messDigestTree
    org.bouncycastle.pqc.crypto.gmss.GMSSDigestProvider digestProvider -> digestProvider
    int[] index -> index
    boolean isInitialized -> isInitialized
    boolean isFinished -> isFinished
    int indexForNextSeed -> indexForNextSeed
    int heightOfNextSeed -> heightOfNextSeed
    void initialize(java.util.Vector) -> initialize
    void update(byte[],byte[]) -> update
    void update(byte[]) -> update
    void initializeTreehashSeed(byte[],int) -> initializeTreehashSeed
    boolean wasInitialized() -> wasInitialized
    boolean wasFinished() -> wasFinished
    byte[][] getAuthPath() -> getAuthPath
    org.bouncycastle.pqc.crypto.gmss.Treehash[] getTreehash() -> getTreehash
    java.util.Vector[] getRetain() -> getRetain
    byte[] getRoot() -> getRoot
    java.util.Vector getStack() -> getStack
    byte[][] getStatByte() -> getStatByte
    int[] getStatInt() -> getStatInt
    java.lang.String toString() -> toString
org.bouncycastle.pqc.crypto.gmss.GMSSRootSig -> org.bouncycastle.pqc.crypto.gmss.GMSSRootSig:
    org.bouncycastle.crypto.Digest messDigestOTS -> messDigestOTS
    int mdsize -> mdsize
    int keysize -> keysize
    byte[] privateKeyOTS -> privateKeyOTS
    byte[] hash -> hash
    byte[] sign -> sign
    int w -> w
    org.bouncycastle.pqc.crypto.gmss.util.GMSSRandom gmssRandom -> gmssRandom
    int messagesize -> messagesize
    int k -> k
    int r -> r
    int test -> test
    int counter -> counter
    int ii -> ii
    long test8 -> test8
    long big8 -> big8
    int steps -> steps
    int checksum -> checksum
    int height -> height
    byte[] seed -> seed
    void initSign(byte[],byte[]) -> initSign
    boolean updateSign() -> updateSign
    byte[] getSig() -> getSig
    void oneStep() -> oneStep
    int getLog(int) -> getLog
    byte[][] getStatByte() -> getStatByte
    int[] getStatInt() -> getStatInt
    byte[] getStatLong() -> getStatLong
    java.lang.String toString() -> toString
org.bouncycastle.pqc.crypto.gmss.GMSSSigner -> org.bouncycastle.pqc.crypto.gmss.GMSSSigner:
    org.bouncycastle.pqc.crypto.gmss.util.GMSSUtil gmssUtil -> gmssUtil
    byte[] pubKeyBytes -> pubKeyBytes
    org.bouncycastle.crypto.Digest messDigestTrees -> messDigestTrees
    int mdLength -> mdLength
    int numLayer -> numLayer
    org.bouncycastle.crypto.Digest messDigestOTS -> messDigestOTS
    org.bouncycastle.pqc.crypto.gmss.util.WinternitzOTSignature ots -> ots
    org.bouncycastle.pqc.crypto.gmss.GMSSDigestProvider digestProvider -> digestProvider
    int[] index -> index
    byte[][][] currentAuthPaths -> currentAuthPaths
    byte[][] subtreeRootSig -> subtreeRootSig
    org.bouncycastle.pqc.crypto.gmss.GMSSParameters gmssPS -> gmssPS
    org.bouncycastle.pqc.crypto.gmss.util.GMSSRandom gmssRandom -> gmssRandom
    org.bouncycastle.pqc.crypto.gmss.GMSSKeyParameters key -> key
    java.security.SecureRandom random -> random
    void init(boolean,org.bouncycastle.crypto.CipherParameters) -> init
    void initSign() -> initSign
    byte[] generateSignature(byte[]) -> generateSignature
    void initVerify() -> initVerify
    boolean verifySignature(byte[],byte[]) -> verifySignature
org.bouncycastle.pqc.crypto.gmss.GMSSUtils -> org.bouncycastle.pqc.crypto.gmss.GMSSUtils:
    org.bouncycastle.pqc.crypto.gmss.GMSSLeaf[] clone(org.bouncycastle.pqc.crypto.gmss.GMSSLeaf[]) -> clone
    org.bouncycastle.pqc.crypto.gmss.GMSSRootCalc[] clone(org.bouncycastle.pqc.crypto.gmss.GMSSRootCalc[]) -> clone
    org.bouncycastle.pqc.crypto.gmss.GMSSRootSig[] clone(org.bouncycastle.pqc.crypto.gmss.GMSSRootSig[]) -> clone
    byte[][] clone(byte[][]) -> clone
    byte[][][] clone(byte[][][]) -> clone
    org.bouncycastle.pqc.crypto.gmss.Treehash[] clone(org.bouncycastle.pqc.crypto.gmss.Treehash[]) -> clone
    org.bouncycastle.pqc.crypto.gmss.Treehash[][] clone(org.bouncycastle.pqc.crypto.gmss.Treehash[][]) -> clone
    java.util.Vector[] clone(java.util.Vector[]) -> clone
    java.util.Vector[][] clone(java.util.Vector[][]) -> clone
org.bouncycastle.pqc.crypto.gmss.Treehash -> org.bouncycastle.pqc.crypto.gmss.Treehash:
    int maxHeight -> maxHeight
    java.util.Vector tailStack -> tailStack
    java.util.Vector heightOfNodes -> heightOfNodes
    byte[] firstNode -> firstNode
    byte[] seedActive -> seedActive
    byte[] seedNext -> seedNext
    int tailLength -> tailLength
    int firstNodeHeight -> firstNodeHeight
    boolean isInitialized -> isInitialized
    boolean isFinished -> isFinished
    boolean seedInitialized -> seedInitialized
    org.bouncycastle.crypto.Digest messDigestTree -> messDigestTree
    void initializeSeed(byte[]) -> initializeSeed
    void initialize() -> initialize
    void update(org.bouncycastle.pqc.crypto.gmss.util.GMSSRandom,byte[]) -> update
    void destroy() -> destroy
    int getLowestNodeHeight() -> getLowestNodeHeight
    int getFirstNodeHeight() -> getFirstNodeHeight
    boolean wasInitialized() -> wasInitialized
    boolean wasFinished() -> wasFinished
    byte[] getFirstNode() -> getFirstNode
    byte[] getSeedActive() -> getSeedActive
    void setFirstNode(byte[]) -> setFirstNode
    void updateNextSeed(org.bouncycastle.pqc.crypto.gmss.util.GMSSRandom) -> updateNextSeed
    java.util.Vector getTailStack() -> getTailStack
    byte[][] getStatByte() -> getStatByte
    int[] getStatInt() -> getStatInt
    java.lang.String toString() -> toString
org.bouncycastle.pqc.crypto.gmss.util.GMSSRandom -> org.bouncycastle.pqc.crypto.gmss.util.GMSSRandom:
    org.bouncycastle.crypto.Digest messDigestTree -> messDigestTree
    byte[] nextSeed(byte[]) -> nextSeed
    void addByteArrays(byte[],byte[]) -> addByteArrays
    void addOne(byte[]) -> addOne
org.bouncycastle.pqc.crypto.gmss.util.GMSSUtil -> org.bouncycastle.pqc.crypto.gmss.util.GMSSUtil:
    byte[] intToBytesLittleEndian(int) -> intToBytesLittleEndian
    int bytesToIntLittleEndian(byte[]) -> bytesToIntLittleEndian
    int bytesToIntLittleEndian(byte[],int) -> bytesToIntLittleEndian
    byte[] concatenateArray(byte[][]) -> concatenateArray
    void printArray(java.lang.String,byte[][]) -> printArray
    void printArray(java.lang.String,byte[]) -> printArray
    boolean testPowerOfTwo(int) -> testPowerOfTwo
    int getLog(int) -> getLog
org.bouncycastle.pqc.crypto.gmss.util.WinternitzOTSVerify -> org.bouncycastle.pqc.crypto.gmss.util.WinternitzOTSVerify:
    org.bouncycastle.crypto.Digest messDigestOTS -> messDigestOTS
    int w -> w
    int getSignatureLength() -> getSignatureLength
    byte[] Verify(byte[],byte[]) -> Verify
    int getLog(int) -> getLog
org.bouncycastle.pqc.crypto.gmss.util.WinternitzOTSignature -> org.bouncycastle.pqc.crypto.gmss.util.WinternitzOTSignature:
    org.bouncycastle.crypto.Digest messDigestOTS -> messDigestOTS
    int mdsize -> mdsize
    int keysize -> keysize
    byte[][] privateKeyOTS -> privateKeyOTS
    int w -> w
    org.bouncycastle.pqc.crypto.gmss.util.GMSSRandom gmssRandom -> gmssRandom
    int messagesize -> messagesize
    int checksumsize -> checksumsize
    byte[][] getPrivateKey() -> getPrivateKey
    byte[] getPublicKey() -> getPublicKey
    byte[] getSignature(byte[]) -> getSignature
    int getLog(int) -> getLog
org.bouncycastle.pqc.crypto.mceliece.Conversions -> org.bouncycastle.pqc.crypto.mceliece.Conversions:
    java.math.BigInteger ZERO -> ZERO
    java.math.BigInteger ONE -> ONE
    org.bouncycastle.pqc.math.linearalgebra.GF2Vector encode(int,int,byte[]) -> encode
    byte[] decode(int,int,org.bouncycastle.pqc.math.linearalgebra.GF2Vector) -> decode
    byte[] signConversion(int,int,byte[]) -> signConversion
org.bouncycastle.pqc.crypto.mceliece.McElieceCCA2KeyGenerationParameters -> org.bouncycastle.pqc.crypto.mceliece.McElieceCCA2KeyGenerationParameters:
    org.bouncycastle.pqc.crypto.mceliece.McElieceCCA2Parameters params -> params
    org.bouncycastle.pqc.crypto.mceliece.McElieceCCA2Parameters getParameters() -> getParameters
org.bouncycastle.pqc.crypto.mceliece.McElieceCCA2KeyPairGenerator -> org.bouncycastle.pqc.crypto.mceliece.McElieceCCA2KeyPairGenerator:
    java.lang.String OID -> OID
    org.bouncycastle.pqc.crypto.mceliece.McElieceCCA2KeyGenerationParameters mcElieceCCA2Params -> mcElieceCCA2Params
    int m -> m
    int n -> n
    int t -> t
    int fieldPoly -> fieldPoly
    java.security.SecureRandom random -> random
    boolean initialized -> initialized
    void initializeDefault() -> initializeDefault
    void init(org.bouncycastle.crypto.KeyGenerationParameters) -> init
    org.bouncycastle.crypto.AsymmetricCipherKeyPair generateKeyPair() -> generateKeyPair
org.bouncycastle.pqc.crypto.mceliece.McElieceCCA2KeyParameters -> org.bouncycastle.pqc.crypto.mceliece.McElieceCCA2KeyParameters:
    org.bouncycastle.pqc.crypto.mceliece.McElieceCCA2Parameters params -> params
    org.bouncycastle.pqc.crypto.mceliece.McElieceCCA2Parameters getParameters() -> getParameters
org.bouncycastle.pqc.crypto.mceliece.McElieceCCA2Parameters -> org.bouncycastle.pqc.crypto.mceliece.McElieceCCA2Parameters:
    org.bouncycastle.crypto.Digest digest -> digest
    org.bouncycastle.crypto.Digest getDigest() -> getDigest
org.bouncycastle.pqc.crypto.mceliece.McElieceCCA2Primitives -> org.bouncycastle.pqc.crypto.mceliece.McElieceCCA2Primitives:
    org.bouncycastle.pqc.math.linearalgebra.GF2Vector encryptionPrimitive(org.bouncycastle.pqc.crypto.mceliece.McElieceCCA2PublicKeyParameters,org.bouncycastle.pqc.math.linearalgebra.GF2Vector,org.bouncycastle.pqc.math.linearalgebra.GF2Vector) -> encryptionPrimitive
    org.bouncycastle.pqc.math.linearalgebra.GF2Vector[] decryptionPrimitive(org.bouncycastle.pqc.crypto.mceliece.McElieceCCA2PrivateKeyParameters,org.bouncycastle.pqc.math.linearalgebra.GF2Vector) -> decryptionPrimitive
org.bouncycastle.pqc.crypto.mceliece.McElieceCCA2PrivateKeyParameters -> org.bouncycastle.pqc.crypto.mceliece.McElieceCCA2PrivateKeyParameters:
    java.lang.String oid -> oid
    int n -> n
    int k -> k
    org.bouncycastle.pqc.math.linearalgebra.GF2mField field -> field
    org.bouncycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM goppaPoly -> goppaPoly
    org.bouncycastle.pqc.math.linearalgebra.Permutation p -> p
    org.bouncycastle.pqc.math.linearalgebra.GF2Matrix h -> h
    org.bouncycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM[] qInv -> qInv
    int getN() -> getN
    int getK() -> getK
    int getT() -> getT
    org.bouncycastle.pqc.math.linearalgebra.GF2mField getField() -> getField
    org.bouncycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM getGoppaPoly() -> getGoppaPoly
    org.bouncycastle.pqc.math.linearalgebra.Permutation getP() -> getP
    org.bouncycastle.pqc.math.linearalgebra.GF2Matrix getH() -> getH
    org.bouncycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM[] getQInv() -> getQInv
    java.lang.String getOIDString() -> getOIDString
org.bouncycastle.pqc.crypto.mceliece.McElieceCCA2PublicKeyParameters -> org.bouncycastle.pqc.crypto.mceliece.McElieceCCA2PublicKeyParameters:
    java.lang.String oid -> oid
    int n -> n
    int t -> t
    org.bouncycastle.pqc.math.linearalgebra.GF2Matrix matrixG -> matrixG
    int getN() -> getN
    int getT() -> getT
    org.bouncycastle.pqc.math.linearalgebra.GF2Matrix getMatrixG() -> getMatrixG
    int getK() -> getK
    java.lang.String getOIDString() -> getOIDString
org.bouncycastle.pqc.crypto.mceliece.McElieceFujisakiCipher -> org.bouncycastle.pqc.crypto.mceliece.McElieceFujisakiCipher:
    java.lang.String OID -> OID
    java.lang.String DEFAULT_PRNG_NAME -> DEFAULT_PRNG_NAME
    org.bouncycastle.crypto.Digest messDigest -> messDigest
    java.security.SecureRandom sr -> sr
    int n -> n
    int k -> k
    int t -> t
    org.bouncycastle.pqc.crypto.mceliece.McElieceCCA2KeyParameters key -> key
    void init(boolean,org.bouncycastle.crypto.CipherParameters) -> init
    int getKeySize(org.bouncycastle.pqc.crypto.mceliece.McElieceCCA2KeyParameters) -> getKeySize
    void initCipherEncrypt(org.bouncycastle.pqc.crypto.mceliece.McElieceCCA2PublicKeyParameters) -> initCipherEncrypt
    void initCipherDecrypt(org.bouncycastle.pqc.crypto.mceliece.McElieceCCA2PrivateKeyParameters) -> initCipherDecrypt
    byte[] messageEncrypt(byte[]) -> messageEncrypt
    byte[] messageDecrypt(byte[]) -> messageDecrypt
org.bouncycastle.pqc.crypto.mceliece.McElieceFujisakiDigestCipher -> org.bouncycastle.pqc.crypto.mceliece.McElieceFujisakiDigestCipher:
    org.bouncycastle.crypto.Digest messDigest -> messDigest
    org.bouncycastle.pqc.crypto.MessageEncryptor mcElieceCCA2Cipher -> mcElieceCCA2Cipher
    boolean forEncrypting -> forEncrypting
    void init(boolean,org.bouncycastle.crypto.CipherParameters) -> init
    byte[] messageEncrypt() -> messageEncrypt
    byte[] messageDecrypt(byte[]) -> messageDecrypt
    void update(byte) -> update
    void update(byte[],int,int) -> update
    void reset() -> reset
org.bouncycastle.pqc.crypto.mceliece.McElieceKeyGenerationParameters -> org.bouncycastle.pqc.crypto.mceliece.McElieceKeyGenerationParameters:
    org.bouncycastle.pqc.crypto.mceliece.McElieceParameters params -> params
    org.bouncycastle.pqc.crypto.mceliece.McElieceParameters getParameters() -> getParameters
org.bouncycastle.pqc.crypto.mceliece.McElieceKeyPairGenerator -> org.bouncycastle.pqc.crypto.mceliece.McElieceKeyPairGenerator:
    java.lang.String OID -> OID
    org.bouncycastle.pqc.crypto.mceliece.McElieceKeyGenerationParameters mcElieceParams -> mcElieceParams
    int m -> m
    int n -> n
    int t -> t
    int fieldPoly -> fieldPoly
    java.security.SecureRandom random -> random
    boolean initialized -> initialized
    void initializeDefault() -> initializeDefault
    void initialize(org.bouncycastle.crypto.KeyGenerationParameters) -> initialize
    org.bouncycastle.crypto.AsymmetricCipherKeyPair genKeyPair() -> genKeyPair
    void init(org.bouncycastle.crypto.KeyGenerationParameters) -> init
    org.bouncycastle.crypto.AsymmetricCipherKeyPair generateKeyPair() -> generateKeyPair
org.bouncycastle.pqc.crypto.mceliece.McElieceKeyParameters -> org.bouncycastle.pqc.crypto.mceliece.McElieceKeyParameters:
    org.bouncycastle.pqc.crypto.mceliece.McElieceParameters params -> params
    org.bouncycastle.pqc.crypto.mceliece.McElieceParameters getParameters() -> getParameters
org.bouncycastle.pqc.crypto.mceliece.McElieceKobaraImaiCipher -> org.bouncycastle.pqc.crypto.mceliece.McElieceKobaraImaiCipher:
    java.lang.String OID -> OID
    java.lang.String DEFAULT_PRNG_NAME -> DEFAULT_PRNG_NAME
    byte[] PUBLIC_CONSTANT -> PUBLIC_CONSTANT
    org.bouncycastle.crypto.Digest messDigest -> messDigest
    java.security.SecureRandom sr -> sr
    org.bouncycastle.pqc.crypto.mceliece.McElieceCCA2KeyParameters key -> key
    int n -> n
    int k -> k
    int t -> t
    void init(boolean,org.bouncycastle.crypto.CipherParameters) -> init
    int getKeySize(org.bouncycastle.pqc.crypto.mceliece.McElieceCCA2KeyParameters) -> getKeySize
    void initCipherEncrypt(org.bouncycastle.pqc.crypto.mceliece.McElieceCCA2PublicKeyParameters) -> initCipherEncrypt
    void initCipherDecrypt(org.bouncycastle.pqc.crypto.mceliece.McElieceCCA2PrivateKeyParameters) -> initCipherDecrypt
    byte[] messageEncrypt(byte[]) -> messageEncrypt
    byte[] messageDecrypt(byte[]) -> messageDecrypt
org.bouncycastle.pqc.crypto.mceliece.McElieceKobaraImaiDigestCipher -> org.bouncycastle.pqc.crypto.mceliece.McElieceKobaraImaiDigestCipher:
    org.bouncycastle.crypto.Digest messDigest -> messDigest
    org.bouncycastle.pqc.crypto.MessageEncryptor mcElieceCCA2Cipher -> mcElieceCCA2Cipher
    boolean forEncrypting -> forEncrypting
    void init(boolean,org.bouncycastle.crypto.CipherParameters) -> init
    byte[] messageEncrypt() -> messageEncrypt
    byte[] messageDecrypt(byte[]) -> messageDecrypt
    void update(byte) -> update
    void update(byte[],int,int) -> update
    void reset() -> reset
org.bouncycastle.pqc.crypto.mceliece.McEliecePKCSCipher -> org.bouncycastle.pqc.crypto.mceliece.McEliecePKCSCipher:
    java.lang.String OID -> OID
    java.security.SecureRandom sr -> sr
    int n -> n
    int k -> k
    int t -> t
    int maxPlainTextSize -> maxPlainTextSize
    int cipherTextSize -> cipherTextSize
    org.bouncycastle.pqc.crypto.mceliece.McElieceKeyParameters key -> key
    void init(boolean,org.bouncycastle.crypto.CipherParameters) -> init
    int getKeySize(org.bouncycastle.pqc.crypto.mceliece.McElieceKeyParameters) -> getKeySize
    void initCipherEncrypt(org.bouncycastle.pqc.crypto.mceliece.McEliecePublicKeyParameters) -> initCipherEncrypt
    void initCipherDecrypt(org.bouncycastle.pqc.crypto.mceliece.McEliecePrivateKeyParameters) -> initCipherDecrypt
    byte[] messageEncrypt(byte[]) -> messageEncrypt
    org.bouncycastle.pqc.math.linearalgebra.GF2Vector computeMessageRepresentative(byte[]) -> computeMessageRepresentative
    byte[] messageDecrypt(byte[]) -> messageDecrypt
    byte[] computeMessage(org.bouncycastle.pqc.math.linearalgebra.GF2Vector) -> computeMessage
org.bouncycastle.pqc.crypto.mceliece.McEliecePKCSDigestCipher -> org.bouncycastle.pqc.crypto.mceliece.McEliecePKCSDigestCipher:
    org.bouncycastle.crypto.Digest messDigest -> messDigest
    org.bouncycastle.pqc.crypto.MessageEncryptor mcElieceCipher -> mcElieceCipher
    boolean forEncrypting -> forEncrypting
    void init(boolean,org.bouncycastle.crypto.CipherParameters) -> init
    byte[] messageEncrypt() -> messageEncrypt
    byte[] messageDecrypt(byte[]) -> messageDecrypt
    void update(byte) -> update
    void update(byte[],int,int) -> update
    void reset() -> reset
org.bouncycastle.pqc.crypto.mceliece.McElieceParameters -> org.bouncycastle.pqc.crypto.mceliece.McElieceParameters:
    int DEFAULT_M -> DEFAULT_M
    int DEFAULT_T -> DEFAULT_T
    int m -> m
    int t -> t
    int n -> n
    int fieldPoly -> fieldPoly
    int getM() -> getM
    int getN() -> getN
    int getT() -> getT
    int getFieldPoly() -> getFieldPoly
org.bouncycastle.pqc.crypto.mceliece.McEliecePointchevalCipher -> org.bouncycastle.pqc.crypto.mceliece.McEliecePointchevalCipher:
    java.lang.String OID -> OID
    org.bouncycastle.crypto.Digest messDigest -> messDigest
    java.security.SecureRandom sr -> sr
    int n -> n
    int k -> k
    int t -> t
    org.bouncycastle.pqc.crypto.mceliece.McElieceCCA2KeyParameters key -> key
    void init(boolean,org.bouncycastle.crypto.CipherParameters) -> init
    int getKeySize(org.bouncycastle.pqc.crypto.mceliece.McElieceCCA2KeyParameters) -> getKeySize
    int decryptOutputSize(int) -> decryptOutputSize
    int encryptOutputSize(int) -> encryptOutputSize
    void initCipherEncrypt(org.bouncycastle.pqc.crypto.mceliece.McElieceCCA2PublicKeyParameters) -> initCipherEncrypt
    void initCipherDecrypt(org.bouncycastle.pqc.crypto.mceliece.McElieceCCA2PrivateKeyParameters) -> initCipherDecrypt
    byte[] messageEncrypt(byte[]) -> messageEncrypt
    byte[] messageDecrypt(byte[]) -> messageDecrypt
org.bouncycastle.pqc.crypto.mceliece.McEliecePointchevalDigestCipher -> org.bouncycastle.pqc.crypto.mceliece.McEliecePointchevalDigestCipher:
    org.bouncycastle.crypto.Digest messDigest -> messDigest
    org.bouncycastle.pqc.crypto.MessageEncryptor mcElieceCCA2Cipher -> mcElieceCCA2Cipher
    boolean forEncrypting -> forEncrypting
    void init(boolean,org.bouncycastle.crypto.CipherParameters) -> init
    byte[] messageEncrypt() -> messageEncrypt
    byte[] messageDecrypt(byte[]) -> messageDecrypt
    void update(byte) -> update
    void update(byte[],int,int) -> update
    void reset() -> reset
org.bouncycastle.pqc.crypto.mceliece.McEliecePrivateKeyParameters -> org.bouncycastle.pqc.crypto.mceliece.McEliecePrivateKeyParameters:
    java.lang.String oid -> oid
    int n -> n
    int k -> k
    org.bouncycastle.pqc.math.linearalgebra.GF2mField field -> field
    org.bouncycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM goppaPoly -> goppaPoly
    org.bouncycastle.pqc.math.linearalgebra.GF2Matrix sInv -> sInv
    org.bouncycastle.pqc.math.linearalgebra.Permutation p1 -> p1
    org.bouncycastle.pqc.math.linearalgebra.Permutation p2 -> p2
    org.bouncycastle.pqc.math.linearalgebra.GF2Matrix h -> h
    org.bouncycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM[] qInv -> qInv
    int getN() -> getN
    int getK() -> getK
    org.bouncycastle.pqc.math.linearalgebra.GF2mField getField() -> getField
    org.bouncycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM getGoppaPoly() -> getGoppaPoly
    org.bouncycastle.pqc.math.linearalgebra.GF2Matrix getSInv() -> getSInv
    org.bouncycastle.pqc.math.linearalgebra.Permutation getP1() -> getP1
    org.bouncycastle.pqc.math.linearalgebra.Permutation getP2() -> getP2
    org.bouncycastle.pqc.math.linearalgebra.GF2Matrix getH() -> getH
    org.bouncycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM[] getQInv() -> getQInv
    java.lang.String getOIDString() -> getOIDString
org.bouncycastle.pqc.crypto.mceliece.McEliecePublicKeyParameters -> org.bouncycastle.pqc.crypto.mceliece.McEliecePublicKeyParameters:
    java.lang.String oid -> oid
    int n -> n
    int t -> t
    org.bouncycastle.pqc.math.linearalgebra.GF2Matrix g -> g
    int getN() -> getN
    int getT() -> getT
    org.bouncycastle.pqc.math.linearalgebra.GF2Matrix getG() -> getG
    java.lang.String getOIDString() -> getOIDString
    int getK() -> getK
org.bouncycastle.pqc.crypto.ntru.IndexGenerator -> org.bouncycastle.pqc.crypto.ntru.IndexGenerator:
    byte[] seed -> seed
    int N -> N
    int c -> c
    int minCallsR -> minCallsR
    int totLen -> totLen
    int remLen -> remLen
    org.bouncycastle.pqc.crypto.ntru.IndexGenerator$BitString buf -> buf
    int counter -> counter
    boolean initialized -> initialized
    org.bouncycastle.crypto.Digest hashAlg -> hashAlg
    int hLen -> hLen
    int nextIndex() -> nextIndex
    void appendHash(org.bouncycastle.pqc.crypto.ntru.IndexGenerator$BitString,byte[]) -> appendHash
    void putInt(org.bouncycastle.crypto.Digest,int) -> putInt
    byte[] copyOf(byte[],int) -> copyOf
    byte[] access$000(byte[],int) -> access$000
org.bouncycastle.pqc.crypto.ntru.IndexGenerator$BitString -> org.bouncycastle.pqc.crypto.ntru.IndexGenerator$BitString:
    byte[] bytes -> bytes
    int numBytes -> numBytes
    int lastByteBits -> lastByteBits
    void appendBits(byte[]) -> appendBits
    void appendBits(byte) -> appendBits
    org.bouncycastle.pqc.crypto.ntru.IndexGenerator$BitString getTrailing(int) -> getTrailing
    int getLeadingAsInt(int) -> getLeadingAsInt
    byte[] getBytes() -> getBytes
org.bouncycastle.pqc.crypto.ntru.NTRUEncryptionKeyGenerationParameters -> org.bouncycastle.pqc.crypto.ntru.NTRUEncryptionKeyGenerationParameters:
    org.bouncycastle.pqc.crypto.ntru.NTRUEncryptionKeyGenerationParameters EES1087EP2 -> EES1087EP2
    org.bouncycastle.pqc.crypto.ntru.NTRUEncryptionKeyGenerationParameters EES1171EP1 -> EES1171EP1
    org.bouncycastle.pqc.crypto.ntru.NTRUEncryptionKeyGenerationParameters EES1499EP1 -> EES1499EP1
    org.bouncycastle.pqc.crypto.ntru.NTRUEncryptionKeyGenerationParameters APR2011_439 -> APR2011_439
    org.bouncycastle.pqc.crypto.ntru.NTRUEncryptionKeyGenerationParameters APR2011_439_FAST -> APR2011_439_FAST
    org.bouncycastle.pqc.crypto.ntru.NTRUEncryptionKeyGenerationParameters APR2011_743 -> APR2011_743
    org.bouncycastle.pqc.crypto.ntru.NTRUEncryptionKeyGenerationParameters APR2011_743_FAST -> APR2011_743_FAST
    int N -> N
    int q -> q
    int df -> df
    int df1 -> df1
    int df2 -> df2
    int df3 -> df3
    int dr -> dr
    int dr1 -> dr1
    int dr2 -> dr2
    int dr3 -> dr3
    int dg -> dg
    int llen -> llen
    int maxMsgLenBytes -> maxMsgLenBytes
    int db -> db
    int bufferLenBits -> bufferLenBits
    int bufferLenTrits -> bufferLenTrits
    int dm0 -> dm0
    int pkLen -> pkLen
    int c -> c
    int minCallsR -> minCallsR
    int minCallsMask -> minCallsMask
    boolean hashSeed -> hashSeed
    byte[] oid -> oid
    boolean sparse -> sparse
    boolean fastFp -> fastFp
    int polyType -> polyType
    org.bouncycastle.crypto.Digest hashAlg -> hashAlg
    void init() -> init
    org.bouncycastle.pqc.crypto.ntru.NTRUEncryptionParameters getEncryptionParameters() -> getEncryptionParameters
    org.bouncycastle.pqc.crypto.ntru.NTRUEncryptionKeyGenerationParameters clone() -> clone
    int getMaxMessageLength() -> getMaxMessageLength
    void writeTo(java.io.OutputStream) -> writeTo
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    java.lang.String toString() -> toString
    java.lang.Object clone() -> clone
org.bouncycastle.pqc.crypto.ntru.NTRUEncryptionKeyPairGenerator -> org.bouncycastle.pqc.crypto.ntru.NTRUEncryptionKeyPairGenerator:
    org.bouncycastle.pqc.crypto.ntru.NTRUEncryptionKeyGenerationParameters params -> params
    void init(org.bouncycastle.crypto.KeyGenerationParameters) -> init
    org.bouncycastle.crypto.AsymmetricCipherKeyPair generateKeyPair() -> generateKeyPair
org.bouncycastle.pqc.crypto.ntru.NTRUEncryptionKeyParameters -> org.bouncycastle.pqc.crypto.ntru.NTRUEncryptionKeyParameters:
    org.bouncycastle.pqc.crypto.ntru.NTRUEncryptionParameters params -> params
    org.bouncycastle.pqc.crypto.ntru.NTRUEncryptionParameters getParameters() -> getParameters
org.bouncycastle.pqc.crypto.ntru.NTRUEncryptionParameters -> org.bouncycastle.pqc.crypto.ntru.NTRUEncryptionParameters:
    int N -> N
    int q -> q
    int df -> df
    int df1 -> df1
    int df2 -> df2
    int df3 -> df3
    int dr -> dr
    int dr1 -> dr1
    int dr2 -> dr2
    int dr3 -> dr3
    int dg -> dg
    int llen -> llen
    int maxMsgLenBytes -> maxMsgLenBytes
    int db -> db
    int bufferLenBits -> bufferLenBits
    int bufferLenTrits -> bufferLenTrits
    int dm0 -> dm0
    int pkLen -> pkLen
    int c -> c
    int minCallsR -> minCallsR
    int minCallsMask -> minCallsMask
    boolean hashSeed -> hashSeed
    byte[] oid -> oid
    boolean sparse -> sparse
    boolean fastFp -> fastFp
    int polyType -> polyType
    org.bouncycastle.crypto.Digest hashAlg -> hashAlg
    void init() -> init
    org.bouncycastle.pqc.crypto.ntru.NTRUEncryptionParameters clone() -> clone
    int getMaxMessageLength() -> getMaxMessageLength
    void writeTo(java.io.OutputStream) -> writeTo
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    java.lang.String toString() -> toString
    java.lang.Object clone() -> clone
org.bouncycastle.pqc.crypto.ntru.NTRUEncryptionPrivateKeyParameters -> org.bouncycastle.pqc.crypto.ntru.NTRUEncryptionPrivateKeyParameters:
    org.bouncycastle.pqc.math.ntru.polynomial.Polynomial t -> t
    org.bouncycastle.pqc.math.ntru.polynomial.IntegerPolynomial fp -> fp
    org.bouncycastle.pqc.math.ntru.polynomial.IntegerPolynomial h -> h
    void init() -> init
    byte[] getEncoded() -> getEncoded
    void writeTo(java.io.OutputStream) -> writeTo
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
org.bouncycastle.pqc.crypto.ntru.NTRUEncryptionPublicKeyParameters -> org.bouncycastle.pqc.crypto.ntru.NTRUEncryptionPublicKeyParameters:
    org.bouncycastle.pqc.math.ntru.polynomial.IntegerPolynomial h -> h
    byte[] getEncoded() -> getEncoded
    void writeTo(java.io.OutputStream) -> writeTo
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
org.bouncycastle.pqc.crypto.ntru.NTRUEngine -> org.bouncycastle.pqc.crypto.ntru.NTRUEngine:
    boolean forEncryption -> forEncryption
    org.bouncycastle.pqc.crypto.ntru.NTRUEncryptionParameters params -> params
    org.bouncycastle.pqc.crypto.ntru.NTRUEncryptionPublicKeyParameters pubKey -> pubKey
    org.bouncycastle.pqc.crypto.ntru.NTRUEncryptionPrivateKeyParameters privKey -> privKey
    java.security.SecureRandom random -> random
    void init(boolean,org.bouncycastle.crypto.CipherParameters) -> init
    int getInputBlockSize() -> getInputBlockSize
    int getOutputBlockSize() -> getOutputBlockSize
    byte[] processBlock(byte[],int,int) -> processBlock
    byte[] encrypt(byte[],org.bouncycastle.pqc.crypto.ntru.NTRUEncryptionPublicKeyParameters) -> encrypt
    byte[] buildSData(byte[],byte[],int,byte[],byte[]) -> buildSData
    org.bouncycastle.pqc.math.ntru.polynomial.IntegerPolynomial encrypt(org.bouncycastle.pqc.math.ntru.polynomial.IntegerPolynomial,org.bouncycastle.pqc.math.ntru.polynomial.TernaryPolynomial,org.bouncycastle.pqc.math.ntru.polynomial.IntegerPolynomial) -> encrypt
    org.bouncycastle.pqc.math.ntru.polynomial.Polynomial generateBlindingPoly(byte[],byte[]) -> generateBlindingPoly
    int[] generateBlindingCoeffs(org.bouncycastle.pqc.crypto.ntru.IndexGenerator,int) -> generateBlindingCoeffs
    org.bouncycastle.pqc.math.ntru.polynomial.IntegerPolynomial MGF(byte[],int,int,boolean) -> MGF
    void putInt(org.bouncycastle.crypto.Digest,int) -> putInt
    byte[] calcHash(org.bouncycastle.crypto.Digest) -> calcHash
    byte[] calcHash(org.bouncycastle.crypto.Digest,byte[]) -> calcHash
    byte[] decrypt(byte[],org.bouncycastle.pqc.crypto.ntru.NTRUEncryptionPrivateKeyParameters) -> decrypt
    org.bouncycastle.pqc.math.ntru.polynomial.IntegerPolynomial decrypt(org.bouncycastle.pqc.math.ntru.polynomial.IntegerPolynomial,org.bouncycastle.pqc.math.ntru.polynomial.Polynomial,org.bouncycastle.pqc.math.ntru.polynomial.IntegerPolynomial) -> decrypt
    byte[] copyOf(byte[],int) -> copyOf
    int log2(int) -> log2
org.bouncycastle.pqc.crypto.ntru.NTRUParameters -> org.bouncycastle.pqc.crypto.ntru.NTRUParameters:
    int TERNARY_POLYNOMIAL_TYPE_SIMPLE -> TERNARY_POLYNOMIAL_TYPE_SIMPLE
    int TERNARY_POLYNOMIAL_TYPE_PRODUCT -> TERNARY_POLYNOMIAL_TYPE_PRODUCT
org.bouncycastle.pqc.crypto.ntru.NTRUSigner -> org.bouncycastle.pqc.crypto.ntru.NTRUSigner:
    org.bouncycastle.pqc.crypto.ntru.NTRUSigningParameters params -> params
    org.bouncycastle.crypto.Digest hashAlg -> hashAlg
    org.bouncycastle.pqc.crypto.ntru.NTRUSigningPrivateKeyParameters signingKeyPair -> signingKeyPair
    org.bouncycastle.pqc.crypto.ntru.NTRUSigningPublicKeyParameters verificationKey -> verificationKey
    void init(boolean,org.bouncycastle.crypto.CipherParameters) -> init
    void update(byte) -> update
    void update(byte[],int,int) -> update
    byte[] generateSignature() -> generateSignature
    byte[] signHash(byte[],org.bouncycastle.pqc.crypto.ntru.NTRUSigningPrivateKeyParameters) -> signHash
    org.bouncycastle.pqc.math.ntru.polynomial.IntegerPolynomial sign(org.bouncycastle.pqc.math.ntru.polynomial.IntegerPolynomial,org.bouncycastle.pqc.crypto.ntru.NTRUSigningPrivateKeyParameters) -> sign
    boolean verifySignature(byte[]) -> verifySignature
    boolean verifyHash(byte[],byte[],org.bouncycastle.pqc.crypto.ntru.NTRUSigningPublicKeyParameters) -> verifyHash
    boolean verify(org.bouncycastle.pqc.math.ntru.polynomial.IntegerPolynomial,org.bouncycastle.pqc.math.ntru.polynomial.IntegerPolynomial,org.bouncycastle.pqc.math.ntru.polynomial.IntegerPolynomial) -> verify
    org.bouncycastle.pqc.math.ntru.polynomial.IntegerPolynomial createMsgRep(byte[],int) -> createMsgRep
org.bouncycastle.pqc.crypto.ntru.NTRUSignerPrng -> org.bouncycastle.pqc.crypto.ntru.NTRUSignerPrng:
    int counter -> counter
    byte[] seed -> seed
    org.bouncycastle.crypto.Digest hashAlg -> hashAlg
    byte[] nextBytes(int) -> nextBytes
org.bouncycastle.pqc.crypto.ntru.NTRUSigningKeyGenerationParameters -> org.bouncycastle.pqc.crypto.ntru.NTRUSigningKeyGenerationParameters:
    int BASIS_TYPE_STANDARD -> BASIS_TYPE_STANDARD
    int BASIS_TYPE_TRANSPOSE -> BASIS_TYPE_TRANSPOSE
    int KEY_GEN_ALG_RESULTANT -> KEY_GEN_ALG_RESULTANT
    int KEY_GEN_ALG_FLOAT -> KEY_GEN_ALG_FLOAT
    org.bouncycastle.pqc.crypto.ntru.NTRUSigningKeyGenerationParameters APR2011_439 -> APR2011_439
    org.bouncycastle.pqc.crypto.ntru.NTRUSigningKeyGenerationParameters APR2011_439_PROD -> APR2011_439_PROD
    org.bouncycastle.pqc.crypto.ntru.NTRUSigningKeyGenerationParameters APR2011_743 -> APR2011_743
    org.bouncycastle.pqc.crypto.ntru.NTRUSigningKeyGenerationParameters APR2011_743_PROD -> APR2011_743_PROD
    org.bouncycastle.pqc.crypto.ntru.NTRUSigningKeyGenerationParameters TEST157 -> TEST157
    org.bouncycastle.pqc.crypto.ntru.NTRUSigningKeyGenerationParameters TEST157_PROD -> TEST157_PROD
    int N -> N
    int q -> q
    int d -> d
    int d1 -> d1
    int d2 -> d2
    int d3 -> d3
    int B -> B
    double beta -> beta
    double betaSq -> betaSq
    double normBound -> normBound
    double normBoundSq -> normBoundSq
    int signFailTolerance -> signFailTolerance
    double keyNormBound -> keyNormBound
    double keyNormBoundSq -> keyNormBoundSq
    boolean primeCheck -> primeCheck
    int basisType -> basisType
    int bitsF -> bitsF
    boolean sparse -> sparse
    int keyGenAlg -> keyGenAlg
    org.bouncycastle.crypto.Digest hashAlg -> hashAlg
    int polyType -> polyType
    void init() -> init
    void writeTo(java.io.OutputStream) -> writeTo
    org.bouncycastle.pqc.crypto.ntru.NTRUSigningParameters getSigningParameters() -> getSigningParameters
    org.bouncycastle.pqc.crypto.ntru.NTRUSigningKeyGenerationParameters clone() -> clone
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    java.lang.String toString() -> toString
    java.lang.Object clone() -> clone
org.bouncycastle.pqc.crypto.ntru.NTRUSigningKeyPairGenerator -> org.bouncycastle.pqc.crypto.ntru.NTRUSigningKeyPairGenerator:
    org.bouncycastle.pqc.crypto.ntru.NTRUSigningKeyGenerationParameters params -> params
    void init(org.bouncycastle.crypto.KeyGenerationParameters) -> init
    org.bouncycastle.crypto.AsymmetricCipherKeyPair generateKeyPair() -> generateKeyPair
    org.bouncycastle.crypto.AsymmetricCipherKeyPair generateKeyPairSingleThread() -> generateKeyPairSingleThread
    void minimizeFG(org.bouncycastle.pqc.math.ntru.polynomial.IntegerPolynomial,org.bouncycastle.pqc.math.ntru.polynomial.IntegerPolynomial,org.bouncycastle.pqc.math.ntru.polynomial.IntegerPolynomial,org.bouncycastle.pqc.math.ntru.polynomial.IntegerPolynomial,int) -> minimizeFG
    org.bouncycastle.pqc.crypto.ntru.NTRUSigningKeyPairGenerator$FGBasis generateBasis() -> generateBasis
    org.bouncycastle.pqc.crypto.ntru.NTRUSigningPrivateKeyParameters$Basis generateBoundedBasis() -> generateBoundedBasis
org.bouncycastle.pqc.crypto.ntru.NTRUSigningKeyPairGenerator$1 -> org.bouncycastle.pqc.crypto.ntru.NTRUSigningKeyPairGenerator$1:
org.bouncycastle.pqc.crypto.ntru.NTRUSigningKeyPairGenerator$BasisGenerationTask -> org.bouncycastle.pqc.crypto.ntru.NTRUSigningKeyPairGenerator$BasisGenerationTask:
    org.bouncycastle.pqc.crypto.ntru.NTRUSigningKeyPairGenerator this$0 -> this$0
    org.bouncycastle.pqc.crypto.ntru.NTRUSigningPrivateKeyParameters$Basis call() -> call
    java.lang.Object call() -> call
org.bouncycastle.pqc.crypto.ntru.NTRUSigningKeyPairGenerator$FGBasis -> org.bouncycastle.pqc.crypto.ntru.NTRUSigningKeyPairGenerator$FGBasis:
    org.bouncycastle.pqc.math.ntru.polynomial.IntegerPolynomial F -> F
    org.bouncycastle.pqc.math.ntru.polynomial.IntegerPolynomial G -> G
    org.bouncycastle.pqc.crypto.ntru.NTRUSigningKeyPairGenerator this$0 -> this$0
    boolean isNormOk() -> isNormOk
org.bouncycastle.pqc.crypto.ntru.NTRUSigningParameters -> org.bouncycastle.pqc.crypto.ntru.NTRUSigningParameters:
    int N -> N
    int q -> q
    int d -> d
    int d1 -> d1
    int d2 -> d2
    int d3 -> d3
    int B -> B
    double beta -> beta
    double betaSq -> betaSq
    double normBound -> normBound
    double normBoundSq -> normBoundSq
    int signFailTolerance -> signFailTolerance
    int bitsF -> bitsF
    org.bouncycastle.crypto.Digest hashAlg -> hashAlg
    void init() -> init
    void writeTo(java.io.OutputStream) -> writeTo
    org.bouncycastle.pqc.crypto.ntru.NTRUSigningParameters clone() -> clone
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    java.lang.String toString() -> toString
    java.lang.Object clone() -> clone
org.bouncycastle.pqc.crypto.ntru.NTRUSigningPrivateKeyParameters -> org.bouncycastle.pqc.crypto.ntru.NTRUSigningPrivateKeyParameters:
    java.util.List bases -> bases
    org.bouncycastle.pqc.crypto.ntru.NTRUSigningPublicKeyParameters publicKey -> publicKey
    void add(org.bouncycastle.pqc.crypto.ntru.NTRUSigningPrivateKeyParameters$Basis) -> add
    org.bouncycastle.pqc.crypto.ntru.NTRUSigningPrivateKeyParameters$Basis getBasis(int) -> getBasis
    org.bouncycastle.pqc.crypto.ntru.NTRUSigningPublicKeyParameters getPublicKey() -> getPublicKey
    byte[] getEncoded() -> getEncoded
    void writeTo(java.io.OutputStream) -> writeTo
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
org.bouncycastle.pqc.crypto.ntru.NTRUSigningPrivateKeyParameters$Basis -> org.bouncycastle.pqc.crypto.ntru.NTRUSigningPrivateKeyParameters$Basis:
    org.bouncycastle.pqc.math.ntru.polynomial.Polynomial f -> f
    org.bouncycastle.pqc.math.ntru.polynomial.Polynomial fPrime -> fPrime
    org.bouncycastle.pqc.math.ntru.polynomial.IntegerPolynomial h -> h
    org.bouncycastle.pqc.crypto.ntru.NTRUSigningKeyGenerationParameters params -> params
    void encode(java.io.OutputStream,boolean) -> encode
    byte[] getEncoded(org.bouncycastle.pqc.math.ntru.polynomial.Polynomial) -> getEncoded
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
org.bouncycastle.pqc.crypto.ntru.NTRUSigningPublicKeyParameters -> org.bouncycastle.pqc.crypto.ntru.NTRUSigningPublicKeyParameters:
    org.bouncycastle.pqc.crypto.ntru.NTRUSigningParameters params -> params
    org.bouncycastle.pqc.math.ntru.polynomial.IntegerPolynomial h -> h
    byte[] getEncoded() -> getEncoded
    void writeTo(java.io.OutputStream) -> writeTo
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
org.bouncycastle.pqc.crypto.rainbow.Layer -> org.bouncycastle.pqc.crypto.rainbow.Layer:
    int vi -> vi
    int viNext -> viNext
    int oi -> oi
    short[][][] coeff_alpha -> coeff_alpha
    short[][][] coeff_beta -> coeff_beta
    short[][] coeff_gamma -> coeff_gamma
    short[] coeff_eta -> coeff_eta
    short[][] plugInVinegars(short[]) -> plugInVinegars
    int getVi() -> getVi
    int getViNext() -> getViNext
    int getOi() -> getOi
    short[][][] getCoeffAlpha() -> getCoeffAlpha
    short[][][] getCoeffBeta() -> getCoeffBeta
    short[][] getCoeffGamma() -> getCoeffGamma
    short[] getCoeffEta() -> getCoeffEta
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
org.bouncycastle.pqc.crypto.rainbow.RainbowKeyGenerationParameters -> org.bouncycastle.pqc.crypto.rainbow.RainbowKeyGenerationParameters:
    org.bouncycastle.pqc.crypto.rainbow.RainbowParameters params -> params
    org.bouncycastle.pqc.crypto.rainbow.RainbowParameters getParameters() -> getParameters
org.bouncycastle.pqc.crypto.rainbow.RainbowKeyPairGenerator -> org.bouncycastle.pqc.crypto.rainbow.RainbowKeyPairGenerator:
    boolean initialized -> initialized
    java.security.SecureRandom sr -> sr
    org.bouncycastle.pqc.crypto.rainbow.RainbowKeyGenerationParameters rainbowParams -> rainbowParams
    short[][] A1 -> A1
    short[][] A1inv -> A1inv
    short[] b1 -> b1
    short[][] A2 -> A2
    short[][] A2inv -> A2inv
    short[] b2 -> b2
    int numOfLayers -> numOfLayers
    org.bouncycastle.pqc.crypto.rainbow.Layer[] layers -> layers
    int[] vi -> vi
    short[][] pub_quadratic -> pub_quadratic
    short[][] pub_singular -> pub_singular
    short[] pub_scalar -> pub_scalar
    org.bouncycastle.crypto.AsymmetricCipherKeyPair genKeyPair() -> genKeyPair
    void initialize(org.bouncycastle.crypto.KeyGenerationParameters) -> initialize
    void initializeDefault() -> initializeDefault
    void keygen() -> keygen
    void generateL1() -> generateL1
    void generateL2() -> generateL2
    void generateF() -> generateF
    void computePublicKey() -> computePublicKey
    void compactPublicKey(short[][][]) -> compactPublicKey
    void init(org.bouncycastle.crypto.KeyGenerationParameters) -> init
    org.bouncycastle.crypto.AsymmetricCipherKeyPair generateKeyPair() -> generateKeyPair
org.bouncycastle.pqc.crypto.rainbow.RainbowKeyParameters -> org.bouncycastle.pqc.crypto.rainbow.RainbowKeyParameters:
    int docLength -> docLength
    int getDocLength() -> getDocLength
org.bouncycastle.pqc.crypto.rainbow.RainbowParameters -> org.bouncycastle.pqc.crypto.rainbow.RainbowParameters:
    int[] DEFAULT_VI -> DEFAULT_VI
    int[] vi -> vi
    void checkParams() -> checkParams
    int getNumOfLayers() -> getNumOfLayers
    int getDocLength() -> getDocLength
    int[] getVi() -> getVi
org.bouncycastle.pqc.crypto.rainbow.RainbowPrivateKeyParameters -> org.bouncycastle.pqc.crypto.rainbow.RainbowPrivateKeyParameters:
    short[][] A1inv -> A1inv
    short[] b1 -> b1
    short[][] A2inv -> A2inv
    short[] b2 -> b2
    int[] vi -> vi
    org.bouncycastle.pqc.crypto.rainbow.Layer[] layers -> layers
    short[] getB1() -> getB1
    short[][] getInvA1() -> getInvA1
    short[] getB2() -> getB2
    short[][] getInvA2() -> getInvA2
    org.bouncycastle.pqc.crypto.rainbow.Layer[] getLayers() -> getLayers
    int[] getVi() -> getVi
org.bouncycastle.pqc.crypto.rainbow.RainbowPublicKeyParameters -> org.bouncycastle.pqc.crypto.rainbow.RainbowPublicKeyParameters:
    short[][] coeffquadratic -> coeffquadratic
    short[][] coeffsingular -> coeffsingular
    short[] coeffscalar -> coeffscalar
    short[][] getCoeffQuadratic() -> getCoeffQuadratic
    short[][] getCoeffSingular() -> getCoeffSingular
    short[] getCoeffScalar() -> getCoeffScalar
org.bouncycastle.pqc.crypto.rainbow.RainbowSigner -> org.bouncycastle.pqc.crypto.rainbow.RainbowSigner:
    java.security.SecureRandom random -> random
    int signableDocumentLength -> signableDocumentLength
    short[] x -> x
    org.bouncycastle.pqc.crypto.rainbow.util.ComputeInField cf -> cf
    org.bouncycastle.pqc.crypto.rainbow.RainbowKeyParameters key -> key
    void init(boolean,org.bouncycastle.crypto.CipherParameters) -> init
    short[] initSign(org.bouncycastle.pqc.crypto.rainbow.Layer[],short[]) -> initSign
    byte[] generateSignature(byte[]) -> generateSignature
    boolean verifySignature(byte[],byte[]) -> verifySignature
    short[] verifySignatureIntern(short[]) -> verifySignatureIntern
    short[] makeMessageRepresentative(byte[]) -> makeMessageRepresentative
org.bouncycastle.pqc.crypto.rainbow.util.ComputeInField -> org.bouncycastle.pqc.crypto.rainbow.util.ComputeInField:
    short[][] A -> A
    short[] x -> x
    short[] solveEquation(short[][],short[]) -> solveEquation
    short[][] inverse(short[][]) -> inverse
    void computeZerosUnder(boolean) -> computeZerosUnder
    void computeZerosAbove() -> computeZerosAbove
    void substitute() -> substitute
    short[][] multiplyMatrix(short[][],short[][]) -> multiplyMatrix
    short[] multiplyMatrix(short[][],short[]) -> multiplyMatrix
    short[] addVect(short[],short[]) -> addVect
    short[][] multVects(short[],short[]) -> multVects
    short[] multVect(short,short[]) -> multVect
    short[][] multMatrix(short,short[][]) -> multMatrix
    short[][] addSquareMatrix(short[][],short[][]) -> addSquareMatrix
org.bouncycastle.pqc.crypto.rainbow.util.GF2Field -> org.bouncycastle.pqc.crypto.rainbow.util.GF2Field:
    int MASK -> MASK
    short[] exps -> exps
    short[] logs -> logs
    short addElem(short,short) -> addElem
    short invElem(short) -> invElem
    short multElem(short,short) -> multElem
    short getExp(short) -> getExp
    short getLog(short) -> getLog
org.bouncycastle.pqc.crypto.rainbow.util.RainbowUtil -> org.bouncycastle.pqc.crypto.rainbow.util.RainbowUtil:
    int[] convertArraytoInt(byte[]) -> convertArraytoInt
    short[] convertArray(byte[]) -> convertArray
    short[][] convertArray(byte[][]) -> convertArray
    short[][][] convertArray(byte[][][]) -> convertArray
    byte[] convertIntArray(int[]) -> convertIntArray
    byte[] convertArray(short[]) -> convertArray
    byte[][] convertArray(short[][]) -> convertArray
    byte[][][] convertArray(short[][][]) -> convertArray
    boolean equals(short[],short[]) -> equals
    boolean equals(short[][],short[][]) -> equals
    boolean equals(short[][][],short[][][]) -> equals
org.bouncycastle.pqc.jcajce.provider.BouncyCastlePQCProvider -> org.bouncycastle.pqc.jcajce.provider.BouncyCastlePQCProvider:
    java.lang.String info -> info
    java.lang.String PROVIDER_NAME -> PROVIDER_NAME
    org.bouncycastle.jcajce.provider.config.ProviderConfiguration CONFIGURATION -> CONFIGURATION
    java.util.Map keyInfoConverters -> keyInfoConverters
    java.lang.String ALGORITHM_PACKAGE -> ALGORITHM_PACKAGE
    java.lang.String[] ALGORITHMS -> ALGORITHMS
    void setup() -> setup
    void loadAlgorithms(java.lang.String,java.lang.String[]) -> loadAlgorithms
    void setParameter(java.lang.String,java.lang.Object) -> setParameter
    boolean hasAlgorithm(java.lang.String,java.lang.String) -> hasAlgorithm
    void addAlgorithm(java.lang.String,java.lang.String) -> addAlgorithm
    void addKeyInfoConverter(org.bouncycastle.asn1.ASN1ObjectIdentifier,org.bouncycastle.jcajce.provider.util.AsymmetricKeyInfoConverter) -> addKeyInfoConverter
    java.security.PublicKey getPublicKey(org.bouncycastle.asn1.x509.SubjectPublicKeyInfo) -> getPublicKey
    java.security.PrivateKey getPrivateKey(org.bouncycastle.asn1.pkcs.PrivateKeyInfo) -> getPrivateKey
    void access$000(org.bouncycastle.pqc.jcajce.provider.BouncyCastlePQCProvider) -> access$000
org.bouncycastle.pqc.jcajce.provider.BouncyCastlePQCProvider$1 -> org.bouncycastle.pqc.jcajce.provider.BouncyCastlePQCProvider$1:
    org.bouncycastle.pqc.jcajce.provider.BouncyCastlePQCProvider this$0 -> this$0
    java.lang.Object run() -> run
org.bouncycastle.pqc.jcajce.provider.McEliece -> org.bouncycastle.pqc.jcajce.provider.McEliece:
    java.lang.String PREFIX -> PREFIX
org.bouncycastle.pqc.jcajce.provider.McEliece$Mappings -> org.bouncycastle.pqc.jcajce.provider.McEliece$Mappings:
    void configure(org.bouncycastle.jcajce.provider.config.ConfigurableProvider) -> configure
org.bouncycastle.pqc.jcajce.provider.Rainbow -> org.bouncycastle.pqc.jcajce.provider.Rainbow:
    java.lang.String PREFIX -> PREFIX
org.bouncycastle.pqc.jcajce.provider.Rainbow$Mappings -> org.bouncycastle.pqc.jcajce.provider.Rainbow$Mappings:
    void configure(org.bouncycastle.jcajce.provider.config.ConfigurableProvider) -> configure
org.bouncycastle.pqc.jcajce.provider.gmss.BCGMSSPublicKey -> org.bouncycastle.pqc.jcajce.provider.gmss.BCGMSSPublicKey:
    long serialVersionUID -> serialVersionUID
    byte[] publicKeyBytes -> publicKeyBytes
    org.bouncycastle.pqc.crypto.gmss.GMSSParameters gmssParameterSet -> gmssParameterSet
    org.bouncycastle.pqc.crypto.gmss.GMSSParameters gmssParams -> gmssParams
    java.lang.String getAlgorithm() -> getAlgorithm
    byte[] getPublicKeyBytes() -> getPublicKeyBytes
    org.bouncycastle.pqc.crypto.gmss.GMSSParameters getParameterSet() -> getParameterSet
    java.lang.String toString() -> toString
    byte[] getEncoded() -> getEncoded
    java.lang.String getFormat() -> getFormat
org.bouncycastle.pqc.jcajce.provider.mceliece.BCMcElieceCCA2PrivateKey -> org.bouncycastle.pqc.jcajce.provider.mceliece.BCMcElieceCCA2PrivateKey:
    long serialVersionUID -> serialVersionUID
    java.lang.String oid -> oid
    int n -> n
    int k -> k
    org.bouncycastle.pqc.math.linearalgebra.GF2mField field -> field
    org.bouncycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM goppaPoly -> goppaPoly
    org.bouncycastle.pqc.math.linearalgebra.Permutation p -> p
    org.bouncycastle.pqc.math.linearalgebra.GF2Matrix h -> h
    org.bouncycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM[] qInv -> qInv
    org.bouncycastle.pqc.crypto.mceliece.McElieceCCA2Parameters mcElieceCCA2Params -> mcElieceCCA2Params
    java.lang.String getAlgorithm() -> getAlgorithm
    int getN() -> getN
    int getK() -> getK
    int getT() -> getT
    org.bouncycastle.pqc.math.linearalgebra.GF2mField getField() -> getField
    org.bouncycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM getGoppaPoly() -> getGoppaPoly
    org.bouncycastle.pqc.math.linearalgebra.Permutation getP() -> getP
    org.bouncycastle.pqc.math.linearalgebra.GF2Matrix getH() -> getH
    org.bouncycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM[] getQInv() -> getQInv
    java.lang.String toString() -> toString
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String getOIDString() -> getOIDString
    org.bouncycastle.asn1.ASN1ObjectIdentifier getOID() -> getOID
    org.bouncycastle.asn1.ASN1Primitive getAlgParams() -> getAlgParams
    byte[] getEncoded() -> getEncoded
    java.lang.String getFormat() -> getFormat
    org.bouncycastle.pqc.crypto.mceliece.McElieceCCA2Parameters getMcElieceCCA2Parameters() -> getMcElieceCCA2Parameters
org.bouncycastle.pqc.jcajce.provider.mceliece.BCMcElieceCCA2PublicKey -> org.bouncycastle.pqc.jcajce.provider.mceliece.BCMcElieceCCA2PublicKey:
    long serialVersionUID -> serialVersionUID
    java.lang.String oid -> oid
    int n -> n
    int t -> t
    org.bouncycastle.pqc.math.linearalgebra.GF2Matrix g -> g
    org.bouncycastle.pqc.crypto.mceliece.McElieceCCA2Parameters McElieceCCA2Params -> McElieceCCA2Params
    java.lang.String getAlgorithm() -> getAlgorithm
    int getN() -> getN
    int getK() -> getK
    int getT() -> getT
    org.bouncycastle.pqc.math.linearalgebra.GF2Matrix getG() -> getG
    java.lang.String toString() -> toString
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String getOIDString() -> getOIDString
    org.bouncycastle.asn1.ASN1ObjectIdentifier getOID() -> getOID
    org.bouncycastle.asn1.ASN1Primitive getAlgParams() -> getAlgParams
    byte[] getEncoded() -> getEncoded
    java.lang.String getFormat() -> getFormat
    org.bouncycastle.pqc.crypto.mceliece.McElieceCCA2Parameters getMcElieceCCA2Parameters() -> getMcElieceCCA2Parameters
org.bouncycastle.pqc.jcajce.provider.mceliece.BCMcEliecePrivateKey -> org.bouncycastle.pqc.jcajce.provider.mceliece.BCMcEliecePrivateKey:
    long serialVersionUID -> serialVersionUID
    java.lang.String oid -> oid
    int n -> n
    int k -> k
    org.bouncycastle.pqc.math.linearalgebra.GF2mField field -> field
    org.bouncycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM goppaPoly -> goppaPoly
    org.bouncycastle.pqc.math.linearalgebra.GF2Matrix sInv -> sInv
    org.bouncycastle.pqc.math.linearalgebra.Permutation p1 -> p1
    org.bouncycastle.pqc.math.linearalgebra.Permutation p2 -> p2
    org.bouncycastle.pqc.math.linearalgebra.GF2Matrix h -> h
    org.bouncycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM[] qInv -> qInv
    org.bouncycastle.pqc.crypto.mceliece.McElieceParameters mcElieceParams -> mcElieceParams
    java.lang.String getAlgorithm() -> getAlgorithm
    int getN() -> getN
    int getK() -> getK
    org.bouncycastle.pqc.math.linearalgebra.GF2mField getField() -> getField
    org.bouncycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM getGoppaPoly() -> getGoppaPoly
    org.bouncycastle.pqc.math.linearalgebra.GF2Matrix getSInv() -> getSInv
    org.bouncycastle.pqc.math.linearalgebra.Permutation getP1() -> getP1
    org.bouncycastle.pqc.math.linearalgebra.Permutation getP2() -> getP2
    org.bouncycastle.pqc.math.linearalgebra.GF2Matrix getH() -> getH
    org.bouncycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM[] getQInv() -> getQInv
    java.lang.String getOIDString() -> getOIDString
    java.lang.String toString() -> toString
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    org.bouncycastle.asn1.ASN1ObjectIdentifier getOID() -> getOID
    org.bouncycastle.asn1.ASN1Primitive getAlgParams() -> getAlgParams
    byte[] getEncoded() -> getEncoded
    java.lang.String getFormat() -> getFormat
    org.bouncycastle.pqc.crypto.mceliece.McElieceParameters getMcElieceParameters() -> getMcElieceParameters
org.bouncycastle.pqc.jcajce.provider.mceliece.BCMcEliecePublicKey -> org.bouncycastle.pqc.jcajce.provider.mceliece.BCMcEliecePublicKey:
    long serialVersionUID -> serialVersionUID
    java.lang.String oid -> oid
    int n -> n
    int t -> t
    org.bouncycastle.pqc.math.linearalgebra.GF2Matrix g -> g
    org.bouncycastle.pqc.crypto.mceliece.McElieceParameters McElieceParams -> McElieceParams
    java.lang.String getAlgorithm() -> getAlgorithm
    int getN() -> getN
    int getK() -> getK
    int getT() -> getT
    org.bouncycastle.pqc.math.linearalgebra.GF2Matrix getG() -> getG
    java.lang.String toString() -> toString
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String getOIDString() -> getOIDString
    org.bouncycastle.asn1.ASN1ObjectIdentifier getOID() -> getOID
    org.bouncycastle.asn1.ASN1Primitive getAlgParams() -> getAlgParams
    byte[] getEncoded() -> getEncoded
    java.lang.String getFormat() -> getFormat
    org.bouncycastle.pqc.crypto.mceliece.McElieceParameters getMcElieceParameters() -> getMcElieceParameters
org.bouncycastle.pqc.jcajce.provider.mceliece.McElieceCCA2KeyFactorySpi -> org.bouncycastle.pqc.jcajce.provider.mceliece.McElieceCCA2KeyFactorySpi:
    java.lang.String OID -> OID
    java.security.PublicKey generatePublic(java.security.spec.KeySpec) -> generatePublic
    java.security.PrivateKey generatePrivate(java.security.spec.KeySpec) -> generatePrivate
    java.security.spec.KeySpec getKeySpec(java.security.Key,java.lang.Class) -> getKeySpec
    java.security.Key translateKey(java.security.Key) -> translateKey
    java.security.PublicKey generatePublic(org.bouncycastle.asn1.x509.SubjectPublicKeyInfo) -> generatePublic
    java.security.PrivateKey generatePrivate(org.bouncycastle.asn1.pkcs.PrivateKeyInfo) -> generatePrivate
    java.security.PublicKey engineGeneratePublic(java.security.spec.KeySpec) -> engineGeneratePublic
    java.security.PrivateKey engineGeneratePrivate(java.security.spec.KeySpec) -> engineGeneratePrivate
    java.security.spec.KeySpec engineGetKeySpec(java.security.Key,java.lang.Class) -> engineGetKeySpec
    java.security.Key engineTranslateKey(java.security.Key) -> engineTranslateKey
org.bouncycastle.pqc.jcajce.provider.mceliece.McElieceCCA2KeysToParams -> org.bouncycastle.pqc.jcajce.provider.mceliece.McElieceCCA2KeysToParams:
    org.bouncycastle.crypto.params.AsymmetricKeyParameter generatePublicKeyParameter(java.security.PublicKey) -> generatePublicKeyParameter
    org.bouncycastle.crypto.params.AsymmetricKeyParameter generatePrivateKeyParameter(java.security.PrivateKey) -> generatePrivateKeyParameter
org.bouncycastle.pqc.jcajce.provider.mceliece.McElieceCCA2Primitives -> org.bouncycastle.pqc.jcajce.provider.mceliece.McElieceCCA2Primitives:
    org.bouncycastle.pqc.math.linearalgebra.GF2Vector encryptionPrimitive(org.bouncycastle.pqc.jcajce.provider.mceliece.BCMcElieceCCA2PublicKey,org.bouncycastle.pqc.math.linearalgebra.GF2Vector,org.bouncycastle.pqc.math.linearalgebra.GF2Vector) -> encryptionPrimitive
    org.bouncycastle.pqc.math.linearalgebra.GF2Vector encryptionPrimitive(org.bouncycastle.pqc.crypto.mceliece.McElieceCCA2PublicKeyParameters,org.bouncycastle.pqc.math.linearalgebra.GF2Vector,org.bouncycastle.pqc.math.linearalgebra.GF2Vector) -> encryptionPrimitive
    org.bouncycastle.pqc.math.linearalgebra.GF2Vector[] decryptionPrimitive(org.bouncycastle.pqc.jcajce.provider.mceliece.BCMcElieceCCA2PrivateKey,org.bouncycastle.pqc.math.linearalgebra.GF2Vector) -> decryptionPrimitive
    org.bouncycastle.pqc.math.linearalgebra.GF2Vector[] decryptionPrimitive(org.bouncycastle.pqc.crypto.mceliece.McElieceCCA2PrivateKeyParameters,org.bouncycastle.pqc.math.linearalgebra.GF2Vector) -> decryptionPrimitive
org.bouncycastle.pqc.jcajce.provider.mceliece.McElieceFujisakiCipherSpi -> org.bouncycastle.pqc.jcajce.provider.mceliece.McElieceFujisakiCipherSpi:
    org.bouncycastle.crypto.Digest digest -> digest
    org.bouncycastle.pqc.crypto.mceliece.McElieceFujisakiCipher cipher -> cipher
    java.io.ByteArrayOutputStream buf -> buf
    byte[] update(byte[],int,int) -> update
    byte[] doFinal(byte[],int,int) -> doFinal
    int encryptOutputSize(int) -> encryptOutputSize
    int decryptOutputSize(int) -> decryptOutputSize
    void initCipherEncrypt(java.security.Key,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom) -> initCipherEncrypt
    void initCipherDecrypt(java.security.Key,java.security.spec.AlgorithmParameterSpec) -> initCipherDecrypt
    java.lang.String getName() -> getName
    int getKeySize(java.security.Key) -> getKeySize
    byte[] messageEncrypt(byte[]) -> messageEncrypt
    byte[] messageDecrypt(byte[]) -> messageDecrypt
org.bouncycastle.pqc.jcajce.provider.mceliece.McElieceFujisakiCipherSpi$McElieceFujisaki -> org.bouncycastle.pqc.jcajce.provider.mceliece.McElieceFujisakiCipherSpi$McElieceFujisaki:
org.bouncycastle.pqc.jcajce.provider.mceliece.McElieceFujisakiCipherSpi$McElieceFujisaki224 -> org.bouncycastle.pqc.jcajce.provider.mceliece.McElieceFujisakiCipherSpi$McElieceFujisaki224:
org.bouncycastle.pqc.jcajce.provider.mceliece.McElieceFujisakiCipherSpi$McElieceFujisaki256 -> org.bouncycastle.pqc.jcajce.provider.mceliece.McElieceFujisakiCipherSpi$McElieceFujisaki256:
org.bouncycastle.pqc.jcajce.provider.mceliece.McElieceFujisakiCipherSpi$McElieceFujisaki384 -> org.bouncycastle.pqc.jcajce.provider.mceliece.McElieceFujisakiCipherSpi$McElieceFujisaki384:
org.bouncycastle.pqc.jcajce.provider.mceliece.McElieceFujisakiCipherSpi$McElieceFujisaki512 -> org.bouncycastle.pqc.jcajce.provider.mceliece.McElieceFujisakiCipherSpi$McElieceFujisaki512:
org.bouncycastle.pqc.jcajce.provider.mceliece.McElieceKeyFactorySpi -> org.bouncycastle.pqc.jcajce.provider.mceliece.McElieceKeyFactorySpi:
    java.lang.String OID -> OID
    java.security.PublicKey generatePublic(java.security.spec.KeySpec) -> generatePublic
    java.security.PrivateKey generatePrivate(java.security.spec.KeySpec) -> generatePrivate
    java.security.spec.KeySpec getKeySpec(java.security.Key,java.lang.Class) -> getKeySpec
    java.security.Key translateKey(java.security.Key) -> translateKey
    java.security.PublicKey generatePublic(org.bouncycastle.asn1.x509.SubjectPublicKeyInfo) -> generatePublic
    java.security.PrivateKey generatePrivate(org.bouncycastle.asn1.pkcs.PrivateKeyInfo) -> generatePrivate
    java.security.PublicKey engineGeneratePublic(java.security.spec.KeySpec) -> engineGeneratePublic
    java.security.PrivateKey engineGeneratePrivate(java.security.spec.KeySpec) -> engineGeneratePrivate
    java.security.spec.KeySpec engineGetKeySpec(java.security.Key,java.lang.Class) -> engineGetKeySpec
    java.security.Key engineTranslateKey(java.security.Key) -> engineTranslateKey
org.bouncycastle.pqc.jcajce.provider.mceliece.McElieceKeyPairGeneratorSpi -> org.bouncycastle.pqc.jcajce.provider.mceliece.McElieceKeyPairGeneratorSpi:
org.bouncycastle.pqc.jcajce.provider.mceliece.McElieceKeyPairGeneratorSpi$McEliece -> org.bouncycastle.pqc.jcajce.provider.mceliece.McElieceKeyPairGeneratorSpi$McEliece:
    org.bouncycastle.pqc.crypto.mceliece.McElieceKeyPairGenerator kpg -> kpg
    void initialize(java.security.spec.AlgorithmParameterSpec) -> initialize
    void initialize(int,java.security.SecureRandom) -> initialize
    java.security.KeyPair generateKeyPair() -> generateKeyPair
org.bouncycastle.pqc.jcajce.provider.mceliece.McElieceKeyPairGeneratorSpi$McElieceCCA2 -> org.bouncycastle.pqc.jcajce.provider.mceliece.McElieceKeyPairGeneratorSpi$McElieceCCA2:
    org.bouncycastle.pqc.crypto.mceliece.McElieceCCA2KeyPairGenerator kpg -> kpg
    void initialize(java.security.spec.AlgorithmParameterSpec) -> initialize
    void initialize(int,java.security.SecureRandom) -> initialize
    java.security.KeyPair generateKeyPair() -> generateKeyPair
org.bouncycastle.pqc.jcajce.provider.mceliece.McElieceKeysToParams -> org.bouncycastle.pqc.jcajce.provider.mceliece.McElieceKeysToParams:
    org.bouncycastle.crypto.params.AsymmetricKeyParameter generatePublicKeyParameter(java.security.PublicKey) -> generatePublicKeyParameter
    org.bouncycastle.crypto.params.AsymmetricKeyParameter generatePrivateKeyParameter(java.security.PrivateKey) -> generatePrivateKeyParameter
org.bouncycastle.pqc.jcajce.provider.mceliece.McElieceKobaraImaiCipherSpi -> org.bouncycastle.pqc.jcajce.provider.mceliece.McElieceKobaraImaiCipherSpi:
    org.bouncycastle.crypto.Digest digest -> digest
    org.bouncycastle.pqc.crypto.mceliece.McElieceKobaraImaiCipher cipher -> cipher
    java.io.ByteArrayOutputStream buf -> buf
    byte[] update(byte[],int,int) -> update
    byte[] doFinal(byte[],int,int) -> doFinal
    int encryptOutputSize(int) -> encryptOutputSize
    int decryptOutputSize(int) -> decryptOutputSize
    void initCipherEncrypt(java.security.Key,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom) -> initCipherEncrypt
    void initCipherDecrypt(java.security.Key,java.security.spec.AlgorithmParameterSpec) -> initCipherDecrypt
    java.lang.String getName() -> getName
    int getKeySize(java.security.Key) -> getKeySize
    byte[] pad() -> pad
    byte[] unpad(byte[]) -> unpad
    byte[] messageEncrypt() -> messageEncrypt
    byte[] messageDecrypt() -> messageDecrypt
org.bouncycastle.pqc.jcajce.provider.mceliece.McElieceKobaraImaiCipherSpi$McElieceKobaraImai -> org.bouncycastle.pqc.jcajce.provider.mceliece.McElieceKobaraImaiCipherSpi$McElieceKobaraImai:
org.bouncycastle.pqc.jcajce.provider.mceliece.McElieceKobaraImaiCipherSpi$McElieceKobaraImai224 -> org.bouncycastle.pqc.jcajce.provider.mceliece.McElieceKobaraImaiCipherSpi$McElieceKobaraImai224:
org.bouncycastle.pqc.jcajce.provider.mceliece.McElieceKobaraImaiCipherSpi$McElieceKobaraImai256 -> org.bouncycastle.pqc.jcajce.provider.mceliece.McElieceKobaraImaiCipherSpi$McElieceKobaraImai256:
org.bouncycastle.pqc.jcajce.provider.mceliece.McElieceKobaraImaiCipherSpi$McElieceKobaraImai384 -> org.bouncycastle.pqc.jcajce.provider.mceliece.McElieceKobaraImaiCipherSpi$McElieceKobaraImai384:
org.bouncycastle.pqc.jcajce.provider.mceliece.McElieceKobaraImaiCipherSpi$McElieceKobaraImai512 -> org.bouncycastle.pqc.jcajce.provider.mceliece.McElieceKobaraImaiCipherSpi$McElieceKobaraImai512:
org.bouncycastle.pqc.jcajce.provider.mceliece.McEliecePKCSCipherSpi -> org.bouncycastle.pqc.jcajce.provider.mceliece.McEliecePKCSCipherSpi:
    org.bouncycastle.crypto.Digest digest -> digest
    org.bouncycastle.pqc.crypto.mceliece.McEliecePKCSCipher cipher -> cipher
    void initCipherEncrypt(java.security.Key,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom) -> initCipherEncrypt
    void initCipherDecrypt(java.security.Key,java.security.spec.AlgorithmParameterSpec) -> initCipherDecrypt
    byte[] messageEncrypt(byte[]) -> messageEncrypt
    byte[] messageDecrypt(byte[]) -> messageDecrypt
    java.lang.String getName() -> getName
    int getKeySize(java.security.Key) -> getKeySize
org.bouncycastle.pqc.jcajce.provider.mceliece.McEliecePKCSCipherSpi$McEliecePKCS -> org.bouncycastle.pqc.jcajce.provider.mceliece.McEliecePKCSCipherSpi$McEliecePKCS:
org.bouncycastle.pqc.jcajce.provider.mceliece.McEliecePKCSCipherSpi$McEliecePKCS224 -> org.bouncycastle.pqc.jcajce.provider.mceliece.McEliecePKCSCipherSpi$McEliecePKCS224:
org.bouncycastle.pqc.jcajce.provider.mceliece.McEliecePKCSCipherSpi$McEliecePKCS256 -> org.bouncycastle.pqc.jcajce.provider.mceliece.McEliecePKCSCipherSpi$McEliecePKCS256:
org.bouncycastle.pqc.jcajce.provider.mceliece.McEliecePKCSCipherSpi$McEliecePKCS384 -> org.bouncycastle.pqc.jcajce.provider.mceliece.McEliecePKCSCipherSpi$McEliecePKCS384:
org.bouncycastle.pqc.jcajce.provider.mceliece.McEliecePKCSCipherSpi$McEliecePKCS512 -> org.bouncycastle.pqc.jcajce.provider.mceliece.McEliecePKCSCipherSpi$McEliecePKCS512:
org.bouncycastle.pqc.jcajce.provider.mceliece.McEliecePointchevalCipherSpi -> org.bouncycastle.pqc.jcajce.provider.mceliece.McEliecePointchevalCipherSpi:
    org.bouncycastle.crypto.Digest digest -> digest
    org.bouncycastle.pqc.crypto.mceliece.McEliecePointchevalCipher cipher -> cipher
    java.io.ByteArrayOutputStream buf -> buf
    byte[] update(byte[],int,int) -> update
    byte[] doFinal(byte[],int,int) -> doFinal
    int encryptOutputSize(int) -> encryptOutputSize
    int decryptOutputSize(int) -> decryptOutputSize
    void initCipherEncrypt(java.security.Key,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom) -> initCipherEncrypt
    void initCipherDecrypt(java.security.Key,java.security.spec.AlgorithmParameterSpec) -> initCipherDecrypt
    java.lang.String getName() -> getName
    int getKeySize(java.security.Key) -> getKeySize
    byte[] messageEncrypt(byte[]) -> messageEncrypt
    byte[] messageDecrypt(byte[]) -> messageDecrypt
org.bouncycastle.pqc.jcajce.provider.mceliece.McEliecePointchevalCipherSpi$McEliecePointcheval -> org.bouncycastle.pqc.jcajce.provider.mceliece.McEliecePointchevalCipherSpi$McEliecePointcheval:
org.bouncycastle.pqc.jcajce.provider.mceliece.McEliecePointchevalCipherSpi$McEliecePointcheval224 -> org.bouncycastle.pqc.jcajce.provider.mceliece.McEliecePointchevalCipherSpi$McEliecePointcheval224:
org.bouncycastle.pqc.jcajce.provider.mceliece.McEliecePointchevalCipherSpi$McEliecePointcheval256 -> org.bouncycastle.pqc.jcajce.provider.mceliece.McEliecePointchevalCipherSpi$McEliecePointcheval256:
org.bouncycastle.pqc.jcajce.provider.mceliece.McEliecePointchevalCipherSpi$McEliecePointcheval384 -> org.bouncycastle.pqc.jcajce.provider.mceliece.McEliecePointchevalCipherSpi$McEliecePointcheval384:
org.bouncycastle.pqc.jcajce.provider.mceliece.McEliecePointchevalCipherSpi$McEliecePointcheval512 -> org.bouncycastle.pqc.jcajce.provider.mceliece.McEliecePointchevalCipherSpi$McEliecePointcheval512:
org.bouncycastle.pqc.jcajce.provider.rainbow.BCRainbowPrivateKey -> org.bouncycastle.pqc.jcajce.provider.rainbow.BCRainbowPrivateKey:
    long serialVersionUID -> serialVersionUID
    short[][] A1inv -> A1inv
    short[] b1 -> b1
    short[][] A2inv -> A2inv
    short[] b2 -> b2
    org.bouncycastle.pqc.crypto.rainbow.Layer[] layers -> layers
    int[] vi -> vi
    short[][] getInvA1() -> getInvA1
    short[] getB1() -> getB1
    short[] getB2() -> getB2
    short[][] getInvA2() -> getInvA2
    org.bouncycastle.pqc.crypto.rainbow.Layer[] getLayers() -> getLayers
    int[] getVi() -> getVi
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String getAlgorithm() -> getAlgorithm
    byte[] getEncoded() -> getEncoded
    java.lang.String getFormat() -> getFormat
org.bouncycastle.pqc.jcajce.provider.rainbow.BCRainbowPublicKey -> org.bouncycastle.pqc.jcajce.provider.rainbow.BCRainbowPublicKey:
    long serialVersionUID -> serialVersionUID
    short[][] coeffquadratic -> coeffquadratic
    short[][] coeffsingular -> coeffsingular
    short[] coeffscalar -> coeffscalar
    int docLength -> docLength
    org.bouncycastle.pqc.crypto.rainbow.RainbowParameters rainbowParams -> rainbowParams
    int getDocLength() -> getDocLength
    short[][] getCoeffQuadratic() -> getCoeffQuadratic
    short[][] getCoeffSingular() -> getCoeffSingular
    short[] getCoeffScalar() -> getCoeffScalar
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String getAlgorithm() -> getAlgorithm
    java.lang.String getFormat() -> getFormat
    byte[] getEncoded() -> getEncoded
org.bouncycastle.pqc.jcajce.provider.rainbow.RainbowKeyFactorySpi -> org.bouncycastle.pqc.jcajce.provider.rainbow.RainbowKeyFactorySpi:
    java.security.PrivateKey engineGeneratePrivate(java.security.spec.KeySpec) -> engineGeneratePrivate
    java.security.PublicKey engineGeneratePublic(java.security.spec.KeySpec) -> engineGeneratePublic
    java.security.spec.KeySpec engineGetKeySpec(java.security.Key,java.lang.Class) -> engineGetKeySpec
    java.security.Key engineTranslateKey(java.security.Key) -> engineTranslateKey
    java.security.PrivateKey generatePrivate(org.bouncycastle.asn1.pkcs.PrivateKeyInfo) -> generatePrivate
    java.security.PublicKey generatePublic(org.bouncycastle.asn1.x509.SubjectPublicKeyInfo) -> generatePublic
org.bouncycastle.pqc.jcajce.provider.rainbow.RainbowKeyPairGeneratorSpi -> org.bouncycastle.pqc.jcajce.provider.rainbow.RainbowKeyPairGeneratorSpi:
    org.bouncycastle.pqc.crypto.rainbow.RainbowKeyGenerationParameters param -> param
    org.bouncycastle.pqc.crypto.rainbow.RainbowKeyPairGenerator engine -> engine
    int strength -> strength
    java.security.SecureRandom random -> random
    boolean initialised -> initialised
    void initialize(int,java.security.SecureRandom) -> initialize
    void initialize(java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom) -> initialize
    java.security.KeyPair generateKeyPair() -> generateKeyPair
org.bouncycastle.pqc.jcajce.provider.rainbow.RainbowKeysToParams -> org.bouncycastle.pqc.jcajce.provider.rainbow.RainbowKeysToParams:
    org.bouncycastle.crypto.params.AsymmetricKeyParameter generatePublicKeyParameter(java.security.PublicKey) -> generatePublicKeyParameter
    org.bouncycastle.crypto.params.AsymmetricKeyParameter generatePrivateKeyParameter(java.security.PrivateKey) -> generatePrivateKeyParameter
org.bouncycastle.pqc.jcajce.provider.rainbow.SignatureSpi -> org.bouncycastle.pqc.jcajce.provider.rainbow.SignatureSpi:
    org.bouncycastle.crypto.Digest digest -> digest
    org.bouncycastle.pqc.crypto.rainbow.RainbowSigner signer -> signer
    java.security.SecureRandom random -> random
    void engineInitVerify(java.security.PublicKey) -> engineInitVerify
    void engineInitSign(java.security.PrivateKey,java.security.SecureRandom) -> engineInitSign
    void engineInitSign(java.security.PrivateKey) -> engineInitSign
    void engineUpdate(byte) -> engineUpdate
    void engineUpdate(byte[],int,int) -> engineUpdate
    byte[] engineSign() -> engineSign
    boolean engineVerify(byte[]) -> engineVerify
    void engineSetParameter(java.security.spec.AlgorithmParameterSpec) -> engineSetParameter
    void engineSetParameter(java.lang.String,java.lang.Object) -> engineSetParameter
    java.lang.Object engineGetParameter(java.lang.String) -> engineGetParameter
org.bouncycastle.pqc.jcajce.provider.rainbow.SignatureSpi$withSha224 -> org.bouncycastle.pqc.jcajce.provider.rainbow.SignatureSpi$withSha224:
org.bouncycastle.pqc.jcajce.provider.rainbow.SignatureSpi$withSha256 -> org.bouncycastle.pqc.jcajce.provider.rainbow.SignatureSpi$withSha256:
org.bouncycastle.pqc.jcajce.provider.rainbow.SignatureSpi$withSha384 -> org.bouncycastle.pqc.jcajce.provider.rainbow.SignatureSpi$withSha384:
org.bouncycastle.pqc.jcajce.provider.rainbow.SignatureSpi$withSha512 -> org.bouncycastle.pqc.jcajce.provider.rainbow.SignatureSpi$withSha512:
org.bouncycastle.pqc.jcajce.provider.util.AsymmetricBlockCipher -> org.bouncycastle.pqc.jcajce.provider.util.AsymmetricBlockCipher:
    java.security.spec.AlgorithmParameterSpec paramSpec -> paramSpec
    java.io.ByteArrayOutputStream buf -> buf
    int maxPlainTextSize -> maxPlainTextSize
    int cipherTextSize -> cipherTextSize
    int getBlockSize() -> getBlockSize
    byte[] getIV() -> getIV
    int getOutputSize(int) -> getOutputSize
    java.security.spec.AlgorithmParameterSpec getParameters() -> getParameters
    void initEncrypt(java.security.Key) -> initEncrypt
    void initEncrypt(java.security.Key,java.security.SecureRandom) -> initEncrypt
    void initEncrypt(java.security.Key,java.security.spec.AlgorithmParameterSpec) -> initEncrypt
    void initEncrypt(java.security.Key,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom) -> initEncrypt
    void initDecrypt(java.security.Key) -> initDecrypt
    void initDecrypt(java.security.Key,java.security.spec.AlgorithmParameterSpec) -> initDecrypt
    byte[] update(byte[],int,int) -> update
    int update(byte[],int,int,byte[],int) -> update
    byte[] doFinal(byte[],int,int) -> doFinal
    int doFinal(byte[],int,int,byte[],int) -> doFinal
    void setMode(java.lang.String) -> setMode
    void setPadding(java.lang.String) -> setPadding
    void checkLength(int) -> checkLength
    void initCipherEncrypt(java.security.Key,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom) -> initCipherEncrypt
    void initCipherDecrypt(java.security.Key,java.security.spec.AlgorithmParameterSpec) -> initCipherDecrypt
    byte[] messageEncrypt(byte[]) -> messageEncrypt
    byte[] messageDecrypt(byte[]) -> messageDecrypt
org.bouncycastle.pqc.jcajce.provider.util.AsymmetricHybridCipher -> org.bouncycastle.pqc.jcajce.provider.util.AsymmetricHybridCipher:
    java.security.spec.AlgorithmParameterSpec paramSpec -> paramSpec
    void setMode(java.lang.String) -> setMode
    void setPadding(java.lang.String) -> setPadding
    byte[] getIV() -> getIV
    int getBlockSize() -> getBlockSize
    java.security.spec.AlgorithmParameterSpec getParameters() -> getParameters
    int getOutputSize(int) -> getOutputSize
    void initEncrypt(java.security.Key) -> initEncrypt
    void initEncrypt(java.security.Key,java.security.SecureRandom) -> initEncrypt
    void initEncrypt(java.security.Key,java.security.spec.AlgorithmParameterSpec) -> initEncrypt
    void initEncrypt(java.security.Key,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom) -> initEncrypt
    void initDecrypt(java.security.Key) -> initDecrypt
    void initDecrypt(java.security.Key,java.security.spec.AlgorithmParameterSpec) -> initDecrypt
    byte[] update(byte[],int,int) -> update
    int update(byte[],int,int,byte[],int) -> update
    byte[] doFinal(byte[],int,int) -> doFinal
    int doFinal(byte[],int,int,byte[],int) -> doFinal
    int encryptOutputSize(int) -> encryptOutputSize
    int decryptOutputSize(int) -> decryptOutputSize
    void initCipherEncrypt(java.security.Key,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom) -> initCipherEncrypt
    void initCipherDecrypt(java.security.Key,java.security.spec.AlgorithmParameterSpec) -> initCipherDecrypt
org.bouncycastle.pqc.jcajce.provider.util.CipherSpiExt -> org.bouncycastle.pqc.jcajce.provider.util.CipherSpiExt:
    int ENCRYPT_MODE -> ENCRYPT_MODE
    int DECRYPT_MODE -> DECRYPT_MODE
    int opMode -> opMode
    void engineInit(int,java.security.Key,java.security.SecureRandom) -> engineInit
    void engineInit(int,java.security.Key,java.security.AlgorithmParameters,java.security.SecureRandom) -> engineInit
    void engineInit(int,java.security.Key,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom) -> engineInit
    byte[] engineDoFinal(byte[],int,int) -> engineDoFinal
    int engineDoFinal(byte[],int,int,byte[],int) -> engineDoFinal
    int engineGetBlockSize() -> engineGetBlockSize
    int engineGetKeySize(java.security.Key) -> engineGetKeySize
    byte[] engineGetIV() -> engineGetIV
    int engineGetOutputSize(int) -> engineGetOutputSize
    java.security.AlgorithmParameters engineGetParameters() -> engineGetParameters
    void engineSetMode(java.lang.String) -> engineSetMode
    void engineSetPadding(java.lang.String) -> engineSetPadding
    byte[] engineUpdate(byte[],int,int) -> engineUpdate
    int engineUpdate(byte[],int,int,byte[],int) -> engineUpdate
    void initEncrypt(java.security.Key,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom) -> initEncrypt
    void initDecrypt(java.security.Key,java.security.spec.AlgorithmParameterSpec) -> initDecrypt
    java.lang.String getName() -> getName
    int getBlockSize() -> getBlockSize
    int getOutputSize(int) -> getOutputSize
    int getKeySize(java.security.Key) -> getKeySize
    java.security.spec.AlgorithmParameterSpec getParameters() -> getParameters
    byte[] getIV() -> getIV
    void setMode(java.lang.String) -> setMode
    void setPadding(java.lang.String) -> setPadding
    byte[] update(byte[]) -> update
    byte[] update(byte[],int,int) -> update
    int update(byte[],int,int,byte[],int) -> update
    byte[] doFinal() -> doFinal
    byte[] doFinal(byte[]) -> doFinal
    byte[] doFinal(byte[],int,int) -> doFinal
    int doFinal(byte[],int,int,byte[],int) -> doFinal
org.bouncycastle.pqc.jcajce.provider.util.KeyUtil -> org.bouncycastle.pqc.jcajce.provider.util.KeyUtil:
    byte[] getEncodedSubjectPublicKeyInfo(org.bouncycastle.asn1.x509.AlgorithmIdentifier,org.bouncycastle.asn1.ASN1Encodable) -> getEncodedSubjectPublicKeyInfo
    byte[] getEncodedSubjectPublicKeyInfo(org.bouncycastle.asn1.x509.AlgorithmIdentifier,byte[]) -> getEncodedSubjectPublicKeyInfo
    byte[] getEncodedSubjectPublicKeyInfo(org.bouncycastle.asn1.x509.SubjectPublicKeyInfo) -> getEncodedSubjectPublicKeyInfo
    byte[] getEncodedPrivateKeyInfo(org.bouncycastle.asn1.x509.AlgorithmIdentifier,org.bouncycastle.asn1.ASN1Encodable) -> getEncodedPrivateKeyInfo
    byte[] getEncodedPrivateKeyInfo(org.bouncycastle.asn1.pkcs.PrivateKeyInfo) -> getEncodedPrivateKeyInfo
org.bouncycastle.pqc.jcajce.spec.ECCKeyGenParameterSpec -> org.bouncycastle.pqc.jcajce.spec.ECCKeyGenParameterSpec:
    int DEFAULT_M -> DEFAULT_M
    int DEFAULT_T -> DEFAULT_T
    int m -> m
    int t -> t
    int n -> n
    int fieldPoly -> fieldPoly
    int getM() -> getM
    int getN() -> getN
    int getT() -> getT
    int getFieldPoly() -> getFieldPoly
org.bouncycastle.pqc.jcajce.spec.GMSSKeySpec -> org.bouncycastle.pqc.jcajce.spec.GMSSKeySpec:
    org.bouncycastle.pqc.crypto.gmss.GMSSParameters gmssParameterSet -> gmssParameterSet
    org.bouncycastle.pqc.crypto.gmss.GMSSParameters getParameters() -> getParameters
org.bouncycastle.pqc.jcajce.spec.GMSSPrivateKeySpec -> org.bouncycastle.pqc.jcajce.spec.GMSSPrivateKeySpec:
    int[] index -> index
    byte[][] currentSeed -> currentSeed
    byte[][] nextNextSeed -> nextNextSeed
    byte[][][] currentAuthPath -> currentAuthPath
    byte[][][] nextAuthPath -> nextAuthPath
    org.bouncycastle.pqc.crypto.gmss.Treehash[][] currentTreehash -> currentTreehash
    org.bouncycastle.pqc.crypto.gmss.Treehash[][] nextTreehash -> nextTreehash
    java.util.Vector[] currentStack -> currentStack
    java.util.Vector[] nextStack -> nextStack
    java.util.Vector[][] currentRetain -> currentRetain
    java.util.Vector[][] nextRetain -> nextRetain
    byte[][][] keep -> keep
    org.bouncycastle.pqc.crypto.gmss.GMSSLeaf[] nextNextLeaf -> nextNextLeaf
    org.bouncycastle.pqc.crypto.gmss.GMSSLeaf[] upperLeaf -> upperLeaf
    org.bouncycastle.pqc.crypto.gmss.GMSSLeaf[] upperTreehashLeaf -> upperTreehashLeaf
    int[] minTreehash -> minTreehash
    org.bouncycastle.pqc.crypto.gmss.GMSSParameters gmssPS -> gmssPS
    byte[][] nextRoot -> nextRoot
    org.bouncycastle.pqc.crypto.gmss.GMSSRootCalc[] nextNextRoot -> nextNextRoot
    byte[][] currentRootSig -> currentRootSig
    org.bouncycastle.pqc.crypto.gmss.GMSSRootSig[] nextRootSig -> nextRootSig
    int[] getIndex() -> getIndex
    byte[][] getCurrentSeed() -> getCurrentSeed
    byte[][] getNextNextSeed() -> getNextNextSeed
    byte[][][] getCurrentAuthPath() -> getCurrentAuthPath
    byte[][][] getNextAuthPath() -> getNextAuthPath
    org.bouncycastle.pqc.crypto.gmss.Treehash[][] getCurrentTreehash() -> getCurrentTreehash
    org.bouncycastle.pqc.crypto.gmss.Treehash[][] getNextTreehash() -> getNextTreehash
    byte[][][] getKeep() -> getKeep
    java.util.Vector[] getCurrentStack() -> getCurrentStack
    java.util.Vector[] getNextStack() -> getNextStack
    java.util.Vector[][] getCurrentRetain() -> getCurrentRetain
    java.util.Vector[][] getNextRetain() -> getNextRetain
    org.bouncycastle.pqc.crypto.gmss.GMSSLeaf[] getNextNextLeaf() -> getNextNextLeaf
    org.bouncycastle.pqc.crypto.gmss.GMSSLeaf[] getUpperLeaf() -> getUpperLeaf
    org.bouncycastle.pqc.crypto.gmss.GMSSLeaf[] getUpperTreehashLeaf() -> getUpperTreehashLeaf
    int[] getMinTreehash() -> getMinTreehash
    org.bouncycastle.pqc.crypto.gmss.GMSSRootSig[] getNextRootSig() -> getNextRootSig
    org.bouncycastle.pqc.crypto.gmss.GMSSParameters getGmssPS() -> getGmssPS
    byte[][] getNextRoot() -> getNextRoot
    org.bouncycastle.pqc.crypto.gmss.GMSSRootCalc[] getNextNextRoot() -> getNextNextRoot
    byte[][] getCurrentRootSig() -> getCurrentRootSig
    org.bouncycastle.pqc.crypto.gmss.GMSSLeaf[] clone(org.bouncycastle.pqc.crypto.gmss.GMSSLeaf[]) -> clone
    org.bouncycastle.pqc.crypto.gmss.GMSSRootCalc[] clone(org.bouncycastle.pqc.crypto.gmss.GMSSRootCalc[]) -> clone
    org.bouncycastle.pqc.crypto.gmss.GMSSRootSig[] clone(org.bouncycastle.pqc.crypto.gmss.GMSSRootSig[]) -> clone
    byte[][] clone(byte[][]) -> clone
    byte[][][] clone(byte[][][]) -> clone
    org.bouncycastle.pqc.crypto.gmss.Treehash[] clone(org.bouncycastle.pqc.crypto.gmss.Treehash[]) -> clone
    org.bouncycastle.pqc.crypto.gmss.Treehash[][] clone(org.bouncycastle.pqc.crypto.gmss.Treehash[][]) -> clone
    java.util.Vector[] clone(java.util.Vector[]) -> clone
    java.util.Vector[][] clone(java.util.Vector[][]) -> clone
org.bouncycastle.pqc.jcajce.spec.GMSSPublicKeySpec -> org.bouncycastle.pqc.jcajce.spec.GMSSPublicKeySpec:
    byte[] gmssPublicKey -> gmssPublicKey
    byte[] getPublicKey() -> getPublicKey
org.bouncycastle.pqc.jcajce.spec.McElieceCCA2ParameterSpec -> org.bouncycastle.pqc.jcajce.spec.McElieceCCA2ParameterSpec:
    java.lang.String DEFAULT_MD -> DEFAULT_MD
    java.lang.String mdName -> mdName
    java.lang.String getMDName() -> getMDName
org.bouncycastle.pqc.jcajce.spec.McElieceCCA2PrivateKeySpec -> org.bouncycastle.pqc.jcajce.spec.McElieceCCA2PrivateKeySpec:
    java.lang.String oid -> oid
    int n -> n
    int k -> k
    org.bouncycastle.pqc.math.linearalgebra.GF2mField field -> field
    org.bouncycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM goppaPoly -> goppaPoly
    org.bouncycastle.pqc.math.linearalgebra.Permutation p -> p
    org.bouncycastle.pqc.math.linearalgebra.GF2Matrix h -> h
    org.bouncycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM[] qInv -> qInv
    int getN() -> getN
    int getK() -> getK
    org.bouncycastle.pqc.math.linearalgebra.GF2mField getField() -> getField
    org.bouncycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM getGoppaPoly() -> getGoppaPoly
    org.bouncycastle.pqc.math.linearalgebra.Permutation getP() -> getP
    org.bouncycastle.pqc.math.linearalgebra.GF2Matrix getH() -> getH
    org.bouncycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM[] getQInv() -> getQInv
    java.lang.String getOIDString() -> getOIDString
org.bouncycastle.pqc.jcajce.spec.McElieceCCA2PublicKeySpec -> org.bouncycastle.pqc.jcajce.spec.McElieceCCA2PublicKeySpec:
    java.lang.String oid -> oid
    int n -> n
    int t -> t
    org.bouncycastle.pqc.math.linearalgebra.GF2Matrix matrixG -> matrixG
    int getN() -> getN
    int getT() -> getT
    org.bouncycastle.pqc.math.linearalgebra.GF2Matrix getMatrixG() -> getMatrixG
    java.lang.String getOIDString() -> getOIDString
org.bouncycastle.pqc.jcajce.spec.McEliecePrivateKeySpec -> org.bouncycastle.pqc.jcajce.spec.McEliecePrivateKeySpec:
    java.lang.String oid -> oid
    int n -> n
    int k -> k
    org.bouncycastle.pqc.math.linearalgebra.GF2mField field -> field
    org.bouncycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM goppaPoly -> goppaPoly
    org.bouncycastle.pqc.math.linearalgebra.GF2Matrix sInv -> sInv
    org.bouncycastle.pqc.math.linearalgebra.Permutation p1 -> p1
    org.bouncycastle.pqc.math.linearalgebra.Permutation p2 -> p2
    org.bouncycastle.pqc.math.linearalgebra.GF2Matrix h -> h
    org.bouncycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM[] qInv -> qInv
    int getN() -> getN
    int getK() -> getK
    org.bouncycastle.pqc.math.linearalgebra.GF2mField getField() -> getField
    org.bouncycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM getGoppaPoly() -> getGoppaPoly
    org.bouncycastle.pqc.math.linearalgebra.GF2Matrix getSInv() -> getSInv
    org.bouncycastle.pqc.math.linearalgebra.Permutation getP1() -> getP1
    org.bouncycastle.pqc.math.linearalgebra.Permutation getP2() -> getP2
    org.bouncycastle.pqc.math.linearalgebra.GF2Matrix getH() -> getH
    org.bouncycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM[] getQInv() -> getQInv
    java.lang.String getOIDString() -> getOIDString
org.bouncycastle.pqc.jcajce.spec.McEliecePublicKeySpec -> org.bouncycastle.pqc.jcajce.spec.McEliecePublicKeySpec:
    java.lang.String oid -> oid
    int n -> n
    int t -> t
    org.bouncycastle.pqc.math.linearalgebra.GF2Matrix g -> g
    int getN() -> getN
    int getT() -> getT
    org.bouncycastle.pqc.math.linearalgebra.GF2Matrix getG() -> getG
    java.lang.String getOIDString() -> getOIDString
org.bouncycastle.pqc.jcajce.spec.RainbowParameterSpec -> org.bouncycastle.pqc.jcajce.spec.RainbowParameterSpec:
    int[] DEFAULT_VI -> DEFAULT_VI
    int[] vi -> vi
    void checkParams() -> checkParams
    int getNumOfLayers() -> getNumOfLayers
    int getDocumentLength() -> getDocumentLength
    int[] getVi() -> getVi
org.bouncycastle.pqc.jcajce.spec.RainbowPrivateKeySpec -> org.bouncycastle.pqc.jcajce.spec.RainbowPrivateKeySpec:
    short[][] A1inv -> A1inv
    short[] b1 -> b1
    short[][] A2inv -> A2inv
    short[] b2 -> b2
    int[] vi -> vi
    org.bouncycastle.pqc.crypto.rainbow.Layer[] layers -> layers
    short[] getB1() -> getB1
    short[][] getInvA1() -> getInvA1
    short[] getB2() -> getB2
    short[][] getInvA2() -> getInvA2
    org.bouncycastle.pqc.crypto.rainbow.Layer[] getLayers() -> getLayers
    int[] getVi() -> getVi
org.bouncycastle.pqc.jcajce.spec.RainbowPublicKeySpec -> org.bouncycastle.pqc.jcajce.spec.RainbowPublicKeySpec:
    short[][] coeffquadratic -> coeffquadratic
    short[][] coeffsingular -> coeffsingular
    short[] coeffscalar -> coeffscalar
    int docLength -> docLength
    int getDocLength() -> getDocLength
    short[][] getCoeffQuadratic() -> getCoeffQuadratic
    short[][] getCoeffSingular() -> getCoeffSingular
    short[] getCoeffScalar() -> getCoeffScalar
org.bouncycastle.pqc.math.linearalgebra.BigEndianConversions -> org.bouncycastle.pqc.math.linearalgebra.BigEndianConversions:
    byte[] I2OSP(int) -> I2OSP
    byte[] I2OSP(int,int) -> I2OSP
    void I2OSP(int,byte[],int) -> I2OSP
    byte[] I2OSP(long) -> I2OSP
    void I2OSP(long,byte[],int) -> I2OSP
    void I2OSP(int,byte[],int,int) -> I2OSP
    int OS2IP(byte[]) -> OS2IP
    int OS2IP(byte[],int) -> OS2IP
    int OS2IP(byte[],int,int) -> OS2IP
    long OS2LIP(byte[],int) -> OS2LIP
    byte[] toByteArray(int[]) -> toByteArray
    byte[] toByteArray(int[],int) -> toByteArray
    int[] toIntArray(byte[]) -> toIntArray
org.bouncycastle.pqc.math.linearalgebra.BigIntUtils -> org.bouncycastle.pqc.math.linearalgebra.BigIntUtils:
    boolean equals(java.math.BigInteger[],java.math.BigInteger[]) -> equals
    void fill(java.math.BigInteger[],java.math.BigInteger) -> fill
    java.math.BigInteger[] subArray(java.math.BigInteger[],int,int) -> subArray
    int[] toIntArray(java.math.BigInteger[]) -> toIntArray
    int[] toIntArrayModQ(int,java.math.BigInteger[]) -> toIntArrayModQ
    byte[] toMinimalByteArray(java.math.BigInteger) -> toMinimalByteArray
org.bouncycastle.pqc.math.linearalgebra.ByteUtils -> org.bouncycastle.pqc.math.linearalgebra.ByteUtils:
    char[] HEX_CHARS -> HEX_CHARS
    boolean equals(byte[],byte[]) -> equals
    boolean equals(byte[][],byte[][]) -> equals
    boolean equals(byte[][][],byte[][][]) -> equals
    int deepHashCode(byte[]) -> deepHashCode
    int deepHashCode(byte[][]) -> deepHashCode
    int deepHashCode(byte[][][]) -> deepHashCode
    byte[] clone(byte[]) -> clone
    byte[] fromHexString(java.lang.String) -> fromHexString
    java.lang.String toHexString(byte[]) -> toHexString
    java.lang.String toHexString(byte[],java.lang.String,java.lang.String) -> toHexString
    java.lang.String toBinaryString(byte[]) -> toBinaryString
    byte[] xor(byte[],byte[]) -> xor
    byte[] concatenate(byte[],byte[]) -> concatenate
    byte[] concatenate(byte[][]) -> concatenate
    byte[][] split(byte[],int) -> split
    byte[] subArray(byte[],int,int) -> subArray
    byte[] subArray(byte[],int) -> subArray
    char[] toCharArray(byte[]) -> toCharArray
org.bouncycastle.pqc.math.linearalgebra.CharUtils -> org.bouncycastle.pqc.math.linearalgebra.CharUtils:
    char[] clone(char[]) -> clone
    byte[] toByteArray(char[]) -> toByteArray
    byte[] toByteArrayForPBE(char[]) -> toByteArrayForPBE
    boolean equals(char[],char[]) -> equals
org.bouncycastle.pqc.math.linearalgebra.GF2Matrix -> org.bouncycastle.pqc.math.linearalgebra.GF2Matrix:
    int[][] matrix -> matrix
    int length -> length
    void assignZeroMatrix(int,int) -> assignZeroMatrix
    void assignUnitMatrix(int) -> assignUnitMatrix
    void assignRandomLowerTriangularMatrix(int,java.security.SecureRandom) -> assignRandomLowerTriangularMatrix
    void assignRandomUpperTriangularMatrix(int,java.security.SecureRandom) -> assignRandomUpperTriangularMatrix
    void assignRandomRegularMatrix(int,java.security.SecureRandom) -> assignRandomRegularMatrix
    org.bouncycastle.pqc.math.linearalgebra.GF2Matrix[] createRandomRegularMatrixAndItsInverse(int,java.security.SecureRandom) -> createRandomRegularMatrixAndItsInverse
    int[][] getIntArray() -> getIntArray
    int getLength() -> getLength
    int[] getRow(int) -> getRow
    byte[] getEncoded() -> getEncoded
    double getHammingWeight() -> getHammingWeight
    boolean isZero() -> isZero
    org.bouncycastle.pqc.math.linearalgebra.GF2Matrix getLeftSubMatrix() -> getLeftSubMatrix
    org.bouncycastle.pqc.math.linearalgebra.GF2Matrix extendLeftCompactForm() -> extendLeftCompactForm
    org.bouncycastle.pqc.math.linearalgebra.GF2Matrix getRightSubMatrix() -> getRightSubMatrix
    org.bouncycastle.pqc.math.linearalgebra.GF2Matrix extendRightCompactForm() -> extendRightCompactForm
    org.bouncycastle.pqc.math.linearalgebra.Matrix computeTranspose() -> computeTranspose
    org.bouncycastle.pqc.math.linearalgebra.Matrix computeInverse() -> computeInverse
    org.bouncycastle.pqc.math.linearalgebra.Matrix leftMultiply(org.bouncycastle.pqc.math.linearalgebra.Permutation) -> leftMultiply
    org.bouncycastle.pqc.math.linearalgebra.Vector leftMultiply(org.bouncycastle.pqc.math.linearalgebra.Vector) -> leftMultiply
    org.bouncycastle.pqc.math.linearalgebra.Vector leftMultiplyLeftCompactForm(org.bouncycastle.pqc.math.linearalgebra.Vector) -> leftMultiplyLeftCompactForm
    org.bouncycastle.pqc.math.linearalgebra.Matrix rightMultiply(org.bouncycastle.pqc.math.linearalgebra.Matrix) -> rightMultiply
    org.bouncycastle.pqc.math.linearalgebra.Matrix rightMultiply(org.bouncycastle.pqc.math.linearalgebra.Permutation) -> rightMultiply
    org.bouncycastle.pqc.math.linearalgebra.Vector rightMultiply(org.bouncycastle.pqc.math.linearalgebra.Vector) -> rightMultiply
    org.bouncycastle.pqc.math.linearalgebra.Vector rightMultiplyRightCompactForm(org.bouncycastle.pqc.math.linearalgebra.Vector) -> rightMultiplyRightCompactForm
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    void swapRows(int[][],int,int) -> swapRows
    void addToRow(int[],int[],int) -> addToRow
org.bouncycastle.pqc.math.linearalgebra.GF2Polynomial -> org.bouncycastle.pqc.math.linearalgebra.GF2Polynomial:
    int len -> len
    int blocks -> blocks
    int[] value -> value
    java.util.Random rand -> rand
    boolean[] parity -> parity
    short[] squaringTable -> squaringTable
    int[] bitMask -> bitMask
    int[] reverseRightMask -> reverseRightMask
    java.lang.Object clone() -> clone
    int getLength() -> getLength
    int[] toIntegerArray() -> toIntegerArray
    java.lang.String toString(int) -> toString
    byte[] toByteArray() -> toByteArray
    java.math.BigInteger toFlexiBigInt() -> toFlexiBigInt
    void assignOne() -> assignOne
    void assignX() -> assignX
    void assignAll() -> assignAll
    void assignZero() -> assignZero
    void randomize() -> randomize
    void randomize(java.util.Random) -> randomize
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    boolean isZero() -> isZero
    boolean isOne() -> isOne
    void addToThis(org.bouncycastle.pqc.math.linearalgebra.GF2Polynomial) -> addToThis
    org.bouncycastle.pqc.math.linearalgebra.GF2Polynomial add(org.bouncycastle.pqc.math.linearalgebra.GF2Polynomial) -> add
    void subtractFromThis(org.bouncycastle.pqc.math.linearalgebra.GF2Polynomial) -> subtractFromThis
    org.bouncycastle.pqc.math.linearalgebra.GF2Polynomial subtract(org.bouncycastle.pqc.math.linearalgebra.GF2Polynomial) -> subtract
    void increaseThis() -> increaseThis
    org.bouncycastle.pqc.math.linearalgebra.GF2Polynomial increase() -> increase
    org.bouncycastle.pqc.math.linearalgebra.GF2Polynomial multiplyClassic(org.bouncycastle.pqc.math.linearalgebra.GF2Polynomial) -> multiplyClassic
    org.bouncycastle.pqc.math.linearalgebra.GF2Polynomial multiply(org.bouncycastle.pqc.math.linearalgebra.GF2Polynomial) -> multiply
    org.bouncycastle.pqc.math.linearalgebra.GF2Polynomial karaMult(org.bouncycastle.pqc.math.linearalgebra.GF2Polynomial) -> karaMult
    int[] mult512(int[],int[]) -> mult512
    int[] mult256(int[],int[]) -> mult256
    int[] mult128(int[],int[]) -> mult128
    int[] mult64(int[],int[]) -> mult64
    int[] mult32(int,int) -> mult32
    org.bouncycastle.pqc.math.linearalgebra.GF2Polynomial upper(int) -> upper
    org.bouncycastle.pqc.math.linearalgebra.GF2Polynomial lower(int) -> lower
    org.bouncycastle.pqc.math.linearalgebra.GF2Polynomial remainder(org.bouncycastle.pqc.math.linearalgebra.GF2Polynomial) -> remainder
    org.bouncycastle.pqc.math.linearalgebra.GF2Polynomial quotient(org.bouncycastle.pqc.math.linearalgebra.GF2Polynomial) -> quotient
    org.bouncycastle.pqc.math.linearalgebra.GF2Polynomial[] divide(org.bouncycastle.pqc.math.linearalgebra.GF2Polynomial) -> divide
    org.bouncycastle.pqc.math.linearalgebra.GF2Polynomial gcd(org.bouncycastle.pqc.math.linearalgebra.GF2Polynomial) -> gcd
    boolean isIrreducible() -> isIrreducible
    void reduceTrinomial(int,int) -> reduceTrinomial
    void reducePentanomial(int,int[]) -> reducePentanomial
    void reduceN() -> reduceN
    void expandN(int) -> expandN
    void squareThisBitwise() -> squareThisBitwise
    void squareThisPreCalc() -> squareThisPreCalc
    boolean vectorMult(org.bouncycastle.pqc.math.linearalgebra.GF2Polynomial) -> vectorMult
    org.bouncycastle.pqc.math.linearalgebra.GF2Polynomial xor(org.bouncycastle.pqc.math.linearalgebra.GF2Polynomial) -> xor
    void xorThisBy(org.bouncycastle.pqc.math.linearalgebra.GF2Polynomial) -> xorThisBy
    void zeroUnusedBits() -> zeroUnusedBits
    void setBit(int) -> setBit
    int getBit(int) -> getBit
    void resetBit(int) -> resetBit
    void xorBit(int) -> xorBit
    boolean testBit(int) -> testBit
    org.bouncycastle.pqc.math.linearalgebra.GF2Polynomial shiftLeft() -> shiftLeft
    void shiftLeftThis() -> shiftLeftThis
    org.bouncycastle.pqc.math.linearalgebra.GF2Polynomial shiftLeft(int) -> shiftLeft
    void shiftLeftAddThis(org.bouncycastle.pqc.math.linearalgebra.GF2Polynomial,int) -> shiftLeftAddThis
    void shiftBlocksLeft() -> shiftBlocksLeft
    void doShiftBlocksLeft(int) -> doShiftBlocksLeft
    org.bouncycastle.pqc.math.linearalgebra.GF2Polynomial shiftRight() -> shiftRight
    void shiftRightThis() -> shiftRightThis
org.bouncycastle.pqc.math.linearalgebra.GF2Vector -> org.bouncycastle.pqc.math.linearalgebra.GF2Vector:
    int[] v -> v
    org.bouncycastle.pqc.math.linearalgebra.GF2Vector OS2VP(int,byte[]) -> OS2VP
    byte[] getEncoded() -> getEncoded
    int[] getVecArray() -> getVecArray
    int getHammingWeight() -> getHammingWeight
    boolean isZero() -> isZero
    int getBit(int) -> getBit
    void setBit(int) -> setBit
    org.bouncycastle.pqc.math.linearalgebra.Vector add(org.bouncycastle.pqc.math.linearalgebra.Vector) -> add
    org.bouncycastle.pqc.math.linearalgebra.Vector multiply(org.bouncycastle.pqc.math.linearalgebra.Permutation) -> multiply
    org.bouncycastle.pqc.math.linearalgebra.GF2Vector extractVector(int[]) -> extractVector
    org.bouncycastle.pqc.math.linearalgebra.GF2Vector extractLeftVector(int) -> extractLeftVector
    org.bouncycastle.pqc.math.linearalgebra.GF2Vector extractRightVector(int) -> extractRightVector
    org.bouncycastle.pqc.math.linearalgebra.GF2mVector toExtensionFieldVector(org.bouncycastle.pqc.math.linearalgebra.GF2mField) -> toExtensionFieldVector
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
org.bouncycastle.pqc.math.linearalgebra.GF2mField -> org.bouncycastle.pqc.math.linearalgebra.GF2mField:
    int degree -> degree
    int polynomial -> polynomial
    int getDegree() -> getDegree
    int getPolynomial() -> getPolynomial
    byte[] getEncoded() -> getEncoded
    int add(int,int) -> add
    int mult(int,int) -> mult
    int exp(int,int) -> exp
    int inverse(int) -> inverse
    int sqRoot(int) -> sqRoot
    int getRandomElement(java.security.SecureRandom) -> getRandomElement
    int getRandomNonZeroElement() -> getRandomNonZeroElement
    int getRandomNonZeroElement(java.security.SecureRandom) -> getRandomNonZeroElement
    boolean isElementOfThisField(int) -> isElementOfThisField
    java.lang.String elementToStr(int) -> elementToStr
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    java.lang.String polyToString(int) -> polyToString
org.bouncycastle.pqc.math.linearalgebra.GF2mMatrix -> org.bouncycastle.pqc.math.linearalgebra.GF2mMatrix:
    org.bouncycastle.pqc.math.linearalgebra.GF2mField field -> field
    int[][] matrix -> matrix
    byte[] getEncoded() -> getEncoded
    boolean isZero() -> isZero
    org.bouncycastle.pqc.math.linearalgebra.Matrix computeInverse() -> computeInverse
    void swapColumns(int[][],int,int) -> swapColumns
    void multRowWithElementThis(int[],int) -> multRowWithElementThis
    int[] multRowWithElement(int[],int) -> multRowWithElement
    void addToRow(int[],int[]) -> addToRow
    org.bouncycastle.pqc.math.linearalgebra.Matrix rightMultiply(org.bouncycastle.pqc.math.linearalgebra.Matrix) -> rightMultiply
    org.bouncycastle.pqc.math.linearalgebra.Matrix rightMultiply(org.bouncycastle.pqc.math.linearalgebra.Permutation) -> rightMultiply
    org.bouncycastle.pqc.math.linearalgebra.Vector leftMultiply(org.bouncycastle.pqc.math.linearalgebra.Vector) -> leftMultiply
    org.bouncycastle.pqc.math.linearalgebra.Vector rightMultiply(org.bouncycastle.pqc.math.linearalgebra.Vector) -> rightMultiply
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
org.bouncycastle.pqc.math.linearalgebra.GF2mVector -> org.bouncycastle.pqc.math.linearalgebra.GF2mVector:
    org.bouncycastle.pqc.math.linearalgebra.GF2mField field -> field
    int[] vector -> vector
    org.bouncycastle.pqc.math.linearalgebra.GF2mField getField() -> getField
    int[] getIntArrayForm() -> getIntArrayForm
    byte[] getEncoded() -> getEncoded
    boolean isZero() -> isZero
    org.bouncycastle.pqc.math.linearalgebra.Vector add(org.bouncycastle.pqc.math.linearalgebra.Vector) -> add
    org.bouncycastle.pqc.math.linearalgebra.Vector multiply(org.bouncycastle.pqc.math.linearalgebra.Permutation) -> multiply
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
org.bouncycastle.pqc.math.linearalgebra.GF2nElement -> org.bouncycastle.pqc.math.linearalgebra.GF2nElement:
    org.bouncycastle.pqc.math.linearalgebra.GF2nField mField -> mField
    int mDegree -> mDegree
    java.lang.Object clone() -> clone
    void assignZero() -> assignZero
    void assignOne() -> assignOne
    boolean testRightmostBit() -> testRightmostBit
    boolean testBit(int) -> testBit
    org.bouncycastle.pqc.math.linearalgebra.GF2nField getField() -> getField
    org.bouncycastle.pqc.math.linearalgebra.GF2nElement increase() -> increase
    void increaseThis() -> increaseThis
    org.bouncycastle.pqc.math.linearalgebra.GFElement subtract(org.bouncycastle.pqc.math.linearalgebra.GFElement) -> subtract
    void subtractFromThis(org.bouncycastle.pqc.math.linearalgebra.GFElement) -> subtractFromThis
    org.bouncycastle.pqc.math.linearalgebra.GF2nElement square() -> square
    void squareThis() -> squareThis
    org.bouncycastle.pqc.math.linearalgebra.GF2nElement squareRoot() -> squareRoot
    void squareRootThis() -> squareRootThis
    org.bouncycastle.pqc.math.linearalgebra.GF2nElement convert(org.bouncycastle.pqc.math.linearalgebra.GF2nField) -> convert
    int trace() -> trace
    org.bouncycastle.pqc.math.linearalgebra.GF2nElement solveQuadraticEquation() -> solveQuadraticEquation
org.bouncycastle.pqc.math.linearalgebra.GF2nField -> org.bouncycastle.pqc.math.linearalgebra.GF2nField:
    int mDegree -> mDegree
    org.bouncycastle.pqc.math.linearalgebra.GF2Polynomial fieldPolynomial -> fieldPolynomial
    java.util.Vector fields -> fields
    java.util.Vector matrices -> matrices
    int getDegree() -> getDegree
    org.bouncycastle.pqc.math.linearalgebra.GF2Polynomial getFieldPolynomial() -> getFieldPolynomial
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    org.bouncycastle.pqc.math.linearalgebra.GF2nElement getRandomRoot(org.bouncycastle.pqc.math.linearalgebra.GF2Polynomial) -> getRandomRoot
    void computeCOBMatrix(org.bouncycastle.pqc.math.linearalgebra.GF2nField) -> computeCOBMatrix
    void computeFieldPolynomial() -> computeFieldPolynomial
    org.bouncycastle.pqc.math.linearalgebra.GF2Polynomial[] invertMatrix(org.bouncycastle.pqc.math.linearalgebra.GF2Polynomial[]) -> invertMatrix
    org.bouncycastle.pqc.math.linearalgebra.GF2nElement convert(org.bouncycastle.pqc.math.linearalgebra.GF2nElement,org.bouncycastle.pqc.math.linearalgebra.GF2nField) -> convert
org.bouncycastle.pqc.math.linearalgebra.GF2nONBElement -> org.bouncycastle.pqc.math.linearalgebra.GF2nONBElement:
    long[] mBitmask -> mBitmask
    long[] mMaxmask -> mMaxmask
    int[] mIBY64 -> mIBY64
    int MAXLONG -> MAXLONG
    int mLength -> mLength
    int mBit -> mBit
    long[] mPol -> mPol
    java.lang.Object clone() -> clone
    org.bouncycastle.pqc.math.linearalgebra.GF2nONBElement ZERO(org.bouncycastle.pqc.math.linearalgebra.GF2nONBField) -> ZERO
    org.bouncycastle.pqc.math.linearalgebra.GF2nONBElement ONE(org.bouncycastle.pqc.math.linearalgebra.GF2nONBField) -> ONE
    void assignZero() -> assignZero
    void assignOne() -> assignOne
    void assign(java.math.BigInteger) -> assign
    void assign(long[]) -> assign
    void assign(byte[]) -> assign
    boolean isZero() -> isZero
    boolean isOne() -> isOne
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    boolean testRightmostBit() -> testRightmostBit
    boolean testBit(int) -> testBit
    long[] getElement() -> getElement
    long[] getElementReverseOrder() -> getElementReverseOrder
    void reverseOrder() -> reverseOrder
    org.bouncycastle.pqc.math.linearalgebra.GFElement add(org.bouncycastle.pqc.math.linearalgebra.GFElement) -> add
    void addToThis(org.bouncycastle.pqc.math.linearalgebra.GFElement) -> addToThis
    org.bouncycastle.pqc.math.linearalgebra.GF2nElement increase() -> increase
    void increaseThis() -> increaseThis
    org.bouncycastle.pqc.math.linearalgebra.GFElement multiply(org.bouncycastle.pqc.math.linearalgebra.GFElement) -> multiply
    void multiplyThisBy(org.bouncycastle.pqc.math.linearalgebra.GFElement) -> multiplyThisBy
    org.bouncycastle.pqc.math.linearalgebra.GF2nElement square() -> square
    void squareThis() -> squareThis
    org.bouncycastle.pqc.math.linearalgebra.GFElement invert() -> invert
    void invertThis() -> invertThis
    org.bouncycastle.pqc.math.linearalgebra.GF2nElement squareRoot() -> squareRoot
    void squareRootThis() -> squareRootThis
    int trace() -> trace
    org.bouncycastle.pqc.math.linearalgebra.GF2nElement solveQuadraticEquation() -> solveQuadraticEquation
    java.lang.String toString() -> toString
    java.lang.String toString(int) -> toString
    java.math.BigInteger toFlexiBigInt() -> toFlexiBigInt
    byte[] toByteArray() -> toByteArray
org.bouncycastle.pqc.math.linearalgebra.GF2nONBField -> org.bouncycastle.pqc.math.linearalgebra.GF2nONBField:
    int MAXLONG -> MAXLONG
    int mLength -> mLength
    int mBit -> mBit
    int mType -> mType
    int[][] mMult -> mMult
    int getONBLength() -> getONBLength
    int getONBBit() -> getONBBit
    org.bouncycastle.pqc.math.linearalgebra.GF2nElement getRandomRoot(org.bouncycastle.pqc.math.linearalgebra.GF2Polynomial) -> getRandomRoot
    void computeCOBMatrix(org.bouncycastle.pqc.math.linearalgebra.GF2nField) -> computeCOBMatrix
    void computeFieldPolynomial() -> computeFieldPolynomial
    int[][] invMatrix(int[][]) -> invMatrix
    void computeType() -> computeType
    void computeMultMatrix() -> computeMultMatrix
    int elementOfOrder(int,int) -> elementOfOrder
org.bouncycastle.pqc.math.linearalgebra.GF2nPolynomial -> org.bouncycastle.pqc.math.linearalgebra.GF2nPolynomial:
    org.bouncycastle.pqc.math.linearalgebra.GF2nElement[] coeff -> coeff
    int size -> size
    void assignZeroToElements() -> assignZeroToElements
    int size() -> size
    int getDegree() -> getDegree
    void enlarge(int) -> enlarge
    void shrink() -> shrink
    void set(int,org.bouncycastle.pqc.math.linearalgebra.GF2nElement) -> set
    org.bouncycastle.pqc.math.linearalgebra.GF2nElement at(int) -> at
    boolean isZero() -> isZero
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    org.bouncycastle.pqc.math.linearalgebra.GF2nPolynomial add(org.bouncycastle.pqc.math.linearalgebra.GF2nPolynomial) -> add
    org.bouncycastle.pqc.math.linearalgebra.GF2nPolynomial scalarMultiply(org.bouncycastle.pqc.math.linearalgebra.GF2nElement) -> scalarMultiply
    org.bouncycastle.pqc.math.linearalgebra.GF2nPolynomial multiply(org.bouncycastle.pqc.math.linearalgebra.GF2nPolynomial) -> multiply
    org.bouncycastle.pqc.math.linearalgebra.GF2nPolynomial multiplyAndReduce(org.bouncycastle.pqc.math.linearalgebra.GF2nPolynomial,org.bouncycastle.pqc.math.linearalgebra.GF2nPolynomial) -> multiplyAndReduce
    org.bouncycastle.pqc.math.linearalgebra.GF2nPolynomial reduce(org.bouncycastle.pqc.math.linearalgebra.GF2nPolynomial) -> reduce
    void shiftThisLeft(int) -> shiftThisLeft
    org.bouncycastle.pqc.math.linearalgebra.GF2nPolynomial shiftLeft(int) -> shiftLeft
    org.bouncycastle.pqc.math.linearalgebra.GF2nPolynomial[] divide(org.bouncycastle.pqc.math.linearalgebra.GF2nPolynomial) -> divide
    org.bouncycastle.pqc.math.linearalgebra.GF2nPolynomial remainder(org.bouncycastle.pqc.math.linearalgebra.GF2nPolynomial) -> remainder
    org.bouncycastle.pqc.math.linearalgebra.GF2nPolynomial quotient(org.bouncycastle.pqc.math.linearalgebra.GF2nPolynomial) -> quotient
    org.bouncycastle.pqc.math.linearalgebra.GF2nPolynomial gcd(org.bouncycastle.pqc.math.linearalgebra.GF2nPolynomial) -> gcd
org.bouncycastle.pqc.math.linearalgebra.GF2nPolynomialElement -> org.bouncycastle.pqc.math.linearalgebra.GF2nPolynomialElement:
    int[] bitMask -> bitMask
    org.bouncycastle.pqc.math.linearalgebra.GF2Polynomial polynomial -> polynomial
    java.lang.Object clone() -> clone
    void assignZero() -> assignZero
    org.bouncycastle.pqc.math.linearalgebra.GF2nPolynomialElement ZERO(org.bouncycastle.pqc.math.linearalgebra.GF2nPolynomialField) -> ZERO
    org.bouncycastle.pqc.math.linearalgebra.GF2nPolynomialElement ONE(org.bouncycastle.pqc.math.linearalgebra.GF2nPolynomialField) -> ONE
    void assignOne() -> assignOne
    void randomize(java.util.Random) -> randomize
    boolean isZero() -> isZero
    boolean isOne() -> isOne
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    org.bouncycastle.pqc.math.linearalgebra.GF2Polynomial getGF2Polynomial() -> getGF2Polynomial
    boolean testBit(int) -> testBit
    boolean testRightmostBit() -> testRightmostBit
    org.bouncycastle.pqc.math.linearalgebra.GFElement add(org.bouncycastle.pqc.math.linearalgebra.GFElement) -> add
    void addToThis(org.bouncycastle.pqc.math.linearalgebra.GFElement) -> addToThis
    org.bouncycastle.pqc.math.linearalgebra.GF2nElement increase() -> increase
    void increaseThis() -> increaseThis
    org.bouncycastle.pqc.math.linearalgebra.GFElement multiply(org.bouncycastle.pqc.math.linearalgebra.GFElement) -> multiply
    void multiplyThisBy(org.bouncycastle.pqc.math.linearalgebra.GFElement) -> multiplyThisBy
    org.bouncycastle.pqc.math.linearalgebra.GFElement invert() -> invert
    org.bouncycastle.pqc.math.linearalgebra.GF2nPolynomialElement invertEEA() -> invertEEA
    org.bouncycastle.pqc.math.linearalgebra.GF2nPolynomialElement invertSquare() -> invertSquare
    org.bouncycastle.pqc.math.linearalgebra.GF2nPolynomialElement invertMAIA() -> invertMAIA
    org.bouncycastle.pqc.math.linearalgebra.GF2nElement square() -> square
    void squareThis() -> squareThis
    org.bouncycastle.pqc.math.linearalgebra.GF2nPolynomialElement squareMatrix() -> squareMatrix
    void squareThisMatrix() -> squareThisMatrix
    org.bouncycastle.pqc.math.linearalgebra.GF2nPolynomialElement squareBitwise() -> squareBitwise
    void squareThisBitwise() -> squareThisBitwise
    org.bouncycastle.pqc.math.linearalgebra.GF2nPolynomialElement squarePreCalc() -> squarePreCalc
    void squareThisPreCalc() -> squareThisPreCalc
    org.bouncycastle.pqc.math.linearalgebra.GF2nPolynomialElement power(int) -> power
    org.bouncycastle.pqc.math.linearalgebra.GF2nElement squareRoot() -> squareRoot
    void squareRootThis() -> squareRootThis
    org.bouncycastle.pqc.math.linearalgebra.GF2nElement solveQuadraticEquation() -> solveQuadraticEquation
    int trace() -> trace
    org.bouncycastle.pqc.math.linearalgebra.GF2nPolynomialElement halfTrace() -> halfTrace
    void reduceThis() -> reduceThis
    void reduceTrinomialBitwise(int) -> reduceTrinomialBitwise
    void reducePentanomialBitwise(int[]) -> reducePentanomialBitwise
    java.lang.String toString() -> toString
    java.lang.String toString(int) -> toString
    byte[] toByteArray() -> toByteArray
    java.math.BigInteger toFlexiBigInt() -> toFlexiBigInt
org.bouncycastle.pqc.math.linearalgebra.GF2nPolynomialField -> org.bouncycastle.pqc.math.linearalgebra.GF2nPolynomialField:
    org.bouncycastle.pqc.math.linearalgebra.GF2Polynomial[] squaringMatrix -> squaringMatrix
    boolean isTrinomial -> isTrinomial
    boolean isPentanomial -> isPentanomial
    int tc -> tc
    int[] pc -> pc
    boolean isTrinomial() -> isTrinomial
    boolean isPentanomial() -> isPentanomial
    int getTc() -> getTc
    int[] getPc() -> getPc
    org.bouncycastle.pqc.math.linearalgebra.GF2Polynomial getSquaringVector(int) -> getSquaringVector
    org.bouncycastle.pqc.math.linearalgebra.GF2nElement getRandomRoot(org.bouncycastle.pqc.math.linearalgebra.GF2Polynomial) -> getRandomRoot
    void computeCOBMatrix(org.bouncycastle.pqc.math.linearalgebra.GF2nField) -> computeCOBMatrix
    void computeSquaringMatrix() -> computeSquaringMatrix
    void computeFieldPolynomial() -> computeFieldPolynomial
    void computeFieldPolynomial2() -> computeFieldPolynomial2
    boolean testTrinomials() -> testTrinomials
    boolean testPentanomials() -> testPentanomials
    boolean testRandom() -> testRandom
org.bouncycastle.pqc.math.linearalgebra.GFElement -> org.bouncycastle.pqc.math.linearalgebra.GFElement:
    java.lang.Object clone() -> clone
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    boolean isZero() -> isZero
    boolean isOne() -> isOne
    org.bouncycastle.pqc.math.linearalgebra.GFElement add(org.bouncycastle.pqc.math.linearalgebra.GFElement) -> add
    void addToThis(org.bouncycastle.pqc.math.linearalgebra.GFElement) -> addToThis
    org.bouncycastle.pqc.math.linearalgebra.GFElement subtract(org.bouncycastle.pqc.math.linearalgebra.GFElement) -> subtract
    void subtractFromThis(org.bouncycastle.pqc.math.linearalgebra.GFElement) -> subtractFromThis
    org.bouncycastle.pqc.math.linearalgebra.GFElement multiply(org.bouncycastle.pqc.math.linearalgebra.GFElement) -> multiply
    void multiplyThisBy(org.bouncycastle.pqc.math.linearalgebra.GFElement) -> multiplyThisBy
    org.bouncycastle.pqc.math.linearalgebra.GFElement invert() -> invert
    java.math.BigInteger toFlexiBigInt() -> toFlexiBigInt
    byte[] toByteArray() -> toByteArray
    java.lang.String toString() -> toString
    java.lang.String toString(int) -> toString
org.bouncycastle.pqc.math.linearalgebra.GoppaCode -> org.bouncycastle.pqc.math.linearalgebra.GoppaCode:
    org.bouncycastle.pqc.math.linearalgebra.GF2Matrix createCanonicalCheckMatrix(org.bouncycastle.pqc.math.linearalgebra.GF2mField,org.bouncycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM) -> createCanonicalCheckMatrix
    org.bouncycastle.pqc.math.linearalgebra.GoppaCode$MaMaPe computeSystematicForm(org.bouncycastle.pqc.math.linearalgebra.GF2Matrix,java.security.SecureRandom) -> computeSystematicForm
    org.bouncycastle.pqc.math.linearalgebra.GF2Vector syndromeDecode(org.bouncycastle.pqc.math.linearalgebra.GF2Vector,org.bouncycastle.pqc.math.linearalgebra.GF2mField,org.bouncycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM,org.bouncycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM[]) -> syndromeDecode
org.bouncycastle.pqc.math.linearalgebra.GoppaCode$MaMaPe -> org.bouncycastle.pqc.math.linearalgebra.GoppaCode$MaMaPe:
    org.bouncycastle.pqc.math.linearalgebra.GF2Matrix s -> s
    org.bouncycastle.pqc.math.linearalgebra.GF2Matrix h -> h
    org.bouncycastle.pqc.math.linearalgebra.Permutation p -> p
    org.bouncycastle.pqc.math.linearalgebra.GF2Matrix getFirstMatrix() -> getFirstMatrix
    org.bouncycastle.pqc.math.linearalgebra.GF2Matrix getSecondMatrix() -> getSecondMatrix
    org.bouncycastle.pqc.math.linearalgebra.Permutation getPermutation() -> getPermutation
org.bouncycastle.pqc.math.linearalgebra.GoppaCode$MatrixSet -> org.bouncycastle.pqc.math.linearalgebra.GoppaCode$MatrixSet:
    org.bouncycastle.pqc.math.linearalgebra.GF2Matrix g -> g
    int[] setJ -> setJ
    org.bouncycastle.pqc.math.linearalgebra.GF2Matrix getG() -> getG
    int[] getSetJ() -> getSetJ
org.bouncycastle.pqc.math.linearalgebra.IntUtils -> org.bouncycastle.pqc.math.linearalgebra.IntUtils:
    boolean equals(int[],int[]) -> equals
    int[] clone(int[]) -> clone
    void fill(int[],int) -> fill
    void quicksort(int[]) -> quicksort
    void quicksort(int[],int,int) -> quicksort
    int partition(int[],int,int,int) -> partition
    int[] subArray(int[],int,int) -> subArray
    java.math.BigInteger[] toFlexiBigIntArray(int[]) -> toFlexiBigIntArray
    java.lang.String toString(int[]) -> toString
    java.lang.String toHexString(int[]) -> toHexString
org.bouncycastle.pqc.math.linearalgebra.IntegerFunctions -> org.bouncycastle.pqc.math.linearalgebra.IntegerFunctions:
    java.math.BigInteger ZERO -> ZERO
    java.math.BigInteger ONE -> ONE
    java.math.BigInteger TWO -> TWO
    java.math.BigInteger FOUR -> FOUR
    int[] SMALL_PRIMES -> SMALL_PRIMES
    long SMALL_PRIME_PRODUCT -> SMALL_PRIME_PRODUCT
    java.security.SecureRandom sr -> sr
    int[] jacobiTable -> jacobiTable
    int jacobi(java.math.BigInteger,java.math.BigInteger) -> jacobi
    java.math.BigInteger ressol(java.math.BigInteger,java.math.BigInteger) -> ressol
    int gcd(int,int) -> gcd
    int[] extGCD(int,int) -> extGCD
    java.math.BigInteger divideAndRound(java.math.BigInteger,java.math.BigInteger) -> divideAndRound
    java.math.BigInteger[] divideAndRound(java.math.BigInteger[],java.math.BigInteger) -> divideAndRound
    int ceilLog(java.math.BigInteger) -> ceilLog
    int ceilLog(int) -> ceilLog
    int ceilLog256(int) -> ceilLog256
    int ceilLog256(long) -> ceilLog256
    int floorLog(java.math.BigInteger) -> floorLog
    int floorLog(int) -> floorLog
    int maxPower(int) -> maxPower
    int bitCount(int) -> bitCount
    int order(int,int) -> order
    java.math.BigInteger reduceInto(java.math.BigInteger,java.math.BigInteger,java.math.BigInteger) -> reduceInto
    int pow(int,int) -> pow
    long pow(long,int) -> pow
    int modPow(int,int,int) -> modPow
    java.math.BigInteger[] extgcd(java.math.BigInteger,java.math.BigInteger) -> extgcd
    java.math.BigInteger leastCommonMultiple(java.math.BigInteger[]) -> leastCommonMultiple
    long mod(long,long) -> mod
    int modInverse(int,int) -> modInverse
    long modInverse(long,long) -> modInverse
    int isPower(int,int) -> isPower
    int leastDiv(int) -> leastDiv
    boolean isPrime(int) -> isPrime
    boolean passesSmallPrimeTest(java.math.BigInteger) -> passesSmallPrimeTest
    int nextSmallerPrime(int) -> nextSmallerPrime
    java.math.BigInteger nextProbablePrime(java.math.BigInteger,int) -> nextProbablePrime
    java.math.BigInteger nextProbablePrime(java.math.BigInteger) -> nextProbablePrime
    java.math.BigInteger nextPrime(long) -> nextPrime
    java.math.BigInteger binomial(int,int) -> binomial
    java.math.BigInteger randomize(java.math.BigInteger) -> randomize
    java.math.BigInteger randomize(java.math.BigInteger,java.security.SecureRandom) -> randomize
    java.math.BigInteger squareRoot(java.math.BigInteger) -> squareRoot
    float intRoot(int,int) -> intRoot
    float floatLog(float) -> floatLog
    float floatPow(float,int) -> floatPow
    double log(double) -> log
    double log(long) -> log
    double logBKM(double) -> logBKM
    boolean isIncreasing(int[]) -> isIncreasing
    byte[] integerToOctets(java.math.BigInteger) -> integerToOctets
    java.math.BigInteger octetsToInteger(byte[],int,int) -> octetsToInteger
    java.math.BigInteger octetsToInteger(byte[]) -> octetsToInteger
    void main(java.lang.String[]) -> main
org.bouncycastle.pqc.math.linearalgebra.LittleEndianConversions -> org.bouncycastle.pqc.math.linearalgebra.LittleEndianConversions:
    int OS2IP(byte[]) -> OS2IP
    int OS2IP(byte[],int) -> OS2IP
    int OS2IP(byte[],int,int) -> OS2IP
    long OS2LIP(byte[],int) -> OS2LIP
    byte[] I2OSP(int) -> I2OSP
    void I2OSP(int,byte[],int) -> I2OSP
    void I2OSP(int,byte[],int,int) -> I2OSP
    byte[] I2OSP(long) -> I2OSP
    void I2OSP(long,byte[],int) -> I2OSP
    byte[] toByteArray(int[],int) -> toByteArray
    int[] toIntArray(byte[]) -> toIntArray
org.bouncycastle.pqc.math.linearalgebra.Matrix -> org.bouncycastle.pqc.math.linearalgebra.Matrix:
    int numRows -> numRows
    int numColumns -> numColumns
    char MATRIX_TYPE_ZERO -> MATRIX_TYPE_ZERO
    char MATRIX_TYPE_UNIT -> MATRIX_TYPE_UNIT
    char MATRIX_TYPE_RANDOM_LT -> MATRIX_TYPE_RANDOM_LT
    char MATRIX_TYPE_RANDOM_UT -> MATRIX_TYPE_RANDOM_UT
    char MATRIX_TYPE_RANDOM_REGULAR -> MATRIX_TYPE_RANDOM_REGULAR
    int getNumRows() -> getNumRows
    int getNumColumns() -> getNumColumns
    byte[] getEncoded() -> getEncoded
    org.bouncycastle.pqc.math.linearalgebra.Matrix computeInverse() -> computeInverse
    boolean isZero() -> isZero
    org.bouncycastle.pqc.math.linearalgebra.Matrix rightMultiply(org.bouncycastle.pqc.math.linearalgebra.Matrix) -> rightMultiply
    org.bouncycastle.pqc.math.linearalgebra.Matrix rightMultiply(org.bouncycastle.pqc.math.linearalgebra.Permutation) -> rightMultiply
    org.bouncycastle.pqc.math.linearalgebra.Vector leftMultiply(org.bouncycastle.pqc.math.linearalgebra.Vector) -> leftMultiply
    org.bouncycastle.pqc.math.linearalgebra.Vector rightMultiply(org.bouncycastle.pqc.math.linearalgebra.Vector) -> rightMultiply
    java.lang.String toString() -> toString
org.bouncycastle.pqc.math.linearalgebra.Permutation -> org.bouncycastle.pqc.math.linearalgebra.Permutation:
    int[] perm -> perm
    byte[] getEncoded() -> getEncoded
    int[] getVector() -> getVector
    org.bouncycastle.pqc.math.linearalgebra.Permutation computeInverse() -> computeInverse
    org.bouncycastle.pqc.math.linearalgebra.Permutation rightMultiply(org.bouncycastle.pqc.math.linearalgebra.Permutation) -> rightMultiply
    boolean equals(java.lang.Object) -> equals
    java.lang.String toString() -> toString
    int hashCode() -> hashCode
    boolean isPermutation(int[]) -> isPermutation
org.bouncycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM -> org.bouncycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM:
    org.bouncycastle.pqc.math.linearalgebra.GF2mField field -> field
    int degree -> degree
    int[] coefficients -> coefficients
    char RANDOM_IRREDUCIBLE_POLYNOMIAL -> RANDOM_IRREDUCIBLE_POLYNOMIAL
    int[] createRandomIrreduciblePolynomial(int,java.security.SecureRandom) -> createRandomIrreduciblePolynomial
    int getDegree() -> getDegree
    int getHeadCoefficient() -> getHeadCoefficient
    int headCoefficient(int[]) -> headCoefficient
    int getCoefficient(int) -> getCoefficient
    byte[] getEncoded() -> getEncoded
    int evaluateAt(int) -> evaluateAt
    org.bouncycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM add(org.bouncycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM) -> add
    void addToThis(org.bouncycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM) -> addToThis
    int[] add(int[],int[]) -> add
    org.bouncycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM addMonomial(int) -> addMonomial
    org.bouncycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM multWithElement(int) -> multWithElement
    void multThisWithElement(int) -> multThisWithElement
    int[] multWithElement(int[],int) -> multWithElement
    org.bouncycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM multWithMonomial(int) -> multWithMonomial
    int[] multWithMonomial(int[],int) -> multWithMonomial
    org.bouncycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM[] div(org.bouncycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM) -> div
    int[][] div(int[],int[]) -> div
    org.bouncycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM gcd(org.bouncycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM) -> gcd
    int[] gcd(int[],int[]) -> gcd
    org.bouncycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM multiply(org.bouncycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM) -> multiply
    int[] multiply(int[],int[]) -> multiply
    boolean isIrreducible(int[]) -> isIrreducible
    org.bouncycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM mod(org.bouncycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM) -> mod
    int[] mod(int[],int[]) -> mod
    org.bouncycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM modMultiply(org.bouncycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM,org.bouncycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM) -> modMultiply
    org.bouncycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM modSquareMatrix(org.bouncycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM[]) -> modSquareMatrix
    int[] modMultiply(int[],int[],int[]) -> modMultiply
    org.bouncycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM modSquareRoot(org.bouncycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM) -> modSquareRoot
    org.bouncycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM modSquareRootMatrix(org.bouncycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM[]) -> modSquareRootMatrix
    org.bouncycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM modDiv(org.bouncycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM,org.bouncycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM) -> modDiv
    int[] modDiv(int[],int[],int[]) -> modDiv
    org.bouncycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM modInverse(org.bouncycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM) -> modInverse
    org.bouncycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM[] modPolynomialToFracton(org.bouncycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM) -> modPolynomialToFracton
    boolean equals(java.lang.Object) -> equals
    boolean isEqual(int[],int[]) -> isEqual
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    void computeDegree() -> computeDegree
    int computeDegree(int[]) -> computeDegree
    int[] normalForm(int[]) -> normalForm
org.bouncycastle.pqc.math.linearalgebra.PolynomialRingGF2 -> org.bouncycastle.pqc.math.linearalgebra.PolynomialRingGF2:
    int add(int,int) -> add
    long multiply(int,int) -> multiply
    int modMultiply(int,int,int) -> modMultiply
    int degree(int) -> degree
    int degree(long) -> degree
    int remainder(int,int) -> remainder
    int rest(long,int) -> rest
    int gcd(int,int) -> gcd
    boolean isIrreducible(int) -> isIrreducible
    int getIrreduciblePolynomial(int) -> getIrreduciblePolynomial
org.bouncycastle.pqc.math.linearalgebra.PolynomialRingGF2m -> org.bouncycastle.pqc.math.linearalgebra.PolynomialRingGF2m:
    org.bouncycastle.pqc.math.linearalgebra.GF2mField field -> field
    org.bouncycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM p -> p
    org.bouncycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM[] sqMatrix -> sqMatrix
    org.bouncycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM[] sqRootMatrix -> sqRootMatrix
    org.bouncycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM[] getSquaringMatrix() -> getSquaringMatrix
    org.bouncycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM[] getSquareRootMatrix() -> getSquareRootMatrix
    void computeSquaringMatrix() -> computeSquaringMatrix
    void computeSquareRootMatrix() -> computeSquareRootMatrix
    void swapColumns(org.bouncycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM[],int,int) -> swapColumns
org.bouncycastle.pqc.math.linearalgebra.RandUtils -> org.bouncycastle.pqc.math.linearalgebra.RandUtils:
    int nextInt(java.security.SecureRandom,int) -> nextInt
org.bouncycastle.pqc.math.linearalgebra.Vector -> org.bouncycastle.pqc.math.linearalgebra.Vector:
    int length -> length
    int getLength() -> getLength
    byte[] getEncoded() -> getEncoded
    boolean isZero() -> isZero
    org.bouncycastle.pqc.math.linearalgebra.Vector add(org.bouncycastle.pqc.math.linearalgebra.Vector) -> add
    org.bouncycastle.pqc.math.linearalgebra.Vector multiply(org.bouncycastle.pqc.math.linearalgebra.Permutation) -> multiply
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
org.bouncycastle.pqc.math.ntru.euclid.BigIntEuclidean -> org.bouncycastle.pqc.math.ntru.euclid.BigIntEuclidean:
    java.math.BigInteger x -> x
    java.math.BigInteger y -> y
    java.math.BigInteger gcd -> gcd
    org.bouncycastle.pqc.math.ntru.euclid.BigIntEuclidean calculate(java.math.BigInteger,java.math.BigInteger) -> calculate
org.bouncycastle.pqc.math.ntru.euclid.IntEuclidean -> org.bouncycastle.pqc.math.ntru.euclid.IntEuclidean:
    int x -> x
    int y -> y
    int gcd -> gcd
    org.bouncycastle.pqc.math.ntru.euclid.IntEuclidean calculate(int,int) -> calculate
org.bouncycastle.pqc.math.ntru.polynomial.BigDecimalPolynomial -> org.bouncycastle.pqc.math.ntru.polynomial.BigDecimalPolynomial:
    java.math.BigDecimal ZERO -> ZERO
    java.math.BigDecimal ONE_HALF -> ONE_HALF
    java.math.BigDecimal[] coeffs -> coeffs
    void halve() -> halve
    org.bouncycastle.pqc.math.ntru.polynomial.BigDecimalPolynomial mult(org.bouncycastle.pqc.math.ntru.polynomial.BigIntPolynomial) -> mult
    org.bouncycastle.pqc.math.ntru.polynomial.BigDecimalPolynomial mult(org.bouncycastle.pqc.math.ntru.polynomial.BigDecimalPolynomial) -> mult
    org.bouncycastle.pqc.math.ntru.polynomial.BigDecimalPolynomial multRecursive(org.bouncycastle.pqc.math.ntru.polynomial.BigDecimalPolynomial) -> multRecursive
    void add(org.bouncycastle.pqc.math.ntru.polynomial.BigDecimalPolynomial) -> add
    void sub(org.bouncycastle.pqc.math.ntru.polynomial.BigDecimalPolynomial) -> sub
    org.bouncycastle.pqc.math.ntru.polynomial.BigIntPolynomial round() -> round
    java.lang.Object clone() -> clone
    java.math.BigDecimal[] copyOf(java.math.BigDecimal[],int) -> copyOf
    java.math.BigDecimal[] copyOfRange(java.math.BigDecimal[],int,int) -> copyOfRange
    java.math.BigDecimal[] getCoeffs() -> getCoeffs
org.bouncycastle.pqc.math.ntru.polynomial.BigIntPolynomial -> org.bouncycastle.pqc.math.ntru.polynomial.BigIntPolynomial:
    double LOG_10_2 -> LOG_10_2
    java.math.BigInteger[] coeffs -> coeffs
    org.bouncycastle.pqc.math.ntru.polynomial.BigIntPolynomial generateRandomSmall(int,int,int) -> generateRandomSmall
    org.bouncycastle.pqc.math.ntru.polynomial.BigIntPolynomial mult(org.bouncycastle.pqc.math.ntru.polynomial.BigIntPolynomial) -> mult
    org.bouncycastle.pqc.math.ntru.polynomial.BigIntPolynomial multRecursive(org.bouncycastle.pqc.math.ntru.polynomial.BigIntPolynomial) -> multRecursive
    void add(org.bouncycastle.pqc.math.ntru.polynomial.BigIntPolynomial,java.math.BigInteger) -> add
    void add(org.bouncycastle.pqc.math.ntru.polynomial.BigIntPolynomial) -> add
    void sub(org.bouncycastle.pqc.math.ntru.polynomial.BigIntPolynomial) -> sub
    void mult(java.math.BigInteger) -> mult
    void mult(int) -> mult
    void div(java.math.BigInteger) -> div
    org.bouncycastle.pqc.math.ntru.polynomial.BigDecimalPolynomial div(java.math.BigDecimal,int) -> div
    int getMaxCoeffLength() -> getMaxCoeffLength
    java.math.BigInteger maxCoeffAbs() -> maxCoeffAbs
    void mod(java.math.BigInteger) -> mod
    java.math.BigInteger sumCoeffs() -> sumCoeffs
    java.lang.Object clone() -> clone
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    java.math.BigInteger[] getCoeffs() -> getCoeffs
org.bouncycastle.pqc.math.ntru.polynomial.Constants -> org.bouncycastle.pqc.math.ntru.polynomial.Constants:
    java.math.BigInteger BIGINT_ZERO -> BIGINT_ZERO
    java.math.BigInteger BIGINT_ONE -> BIGINT_ONE
    java.math.BigDecimal BIGDEC_ONE -> BIGDEC_ONE
org.bouncycastle.pqc.math.ntru.polynomial.DenseTernaryPolynomial -> org.bouncycastle.pqc.math.ntru.polynomial.DenseTernaryPolynomial:
    void checkTernarity() -> checkTernarity
    org.bouncycastle.pqc.math.ntru.polynomial.DenseTernaryPolynomial generateRandom(int,int,int,java.security.SecureRandom) -> generateRandom
    org.bouncycastle.pqc.math.ntru.polynomial.DenseTernaryPolynomial generateRandom(int,java.security.SecureRandom) -> generateRandom
    org.bouncycastle.pqc.math.ntru.polynomial.IntegerPolynomial mult(org.bouncycastle.pqc.math.ntru.polynomial.IntegerPolynomial,int) -> mult
    int[] getOnes() -> getOnes
    int[] getNegOnes() -> getNegOnes
    int size() -> size
org.bouncycastle.pqc.math.ntru.polynomial.IntegerPolynomial -> org.bouncycastle.pqc.math.ntru.polynomial.IntegerPolynomial:
    int NUM_EQUAL_RESULTANTS -> NUM_EQUAL_RESULTANTS
    int[] PRIMES -> PRIMES
    java.util.List BIGINT_PRIMES -> BIGINT_PRIMES
    int[] coeffs -> coeffs
    org.bouncycastle.pqc.math.ntru.polynomial.IntegerPolynomial fromBinary3Sves(byte[],int) -> fromBinary3Sves
    org.bouncycastle.pqc.math.ntru.polynomial.IntegerPolynomial fromBinary3Tight(byte[],int) -> fromBinary3Tight
    org.bouncycastle.pqc.math.ntru.polynomial.IntegerPolynomial fromBinary3Tight(java.io.InputStream,int) -> fromBinary3Tight
    org.bouncycastle.pqc.math.ntru.polynomial.IntegerPolynomial fromBinary(byte[],int,int) -> fromBinary
    org.bouncycastle.pqc.math.ntru.polynomial.IntegerPolynomial fromBinary(java.io.InputStream,int,int) -> fromBinary
    byte[] toBinary3Sves() -> toBinary3Sves
    byte[] toBinary3Tight() -> toBinary3Tight
    byte[] toBinary(int) -> toBinary
    org.bouncycastle.pqc.math.ntru.polynomial.IntegerPolynomial mult(org.bouncycastle.pqc.math.ntru.polynomial.IntegerPolynomial,int) -> mult
    org.bouncycastle.pqc.math.ntru.polynomial.IntegerPolynomial mult(org.bouncycastle.pqc.math.ntru.polynomial.IntegerPolynomial) -> mult
    org.bouncycastle.pqc.math.ntru.polynomial.BigIntPolynomial mult(org.bouncycastle.pqc.math.ntru.polynomial.BigIntPolynomial) -> mult
    org.bouncycastle.pqc.math.ntru.polynomial.IntegerPolynomial multRecursive(org.bouncycastle.pqc.math.ntru.polynomial.IntegerPolynomial) -> multRecursive
    org.bouncycastle.pqc.math.ntru.polynomial.IntegerPolynomial invertFq(int) -> invertFq
    org.bouncycastle.pqc.math.ntru.polynomial.IntegerPolynomial mod2ToModq(org.bouncycastle.pqc.math.ntru.polynomial.IntegerPolynomial,int) -> mod2ToModq
    org.bouncycastle.pqc.math.ntru.polynomial.IntegerPolynomial invertF3() -> invertF3
    org.bouncycastle.pqc.math.ntru.polynomial.Resultant resultant() -> resultant
    org.bouncycastle.pqc.math.ntru.polynomial.Resultant resultantMultiThread() -> resultantMultiThread
    org.bouncycastle.pqc.math.ntru.polynomial.ModularResultant resultant(int) -> resultant
    void multShiftSub(org.bouncycastle.pqc.math.ntru.polynomial.IntegerPolynomial,int,int,int) -> multShiftSub
    java.math.BigInteger squareSum() -> squareSum
    int degree() -> degree
    void add(org.bouncycastle.pqc.math.ntru.polynomial.IntegerPolynomial,int) -> add
    void add(org.bouncycastle.pqc.math.ntru.polynomial.IntegerPolynomial) -> add
    void sub(org.bouncycastle.pqc.math.ntru.polynomial.IntegerPolynomial,int) -> sub
    void sub(org.bouncycastle.pqc.math.ntru.polynomial.IntegerPolynomial) -> sub
    void sub(int) -> sub
    void mult(int) -> mult
    void mult2(int) -> mult2
    void mult3(int) -> mult3
    void div(int) -> div
    void mod3() -> mod3
    void modPositive(int) -> modPositive
    void modCenter(int) -> modCenter
    void mod(int) -> mod
    void ensurePositive(int) -> ensurePositive
    long centeredNormSq(int) -> centeredNormSq
    void shiftGap(int) -> shiftGap
    void sort(int[]) -> sort
    void center0(int) -> center0
    int sumCoeffs() -> sumCoeffs
    boolean equalsZero() -> equalsZero
    boolean equalsOne() -> equalsOne
    boolean equalsAbsOne() -> equalsAbsOne
    int count(int) -> count
    void rotate1() -> rotate1
    void clear() -> clear
    org.bouncycastle.pqc.math.ntru.polynomial.IntegerPolynomial toIntegerPolynomial() -> toIntegerPolynomial
    java.lang.Object clone() -> clone
    boolean equals(java.lang.Object) -> equals
org.bouncycastle.pqc.math.ntru.polynomial.IntegerPolynomial$1 -> org.bouncycastle.pqc.math.ntru.polynomial.IntegerPolynomial$1:
org.bouncycastle.pqc.math.ntru.polynomial.IntegerPolynomial$CombineTask -> org.bouncycastle.pqc.math.ntru.polynomial.IntegerPolynomial$CombineTask:
    org.bouncycastle.pqc.math.ntru.polynomial.ModularResultant modRes1 -> modRes1
    org.bouncycastle.pqc.math.ntru.polynomial.ModularResultant modRes2 -> modRes2
    org.bouncycastle.pqc.math.ntru.polynomial.IntegerPolynomial this$0 -> this$0
    org.bouncycastle.pqc.math.ntru.polynomial.ModularResultant call() -> call
    java.lang.Object call() -> call
org.bouncycastle.pqc.math.ntru.polynomial.IntegerPolynomial$ModResultantTask -> org.bouncycastle.pqc.math.ntru.polynomial.IntegerPolynomial$ModResultantTask:
    int modulus -> modulus
    org.bouncycastle.pqc.math.ntru.polynomial.IntegerPolynomial this$0 -> this$0
    org.bouncycastle.pqc.math.ntru.polynomial.ModularResultant call() -> call
    java.lang.Object call() -> call
org.bouncycastle.pqc.math.ntru.polynomial.LongPolynomial2 -> org.bouncycastle.pqc.math.ntru.polynomial.LongPolynomial2:
    long[] coeffs -> coeffs
    int numCoeffs -> numCoeffs
    org.bouncycastle.pqc.math.ntru.polynomial.LongPolynomial2 mult(org.bouncycastle.pqc.math.ntru.polynomial.LongPolynomial2) -> mult
    org.bouncycastle.pqc.math.ntru.polynomial.IntegerPolynomial toIntegerPolynomial() -> toIntegerPolynomial
    org.bouncycastle.pqc.math.ntru.polynomial.LongPolynomial2 multRecursive(org.bouncycastle.pqc.math.ntru.polynomial.LongPolynomial2) -> multRecursive
    void add(org.bouncycastle.pqc.math.ntru.polynomial.LongPolynomial2) -> add
    void sub(org.bouncycastle.pqc.math.ntru.polynomial.LongPolynomial2) -> sub
    void subAnd(org.bouncycastle.pqc.math.ntru.polynomial.LongPolynomial2,int) -> subAnd
    void mult2And(int) -> mult2And
    java.lang.Object clone() -> clone
    boolean equals(java.lang.Object) -> equals
org.bouncycastle.pqc.math.ntru.polynomial.LongPolynomial5 -> org.bouncycastle.pqc.math.ntru.polynomial.LongPolynomial5:
    long[] coeffs -> coeffs
    int numCoeffs -> numCoeffs
    org.bouncycastle.pqc.math.ntru.polynomial.LongPolynomial5 mult(org.bouncycastle.pqc.math.ntru.polynomial.TernaryPolynomial) -> mult
    org.bouncycastle.pqc.math.ntru.polynomial.IntegerPolynomial toIntegerPolynomial() -> toIntegerPolynomial
org.bouncycastle.pqc.math.ntru.polynomial.ModularResultant -> org.bouncycastle.pqc.math.ntru.polynomial.ModularResultant:
    java.math.BigInteger modulus -> modulus
    org.bouncycastle.pqc.math.ntru.polynomial.ModularResultant combineRho(org.bouncycastle.pqc.math.ntru.polynomial.ModularResultant,org.bouncycastle.pqc.math.ntru.polynomial.ModularResultant) -> combineRho
org.bouncycastle.pqc.math.ntru.polynomial.Polynomial -> org.bouncycastle.pqc.math.ntru.polynomial.Polynomial:
    org.bouncycastle.pqc.math.ntru.polynomial.IntegerPolynomial mult(org.bouncycastle.pqc.math.ntru.polynomial.IntegerPolynomial) -> mult
    org.bouncycastle.pqc.math.ntru.polynomial.IntegerPolynomial mult(org.bouncycastle.pqc.math.ntru.polynomial.IntegerPolynomial,int) -> mult
    org.bouncycastle.pqc.math.ntru.polynomial.IntegerPolynomial toIntegerPolynomial() -> toIntegerPolynomial
    org.bouncycastle.pqc.math.ntru.polynomial.BigIntPolynomial mult(org.bouncycastle.pqc.math.ntru.polynomial.BigIntPolynomial) -> mult
org.bouncycastle.pqc.math.ntru.polynomial.ProductFormPolynomial -> org.bouncycastle.pqc.math.ntru.polynomial.ProductFormPolynomial:
    org.bouncycastle.pqc.math.ntru.polynomial.SparseTernaryPolynomial f1 -> f1
    org.bouncycastle.pqc.math.ntru.polynomial.SparseTernaryPolynomial f2 -> f2
    org.bouncycastle.pqc.math.ntru.polynomial.SparseTernaryPolynomial f3 -> f3
    org.bouncycastle.pqc.math.ntru.polynomial.ProductFormPolynomial generateRandom(int,int,int,int,int,java.security.SecureRandom) -> generateRandom
    org.bouncycastle.pqc.math.ntru.polynomial.ProductFormPolynomial fromBinary(byte[],int,int,int,int,int) -> fromBinary
    org.bouncycastle.pqc.math.ntru.polynomial.ProductFormPolynomial fromBinary(java.io.InputStream,int,int,int,int,int) -> fromBinary
    byte[] toBinary() -> toBinary
    org.bouncycastle.pqc.math.ntru.polynomial.IntegerPolynomial mult(org.bouncycastle.pqc.math.ntru.polynomial.IntegerPolynomial) -> mult
    org.bouncycastle.pqc.math.ntru.polynomial.BigIntPolynomial mult(org.bouncycastle.pqc.math.ntru.polynomial.BigIntPolynomial) -> mult
    org.bouncycastle.pqc.math.ntru.polynomial.IntegerPolynomial toIntegerPolynomial() -> toIntegerPolynomial
    org.bouncycastle.pqc.math.ntru.polynomial.IntegerPolynomial mult(org.bouncycastle.pqc.math.ntru.polynomial.IntegerPolynomial,int) -> mult
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
org.bouncycastle.pqc.math.ntru.polynomial.Resultant -> org.bouncycastle.pqc.math.ntru.polynomial.Resultant:
    org.bouncycastle.pqc.math.ntru.polynomial.BigIntPolynomial rho -> rho
    java.math.BigInteger res -> res
org.bouncycastle.pqc.math.ntru.polynomial.SparseTernaryPolynomial -> org.bouncycastle.pqc.math.ntru.polynomial.SparseTernaryPolynomial:
    int BITS_PER_INDEX -> BITS_PER_INDEX
    int N -> N
    int[] ones -> ones
    int[] negOnes -> negOnes
    org.bouncycastle.pqc.math.ntru.polynomial.SparseTernaryPolynomial fromBinary(java.io.InputStream,int,int,int) -> fromBinary
    org.bouncycastle.pqc.math.ntru.polynomial.SparseTernaryPolynomial generateRandom(int,int,int,java.security.SecureRandom) -> generateRandom
    org.bouncycastle.pqc.math.ntru.polynomial.IntegerPolynomial mult(org.bouncycastle.pqc.math.ntru.polynomial.IntegerPolynomial) -> mult
    org.bouncycastle.pqc.math.ntru.polynomial.IntegerPolynomial mult(org.bouncycastle.pqc.math.ntru.polynomial.IntegerPolynomial,int) -> mult
    org.bouncycastle.pqc.math.ntru.polynomial.BigIntPolynomial mult(org.bouncycastle.pqc.math.ntru.polynomial.BigIntPolynomial) -> mult
    int[] getOnes() -> getOnes
    int[] getNegOnes() -> getNegOnes
    byte[] toBinary() -> toBinary
    org.bouncycastle.pqc.math.ntru.polynomial.IntegerPolynomial toIntegerPolynomial() -> toIntegerPolynomial
    int size() -> size
    void clear() -> clear
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
org.bouncycastle.pqc.math.ntru.polynomial.TernaryPolynomial -> org.bouncycastle.pqc.math.ntru.polynomial.TernaryPolynomial:
    org.bouncycastle.pqc.math.ntru.polynomial.IntegerPolynomial mult(org.bouncycastle.pqc.math.ntru.polynomial.IntegerPolynomial) -> mult
    int[] getOnes() -> getOnes
    int[] getNegOnes() -> getNegOnes
    int size() -> size
    void clear() -> clear
org.bouncycastle.pqc.math.ntru.util.ArrayEncoder -> org.bouncycastle.pqc.math.ntru.util.ArrayEncoder:
    int[] COEFF1_TABLE -> COEFF1_TABLE
    int[] COEFF2_TABLE -> COEFF2_TABLE
    int[] BIT1_TABLE -> BIT1_TABLE
    int[] BIT2_TABLE -> BIT2_TABLE
    int[] BIT3_TABLE -> BIT3_TABLE
    byte[] encodeModQ(int[],int) -> encodeModQ
    int[] decodeModQ(byte[],int,int) -> decodeModQ
    int[] decodeModQ(java.io.InputStream,int,int) -> decodeModQ
    int[] decodeMod3Sves(byte[],int) -> decodeMod3Sves
    byte[] encodeMod3Sves(int[]) -> encodeMod3Sves
    byte[] encodeMod3Tight(int[]) -> encodeMod3Tight
    int[] decodeMod3Tight(byte[],int) -> decodeMod3Tight
    int[] decodeMod3Tight(java.io.InputStream,int) -> decodeMod3Tight
    int getBit(byte[],int) -> getBit
org.bouncycastle.pqc.math.ntru.util.Util -> org.bouncycastle.pqc.math.ntru.util.Util:
    boolean IS_64_BITNESS_KNOWN -> IS_64_BITNESS_KNOWN
    boolean IS_64_BIT_JVM -> IS_64_BIT_JVM
    int invert(int,int) -> invert
    int pow(int,int,int) -> pow
    long pow(long,int,long) -> pow
    org.bouncycastle.pqc.math.ntru.polynomial.TernaryPolynomial generateRandomTernary(int,int,int,boolean,java.security.SecureRandom) -> generateRandomTernary
    int[] generateRandomTernary(int,int,int,java.security.SecureRandom) -> generateRandomTernary
    boolean is64BitJVM() -> is64BitJVM
    byte[] readFullLength(java.io.InputStream,int) -> readFullLength
org.bouncycastle.util.Arrays -> org.bouncycastle.util.Arrays:
    boolean areEqual(boolean[],boolean[]) -> areEqual
    boolean areEqual(char[],char[]) -> areEqual
    boolean areEqual(byte[],byte[]) -> areEqual
    boolean constantTimeAreEqual(byte[],byte[]) -> constantTimeAreEqual
    boolean areEqual(int[],int[]) -> areEqual
    boolean areEqual(long[],long[]) -> areEqual
    boolean areEqual(java.lang.Object[],java.lang.Object[]) -> areEqual
    boolean contains(short[],short) -> contains
    boolean contains(int[],int) -> contains
    void fill(byte[],byte) -> fill
    void fill(char[],char) -> fill
    void fill(long[],long) -> fill
    void fill(short[],short) -> fill
    void fill(int[],int) -> fill
    int hashCode(byte[]) -> hashCode
    int hashCode(byte[],int,int) -> hashCode
    int hashCode(char[]) -> hashCode
    int hashCode(int[][]) -> hashCode
    int hashCode(int[]) -> hashCode
    int hashCode(int[],int,int) -> hashCode
    int hashCode(short[][][]) -> hashCode
    int hashCode(short[][]) -> hashCode
    int hashCode(short[]) -> hashCode
    int hashCode(java.lang.Object[]) -> hashCode
    byte[] clone(byte[]) -> clone
    byte[] clone(byte[],byte[]) -> clone
    byte[][] clone(byte[][]) -> clone
    byte[][][] clone(byte[][][]) -> clone
    int[] clone(int[]) -> clone
    long[] clone(long[]) -> clone
    long[] clone(long[],long[]) -> clone
    short[] clone(short[]) -> clone
    java.math.BigInteger[] clone(java.math.BigInteger[]) -> clone
    byte[] copyOf(byte[],int) -> copyOf
    char[] copyOf(char[],int) -> copyOf
    int[] copyOf(int[],int) -> copyOf
    long[] copyOf(long[],int) -> copyOf
    java.math.BigInteger[] copyOf(java.math.BigInteger[],int) -> copyOf
    byte[] copyOfRange(byte[],int,int) -> copyOfRange
    int[] copyOfRange(int[],int,int) -> copyOfRange
    long[] copyOfRange(long[],int,int) -> copyOfRange
    java.math.BigInteger[] copyOfRange(java.math.BigInteger[],int,int) -> copyOfRange
    int getLength(int,int) -> getLength
    byte[] append(byte[],byte) -> append
    short[] append(short[],short) -> append
    int[] append(int[],int) -> append
    byte[] concatenate(byte[],byte[]) -> concatenate
    byte[] concatenate(byte[],byte[],byte[]) -> concatenate
    byte[] concatenate(byte[],byte[],byte[],byte[]) -> concatenate
    int[] concatenate(int[],int[]) -> concatenate
    byte[] prepend(byte[],byte) -> prepend
    short[] prepend(short[],short) -> prepend
    int[] prepend(int[],int) -> prepend
    byte[] reverse(byte[]) -> reverse
org.bouncycastle.util.BigIntegers -> org.bouncycastle.util.BigIntegers:
    int MAX_ITERATIONS -> MAX_ITERATIONS
    java.math.BigInteger ZERO -> ZERO
    byte[] asUnsignedByteArray(java.math.BigInteger) -> asUnsignedByteArray
    byte[] asUnsignedByteArray(int,java.math.BigInteger) -> asUnsignedByteArray
    java.math.BigInteger createRandomInRange(java.math.BigInteger,java.math.BigInteger,java.security.SecureRandom) -> createRandomInRange
    java.math.BigInteger fromUnsignedByteArray(byte[]) -> fromUnsignedByteArray
    java.math.BigInteger fromUnsignedByteArray(byte[],int,int) -> fromUnsignedByteArray
org.bouncycastle.util.CollectionStore -> org.bouncycastle.util.CollectionStore:
    java.util.Collection _local -> _local
    java.util.Collection getMatches(org.bouncycastle.util.Selector) -> getMatches
org.bouncycastle.util.IPAddress -> org.bouncycastle.util.IPAddress:
    boolean isValid(java.lang.String) -> isValid
    boolean isValidWithNetMask(java.lang.String) -> isValidWithNetMask
    boolean isValidIPv4(java.lang.String) -> isValidIPv4
    boolean isValidIPv4WithNetmask(java.lang.String) -> isValidIPv4WithNetmask
    boolean isValidIPv6WithNetmask(java.lang.String) -> isValidIPv6WithNetmask
    boolean isMaskValue(java.lang.String,int) -> isMaskValue
    boolean isValidIPv6(java.lang.String) -> isValidIPv6
org.bouncycastle.util.Integers -> org.bouncycastle.util.Integers:
    int rotateLeft(int,int) -> rotateLeft
    int rotateRight(int,int) -> rotateRight
    java.lang.Integer valueOf(int) -> valueOf
org.bouncycastle.util.Memoable -> org.bouncycastle.util.Memoable:
    org.bouncycastle.util.Memoable copy() -> copy
    void reset(org.bouncycastle.util.Memoable) -> reset
org.bouncycastle.util.MemoableResetException -> org.bouncycastle.util.MemoableResetException:
org.bouncycastle.util.Pack -> org.bouncycastle.util.Pack:
    int bigEndianToInt(byte[],int) -> bigEndianToInt
    void bigEndianToInt(byte[],int,int[]) -> bigEndianToInt
    byte[] intToBigEndian(int) -> intToBigEndian
    void intToBigEndian(int,byte[],int) -> intToBigEndian
    byte[] intToBigEndian(int[]) -> intToBigEndian
    void intToBigEndian(int[],byte[],int) -> intToBigEndian
    long bigEndianToLong(byte[],int) -> bigEndianToLong
    void bigEndianToLong(byte[],int,long[]) -> bigEndianToLong
    byte[] longToBigEndian(long) -> longToBigEndian
    void longToBigEndian(long,byte[],int) -> longToBigEndian
    byte[] longToBigEndian(long[]) -> longToBigEndian
    void longToBigEndian(long[],byte[],int) -> longToBigEndian
    int littleEndianToInt(byte[],int) -> littleEndianToInt
    void littleEndianToInt(byte[],int,int[]) -> littleEndianToInt
    void littleEndianToInt(byte[],int,int[],int,int) -> littleEndianToInt
    byte[] intToLittleEndian(int) -> intToLittleEndian
    void intToLittleEndian(int,byte[],int) -> intToLittleEndian
    byte[] intToLittleEndian(int[]) -> intToLittleEndian
    void intToLittleEndian(int[],byte[],int) -> intToLittleEndian
    long littleEndianToLong(byte[],int) -> littleEndianToLong
    void littleEndianToLong(byte[],int,long[]) -> littleEndianToLong
    byte[] longToLittleEndian(long) -> longToLittleEndian
    void longToLittleEndian(long,byte[],int) -> longToLittleEndian
    byte[] longToLittleEndian(long[]) -> longToLittleEndian
    void longToLittleEndian(long[],byte[],int) -> longToLittleEndian
org.bouncycastle.util.Selector -> org.bouncycastle.util.Selector:
    boolean match(java.lang.Object) -> match
    java.lang.Object clone() -> clone
org.bouncycastle.util.Shorts -> org.bouncycastle.util.Shorts:
    java.lang.Short valueOf(short) -> valueOf
org.bouncycastle.util.Store -> org.bouncycastle.util.Store:
    java.util.Collection getMatches(org.bouncycastle.util.Selector) -> getMatches
org.bouncycastle.util.StoreException -> org.bouncycastle.util.StoreException:
    java.lang.Throwable _e -> _e
    java.lang.Throwable getCause() -> getCause
org.bouncycastle.util.StreamParser -> org.bouncycastle.util.StreamParser:
    java.lang.Object read() -> read
    java.util.Collection readAll() -> readAll
org.bouncycastle.util.StreamParsingException -> org.bouncycastle.util.StreamParsingException:
    java.lang.Throwable _e -> _e
    java.lang.Throwable getCause() -> getCause
org.bouncycastle.util.Strings -> org.bouncycastle.util.Strings:
    java.lang.String fromUTF8ByteArray(byte[]) -> fromUTF8ByteArray
    byte[] toUTF8ByteArray(java.lang.String) -> toUTF8ByteArray
    byte[] toUTF8ByteArray(char[]) -> toUTF8ByteArray
    void toUTF8ByteArray(char[],java.io.OutputStream) -> toUTF8ByteArray
    java.lang.String toUpperCase(java.lang.String) -> toUpperCase
    java.lang.String toLowerCase(java.lang.String) -> toLowerCase
    byte[] toByteArray(char[]) -> toByteArray
    byte[] toByteArray(java.lang.String) -> toByteArray
    int toByteArray(java.lang.String,byte[],int) -> toByteArray
    java.lang.String fromByteArray(byte[]) -> fromByteArray
    char[] asCharArray(byte[]) -> asCharArray
    java.lang.String[] split(java.lang.String,char) -> split
org.bouncycastle.util.Times -> org.bouncycastle.util.Times:
    long nanoTime() -> nanoTime
org.bouncycastle.util.encoders.Base64 -> org.bouncycastle.util.encoders.Base64:
    org.bouncycastle.util.encoders.Encoder encoder -> encoder
    java.lang.String toBase64String(byte[]) -> toBase64String
    java.lang.String toBase64String(byte[],int,int) -> toBase64String
    byte[] encode(byte[]) -> encode
    byte[] encode(byte[],int,int) -> encode
    int encode(byte[],java.io.OutputStream) -> encode
    int encode(byte[],int,int,java.io.OutputStream) -> encode
    byte[] decode(byte[]) -> decode
    byte[] decode(java.lang.String) -> decode
    int decode(java.lang.String,java.io.OutputStream) -> decode
org.bouncycastle.util.encoders.Base64Encoder -> org.bouncycastle.util.encoders.Base64Encoder:
    byte[] encodingTable -> encodingTable
    byte padding -> padding
    byte[] decodingTable -> decodingTable
    void initialiseDecodingTable() -> initialiseDecodingTable
    int encode(byte[],int,int,java.io.OutputStream) -> encode
    boolean ignore(char) -> ignore
    int decode(byte[],int,int,java.io.OutputStream) -> decode
    int nextI(byte[],int,int) -> nextI
    int decode(java.lang.String,java.io.OutputStream) -> decode
    int decodeLastBlock(java.io.OutputStream,char,char,char,char) -> decodeLastBlock
    int nextI(java.lang.String,int,int) -> nextI
org.bouncycastle.util.encoders.BufferedDecoder -> org.bouncycastle.util.encoders.BufferedDecoder:
    byte[] buf -> buf
    int bufOff -> bufOff
    org.bouncycastle.util.encoders.Translator translator -> translator
    int processByte(byte,byte[],int) -> processByte
    int processBytes(byte[],int,int,byte[],int) -> processBytes
org.bouncycastle.util.encoders.BufferedEncoder -> org.bouncycastle.util.encoders.BufferedEncoder:
    byte[] buf -> buf
    int bufOff -> bufOff
    org.bouncycastle.util.encoders.Translator translator -> translator
    int processByte(byte,byte[],int) -> processByte
    int processBytes(byte[],int,int,byte[],int) -> processBytes
org.bouncycastle.util.encoders.DecoderException -> org.bouncycastle.util.encoders.DecoderException:
    java.lang.Throwable cause -> cause
    java.lang.Throwable getCause() -> getCause
org.bouncycastle.util.encoders.Encoder -> org.bouncycastle.util.encoders.Encoder:
    int encode(byte[],int,int,java.io.OutputStream) -> encode
    int decode(byte[],int,int,java.io.OutputStream) -> decode
    int decode(java.lang.String,java.io.OutputStream) -> decode
org.bouncycastle.util.encoders.EncoderException -> org.bouncycastle.util.encoders.EncoderException:
    java.lang.Throwable cause -> cause
    java.lang.Throwable getCause() -> getCause
org.bouncycastle.util.encoders.Hex -> org.bouncycastle.util.encoders.Hex:
    org.bouncycastle.util.encoders.Encoder encoder -> encoder
    java.lang.String toHexString(byte[]) -> toHexString
    java.lang.String toHexString(byte[],int,int) -> toHexString
    byte[] encode(byte[]) -> encode
    byte[] encode(byte[],int,int) -> encode
    int encode(byte[],java.io.OutputStream) -> encode
    int encode(byte[],int,int,java.io.OutputStream) -> encode
    byte[] decode(byte[]) -> decode
    byte[] decode(java.lang.String) -> decode
    int decode(java.lang.String,java.io.OutputStream) -> decode
org.bouncycastle.util.encoders.HexEncoder -> org.bouncycastle.util.encoders.HexEncoder:
    byte[] encodingTable -> encodingTable
    byte[] decodingTable -> decodingTable
    void initialiseDecodingTable() -> initialiseDecodingTable
    int encode(byte[],int,int,java.io.OutputStream) -> encode
    boolean ignore(char) -> ignore
    int decode(byte[],int,int,java.io.OutputStream) -> decode
    int decode(java.lang.String,java.io.OutputStream) -> decode
org.bouncycastle.util.encoders.HexTranslator -> org.bouncycastle.util.encoders.HexTranslator:
    byte[] hexTable -> hexTable
    int getEncodedBlockSize() -> getEncodedBlockSize
    int encode(byte[],int,int,byte[],int) -> encode
    int getDecodedBlockSize() -> getDecodedBlockSize
    int decode(byte[],int,int,byte[],int) -> decode
org.bouncycastle.util.encoders.Translator -> org.bouncycastle.util.encoders.Translator:
    int getEncodedBlockSize() -> getEncodedBlockSize
    int encode(byte[],int,int,byte[],int) -> encode
    int getDecodedBlockSize() -> getDecodedBlockSize
    int decode(byte[],int,int,byte[],int) -> decode
org.bouncycastle.util.encoders.UrlBase64 -> org.bouncycastle.util.encoders.UrlBase64:
    org.bouncycastle.util.encoders.Encoder encoder -> encoder
    byte[] encode(byte[]) -> encode
    int encode(byte[],java.io.OutputStream) -> encode
    byte[] decode(byte[]) -> decode
    int decode(byte[],java.io.OutputStream) -> decode
    byte[] decode(java.lang.String) -> decode
    int decode(java.lang.String,java.io.OutputStream) -> decode
org.bouncycastle.util.encoders.UrlBase64Encoder -> org.bouncycastle.util.encoders.UrlBase64Encoder:
org.bouncycastle.util.io.BufferingOutputStream -> org.bouncycastle.util.io.BufferingOutputStream:
    java.io.OutputStream other -> other
    byte[] buf -> buf
    int bufOff -> bufOff
    void write(byte[],int,int) -> write
    void write(int) -> write
    void flush() -> flush
    void close() -> close
org.bouncycastle.util.io.StreamOverflowException -> org.bouncycastle.util.io.StreamOverflowException:
org.bouncycastle.util.io.Streams -> org.bouncycastle.util.io.Streams:
    int BUFFER_SIZE -> BUFFER_SIZE
    void drain(java.io.InputStream) -> drain
    byte[] readAll(java.io.InputStream) -> readAll
    byte[] readAllLimited(java.io.InputStream,int) -> readAllLimited
    int readFully(java.io.InputStream,byte[]) -> readFully
    int readFully(java.io.InputStream,byte[],int,int) -> readFully
    void pipeAll(java.io.InputStream,java.io.OutputStream) -> pipeAll
    long pipeAllLimited(java.io.InputStream,long,java.io.OutputStream) -> pipeAllLimited
org.bouncycastle.util.io.TeeInputStream -> org.bouncycastle.util.io.TeeInputStream:
    java.io.InputStream input -> input
    java.io.OutputStream output -> output
    int read(byte[]) -> read
    int read(byte[],int,int) -> read
    int read() -> read
    void close() -> close
    java.io.OutputStream getOutputStream() -> getOutputStream
org.bouncycastle.util.io.TeeOutputStream -> org.bouncycastle.util.io.TeeOutputStream:
    java.io.OutputStream output1 -> output1
    java.io.OutputStream output2 -> output2
    void write(byte[]) -> write
    void write(byte[],int,int) -> write
    void write(int) -> write
    void flush() -> flush
    void close() -> close
org.bouncycastle.util.io.pem.PemGenerationException -> org.bouncycastle.util.io.pem.PemGenerationException:
    java.lang.Throwable cause -> cause
    java.lang.Throwable getCause() -> getCause
org.bouncycastle.util.io.pem.PemHeader -> org.bouncycastle.util.io.pem.PemHeader:
    java.lang.String name -> name
    java.lang.String value -> value
    java.lang.String getName() -> getName
    java.lang.String getValue() -> getValue
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    int getHashCode(java.lang.String) -> getHashCode
    boolean isEqual(java.lang.String,java.lang.String) -> isEqual
org.bouncycastle.util.io.pem.PemObject -> org.bouncycastle.util.io.pem.PemObject:
    java.util.List EMPTY_LIST -> EMPTY_LIST
    java.lang.String type -> type
    java.util.List headers -> headers
    byte[] content -> content
    java.lang.String getType() -> getType
    java.util.List getHeaders() -> getHeaders
    byte[] getContent() -> getContent
    org.bouncycastle.util.io.pem.PemObject generate() -> generate
org.bouncycastle.util.io.pem.PemObjectGenerator -> org.bouncycastle.util.io.pem.PemObjectGenerator:
    org.bouncycastle.util.io.pem.PemObject generate() -> generate
org.bouncycastle.util.io.pem.PemObjectParser -> org.bouncycastle.util.io.pem.PemObjectParser:
    java.lang.Object parseObject(org.bouncycastle.util.io.pem.PemObject) -> parseObject
org.bouncycastle.util.io.pem.PemReader -> org.bouncycastle.util.io.pem.PemReader:
    java.lang.String BEGIN -> BEGIN
    java.lang.String END -> END
    org.bouncycastle.util.io.pem.PemObject readPemObject() -> readPemObject
    org.bouncycastle.util.io.pem.PemObject loadObject(java.lang.String) -> loadObject
org.bouncycastle.util.io.pem.PemWriter -> org.bouncycastle.util.io.pem.PemWriter:
    int LINE_LENGTH -> LINE_LENGTH
    int nlLength -> nlLength
    char[] buf -> buf
    int getOutputSize(org.bouncycastle.util.io.pem.PemObject) -> getOutputSize
    void writeObject(org.bouncycastle.util.io.pem.PemObjectGenerator) -> writeObject
    void writeEncoded(byte[]) -> writeEncoded
    void writePreEncapsulationBoundary(java.lang.String) -> writePreEncapsulationBoundary
    void writePostEncapsulationBoundary(java.lang.String) -> writePostEncapsulationBoundary
org.bouncycastle.util.test.FixedSecureRandom -> org.bouncycastle.util.test.FixedSecureRandom:
    byte[] _data -> _data
    int _index -> _index
    int _intPad -> _intPad
    void nextBytes(byte[]) -> nextBytes
    int nextInt() -> nextInt
    long nextLong() -> nextLong
    boolean isExhausted() -> isExhausted
    int nextValue() -> nextValue
org.bouncycastle.util.test.NumberParsing -> org.bouncycastle.util.test.NumberParsing:
    long decodeLongFromHex(java.lang.String) -> decodeLongFromHex
    int decodeIntFromHex(java.lang.String) -> decodeIntFromHex
org.bouncycastle.util.test.SimpleTest -> org.bouncycastle.util.test.SimpleTest:
    java.lang.String getName() -> getName
    org.bouncycastle.util.test.TestResult success() -> success
    void fail(java.lang.String) -> fail
    void fail(java.lang.String,java.lang.Throwable) -> fail
    void fail(java.lang.String,java.lang.Object,java.lang.Object) -> fail
    boolean areEqual(byte[],byte[]) -> areEqual
    org.bouncycastle.util.test.TestResult perform() -> perform
    void runTest(org.bouncycastle.util.test.Test) -> runTest
    void runTest(org.bouncycastle.util.test.Test,java.io.PrintStream) -> runTest
    void performTest() -> performTest
org.bouncycastle.util.test.SimpleTestResult -> org.bouncycastle.util.test.SimpleTestResult:
    java.lang.String SEPARATOR -> SEPARATOR
    boolean success -> success
    java.lang.String message -> message
    java.lang.Throwable exception -> exception
    org.bouncycastle.util.test.TestResult successful(org.bouncycastle.util.test.Test,java.lang.String) -> successful
    org.bouncycastle.util.test.TestResult failed(org.bouncycastle.util.test.Test,java.lang.String) -> failed
    org.bouncycastle.util.test.TestResult failed(org.bouncycastle.util.test.Test,java.lang.String,java.lang.Throwable) -> failed
    org.bouncycastle.util.test.TestResult failed(org.bouncycastle.util.test.Test,java.lang.String,java.lang.Object,java.lang.Object) -> failed
    java.lang.String failedMessage(java.lang.String,java.lang.String,java.lang.String,java.lang.String) -> failedMessage
    boolean isSuccessful() -> isSuccessful
    java.lang.String toString() -> toString
    java.lang.Throwable getException() -> getException
org.bouncycastle.util.test.Test -> org.bouncycastle.util.test.Test:
    java.lang.String getName() -> getName
    org.bouncycastle.util.test.TestResult perform() -> perform
org.bouncycastle.util.test.TestFailedException -> org.bouncycastle.util.test.TestFailedException:
    org.bouncycastle.util.test.TestResult _result -> _result
    org.bouncycastle.util.test.TestResult getResult() -> getResult
org.bouncycastle.util.test.TestResult -> org.bouncycastle.util.test.TestResult:
    boolean isSuccessful() -> isSuccessful
    java.lang.Throwable getException() -> getException
    java.lang.String toString() -> toString
org.bouncycastle.util.test.UncloseableOutputStream -> org.bouncycastle.util.test.UncloseableOutputStream:
    void close() -> close
    void write(byte[],int,int) -> write
org.bouncycastle.x509.AttributeCertificateHolder -> org.bouncycastle.x509.AttributeCertificateHolder:
    org.bouncycastle.asn1.x509.Holder holder -> holder
    int getDigestedObjectType() -> getDigestedObjectType
    java.lang.String getDigestAlgorithm() -> getDigestAlgorithm
    byte[] getObjectDigest() -> getObjectDigest
    java.lang.String getOtherObjectTypeID() -> getOtherObjectTypeID
    org.bouncycastle.asn1.x509.GeneralNames generateGeneralNames(org.bouncycastle.jce.X509Principal) -> generateGeneralNames
    boolean matchesDN(org.bouncycastle.jce.X509Principal,org.bouncycastle.asn1.x509.GeneralNames) -> matchesDN
    java.lang.Object[] getNames(org.bouncycastle.asn1.x509.GeneralName[]) -> getNames
    java.security.Principal[] getPrincipals(org.bouncycastle.asn1.x509.GeneralNames) -> getPrincipals
    java.security.Principal[] getEntityNames() -> getEntityNames
    java.security.Principal[] getIssuer() -> getIssuer
    java.math.BigInteger getSerialNumber() -> getSerialNumber
    java.lang.Object clone() -> clone
    boolean match(java.security.cert.Certificate) -> match
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    boolean match(java.lang.Object) -> match
org.bouncycastle.x509.AttributeCertificateIssuer -> org.bouncycastle.x509.AttributeCertificateIssuer:
    org.bouncycastle.asn1.ASN1Encodable form -> form
    java.lang.Object[] getNames() -> getNames
    java.security.Principal[] getPrincipals() -> getPrincipals
    boolean matchesDN(javax.security.auth.x500.X500Principal,org.bouncycastle.asn1.x509.GeneralNames) -> matchesDN
    java.lang.Object clone() -> clone
    boolean match(java.security.cert.Certificate) -> match
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    boolean match(java.lang.Object) -> match
org.bouncycastle.x509.CertPathReviewerException -> org.bouncycastle.x509.CertPathReviewerException:
    int index -> index
    java.security.cert.CertPath certPath -> certPath
    java.security.cert.CertPath getCertPath() -> getCertPath
    int getIndex() -> getIndex
org.bouncycastle.x509.ExtCertificateEncodingException -> org.bouncycastle.x509.ExtCertificateEncodingException:
    java.lang.Throwable cause -> cause
    java.lang.Throwable getCause() -> getCause
org.bouncycastle.x509.ExtendedPKIXBuilderParameters -> org.bouncycastle.x509.ExtendedPKIXBuilderParameters:
    int maxPathLength -> maxPathLength
    java.util.Set excludedCerts -> excludedCerts
    java.util.Set getExcludedCerts() -> getExcludedCerts
    void setExcludedCerts(java.util.Set) -> setExcludedCerts
    void setMaxPathLength(int) -> setMaxPathLength
    int getMaxPathLength() -> getMaxPathLength
    void setParams(java.security.cert.PKIXParameters) -> setParams
    java.lang.Object clone() -> clone
    org.bouncycastle.x509.ExtendedPKIXParameters getInstance(java.security.cert.PKIXParameters) -> getInstance
org.bouncycastle.x509.ExtendedPKIXParameters -> org.bouncycastle.x509.ExtendedPKIXParameters:
    java.util.List stores -> stores
    org.bouncycastle.util.Selector selector -> selector
    boolean additionalLocationsEnabled -> additionalLocationsEnabled
    java.util.List additionalStores -> additionalStores
    java.util.Set trustedACIssuers -> trustedACIssuers
    java.util.Set necessaryACAttributes -> necessaryACAttributes
    java.util.Set prohibitedACAttributes -> prohibitedACAttributes
    java.util.Set attrCertCheckers -> attrCertCheckers
    int PKIX_VALIDITY_MODEL -> PKIX_VALIDITY_MODEL
    int CHAIN_VALIDITY_MODEL -> CHAIN_VALIDITY_MODEL
    int validityModel -> validityModel
    boolean useDeltas -> useDeltas
    org.bouncycastle.x509.ExtendedPKIXParameters getInstance(java.security.cert.PKIXParameters) -> getInstance
    void setParams(java.security.cert.PKIXParameters) -> setParams
    boolean isUseDeltasEnabled() -> isUseDeltasEnabled
    void setUseDeltasEnabled(boolean) -> setUseDeltasEnabled
    int getValidityModel() -> getValidityModel
    void setCertStores(java.util.List) -> setCertStores
    void setStores(java.util.List) -> setStores
    void addStore(org.bouncycastle.util.Store) -> addStore
    void addAdditionalStore(org.bouncycastle.util.Store) -> addAdditionalStore
    void addAddionalStore(org.bouncycastle.util.Store) -> addAddionalStore
    java.util.List getAdditionalStores() -> getAdditionalStores
    java.util.List getStores() -> getStores
    void setValidityModel(int) -> setValidityModel
    java.lang.Object clone() -> clone
    boolean isAdditionalLocationsEnabled() -> isAdditionalLocationsEnabled
    void setAdditionalLocationsEnabled(boolean) -> setAdditionalLocationsEnabled
    org.bouncycastle.util.Selector getTargetConstraints() -> getTargetConstraints
    void setTargetConstraints(org.bouncycastle.util.Selector) -> setTargetConstraints
    void setTargetCertConstraints(java.security.cert.CertSelector) -> setTargetCertConstraints
    java.util.Set getTrustedACIssuers() -> getTrustedACIssuers
    void setTrustedACIssuers(java.util.Set) -> setTrustedACIssuers
    java.util.Set getNecessaryACAttributes() -> getNecessaryACAttributes
    void setNecessaryACAttributes(java.util.Set) -> setNecessaryACAttributes
    java.util.Set getProhibitedACAttributes() -> getProhibitedACAttributes
    void setProhibitedACAttributes(java.util.Set) -> setProhibitedACAttributes
    java.util.Set getAttrCertCheckers() -> getAttrCertCheckers
    void setAttrCertCheckers(java.util.Set) -> setAttrCertCheckers
org.bouncycastle.x509.NoSuchParserException -> org.bouncycastle.x509.NoSuchParserException:
org.bouncycastle.x509.NoSuchStoreException -> org.bouncycastle.x509.NoSuchStoreException:
org.bouncycastle.x509.PKIXAttrCertChecker -> org.bouncycastle.x509.PKIXAttrCertChecker:
    java.util.Set getSupportedExtensions() -> getSupportedExtensions
    void check(org.bouncycastle.x509.X509AttributeCertificate,java.security.cert.CertPath,java.security.cert.CertPath,java.util.Collection) -> check
    java.lang.Object clone() -> clone
org.bouncycastle.x509.PKIXCertPathReviewer -> org.bouncycastle.x509.PKIXCertPathReviewer:
    java.lang.String QC_STATEMENT -> QC_STATEMENT
    java.lang.String CRL_DIST_POINTS -> CRL_DIST_POINTS
    java.lang.String AUTH_INFO_ACCESS -> AUTH_INFO_ACCESS
    java.lang.String RESOURCE_NAME -> RESOURCE_NAME
    java.security.cert.CertPath certPath -> certPath
    java.security.cert.PKIXParameters pkixParams -> pkixParams
    java.util.Date validDate -> validDate
    java.util.List certs -> certs
    int n -> n
    java.util.List[] notifications -> notifications
    java.util.List[] errors -> errors
    java.security.cert.TrustAnchor trustAnchor -> trustAnchor
    java.security.PublicKey subjectPublicKey -> subjectPublicKey
    java.security.cert.PolicyNode policyTree -> policyTree
    boolean initialized -> initialized
    void init(java.security.cert.CertPath,java.security.cert.PKIXParameters) -> init
    java.security.cert.CertPath getCertPath() -> getCertPath
    int getCertPathSize() -> getCertPathSize
    java.util.List[] getErrors() -> getErrors
    java.util.List getErrors(int) -> getErrors
    java.util.List[] getNotifications() -> getNotifications
    java.util.List getNotifications(int) -> getNotifications
    java.security.cert.PolicyNode getPolicyTree() -> getPolicyTree
    java.security.PublicKey getSubjectPublicKey() -> getSubjectPublicKey
    java.security.cert.TrustAnchor getTrustAnchor() -> getTrustAnchor
    boolean isValidCertPath() -> isValidCertPath
    void addNotification(org.bouncycastle.i18n.ErrorBundle) -> addNotification
    void addNotification(org.bouncycastle.i18n.ErrorBundle,int) -> addNotification
    void addError(org.bouncycastle.i18n.ErrorBundle) -> addError
    void addError(org.bouncycastle.i18n.ErrorBundle,int) -> addError
    void doChecks() -> doChecks
    void checkNameConstraints() -> checkNameConstraints
    void checkPathLength() -> checkPathLength
    void checkSignatures() -> checkSignatures
    void checkPolicy() -> checkPolicy
    void checkCriticalExtensions() -> checkCriticalExtensions
    boolean processQcStatements(java.security.cert.X509Certificate,int) -> processQcStatements
    java.lang.String IPtoString(byte[]) -> IPtoString
    void checkRevocation(java.security.cert.PKIXParameters,java.security.cert.X509Certificate,java.util.Date,java.security.cert.X509Certificate,java.security.PublicKey,java.util.Vector,java.util.Vector,int) -> checkRevocation
    void checkCRLs(java.security.cert.PKIXParameters,java.security.cert.X509Certificate,java.util.Date,java.security.cert.X509Certificate,java.security.PublicKey,java.util.Vector,int) -> checkCRLs
    java.util.Vector getCRLDistUrls(org.bouncycastle.asn1.x509.CRLDistPoint) -> getCRLDistUrls
    java.util.Vector getOCSPUrls(org.bouncycastle.asn1.x509.AuthorityInformationAccess) -> getOCSPUrls
    java.security.cert.X509CRL getCRL(java.lang.String) -> getCRL
    java.util.Collection getTrustAnchors(java.security.cert.X509Certificate,java.util.Set) -> getTrustAnchors
org.bouncycastle.x509.X509Attribute -> org.bouncycastle.x509.X509Attribute:
    org.bouncycastle.asn1.x509.Attribute attr -> attr
    java.lang.String getOID() -> getOID
    org.bouncycastle.asn1.ASN1Encodable[] getValues() -> getValues
    org.bouncycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
org.bouncycastle.x509.X509AttributeCertStoreSelector -> org.bouncycastle.x509.X509AttributeCertStoreSelector:
    org.bouncycastle.x509.AttributeCertificateHolder holder -> holder
    org.bouncycastle.x509.AttributeCertificateIssuer issuer -> issuer
    java.math.BigInteger serialNumber -> serialNumber
    java.util.Date attributeCertificateValid -> attributeCertificateValid
    org.bouncycastle.x509.X509AttributeCertificate attributeCert -> attributeCert
    java.util.Collection targetNames -> targetNames
    java.util.Collection targetGroups -> targetGroups
    boolean match(java.lang.Object) -> match
    java.lang.Object clone() -> clone
    org.bouncycastle.x509.X509AttributeCertificate getAttributeCert() -> getAttributeCert
    void setAttributeCert(org.bouncycastle.x509.X509AttributeCertificate) -> setAttributeCert
    java.util.Date getAttributeCertificateValid() -> getAttributeCertificateValid
    void setAttributeCertificateValid(java.util.Date) -> setAttributeCertificateValid
    org.bouncycastle.x509.AttributeCertificateHolder getHolder() -> getHolder
    void setHolder(org.bouncycastle.x509.AttributeCertificateHolder) -> setHolder
    org.bouncycastle.x509.AttributeCertificateIssuer getIssuer() -> getIssuer
    void setIssuer(org.bouncycastle.x509.AttributeCertificateIssuer) -> setIssuer
    java.math.BigInteger getSerialNumber() -> getSerialNumber
    void setSerialNumber(java.math.BigInteger) -> setSerialNumber
    void addTargetName(org.bouncycastle.asn1.x509.GeneralName) -> addTargetName
    void addTargetName(byte[]) -> addTargetName
    void setTargetNames(java.util.Collection) -> setTargetNames
    java.util.Collection getTargetNames() -> getTargetNames
    void addTargetGroup(org.bouncycastle.asn1.x509.GeneralName) -> addTargetGroup
    void addTargetGroup(byte[]) -> addTargetGroup
    void setTargetGroups(java.util.Collection) -> setTargetGroups
    java.util.Collection getTargetGroups() -> getTargetGroups
    java.util.Set extractGeneralNames(java.util.Collection) -> extractGeneralNames
org.bouncycastle.x509.X509AttributeCertificate -> org.bouncycastle.x509.X509AttributeCertificate:
    int getVersion() -> getVersion
    java.math.BigInteger getSerialNumber() -> getSerialNumber
    java.util.Date getNotBefore() -> getNotBefore
    java.util.Date getNotAfter() -> getNotAfter
    org.bouncycastle.x509.AttributeCertificateHolder getHolder() -> getHolder
    org.bouncycastle.x509.AttributeCertificateIssuer getIssuer() -> getIssuer
    org.bouncycastle.x509.X509Attribute[] getAttributes() -> getAttributes
    org.bouncycastle.x509.X509Attribute[] getAttributes(java.lang.String) -> getAttributes
    boolean[] getIssuerUniqueID() -> getIssuerUniqueID
    void checkValidity() -> checkValidity
    void checkValidity(java.util.Date) -> checkValidity
    byte[] getSignature() -> getSignature
    void verify(java.security.PublicKey,java.lang.String) -> verify
    byte[] getEncoded() -> getEncoded
org.bouncycastle.x509.X509CRLStoreSelector -> org.bouncycastle.x509.X509CRLStoreSelector:
    boolean deltaCRLIndicator -> deltaCRLIndicator
    boolean completeCRLEnabled -> completeCRLEnabled
    java.math.BigInteger maxBaseCRLNumber -> maxBaseCRLNumber
    byte[] issuingDistributionPoint -> issuingDistributionPoint
    boolean issuingDistributionPointEnabled -> issuingDistributionPointEnabled
    org.bouncycastle.x509.X509AttributeCertificate attrCertChecking -> attrCertChecking
    boolean isIssuingDistributionPointEnabled() -> isIssuingDistributionPointEnabled
    void setIssuingDistributionPointEnabled(boolean) -> setIssuingDistributionPointEnabled
    void setAttrCertificateChecking(org.bouncycastle.x509.X509AttributeCertificate) -> setAttrCertificateChecking
    org.bouncycastle.x509.X509AttributeCertificate getAttrCertificateChecking() -> getAttrCertificateChecking
    boolean match(java.lang.Object) -> match
    boolean match(java.security.cert.CRL) -> match
    boolean isDeltaCRLIndicatorEnabled() -> isDeltaCRLIndicatorEnabled
    void setDeltaCRLIndicatorEnabled(boolean) -> setDeltaCRLIndicatorEnabled
    org.bouncycastle.x509.X509CRLStoreSelector getInstance(java.security.cert.X509CRLSelector) -> getInstance
    java.lang.Object clone() -> clone
    boolean isCompleteCRLEnabled() -> isCompleteCRLEnabled
    void setCompleteCRLEnabled(boolean) -> setCompleteCRLEnabled
    java.math.BigInteger getMaxBaseCRLNumber() -> getMaxBaseCRLNumber
    void setMaxBaseCRLNumber(java.math.BigInteger) -> setMaxBaseCRLNumber
    byte[] getIssuingDistributionPoint() -> getIssuingDistributionPoint
    void setIssuingDistributionPoint(byte[]) -> setIssuingDistributionPoint
org.bouncycastle.x509.X509CertPairStoreSelector -> org.bouncycastle.x509.X509CertPairStoreSelector:
    org.bouncycastle.x509.X509CertStoreSelector forwardSelector -> forwardSelector
    org.bouncycastle.x509.X509CertStoreSelector reverseSelector -> reverseSelector
    org.bouncycastle.x509.X509CertificatePair certPair -> certPair
    org.bouncycastle.x509.X509CertificatePair getCertPair() -> getCertPair
    void setCertPair(org.bouncycastle.x509.X509CertificatePair) -> setCertPair
    void setForwardSelector(org.bouncycastle.x509.X509CertStoreSelector) -> setForwardSelector
    void setReverseSelector(org.bouncycastle.x509.X509CertStoreSelector) -> setReverseSelector
    java.lang.Object clone() -> clone
    boolean match(java.lang.Object) -> match
    org.bouncycastle.x509.X509CertStoreSelector getForwardSelector() -> getForwardSelector
    org.bouncycastle.x509.X509CertStoreSelector getReverseSelector() -> getReverseSelector
org.bouncycastle.x509.X509CertStoreSelector -> org.bouncycastle.x509.X509CertStoreSelector:
    boolean match(java.lang.Object) -> match
    boolean match(java.security.cert.Certificate) -> match
    java.lang.Object clone() -> clone
    org.bouncycastle.x509.X509CertStoreSelector getInstance(java.security.cert.X509CertSelector) -> getInstance
org.bouncycastle.x509.X509CertificatePair -> org.bouncycastle.x509.X509CertificatePair:
    java.security.cert.X509Certificate forward -> forward
    java.security.cert.X509Certificate reverse -> reverse
    byte[] getEncoded() -> getEncoded
    java.security.cert.X509Certificate getForward() -> getForward
    java.security.cert.X509Certificate getReverse() -> getReverse
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
org.bouncycastle.x509.X509CollectionStoreParameters -> org.bouncycastle.x509.X509CollectionStoreParameters:
    java.util.Collection collection -> collection
    java.lang.Object clone() -> clone
    java.util.Collection getCollection() -> getCollection
    java.lang.String toString() -> toString
org.bouncycastle.x509.X509Store -> org.bouncycastle.x509.X509Store:
    java.security.Provider _provider -> _provider
    org.bouncycastle.x509.X509StoreSpi _spi -> _spi
    org.bouncycastle.x509.X509Store getInstance(java.lang.String,org.bouncycastle.x509.X509StoreParameters) -> getInstance
    org.bouncycastle.x509.X509Store getInstance(java.lang.String,org.bouncycastle.x509.X509StoreParameters,java.lang.String) -> getInstance
    org.bouncycastle.x509.X509Store getInstance(java.lang.String,org.bouncycastle.x509.X509StoreParameters,java.security.Provider) -> getInstance
    org.bouncycastle.x509.X509Store createStore(org.bouncycastle.x509.X509Util$Implementation,org.bouncycastle.x509.X509StoreParameters) -> createStore
    java.security.Provider getProvider() -> getProvider
    java.util.Collection getMatches(org.bouncycastle.util.Selector) -> getMatches
org.bouncycastle.x509.X509StoreParameters -> org.bouncycastle.x509.X509StoreParameters:
org.bouncycastle.x509.X509StoreSpi -> org.bouncycastle.x509.X509StoreSpi:
    void engineInit(org.bouncycastle.x509.X509StoreParameters) -> engineInit
    java.util.Collection engineGetMatches(org.bouncycastle.util.Selector) -> engineGetMatches
org.bouncycastle.x509.X509StreamParser -> org.bouncycastle.x509.X509StreamParser:
    java.security.Provider _provider -> _provider
    org.bouncycastle.x509.X509StreamParserSpi _spi -> _spi
    org.bouncycastle.x509.X509StreamParser getInstance(java.lang.String) -> getInstance
    org.bouncycastle.x509.X509StreamParser getInstance(java.lang.String,java.lang.String) -> getInstance
    org.bouncycastle.x509.X509StreamParser getInstance(java.lang.String,java.security.Provider) -> getInstance
    org.bouncycastle.x509.X509StreamParser createParser(org.bouncycastle.x509.X509Util$Implementation) -> createParser
    java.security.Provider getProvider() -> getProvider
    void init(java.io.InputStream) -> init
    void init(byte[]) -> init
    java.lang.Object read() -> read
    java.util.Collection readAll() -> readAll
org.bouncycastle.x509.X509StreamParserSpi -> org.bouncycastle.x509.X509StreamParserSpi:
    void engineInit(java.io.InputStream) -> engineInit
    java.lang.Object engineRead() -> engineRead
    java.util.Collection engineReadAll() -> engineReadAll
org.bouncycastle.x509.X509Util -> org.bouncycastle.x509.X509Util:
    java.util.Hashtable algorithms -> algorithms
    java.util.Hashtable params -> params
    java.util.Set noParams -> noParams
    org.bouncycastle.asn1.pkcs.RSASSAPSSparams creatPSSParams(org.bouncycastle.asn1.x509.AlgorithmIdentifier,int) -> creatPSSParams
    org.bouncycastle.asn1.ASN1ObjectIdentifier getAlgorithmOID(java.lang.String) -> getAlgorithmOID
    org.bouncycastle.asn1.x509.AlgorithmIdentifier getSigAlgID(org.bouncycastle.asn1.ASN1ObjectIdentifier,java.lang.String) -> getSigAlgID
    java.util.Iterator getAlgNames() -> getAlgNames
    java.security.Signature getSignatureInstance(java.lang.String) -> getSignatureInstance
    java.security.Signature getSignatureInstance(java.lang.String,java.lang.String) -> getSignatureInstance
    byte[] calculateSignature(org.bouncycastle.asn1.ASN1ObjectIdentifier,java.lang.String,java.security.PrivateKey,java.security.SecureRandom,org.bouncycastle.asn1.ASN1Encodable) -> calculateSignature
    byte[] calculateSignature(org.bouncycastle.asn1.ASN1ObjectIdentifier,java.lang.String,java.lang.String,java.security.PrivateKey,java.security.SecureRandom,org.bouncycastle.asn1.ASN1Encodable) -> calculateSignature
    org.bouncycastle.jce.X509Principal convertPrincipal(javax.security.auth.x500.X500Principal) -> convertPrincipal
    org.bouncycastle.x509.X509Util$Implementation getImplementation(java.lang.String,java.lang.String,java.security.Provider) -> getImplementation
    org.bouncycastle.x509.X509Util$Implementation getImplementation(java.lang.String,java.lang.String) -> getImplementation
    java.security.Provider getProvider(java.lang.String) -> getProvider
org.bouncycastle.x509.X509Util$Implementation -> org.bouncycastle.x509.X509Util$Implementation:
    java.lang.Object engine -> engine
    java.security.Provider provider -> provider
    java.lang.Object getEngine() -> getEngine
    java.security.Provider getProvider() -> getProvider
org.bouncycastle.x509.X509V1CertificateGenerator -> org.bouncycastle.x509.X509V1CertificateGenerator:
    org.bouncycastle.asn1.x509.V1TBSCertificateGenerator tbsGen -> tbsGen
    org.bouncycastle.asn1.ASN1ObjectIdentifier sigOID -> sigOID
    org.bouncycastle.asn1.x509.AlgorithmIdentifier sigAlgId -> sigAlgId
    java.lang.String signatureAlgorithm -> signatureAlgorithm
    void reset() -> reset
    void setSerialNumber(java.math.BigInteger) -> setSerialNumber
    void setIssuerDN(javax.security.auth.x500.X500Principal) -> setIssuerDN
    void setIssuerDN(org.bouncycastle.asn1.x509.X509Name) -> setIssuerDN
    void setNotBefore(java.util.Date) -> setNotBefore
    void setNotAfter(java.util.Date) -> setNotAfter
    void setSubjectDN(javax.security.auth.x500.X500Principal) -> setSubjectDN
    void setSubjectDN(org.bouncycastle.asn1.x509.X509Name) -> setSubjectDN
    void setPublicKey(java.security.PublicKey) -> setPublicKey
    void setSignatureAlgorithm(java.lang.String) -> setSignatureAlgorithm
    java.security.cert.X509Certificate generateX509Certificate(java.security.PrivateKey) -> generateX509Certificate
    java.security.cert.X509Certificate generateX509Certificate(java.security.PrivateKey,java.security.SecureRandom) -> generateX509Certificate
    java.security.cert.X509Certificate generateX509Certificate(java.security.PrivateKey,java.lang.String) -> generateX509Certificate
    java.security.cert.X509Certificate generateX509Certificate(java.security.PrivateKey,java.lang.String,java.security.SecureRandom) -> generateX509Certificate
    java.security.cert.X509Certificate generate(java.security.PrivateKey) -> generate
    java.security.cert.X509Certificate generate(java.security.PrivateKey,java.security.SecureRandom) -> generate
    java.security.cert.X509Certificate generate(java.security.PrivateKey,java.lang.String) -> generate
    java.security.cert.X509Certificate generate(java.security.PrivateKey,java.lang.String,java.security.SecureRandom) -> generate
    java.security.cert.X509Certificate generateJcaObject(org.bouncycastle.asn1.x509.TBSCertificate,byte[]) -> generateJcaObject
    java.util.Iterator getSignatureAlgNames() -> getSignatureAlgNames
org.bouncycastle.x509.X509V2AttributeCertificate -> org.bouncycastle.x509.X509V2AttributeCertificate:
    org.bouncycastle.asn1.x509.AttributeCertificate cert -> cert
    java.util.Date notBefore -> notBefore
    java.util.Date notAfter -> notAfter
    org.bouncycastle.asn1.x509.AttributeCertificate getObject(java.io.InputStream) -> getObject
    int getVersion() -> getVersion
    java.math.BigInteger getSerialNumber() -> getSerialNumber
    org.bouncycastle.x509.AttributeCertificateHolder getHolder() -> getHolder
    org.bouncycastle.x509.AttributeCertificateIssuer getIssuer() -> getIssuer
    java.util.Date getNotBefore() -> getNotBefore
    java.util.Date getNotAfter() -> getNotAfter
    boolean[] getIssuerUniqueID() -> getIssuerUniqueID
    void checkValidity() -> checkValidity
    void checkValidity(java.util.Date) -> checkValidity
    byte[] getSignature() -> getSignature
    void verify(java.security.PublicKey,java.lang.String) -> verify
    byte[] getEncoded() -> getEncoded
    byte[] getExtensionValue(java.lang.String) -> getExtensionValue
    java.util.Set getExtensionOIDs(boolean) -> getExtensionOIDs
    java.util.Set getNonCriticalExtensionOIDs() -> getNonCriticalExtensionOIDs
    java.util.Set getCriticalExtensionOIDs() -> getCriticalExtensionOIDs
    boolean hasUnsupportedCriticalExtension() -> hasUnsupportedCriticalExtension
    org.bouncycastle.x509.X509Attribute[] getAttributes() -> getAttributes
    org.bouncycastle.x509.X509Attribute[] getAttributes(java.lang.String) -> getAttributes
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
org.bouncycastle.x509.X509V2CRLGenerator -> org.bouncycastle.x509.X509V2CRLGenerator:
    org.bouncycastle.asn1.x509.V2TBSCertListGenerator tbsGen -> tbsGen
    org.bouncycastle.asn1.ASN1ObjectIdentifier sigOID -> sigOID
    org.bouncycastle.asn1.x509.AlgorithmIdentifier sigAlgId -> sigAlgId
    java.lang.String signatureAlgorithm -> signatureAlgorithm
    org.bouncycastle.asn1.x509.X509ExtensionsGenerator extGenerator -> extGenerator
    void reset() -> reset
    void setIssuerDN(javax.security.auth.x500.X500Principal) -> setIssuerDN
    void setIssuerDN(org.bouncycastle.asn1.x509.X509Name) -> setIssuerDN
    void setThisUpdate(java.util.Date) -> setThisUpdate
    void setNextUpdate(java.util.Date) -> setNextUpdate
    void addCRLEntry(java.math.BigInteger,java.util.Date,int) -> addCRLEntry
    void addCRLEntry(java.math.BigInteger,java.util.Date,int,java.util.Date) -> addCRLEntry
    void addCRLEntry(java.math.BigInteger,java.util.Date,org.bouncycastle.asn1.x509.X509Extensions) -> addCRLEntry
    void addCRL(java.security.cert.X509CRL) -> addCRL
    void setSignatureAlgorithm(java.lang.String) -> setSignatureAlgorithm
    void addExtension(java.lang.String,boolean,org.bouncycastle.asn1.ASN1Encodable) -> addExtension
    void addExtension(org.bouncycastle.asn1.ASN1ObjectIdentifier,boolean,org.bouncycastle.asn1.ASN1Encodable) -> addExtension
    void addExtension(java.lang.String,boolean,byte[]) -> addExtension
    void addExtension(org.bouncycastle.asn1.ASN1ObjectIdentifier,boolean,byte[]) -> addExtension
    java.security.cert.X509CRL generateX509CRL(java.security.PrivateKey) -> generateX509CRL
    java.security.cert.X509CRL generateX509CRL(java.security.PrivateKey,java.security.SecureRandom) -> generateX509CRL
    java.security.cert.X509CRL generateX509CRL(java.security.PrivateKey,java.lang.String) -> generateX509CRL
    java.security.cert.X509CRL generateX509CRL(java.security.PrivateKey,java.lang.String,java.security.SecureRandom) -> generateX509CRL
    java.security.cert.X509CRL generate(java.security.PrivateKey) -> generate
    java.security.cert.X509CRL generate(java.security.PrivateKey,java.security.SecureRandom) -> generate
    java.security.cert.X509CRL generate(java.security.PrivateKey,java.lang.String) -> generate
    java.security.cert.X509CRL generate(java.security.PrivateKey,java.lang.String,java.security.SecureRandom) -> generate
    org.bouncycastle.asn1.x509.TBSCertList generateCertList() -> generateCertList
    java.security.cert.X509CRL generateJcaObject(org.bouncycastle.asn1.x509.TBSCertList,byte[]) -> generateJcaObject
    java.util.Iterator getSignatureAlgNames() -> getSignatureAlgNames
org.bouncycastle.x509.X509V2CRLGenerator$ExtCRLException -> org.bouncycastle.x509.X509V2CRLGenerator$ExtCRLException:
    java.lang.Throwable cause -> cause
    java.lang.Throwable getCause() -> getCause
org.bouncycastle.x509.X509V3CertificateGenerator -> org.bouncycastle.x509.X509V3CertificateGenerator:
    org.bouncycastle.asn1.x509.V3TBSCertificateGenerator tbsGen -> tbsGen
    org.bouncycastle.asn1.ASN1ObjectIdentifier sigOID -> sigOID
    org.bouncycastle.asn1.x509.AlgorithmIdentifier sigAlgId -> sigAlgId
    java.lang.String signatureAlgorithm -> signatureAlgorithm
    org.bouncycastle.asn1.x509.X509ExtensionsGenerator extGenerator -> extGenerator
    void reset() -> reset
    void setSerialNumber(java.math.BigInteger) -> setSerialNumber
    void setIssuerDN(javax.security.auth.x500.X500Principal) -> setIssuerDN
    void setIssuerDN(org.bouncycastle.asn1.x509.X509Name) -> setIssuerDN
    void setNotBefore(java.util.Date) -> setNotBefore
    void setNotAfter(java.util.Date) -> setNotAfter
    void setSubjectDN(javax.security.auth.x500.X500Principal) -> setSubjectDN
    void setSubjectDN(org.bouncycastle.asn1.x509.X509Name) -> setSubjectDN
    void setPublicKey(java.security.PublicKey) -> setPublicKey
    void setSignatureAlgorithm(java.lang.String) -> setSignatureAlgorithm
    void setSubjectUniqueID(boolean[]) -> setSubjectUniqueID
    void setIssuerUniqueID(boolean[]) -> setIssuerUniqueID
    org.bouncycastle.asn1.DERBitString booleanToBitString(boolean[]) -> booleanToBitString
    void addExtension(java.lang.String,boolean,org.bouncycastle.asn1.ASN1Encodable) -> addExtension
    void addExtension(org.bouncycastle.asn1.ASN1ObjectIdentifier,boolean,org.bouncycastle.asn1.ASN1Encodable) -> addExtension
    void addExtension(java.lang.String,boolean,byte[]) -> addExtension
    void addExtension(org.bouncycastle.asn1.ASN1ObjectIdentifier,boolean,byte[]) -> addExtension
    void copyAndAddExtension(java.lang.String,boolean,java.security.cert.X509Certificate) -> copyAndAddExtension
    void copyAndAddExtension(org.bouncycastle.asn1.ASN1ObjectIdentifier,boolean,java.security.cert.X509Certificate) -> copyAndAddExtension
    java.security.cert.X509Certificate generateX509Certificate(java.security.PrivateKey) -> generateX509Certificate
    java.security.cert.X509Certificate generateX509Certificate(java.security.PrivateKey,java.security.SecureRandom) -> generateX509Certificate
    java.security.cert.X509Certificate generateX509Certificate(java.security.PrivateKey,java.lang.String) -> generateX509Certificate
    java.security.cert.X509Certificate generateX509Certificate(java.security.PrivateKey,java.lang.String,java.security.SecureRandom) -> generateX509Certificate
    java.security.cert.X509Certificate generate(java.security.PrivateKey) -> generate
    java.security.cert.X509Certificate generate(java.security.PrivateKey,java.security.SecureRandom) -> generate
    java.security.cert.X509Certificate generate(java.security.PrivateKey,java.lang.String) -> generate
    java.security.cert.X509Certificate generate(java.security.PrivateKey,java.lang.String,java.security.SecureRandom) -> generate
    org.bouncycastle.asn1.x509.TBSCertificate generateTbsCert() -> generateTbsCert
    java.security.cert.X509Certificate generateJcaObject(org.bouncycastle.asn1.x509.TBSCertificate,byte[]) -> generateJcaObject
    java.util.Iterator getSignatureAlgNames() -> getSignatureAlgNames
org.bouncycastle.x509.extension.AuthorityKeyIdentifierStructure -> org.bouncycastle.x509.extension.AuthorityKeyIdentifierStructure:
    org.bouncycastle.asn1.ASN1Sequence fromCertificate(java.security.cert.X509Certificate) -> fromCertificate
    org.bouncycastle.asn1.ASN1Sequence fromKey(java.security.PublicKey) -> fromKey
org.bouncycastle.x509.extension.X509ExtensionUtil -> org.bouncycastle.x509.extension.X509ExtensionUtil:
    org.bouncycastle.asn1.ASN1Primitive fromExtensionValue(byte[]) -> fromExtensionValue
    java.util.Collection getIssuerAlternativeNames(java.security.cert.X509Certificate) -> getIssuerAlternativeNames
    java.util.Collection getSubjectAlternativeNames(java.security.cert.X509Certificate) -> getSubjectAlternativeNames
    java.util.Collection getAlternativeNames(byte[]) -> getAlternativeNames
org.bouncycastle.x509.util.LDAPStoreHelper -> org.bouncycastle.x509.util.LDAPStoreHelper:
    org.bouncycastle.jce.X509LDAPCertStoreParameters params -> params
    java.lang.String LDAP_PROVIDER -> LDAP_PROVIDER
    java.lang.String REFERRALS_IGNORE -> REFERRALS_IGNORE
    java.lang.String SEARCH_SECURITY_LEVEL -> SEARCH_SECURITY_LEVEL
    java.lang.String URL_CONTEXT_PREFIX -> URL_CONTEXT_PREFIX
    java.util.Map cacheMap -> cacheMap
    int cacheSize -> cacheSize
    long lifeTime -> lifeTime
    javax.naming.directory.DirContext connectLDAP() -> connectLDAP
    java.lang.String parseDN(java.lang.String,java.lang.String) -> parseDN
    java.util.Set createCerts(java.util.List,org.bouncycastle.x509.X509CertStoreSelector) -> createCerts
    java.util.List certSubjectSerialSearch(org.bouncycastle.x509.X509CertStoreSelector,java.lang.String[],java.lang.String[],java.lang.String[]) -> certSubjectSerialSearch
    java.util.List crossCertificatePairSubjectSearch(org.bouncycastle.x509.X509CertPairStoreSelector,java.lang.String[],java.lang.String[],java.lang.String[]) -> crossCertificatePairSubjectSearch
    java.util.List attrCertSubjectSerialSearch(org.bouncycastle.x509.X509AttributeCertStoreSelector,java.lang.String[],java.lang.String[],java.lang.String[]) -> attrCertSubjectSerialSearch
    java.util.List cRLIssuerSearch(org.bouncycastle.x509.X509CRLStoreSelector,java.lang.String[],java.lang.String[],java.lang.String[]) -> cRLIssuerSearch
    java.util.List search(java.lang.String[],java.lang.String,java.lang.String[]) -> search
    java.util.Set createCRLs(java.util.List,org.bouncycastle.x509.X509CRLStoreSelector) -> createCRLs
    java.util.Set createCrossCertificatePairs(java.util.List,org.bouncycastle.x509.X509CertPairStoreSelector) -> createCrossCertificatePairs
    java.util.Set createAttributeCertificates(java.util.List,org.bouncycastle.x509.X509AttributeCertStoreSelector) -> createAttributeCertificates
    java.util.Collection getAuthorityRevocationLists(org.bouncycastle.x509.X509CRLStoreSelector) -> getAuthorityRevocationLists
    java.util.Collection getAttributeCertificateRevocationLists(org.bouncycastle.x509.X509CRLStoreSelector) -> getAttributeCertificateRevocationLists
    java.util.Collection getAttributeAuthorityRevocationLists(org.bouncycastle.x509.X509CRLStoreSelector) -> getAttributeAuthorityRevocationLists
    java.util.Collection getCrossCertificatePairs(org.bouncycastle.x509.X509CertPairStoreSelector) -> getCrossCertificatePairs
    java.util.Collection getUserCertificates(org.bouncycastle.x509.X509CertStoreSelector) -> getUserCertificates
    java.util.Collection getAACertificates(org.bouncycastle.x509.X509AttributeCertStoreSelector) -> getAACertificates
    java.util.Collection getAttributeDescriptorCertificates(org.bouncycastle.x509.X509AttributeCertStoreSelector) -> getAttributeDescriptorCertificates
    java.util.Collection getCACertificates(org.bouncycastle.x509.X509CertStoreSelector) -> getCACertificates
    java.util.Collection getDeltaCertificateRevocationLists(org.bouncycastle.x509.X509CRLStoreSelector) -> getDeltaCertificateRevocationLists
    java.util.Collection getAttributeCertificateAttributes(org.bouncycastle.x509.X509AttributeCertStoreSelector) -> getAttributeCertificateAttributes
    java.util.Collection getCertificateRevocationLists(org.bouncycastle.x509.X509CRLStoreSelector) -> getCertificateRevocationLists
    void addToCache(java.lang.String,java.util.List) -> addToCache
    java.util.List getFromCache(java.lang.String) -> getFromCache
    java.lang.String[] splitString(java.lang.String) -> splitString
    java.lang.String getSubjectAsString(org.bouncycastle.x509.X509CertStoreSelector) -> getSubjectAsString
    javax.security.auth.x500.X500Principal getCertificateIssuer(java.security.cert.X509Certificate) -> getCertificateIssuer
org.bouncycastle.x509.util.StreamParser -> org.bouncycastle.x509.util.StreamParser:
    java.lang.Object read() -> read
    java.util.Collection readAll() -> readAll
org.bouncycastle.x509.util.StreamParsingException -> org.bouncycastle.x509.util.StreamParsingException:
    java.lang.Throwable _e -> _e
    java.lang.Throwable getCause() -> getCause
org.greencubes.client.Client -> org.greencubes.*.DIh:
    java.util.List clients -> AmB
    org.greencubes.client.Client MAIN -> DIh
    java.lang.String name -> JZD
    java.lang.String localizedName -> AMb
    org.greencubes.launcher.LauncherMain launcherWindow -> jqA
    org.greencubes.client.Server selectedServer -> jLa
    void load(org.greencubes.launcher.LauncherMain) -> DIh
    void updateServerList() -> DIh
    java.io.File getWorkingDirectory() -> jqA
    java.util.List getServers() -> AmB
    boolean isSinglePlayerModeAllowed() -> JZD
    void openBrowserPage(javafx.scene.web.WebEngine) -> DIh
    org.greencubes.client.IClientStatus getStatus() -> AMb
    void doJob() -> jLa
    org.greencubes.client.Server getSelectedServer() -> diH
    void selectServer(org.greencubes.client.Server) -> DIh
    void clientStatusUpdate() -> dAZ
org.greencubes.client.Client$1 -> org.greencubes.*.jqA:
    org.greencubes.client.Client this$0 -> DIh
    void run() -> run
org.greencubes.client.ClientMain -> org.greencubes.*.AmB:
    org.greencubes.client.ClientMain$MainClinetStatus status -> AmB
    java.util.List servers -> JZD
    org.greencubes.client.ClientMain$ClientWorker worker -> AMb
    java.util.List gameFiles -> jLa
    org.greencubes.client.ClientMain$FileDownloader downloader -> diH
    int filesToDownload -> dAZ
    long bytesToDownload -> jZd
    boolean isEstimate -> vag
    int filesDownloaded -> vai
    long bytesDownloaded -> jvp
    org.greencubes.client.ProcessMonitorThread processMonitor -> lGC
    org.json.JSONObject currentVersion -> dih
    org.json.JSONObject remoteVersion -> jQA
    int[] $SWITCH_TABLE$org$greencubes$client$IClientStatus$Status -> AMB
    boolean $assertionsDisabled -> ThL
    void updateServerList() -> DIh
    void addServers(java.io.File) -> DIh
    java.io.File getWorkingDirectory() -> jqA
    java.util.List getLaunchParameters(java.lang.String,java.lang.String,org.greencubes.client.Server) -> DIh
    java.util.List getServers() -> AmB
    boolean isSinglePlayerModeAllowed() -> JZD
    void openBrowserPage(javafx.scene.web.WebEngine) -> DIh
    org.greencubes.client.IClientStatus getStatus() -> AMb
    void load(org.greencubes.launcher.LauncherMain) -> DIh
    void doJob() -> jLa
    void prepareClientUpdate() -> jZd
    boolean checkGameFilesCorrectness() -> vag
    void updateVersionFile() -> vai
    void status(org.greencubes.client.IClientStatus$Status,java.lang.String,float) -> DIh
    org.greencubes.client.ClientMain$MainClinetStatus access$0(org.greencubes.client.ClientMain) -> DIh
    void access$1(org.greencubes.client.ClientMain,org.greencubes.client.IClientStatus$Status,java.lang.String,float) -> DIh
    void access$2(org.greencubes.client.ClientMain) -> jqA
    org.greencubes.client.ProcessMonitorThread access$3(org.greencubes.client.ClientMain) -> AmB
    void access$4(org.greencubes.client.ClientMain,org.greencubes.client.ProcessMonitorThread) -> DIh
    org.greencubes.client.ClientMain$FileDownloader access$5(org.greencubes.client.ClientMain) -> JZD
    void access$6(org.greencubes.client.ClientMain,org.greencubes.client.ClientMain$FileDownloader) -> DIh
    int access$7(org.greencubes.client.ClientMain) -> AMb
    int access$8(org.greencubes.client.ClientMain) -> jLa
    boolean access$9(org.greencubes.client.ClientMain) -> diH
    long access$10(org.greencubes.client.ClientMain) -> dAZ
    long access$11(org.greencubes.client.ClientMain) -> jZd
    void access$12(org.greencubes.client.ClientMain) -> vag
    void access$13(org.greencubes.client.ClientMain,int) -> DIh
    void access$14(org.greencubes.client.ClientMain,long) -> DIh
    java.util.List access$15(org.greencubes.client.ClientMain) -> vai
    int[] $SWITCH_TABLE$org$greencubes$client$IClientStatus$Status() -> jvp
org.greencubes.client.ClientMain$1 -> org.greencubes.*.JZD:
    org.greencubes.client.ClientMain this$0 -> DIh
    javafx.scene.web.WebEngine val$browser -> jqA
    void run() -> run
org.greencubes.client.ClientMain$ClientWorker -> org.greencubes.*.AMb:
    long lastUpdateCheck -> DIh
    boolean updateAborted -> jqA
    org.greencubes.client.ClientMain this$0 -> AmB
    int[] $SWITCH_TABLE$org$greencubes$client$IClientStatus$Status -> JZD
    void run() -> run
    int[] $SWITCH_TABLE$org$greencubes$client$IClientStatus$Status() -> DIh
    void access$2(org.greencubes.client.ClientMain$ClientWorker,boolean) -> DIh
    void access$3(org.greencubes.client.ClientMain$ClientWorker,long) -> DIh
org.greencubes.client.ClientMain$FileDownloader -> org.greencubes.*.jLa:
    int MAX_REPEATS -> JZD
    boolean abort -> DIh
    boolean finished -> jqA
    java.lang.String error -> AmB
    int repeats -> AMb
    org.greencubes.client.ClientMain this$0 -> jLa
    void abort() -> DIh
    void run() -> run
org.greencubes.client.ClientMain$MainClinetStatus -> org.greencubes.*.diH:
    org.greencubes.client.IClientStatus$Status status -> DIh
    java.lang.String title -> jqA
    float progress -> AmB
    org.greencubes.client.ClientMain this$0 -> JZD
    org.greencubes.client.IClientStatus$Status getStatus() -> DIh
    java.lang.String getStatusTitle() -> jqA
    float getStatusProgress() -> AmB
    void access$0(org.greencubes.client.ClientMain$MainClinetStatus,org.greencubes.client.IClientStatus$Status) -> DIh
    void access$1(org.greencubes.client.ClientMain$MainClinetStatus,java.lang.String) -> DIh
    void access$2(org.greencubes.client.ClientMain$MainClinetStatus,float) -> DIh
    void showError() -> JZD
org.greencubes.client.GameFile -> org.greencubes.*.dAZ:
    java.io.File localFile -> DIh
    java.lang.String remoteFileUrl -> jqA
    byte[] localmd5 -> AmB
    byte[] remotemd5 -> JZD
    boolean needUpdate -> AMb
    int remoteFileSize -> jLa
    java.lang.String toString() -> toString
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    org.json.JSONObject getJSONObject(java.io.File) -> DIh
    void downloadFile(org.greencubes.download.Downloader,java.lang.String) -> DIh
    org.greencubes.client.GameFile getFile(org.json.JSONObject,java.io.File,java.util.Map) -> DIh
org.greencubes.client.IClientStatus -> org.greencubes.*.jZd:
    org.greencubes.client.IClientStatus$Status getStatus() -> DIh
    java.lang.String getStatusTitle() -> jqA
    float getStatusProgress() -> AmB
org.greencubes.client.IClientStatus$Status -> org.greencubes.*.vag:
    org.greencubes.client.IClientStatus$Status CHECK -> DIh
    org.greencubes.client.IClientStatus$Status READY -> jqA
    org.greencubes.client.IClientStatus$Status NEED_UPDATE -> AmB
    org.greencubes.client.IClientStatus$Status UPDATING -> JZD
    org.greencubes.client.IClientStatus$Status LOADING -> AMb
    org.greencubes.client.IClientStatus$Status RUNNING -> jLa
    org.greencubes.client.IClientStatus$Status ERROR -> diH
    org.greencubes.client.IClientStatus$Status OFFLINE -> dAZ
    java.lang.String statusName -> jZd
    java.lang.String statusActionName -> vag
    org.greencubes.client.IClientStatus$Status[] ENUM$VALUES -> vai
    org.greencubes.client.IClientStatus$Status[] values() -> values
    org.greencubes.client.IClientStatus$Status valueOf(java.lang.String) -> valueOf
org.greencubes.client.ProcessMonitorThread -> org.greencubes.*.vai:
    java.lang.Process process -> jqA
    int exitValue -> AmB
    boolean started -> DIh
    int getExitValue() -> AmB
    boolean isStarted() -> DIh
    boolean isProcessRunning() -> jqA
    void processSignal(java.lang.String) -> DIh
    void run() -> run
org.greencubes.client.Server -> org.greencubes.*.jvp:
    java.lang.String name -> DIh
    java.lang.String address -> jqA
    int port -> AmB
    java.lang.String getFullAddress() -> DIh
    boolean canOpenBrowser() -> jqA
    void onenURLInBrowser(java.lang.String) -> DIh
    org.json.JSONObject sessionRequest(java.lang.String) -> jqA
    boolean checkAnswer(org.json.JSONObject) -> DIh
org.greencubes.download.DownloadConnectionError -> org.greencubes.*.lGC:
    long serialVersionUID -> DIh
org.greencubes.download.DownloadThread -> org.greencubes.*.dih:
    java.io.IOException lastError -> DIh
    org.greencubes.download.Downloader downloader -> AmB
    java.io.File f -> JZD
    java.lang.String url -> AMb
    boolean downloaded -> jqA
    void run() -> run
org.greencubes.download.Downloader -> org.greencubes.*.jQA:
    boolean printUrls -> jqA
    java.util.List errors -> AmB
    java.util.List serversList -> JZD
    int currentServer -> AMb
    int serverListRepeated -> jLa
    int bytesToDownload -> diH
    int bytesDownloaded -> DIh
    java.io.IOException lastError -> dAZ
    boolean waitingForRepeat -> jZd
    org.apache.http.impl.client.CloseableHttpClient httpClient -> vag
    java.util.List log -> vai
    void close() -> jqA
    void clearServers() -> AmB
    java.lang.String[] getServers() -> JZD
    java.lang.String[] getLog() -> AMb
    void addServer(java.lang.String) -> DIh
    void nextServer() -> jLa
    boolean isCrashed() -> diH
    int getFileSize(java.lang.String) -> AmB
    void downloadFile(java.io.File,java.lang.String) -> DIh
    java.io.InputStream getInputStream(java.lang.String) -> JZD
    java.lang.String readURL(java.lang.String) -> jqA
    java.lang.String readURL(java.lang.String,java.util.Map) -> DIh
    void setupBetterKeystore() -> DIh
org.greencubes.download.HTTPResponseError -> org.greencubes.*.AMB:
    long serialVersionUID -> DIh
org.greencubes.launcher.AuthError -> org.greencubes.*.ThL:
    long serialVersionUID -> jqA
    int errorCode -> DIh
org.greencubes.launcher.LauncherInstanceError -> org.greencubes.*.Vag:
    void showError() -> DIh
org.greencubes.launcher.LauncherLogin -> org.greencubes.*.RuE:
    javax.swing.JFrame frame -> DIh
    javax.swing.JPanel centerPanel -> jqA
    javax.swing.JTextField userField -> AmB
    javax.swing.JPasswordField passwordField -> JZD
    javax.swing.JCheckBox autoLoginCheckBox -> AMb
    javax.swing.JTextPane errorPane -> jLa
    boolean isLoginDisplayed -> diH
    void launcherMain() -> DIh
    void joinOffline() -> AmB
    void doLogin() -> JZD
    void displayProgress(java.lang.String) -> DIh
    void displayLogin() -> jqA
    void max(java.awt.Component,java.lang.Integer,java.lang.Integer) -> jqA
    void s(java.awt.Component,int,int) -> jqA
    void access$0(java.awt.Component,int,int) -> DIh
    javax.swing.JFrame access$1(org.greencubes.launcher.LauncherLogin) -> DIh
    void access$2(java.awt.Component,java.lang.Integer,java.lang.Integer) -> DIh
    void access$3(org.greencubes.launcher.LauncherLogin,javax.swing.JPanel) -> DIh
    void access$4(org.greencubes.launcher.LauncherLogin,java.lang.String) -> DIh
    javax.swing.JTextField access$5(org.greencubes.launcher.LauncherLogin) -> jqA
    void access$6(org.greencubes.launcher.LauncherLogin) -> AmB
    javax.swing.JPasswordField access$7(org.greencubes.launcher.LauncherLogin) -> JZD
    void access$8(org.greencubes.launcher.LauncherLogin) -> AMb
    void access$9(org.greencubes.launcher.LauncherLogin) -> jLa
    void access$10(org.greencubes.launcher.LauncherLogin,javax.swing.JTextField) -> DIh
    void access$11(org.greencubes.launcher.LauncherLogin,javax.swing.JPasswordField) -> DIh
    javax.swing.JCheckBox access$12(org.greencubes.launcher.LauncherLogin) -> diH
    void access$13(org.greencubes.launcher.LauncherLogin,javax.swing.JCheckBox) -> DIh
    void access$14(org.greencubes.launcher.LauncherLogin) -> dAZ
    void setIcons(java.util.List) -> DIh
    void setTitle(java.lang.String) -> jqA
    boolean hasRetinaDisplay() -> AMb
org.greencubes.launcher.LauncherLogin$1 -> org.greencubes.*.tHL:
    org.greencubes.launcher.LauncherLogin this$0 -> DIh
    org.greencubes.launcher.LauncherLogin access$0(org.greencubes.launcher.LauncherLogin$1) -> DIh
org.greencubes.launcher.LauncherLogin$1$1 -> org.greencubes.*.JzD:
    org.greencubes.launcher.LauncherLogin$1 this$1 -> DIh
    org.greencubes.launcher.LauncherLogin$1 access$0(org.greencubes.launcher.LauncherLogin$1$1) -> DIh
org.greencubes.launcher.LauncherLogin$1$1$1 -> org.greencubes.*.jqa:
    org.greencubes.launcher.LauncherLogin$1$1 this$2 -> DIh
org.greencubes.launcher.LauncherLogin$1$1$1$1 -> org.greencubes.*.Lgc:
    org.greencubes.launcher.LauncherLogin$1$1$1 this$3 -> DIh
org.greencubes.launcher.LauncherLogin$1$1$2 -> org.greencubes.*.jvP:
    org.greencubes.launcher.LauncherLogin$1$1 this$2 -> DIh
org.greencubes.launcher.LauncherLogin$1$1$2$1 -> org.greencubes.*.JLA:
    org.greencubes.launcher.LauncherLogin$1$1$2 this$3 -> DIh
org.greencubes.launcher.LauncherLogin$1$2 -> org.greencubes.*.Jla:
    org.greencubes.launcher.LauncherLogin$1 this$1 -> DIh
org.greencubes.launcher.LauncherLogin$1$2$1 -> org.greencubes.*.JLa:
    org.greencubes.launcher.LauncherLogin$1$2 this$2 -> DIh
org.greencubes.launcher.LauncherLogin$1$2$1$1 -> org.greencubes.*.jZD:
    org.greencubes.launcher.LauncherLogin$1$2$1 this$3 -> DIh
org.greencubes.launcher.LauncherLogin$10 -> org.greencubes.*.vAg:
    org.greencubes.launcher.LauncherLogin this$0 -> DIh
    org.greencubes.launcher.LauncherLogin access$0(org.greencubes.launcher.LauncherLogin$10) -> DIh
org.greencubes.launcher.LauncherLogin$10$1 -> org.greencubes.*.rUE:
    org.greencubes.launcher.LauncherLogin$10 this$1 -> DIh
    org.greencubes.launcher.LauncherLogin$10 access$0(org.greencubes.launcher.LauncherLogin$10$1) -> DIh
org.greencubes.launcher.LauncherLogin$10$1$1 -> org.greencubes.*.rue:
    org.greencubes.launcher.LauncherLogin$10$1 this$2 -> DIh
org.greencubes.launcher.LauncherLogin$10$1$2 -> org.greencubes.*.dIH:
    org.greencubes.launcher.LauncherLogin$10$1 this$2 -> DIh
org.greencubes.launcher.LauncherLogin$10$1$3 -> org.greencubes.*.RUe:
    org.greencubes.launcher.LauncherLogin$10$1 this$2 -> DIh
    void mouseClicked(java.awt.event.MouseEvent) -> mouseClicked
    void mouseEntered(java.awt.event.MouseEvent) -> mouseEntered
    void mouseExited(java.awt.event.MouseEvent) -> mouseExited
org.greencubes.launcher.LauncherLogin$11 -> org.greencubes.*.jVP:
    org.greencubes.launcher.LauncherLogin this$0 -> DIh
    org.greencubes.launcher.LauncherLogin access$0(org.greencubes.launcher.LauncherLogin$11) -> DIh
org.greencubes.launcher.LauncherLogin$11$1 -> org.greencubes.*.YGS:
    org.greencubes.launcher.LauncherLogin$11 this$1 -> DIh
    org.greencubes.launcher.LauncherLogin$11 access$0(org.greencubes.launcher.LauncherLogin$11$1) -> DIh
org.greencubes.launcher.LauncherLogin$11$1$1 -> org.greencubes.*.dAz:
    org.greencubes.launcher.LauncherLogin$11$1 this$2 -> DIh
    void mouseClicked(java.awt.event.MouseEvent) -> mouseClicked
    void mouseEntered(java.awt.event.MouseEvent) -> mouseEntered
    void mouseExited(java.awt.event.MouseEvent) -> mouseExited
org.greencubes.launcher.LauncherLogin$12 -> org.greencubes.*.jLA:
    org.greencubes.launcher.LauncherLogin this$0 -> DIh
org.greencubes.launcher.LauncherLogin$12$1 -> org.greencubes.*.vaI:
    org.greencubes.launcher.LauncherLogin$12 this$1 -> DIh
org.greencubes.launcher.LauncherLogin$12$1$1 -> org.greencubes.*.dIh:
    org.greencubes.launcher.LauncherLogin$12$1 this$2 -> DIh
    void mouseClicked(java.awt.event.MouseEvent) -> mouseClicked
    void mouseEntered(java.awt.event.MouseEvent) -> mouseEntered
    void mouseExited(java.awt.event.MouseEvent) -> mouseExited
org.greencubes.launcher.LauncherLogin$12$2 -> org.greencubes.*.Dih:
    org.greencubes.launcher.LauncherLogin$12 this$1 -> DIh
org.greencubes.launcher.LauncherLogin$12$2$1 -> org.greencubes.*.Rue:
    org.greencubes.launcher.LauncherLogin$12$2 this$2 -> DIh
    void mouseClicked(java.awt.event.MouseEvent) -> mouseClicked
    void mouseEntered(java.awt.event.MouseEvent) -> mouseEntered
    void mouseExited(java.awt.event.MouseEvent) -> mouseExited
org.greencubes.launcher.LauncherLogin$13 -> org.greencubes.*.lGc:
    org.greencubes.launcher.LauncherLogin this$0 -> DIh
    void actionPerformed(java.awt.event.ActionEvent) -> actionPerformed
org.greencubes.launcher.LauncherLogin$14 -> org.greencubes.*.jzD:
    org.greencubes.launcher.LauncherLogin this$0 -> DIh
    void actionPerformed(java.awt.event.ActionEvent) -> actionPerformed
org.greencubes.launcher.LauncherLogin$2 -> org.greencubes.*.YGs:
    org.greencubes.launcher.LauncherLogin this$0 -> DIh
    void windowClosing(java.awt.event.WindowEvent) -> windowClosing
org.greencubes.launcher.LauncherLogin$3 -> org.greencubes.*.vAI:
    org.greencubes.launcher.LauncherLogin this$0 -> DIh
    void run() -> run
org.greencubes.launcher.LauncherLogin$4 -> org.greencubes.*.DaZ:
    org.greencubes.launcher.LauncherLogin this$0 -> DIh
    void run() -> run
org.greencubes.launcher.LauncherLogin$5 -> org.greencubes.*.amb:
    org.greencubes.launcher.LauncherLogin this$0 -> DIh
    void run() -> run
org.greencubes.launcher.LauncherLogin$6 -> org.greencubes.*.aMB:
    org.greencubes.launcher.LauncherLogin this$0 -> DIh
org.greencubes.launcher.LauncherLogin$6$1 -> org.greencubes.*.JZd:
    org.greencubes.launcher.LauncherLogin$6 this$1 -> DIh
org.greencubes.launcher.LauncherLogin$6$2 -> org.greencubes.*.DAz:
    org.greencubes.launcher.LauncherLogin$6 this$1 -> DIh
org.greencubes.launcher.LauncherLogin$7 -> org.greencubes.*.lgC:
    org.greencubes.launcher.LauncherLogin this$0 -> DIh
org.greencubes.launcher.LauncherLogin$7$1 -> org.greencubes.*.LgC:
    org.greencubes.launcher.LauncherLogin$7 this$1 -> jqA
org.greencubes.launcher.LauncherLogin$8 -> org.greencubes.*.RUE:
    org.greencubes.launcher.LauncherLogin this$0 -> DIh
org.greencubes.launcher.LauncherLogin$8$1 -> org.greencubes.*.VAG:
    org.greencubes.launcher.LauncherLogin$8 this$1 -> jqA
org.greencubes.launcher.LauncherLogin$9 -> org.greencubes.*.VAi:
    org.greencubes.launcher.LauncherLogin this$0 -> DIh
    org.greencubes.launcher.LauncherLogin access$0(org.greencubes.launcher.LauncherLogin$9) -> DIh
org.greencubes.launcher.LauncherLogin$9$1 -> org.greencubes.*.jVp:
    org.greencubes.launcher.LauncherLogin$9 this$1 -> DIh
    org.greencubes.launcher.LauncherLogin$9 access$0(org.greencubes.launcher.LauncherLogin$9$1) -> DIh
org.greencubes.launcher.LauncherLogin$9$1$1 -> org.greencubes.*.yGs:
    org.greencubes.launcher.LauncherLogin$9$1 this$2 -> DIh
    org.greencubes.launcher.LauncherLogin$9$1 access$0(org.greencubes.launcher.LauncherLogin$9$1$1) -> DIh
org.greencubes.launcher.LauncherLogin$9$1$1$1 -> org.greencubes.*.Amb:
    org.greencubes.launcher.LauncherLogin$9$1$1 this$3 -> DIh
    javax.swing.ImageIcon val$iconChecked -> jqA
    javax.swing.ImageIcon val$iconUnchecked -> AmB
    void itemStateChanged(java.awt.event.ItemEvent) -> itemStateChanged
org.greencubes.launcher.LauncherLogin$9$1$1$2 -> org.greencubes.*.YgS:
    org.greencubes.launcher.LauncherLogin$9$1$1 this$3 -> DIh
    void mouseEntered(java.awt.event.MouseEvent) -> mouseEntered
    void mouseExited(java.awt.event.MouseEvent) -> mouseExited
org.greencubes.launcher.LauncherLogin$9$1$2 -> org.greencubes.*.yGS:
    javax.swing.JDialog toolTip -> DIh
    org.greencubes.launcher.LauncherLogin$9$1 this$2 -> jqA
    org.greencubes.launcher.LauncherLogin$9$1 access$0(org.greencubes.launcher.LauncherLogin$9$1$2) -> DIh
org.greencubes.launcher.LauncherLogin$9$1$2$1 -> org.greencubes.*.JQa:
    org.greencubes.launcher.LauncherLogin$9$1$2 this$3 -> DIh
    javax.swing.JLabel val$lbl -> jqA
    void mousePressed(java.awt.event.MouseEvent) -> mousePressed
    void mouseEntered(java.awt.event.MouseEvent) -> mouseEntered
    void mouseExited(java.awt.event.MouseEvent) -> mouseExited
org.greencubes.launcher.LauncherLogin$9$1$2$1$1 -> org.greencubes.*.aMb:
    org.greencubes.launcher.LauncherLogin$9$1$2$1 this$4 -> DIh
org.greencubes.launcher.LauncherLogin$9$1$2$1$1$1 -> org.greencubes.*.tHl:
    org.greencubes.launcher.LauncherLogin$9$1$2$1$1 this$5 -> DIh
org.greencubes.launcher.LauncherMain -> org.greencubes.*.lgc:
    org.greencubes.launcher.LauncherMain$Config config -> DIh
    org.greencubes.launcher.LauncherMain$Play play -> jqA
    org.greencubes.swing.JPanelBG logoPanel -> jZd
    javax.swing.JPanel innerPanel -> vag
    org.greencubes.swing.UndecoratedJFrame frame -> AmB
    javax.swing.JPanel mainPanel -> JZD
    javax.swing.JPanel clientPanel -> AMb
    javax.swing.JPanel configPanel -> jLa
    javax.swing.JLabel topGame -> diH
    javax.swing.JLabel configLabel -> dAZ
    void saveFrameInfo() -> DIh
    void onHide() -> jqA
    void onUnhide() -> AmB
    void clientStatusUpdate(org.greencubes.client.Client) -> DIh
    void s(java.awt.Component,int,int) -> DIh
    void access$0(org.greencubes.launcher.LauncherMain,org.greencubes.swing.JPanelBG) -> DIh
    void access$1(org.greencubes.launcher.LauncherMain) -> DIh
    org.greencubes.swing.JPanelBG access$2(org.greencubes.launcher.LauncherMain) -> jqA
org.greencubes.launcher.LauncherMain$1 -> org.greencubes.*.DiH:
    org.greencubes.launcher.LauncherMain this$0 -> DIh
    org.greencubes.launcher.LauncherMain access$0(org.greencubes.launcher.LauncherMain$1) -> DIh
org.greencubes.launcher.LauncherMain$1$1 -> org.greencubes.*.JvP:
    org.greencubes.launcher.LauncherMain$1 this$1 -> DIh
    org.greencubes.launcher.LauncherMain$1 access$0(org.greencubes.launcher.LauncherMain$1$1) -> DIh
org.greencubes.launcher.LauncherMain$1$1$1 -> org.greencubes.*.VaI:
    java.awt.Image highlightBg -> DIh
    java.awt.Image activeBg -> jqA
    java.awt.Image highlighedActiveBg -> AmB
    java.awt.Image defaultBg -> JZD
    boolean mouseActive -> AMb
    org.greencubes.launcher.LauncherMain$1$1 this$2 -> jZd
    org.greencubes.launcher.LauncherMain$1$1 access$0(org.greencubes.launcher.LauncherMain$1$1$1) -> DIh
org.greencubes.launcher.LauncherMain$1$1$1$1 -> org.greencubes.*.VaG:
    org.greencubes.launcher.LauncherMain$1$1$1 this$3 -> DIh
    org.greencubes.swing.GPopupMenu val$mainPopup -> jqA
    void mousePressed(java.awt.event.MouseEvent) -> mousePressed
org.greencubes.launcher.LauncherMain$1$1$1$2 -> org.greencubes.*.VAI:
    org.greencubes.launcher.LauncherMain$1$1$1 this$3 -> DIh
    void actionPerformed(java.awt.event.ActionEvent) -> actionPerformed
org.greencubes.launcher.LauncherMain$1$1$1$3 -> org.greencubes.*.VAg:
    org.greencubes.launcher.LauncherMain$1$1$1 this$3 -> DIh
    void actionPerformed(java.awt.event.ActionEvent) -> actionPerformed
org.greencubes.launcher.LauncherMain$1$1$1$4 -> org.greencubes.*.jla:
    org.greencubes.launcher.LauncherMain$1$1$1 this$3 -> DIh
    void actionPerformed(java.awt.event.ActionEvent) -> actionPerformed
org.greencubes.launcher.LauncherMain$1$1$1$4$1 -> org.greencubes.*.Vai:
    org.greencubes.launcher.LauncherMain$1$1$1$4 this$4 -> DIh
    void run() -> run
org.greencubes.launcher.LauncherMain$1$1$1$5 -> org.greencubes.*.LGc:
    org.greencubes.launcher.LauncherMain$1$1$1 this$3 -> DIh
    void actionPerformed(java.awt.event.ActionEvent) -> actionPerformed
org.greencubes.launcher.LauncherMain$1$1$1$6 -> org.greencubes.*.Jqa:
    org.greencubes.launcher.LauncherMain$1$1$1 this$3 -> DIh
    javax.swing.JPanel val$topPanel -> jqA
    void popupMenuWillBecomeVisible(javax.swing.event.PopupMenuEvent) -> popupMenuWillBecomeVisible
    void popupMenuWillBecomeInvisible(javax.swing.event.PopupMenuEvent) -> popupMenuWillBecomeInvisible
    void popupMenuCanceled(javax.swing.event.PopupMenuEvent) -> popupMenuCanceled
org.greencubes.launcher.LauncherMain$1$1$1$7 -> org.greencubes.*.LGC:
    org.greencubes.launcher.LauncherMain$1$1$1 this$3 -> DIh
    javax.swing.JPanel val$topPanel -> jqA
    void actionPerformed(java.awt.event.ActionEvent) -> actionPerformed
org.greencubes.launcher.LauncherMain$1$1$1$8 -> org.greencubes.*.jzd:
    org.greencubes.launcher.LauncherMain$1$1$1 this$3 -> DIh
    org.greencubes.swing.GPopupMenu val$mainPopup -> jqA
    javax.swing.JPanel val$topPanel -> AmB
    void mouseEntered(java.awt.event.MouseEvent) -> mouseEntered
    void mouseExited(java.awt.event.MouseEvent) -> mouseExited
org.greencubes.launcher.LauncherMain$1$1$2 -> org.greencubes.*.ygs:
    org.greencubes.launcher.LauncherMain$1$1 this$2 -> DIh
    void drawBg(java.awt.Graphics) -> DIh
    org.greencubes.launcher.LauncherMain$1$1 access$0(org.greencubes.launcher.LauncherMain$1$1$2) -> DIh
org.greencubes.launcher.LauncherMain$1$1$2$1 -> org.greencubes.*.JQA:
    org.greencubes.launcher.LauncherMain$1$1$2 this$3 -> DIh
    org.greencubes.launcher.LauncherMain$1$1$2 access$0(org.greencubes.launcher.LauncherMain$1$1$2$1) -> DIh
org.greencubes.launcher.LauncherMain$1$1$2$1$1 -> org.greencubes.*.amB:
    org.greencubes.launcher.LauncherMain$1$1$2$1 this$4 -> DIh
org.greencubes.launcher.LauncherMain$1$1$2$1$1$1 -> org.greencubes.*.thL:
    org.greencubes.launcher.LauncherMain$1$1$2$1$1 this$5 -> DIh
org.greencubes.launcher.LauncherMain$1$1$2$1$1$2 -> org.greencubes.*.vAG:
    org.greencubes.launcher.LauncherMain$1$1$2$1$1 this$5 -> DIh
    void mousePressed(java.awt.event.MouseEvent) -> mousePressed
org.greencubes.launcher.LauncherMain$1$1$2$1$2 -> org.greencubes.*.Thl:
    org.greencubes.launcher.LauncherMain$1$1$2$1 this$4 -> DIh
org.greencubes.launcher.LauncherMain$1$1$2$1$2$1 -> org.greencubes.*.Jvp:
    org.greencubes.launcher.LauncherMain$1$1$2$1$2 this$5 -> DIh
org.greencubes.launcher.LauncherMain$1$1$2$1$3 -> org.greencubes.*.vAi:
    org.greencubes.launcher.LauncherMain$1$1$2$1 this$4 -> DIh
org.greencubes.launcher.LauncherMain$1$1$2$1$3$1 -> org.greencubes.*.thl:
    org.greencubes.launcher.LauncherMain$1$1$2$1$3 this$5 -> DIh
org.greencubes.launcher.LauncherMain$1$1$2$1$3$2 -> org.greencubes.*.vaG:
    org.greencubes.launcher.LauncherMain$1$1$2$1$3 this$5 -> DIh
    void mousePressed(java.awt.event.MouseEvent) -> mousePressed
org.greencubes.launcher.LauncherMain$1$1$2$2 -> org.greencubes.*.rUe:
    org.greencubes.launcher.LauncherMain$1$1$2 this$3 -> DIh
    org.greencubes.launcher.LauncherMain$1$1$2 access$0(org.greencubes.launcher.LauncherMain$1$1$2$2) -> DIh
org.greencubes.launcher.LauncherMain$1$1$2$2$1 -> org.greencubes.*.THL:
    org.greencubes.launcher.LauncherMain$1$1$2$2 this$4 -> DIh
    org.greencubes.launcher.LauncherMain$1$1$2$2 access$0(org.greencubes.launcher.LauncherMain$1$1$2$2$1) -> DIh
org.greencubes.launcher.LauncherMain$1$1$2$2$1$1 -> org.greencubes.*.daZ:
    org.greencubes.launcher.LauncherMain$1$1$2$2$1 this$5 -> DIh
    void mouseEntered(java.awt.event.MouseEvent) -> mouseEntered
    void mouseExited(java.awt.event.MouseEvent) -> mouseExited
    void mousePressed(java.awt.event.MouseEvent) -> mousePressed
org.greencubes.launcher.LauncherMain$1$1$2$2$2 -> org.greencubes.*.DIH:
    org.greencubes.launcher.LauncherMain$1$1$2$2 this$4 -> DIh
org.greencubes.launcher.LauncherMain$1$1$2$2$2$1 -> org.greencubes.*.ruE:
    org.greencubes.launcher.LauncherMain$1$1$2$2$2 this$5 -> DIh
    void mouseEntered(java.awt.event.MouseEvent) -> mouseEntered
    void mouseExited(java.awt.event.MouseEvent) -> mouseExited
    void mousePressed(java.awt.event.MouseEvent) -> mousePressed
org.greencubes.launcher.LauncherMain$1$1$2$2$3 -> org.greencubes.*.JqA:
    org.greencubes.launcher.LauncherMain$1$1$2$2 this$4 -> DIh
org.greencubes.launcher.LauncherMain$1$2 -> org.greencubes.*.JVp:
    org.greencubes.launcher.LauncherMain$1 this$1 -> DIh
org.greencubes.launcher.LauncherMain$2 -> org.greencubes.*.DAZ:
    org.greencubes.launcher.LauncherMain this$0 -> DIh
    void componentResized(java.awt.event.ComponentEvent) -> componentResized
    void componentMoved(java.awt.event.ComponentEvent) -> componentMoved
org.greencubes.launcher.LauncherMain$3 -> org.greencubes.*.daz:
    org.greencubes.launcher.LauncherMain this$0 -> DIh
    void componentMoved(java.awt.event.ComponentEvent) -> componentMoved
org.greencubes.launcher.LauncherMain$4 -> org.greencubes.*.Ygs:
    org.greencubes.launcher.LauncherMain this$0 -> DIh
    void windowClosing(java.awt.event.WindowEvent) -> windowClosing
org.greencubes.launcher.LauncherMain$5 -> org.greencubes.*.JVP:
    org.greencubes.launcher.LauncherMain this$0 -> DIh
    void run() -> run
org.greencubes.launcher.LauncherMain$6 -> org.greencubes.*.THl:
    org.greencubes.launcher.LauncherMain this$0 -> DIh
    void run() -> run
org.greencubes.launcher.LauncherMain$7 -> org.greencubes.*.Jzd:
    org.greencubes.launcher.LauncherMain this$0 -> DIh
    void run() -> run
org.greencubes.launcher.LauncherMain$7$1 -> org.greencubes.*.jlA:
    org.greencubes.launcher.LauncherMain$7 this$1 -> DIh
org.greencubes.launcher.LauncherMain$7$1$1 -> org.greencubes.*.a:
    org.greencubes.launcher.LauncherMain$7$1 this$2 -> DIh
org.greencubes.launcher.LauncherMain$7$1$1$1 -> org.greencubes.*.b:
    org.greencubes.launcher.LauncherMain$7$1$1 this$3 -> DIh
org.greencubes.launcher.LauncherMain$7$1$1$1$1 -> org.greencubes.*.c:
    org.greencubes.launcher.LauncherMain$7$1$1$1 this$4 -> DIh
org.greencubes.launcher.LauncherMain$7$1$1$1$1$1 -> org.greencubes.*.d:
    org.greencubes.launcher.LauncherMain$7$1$1$1$1 this$5 -> DIh
org.greencubes.launcher.LauncherMain$7$1$1$1$1$2 -> org.greencubes.*.e:
    org.greencubes.launcher.LauncherMain$7$1$1$1$1 this$5 -> DIh
org.greencubes.launcher.LauncherMain$7$1$1$1$1$3 -> org.greencubes.*.f:
    org.greencubes.launcher.LauncherMain$7$1$1$1$1 this$5 -> DIh
    javax.swing.JDialog val$dialog -> jqA
    void mousePressed(java.awt.event.MouseEvent) -> mousePressed
org.greencubes.launcher.LauncherMain$Config -> org.greencubes.*.g:
    org.greencubes.launcher.LauncherMain superClass -> DIh
    javax.swing.JPanel configPage -> jqA
    int configPageId -> AmB
    javax.swing.JLabel launcherConfig -> JZD
    javax.swing.JLabel clientConfig -> AMb
    javax.swing.JLabel about -> jLa
    java.lang.String newLanguage -> diH
    org.greencubes.launcher.LauncherOptions$OnStartAction newOnStartAction -> dAZ
    org.greencubes.launcher.LauncherOptions$OnStartAction newOnCloseAction -> jZd
    org.greencubes.launcher.LauncherMain$Config$ScreenSize newScreenSize -> vag
    java.util.List screenSizes -> vai
    org.greencubes.yaml.YamlFile newClientConfig -> jvp
    java.util.List supportedClientLanguages -> lGC
    java.lang.String textureQuality -> dih
    boolean newAutoLogin -> jQA
    void displayConfig() -> DIh
    void displayConfigPage(int) -> DIh
    void s(java.awt.Component,int,int) -> DIh
    void access$0(org.greencubes.launcher.LauncherMain$Config,javax.swing.JLabel) -> DIh
    void access$1(org.greencubes.launcher.LauncherMain$Config,javax.swing.JLabel) -> jqA
    void access$2(org.greencubes.launcher.LauncherMain$Config,javax.swing.JLabel) -> AmB
    javax.swing.JLabel access$3(org.greencubes.launcher.LauncherMain$Config) -> DIh
    void access$4(org.greencubes.launcher.LauncherMain$Config,int) -> DIh
    int access$5(org.greencubes.launcher.LauncherMain$Config) -> jqA
    javax.swing.JLabel access$6(org.greencubes.launcher.LauncherMain$Config) -> AmB
    javax.swing.JLabel access$7(org.greencubes.launcher.LauncherMain$Config) -> JZD
    void access$8(org.greencubes.launcher.LauncherMain$Config,javax.swing.JPanel) -> DIh
    java.lang.String access$9(org.greencubes.launcher.LauncherMain$Config) -> AMb
    org.greencubes.launcher.LauncherOptions$OnStartAction access$10(org.greencubes.launcher.LauncherMain$Config) -> jLa
    org.greencubes.launcher.LauncherOptions$OnStartAction access$11(org.greencubes.launcher.LauncherMain$Config) -> diH
    boolean access$12(org.greencubes.launcher.LauncherMain$Config) -> dAZ
    org.greencubes.yaml.YamlFile access$13(org.greencubes.launcher.LauncherMain$Config) -> jZd
    org.greencubes.launcher.LauncherMain access$14(org.greencubes.launcher.LauncherMain$Config) -> vag
    void access$15(org.greencubes.launcher.LauncherMain$Config,java.lang.String) -> DIh
    void access$16(org.greencubes.launcher.LauncherMain$Config,org.greencubes.launcher.LauncherOptions$OnStartAction) -> DIh
    void access$17(org.greencubes.launcher.LauncherMain$Config,org.greencubes.launcher.LauncherOptions$OnStartAction) -> jqA
    void access$18(org.greencubes.launcher.LauncherMain$Config,boolean) -> DIh
    java.util.List access$19(org.greencubes.launcher.LauncherMain$Config) -> vai
    org.greencubes.launcher.LauncherMain$Config$ScreenSize access$20(org.greencubes.launcher.LauncherMain$Config) -> jvp
    java.util.List access$21(org.greencubes.launcher.LauncherMain$Config) -> lGC
    void access$22(org.greencubes.launcher.LauncherMain$Config,org.greencubes.launcher.LauncherMain$Config$ScreenSize) -> DIh
    java.lang.String access$23(org.greencubes.launcher.LauncherMain$Config) -> dih
    void access$24(org.greencubes.launcher.LauncherMain$Config,java.lang.String) -> jqA
org.greencubes.launcher.LauncherMain$Config$1 -> org.greencubes.*.h:
    org.greencubes.launcher.LauncherMain$Config this$0 -> DIh
    org.greencubes.launcher.LauncherMain$Config access$0(org.greencubes.launcher.LauncherMain$Config$1) -> DIh
org.greencubes.launcher.LauncherMain$Config$1$1 -> org.greencubes.*.i:
    org.greencubes.launcher.LauncherMain$Config$1 this$1 -> DIh
    org.greencubes.launcher.LauncherMain$Config$1 access$0(org.greencubes.launcher.LauncherMain$Config$1$1) -> DIh
org.greencubes.launcher.LauncherMain$Config$1$1$1 -> org.greencubes.*.j:
    org.greencubes.launcher.LauncherMain$Config$1$1 this$2 -> DIh
    org.greencubes.launcher.LauncherMain$Config$1$1 access$0(org.greencubes.launcher.LauncherMain$Config$1$1$1) -> DIh
org.greencubes.launcher.LauncherMain$Config$1$1$1$1 -> org.greencubes.*.k:
    org.greencubes.launcher.LauncherMain$Config$1$1$1 this$3 -> DIh
org.greencubes.launcher.LauncherMain$Config$1$1$1$2 -> org.greencubes.*.l:
    org.greencubes.launcher.LauncherMain$Config$1$1$1 this$3 -> DIh
org.greencubes.launcher.LauncherMain$Config$1$1$1$3 -> org.greencubes.*.m:
    org.greencubes.launcher.LauncherMain$Config$1$1$1 this$3 -> DIh
org.greencubes.launcher.LauncherMain$Config$1$1$1$4 -> org.greencubes.*.n:
    org.greencubes.launcher.LauncherMain$Config$1$1$1 this$3 -> DIh
    void mousePressed(java.awt.event.MouseEvent) -> mousePressed
    void mouseEntered(java.awt.event.MouseEvent) -> mouseEntered
    void mouseExited(java.awt.event.MouseEvent) -> mouseExited
org.greencubes.launcher.LauncherMain$Config$1$1$1$5 -> org.greencubes.*.o:
    org.greencubes.launcher.LauncherMain$Config$1$1$1 this$3 -> DIh
    void mousePressed(java.awt.event.MouseEvent) -> mousePressed
    void mouseEntered(java.awt.event.MouseEvent) -> mouseEntered
    void mouseExited(java.awt.event.MouseEvent) -> mouseExited
org.greencubes.launcher.LauncherMain$Config$1$1$1$6 -> org.greencubes.*.p:
    org.greencubes.launcher.LauncherMain$Config$1$1$1 this$3 -> DIh
    void mousePressed(java.awt.event.MouseEvent) -> mousePressed
    void mouseEntered(java.awt.event.MouseEvent) -> mouseEntered
    void mouseExited(java.awt.event.MouseEvent) -> mouseExited
org.greencubes.launcher.LauncherMain$Config$1$1$2 -> org.greencubes.*.q:
    org.greencubes.launcher.LauncherMain$Config$1$1 this$2 -> DIh
org.greencubes.launcher.LauncherMain$Config$1$1$3 -> org.greencubes.*.r:
    org.greencubes.launcher.LauncherMain$Config$1$1 this$2 -> DIh
    org.greencubes.launcher.LauncherMain$Config$1$1 access$0(org.greencubes.launcher.LauncherMain$Config$1$1$3) -> DIh
org.greencubes.launcher.LauncherMain$Config$1$1$3$1 -> org.greencubes.*.s:
    org.greencubes.launcher.LauncherMain$Config$1$1$3 this$3 -> DIh
org.greencubes.launcher.LauncherMain$Config$1$1$3$2 -> org.greencubes.*.t:
    org.greencubes.launcher.LauncherMain$Config$1$1$3 this$3 -> DIh
    org.greencubes.launcher.LauncherMain$Config$1$1$3 access$0(org.greencubes.launcher.LauncherMain$Config$1$1$3$2) -> DIh
org.greencubes.launcher.LauncherMain$Config$1$1$3$2$1 -> org.greencubes.*.u:
    org.greencubes.launcher.LauncherMain$Config$1$1$3$2 this$4 -> DIh
    org.greencubes.launcher.LauncherMain$Config$1$1$3$2 access$0(org.greencubes.launcher.LauncherMain$Config$1$1$3$2$1) -> DIh
org.greencubes.launcher.LauncherMain$Config$1$1$3$2$1$1 -> org.greencubes.*.v:
    org.greencubes.launcher.LauncherMain$Config$1$1$3$2$1 this$5 -> DIh
org.greencubes.launcher.LauncherMain$Config$1$1$3$2$1$2 -> org.greencubes.*.w:
    org.greencubes.launcher.LauncherMain$Config$1$1$3$2$1 this$5 -> DIh
org.greencubes.launcher.LauncherMain$Config$1$1$3$2$1$3 -> org.greencubes.*.x:
    org.greencubes.launcher.LauncherMain$Config$1$1$3$2$1 this$5 -> DIh
    void mousePressed(java.awt.event.MouseEvent) -> mousePressed
    void mouseEntered(java.awt.event.MouseEvent) -> mouseEntered
    void mouseExited(java.awt.event.MouseEvent) -> mouseExited
org.greencubes.launcher.LauncherMain$Config$2 -> org.greencubes.*.y:
    org.greencubes.launcher.LauncherMain$Config this$0 -> DIh
    org.greencubes.launcher.LauncherMain$Config access$0(org.greencubes.launcher.LauncherMain$Config$2) -> DIh
org.greencubes.launcher.LauncherMain$Config$2$1 -> org.greencubes.*.z:
    org.greencubes.launcher.LauncherMain$Config$2 this$1 -> DIh
    org.greencubes.launcher.LauncherMain$Config$2 access$0(org.greencubes.launcher.LauncherMain$Config$2$1) -> DIh
org.greencubes.launcher.LauncherMain$Config$2$1$1 -> org.greencubes.*.A:
    org.greencubes.launcher.LauncherMain$Config$2$1 this$2 -> DIh
org.greencubes.launcher.LauncherMain$Config$2$1$1$1 -> org.greencubes.*.B:
    org.greencubes.launcher.LauncherMain$Config$2$1$1 this$3 -> DIh
org.greencubes.launcher.LauncherMain$Config$2$1$2 -> org.greencubes.*.C:
    org.greencubes.launcher.LauncherMain$Config$2$1 this$2 -> DIh
    org.greencubes.launcher.LauncherMain$Config$2$1 access$0(org.greencubes.launcher.LauncherMain$Config$2$1$2) -> DIh
org.greencubes.launcher.LauncherMain$Config$2$1$2$1 -> org.greencubes.*.D:
    org.greencubes.launcher.LauncherMain$Config$2$1$2 this$3 -> DIh
    org.greencubes.launcher.LauncherMain$Config$2$1$2 access$0(org.greencubes.launcher.LauncherMain$Config$2$1$2$1) -> DIh
org.greencubes.launcher.LauncherMain$Config$2$1$2$1$1 -> org.greencubes.*.E:
    org.greencubes.launcher.LauncherMain$Config$2$1$2$1 this$4 -> DIh
    org.greencubes.swing.GPopupMenu val$langSelect -> jqA
    void mousePressed(java.awt.event.MouseEvent) -> mousePressed
org.greencubes.launcher.LauncherMain$Config$2$1$2$1$2 -> org.greencubes.*.F:
    org.greencubes.launcher.LauncherMain$Config$2$1$2$1 this$4 -> DIh
org.greencubes.launcher.LauncherMain$Config$2$1$2$1$3 -> org.greencubes.*.G:
    org.greencubes.launcher.LauncherMain$Config$2$1$2$1 this$4 -> DIh
org.greencubes.launcher.LauncherMain$Config$2$1$2$1$4 -> org.greencubes.*.H:
    org.greencubes.launcher.LauncherMain$Config$2$1$2$1 this$4 -> DIh
org.greencubes.launcher.LauncherMain$Config$2$1$2$1$5 -> org.greencubes.*.I:
    org.greencubes.launcher.LauncherMain$Config$2$1$2$1 this$4 -> DIh
    javax.swing.JLabel val$selectedLanguage -> jqA
    java.lang.String val$lang -> AmB
    org.greencubes.swing.GPopupMenu val$langSelect -> JZD
    javax.swing.JMenuItem val$item -> AMb
    javax.swing.ImageIcon val$empty -> jLa
    javax.swing.ImageIcon val$checked -> diH
    void actionPerformed(java.awt.event.ActionEvent) -> actionPerformed
org.greencubes.launcher.LauncherMain$Config$2$1$3 -> org.greencubes.*.J:
    org.greencubes.launcher.LauncherMain$Config$2$1 this$2 -> DIh
org.greencubes.launcher.LauncherMain$Config$2$1$3$1 -> org.greencubes.*.K:
    org.greencubes.launcher.LauncherMain$Config$2$1$3 this$3 -> DIh
org.greencubes.launcher.LauncherMain$Config$2$1$4 -> org.greencubes.*.L:
    org.greencubes.launcher.LauncherMain$Config$2$1 this$2 -> DIh
    org.greencubes.launcher.LauncherMain$Config$2$1 access$0(org.greencubes.launcher.LauncherMain$Config$2$1$4) -> DIh
org.greencubes.launcher.LauncherMain$Config$2$1$4$1 -> org.greencubes.*.M:
    org.greencubes.launcher.LauncherMain$Config$2$1$4 this$3 -> DIh
    org.greencubes.launcher.LauncherMain$Config$2$1$4 access$0(org.greencubes.launcher.LauncherMain$Config$2$1$4$1) -> DIh
org.greencubes.launcher.LauncherMain$Config$2$1$4$1$1 -> org.greencubes.*.N:
    org.greencubes.launcher.LauncherMain$Config$2$1$4$1 this$4 -> DIh
    org.greencubes.swing.GPopupMenu val$onStartSelect -> jqA
    void mousePressed(java.awt.event.MouseEvent) -> mousePressed
org.greencubes.launcher.LauncherMain$Config$2$1$4$1$2 -> org.greencubes.*.O:
    org.greencubes.launcher.LauncherMain$Config$2$1$4$1 this$4 -> DIh
org.greencubes.launcher.LauncherMain$Config$2$1$4$1$3 -> org.greencubes.*.P:
    org.greencubes.launcher.LauncherMain$Config$2$1$4$1 this$4 -> DIh
org.greencubes.launcher.LauncherMain$Config$2$1$4$1$4 -> org.greencubes.*.Q:
    org.greencubes.launcher.LauncherMain$Config$2$1$4$1 this$4 -> DIh
org.greencubes.launcher.LauncherMain$Config$2$1$4$1$5 -> org.greencubes.*.R:
    org.greencubes.launcher.LauncherMain$Config$2$1$4$1 this$4 -> DIh
    javax.swing.JLabel val$selectedOnStart -> jqA
    org.greencubes.launcher.LauncherOptions$OnStartAction val$action -> AmB
    org.greencubes.swing.GPopupMenu val$onStartSelect -> JZD
    javax.swing.JMenuItem val$item -> AMb
    javax.swing.ImageIcon val$empty -> jLa
    javax.swing.ImageIcon val$checked -> diH
    void actionPerformed(java.awt.event.ActionEvent) -> actionPerformed
org.greencubes.launcher.LauncherMain$Config$2$1$5 -> org.greencubes.*.S:
    org.greencubes.launcher.LauncherMain$Config$2$1 this$2 -> DIh
org.greencubes.launcher.LauncherMain$Config$2$1$5$1 -> org.greencubes.*.T:
    org.greencubes.launcher.LauncherMain$Config$2$1$5 this$3 -> DIh
org.greencubes.launcher.LauncherMain$Config$2$1$6 -> org.greencubes.*.U:
    org.greencubes.launcher.LauncherMain$Config$2$1 this$2 -> DIh
    org.greencubes.launcher.LauncherMain$Config$2$1 access$0(org.greencubes.launcher.LauncherMain$Config$2$1$6) -> DIh
org.greencubes.launcher.LauncherMain$Config$2$1$6$1 -> org.greencubes.*.V:
    org.greencubes.launcher.LauncherMain$Config$2$1$6 this$3 -> DIh
    org.greencubes.launcher.LauncherMain$Config$2$1$6 access$0(org.greencubes.launcher.LauncherMain$Config$2$1$6$1) -> DIh
org.greencubes.launcher.LauncherMain$Config$2$1$6$1$1 -> org.greencubes.*.W:
    org.greencubes.launcher.LauncherMain$Config$2$1$6$1 this$4 -> DIh
    org.greencubes.swing.GPopupMenu val$onStartSelect -> jqA
    void mousePressed(java.awt.event.MouseEvent) -> mousePressed
org.greencubes.launcher.LauncherMain$Config$2$1$6$1$2 -> org.greencubes.*.X:
    org.greencubes.launcher.LauncherMain$Config$2$1$6$1 this$4 -> DIh
org.greencubes.launcher.LauncherMain$Config$2$1$6$1$3 -> org.greencubes.*.Y:
    org.greencubes.launcher.LauncherMain$Config$2$1$6$1 this$4 -> DIh
org.greencubes.launcher.LauncherMain$Config$2$1$6$1$4 -> org.greencubes.*.Z:
    org.greencubes.launcher.LauncherMain$Config$2$1$6$1 this$4 -> DIh
org.greencubes.launcher.LauncherMain$Config$2$1$6$1$5 -> org.greencubes.*.aa:
    org.greencubes.launcher.LauncherMain$Config$2$1$6$1 this$4 -> DIh
    javax.swing.JLabel val$selectedOnStart -> jqA
    org.greencubes.launcher.LauncherOptions$OnStartAction val$action -> AmB
    org.greencubes.swing.GPopupMenu val$onStartSelect -> JZD
    javax.swing.JMenuItem val$item -> AMb
    javax.swing.ImageIcon val$empty -> jLa
    javax.swing.ImageIcon val$checked -> diH
    void actionPerformed(java.awt.event.ActionEvent) -> actionPerformed
org.greencubes.launcher.LauncherMain$Config$2$1$7 -> org.greencubes.*.ab:
    org.greencubes.launcher.LauncherMain$Config$2$1 this$2 -> DIh
    org.greencubes.launcher.LauncherMain$Config$2$1 access$0(org.greencubes.launcher.LauncherMain$Config$2$1$7) -> DIh
org.greencubes.launcher.LauncherMain$Config$2$1$7$1 -> org.greencubes.*.ac:
    org.greencubes.launcher.LauncherMain$Config$2$1$7 this$3 -> DIh
    org.greencubes.launcher.LauncherMain$Config$2$1$7 access$0(org.greencubes.launcher.LauncherMain$Config$2$1$7$1) -> DIh
org.greencubes.launcher.LauncherMain$Config$2$1$7$1$1 -> org.greencubes.*.ad:
    org.greencubes.launcher.LauncherMain$Config$2$1$7$1 this$4 -> DIh
    javax.swing.ImageIcon val$iconChecked -> jqA
    javax.swing.ImageIcon val$iconUnchecked -> AmB
    void itemStateChanged(java.awt.event.ItemEvent) -> itemStateChanged
org.greencubes.launcher.LauncherMain$Config$2$1$7$1$2 -> org.greencubes.*.ae:
    org.greencubes.launcher.LauncherMain$Config$2$1$7$1 this$4 -> DIh
    void mouseEntered(java.awt.event.MouseEvent) -> mouseEntered
    void mouseExited(java.awt.event.MouseEvent) -> mouseExited
org.greencubes.launcher.LauncherMain$Config$2$1$7$2 -> org.greencubes.*.af:
    javax.swing.JDialog toolTip -> DIh
    org.greencubes.launcher.LauncherMain$Config$2$1$7 this$3 -> jqA
    org.greencubes.launcher.LauncherMain$Config$2$1$7 access$0(org.greencubes.launcher.LauncherMain$Config$2$1$7$2) -> DIh
org.greencubes.launcher.LauncherMain$Config$2$1$7$2$1 -> org.greencubes.*.ag:
    org.greencubes.launcher.LauncherMain$Config$2$1$7$2 this$4 -> DIh
    javax.swing.JCheckBox val$autoLoginCheckBox -> jqA
    javax.swing.JLabel val$lbl -> AmB
    void mousePressed(java.awt.event.MouseEvent) -> mousePressed
    void mouseEntered(java.awt.event.MouseEvent) -> mouseEntered
    void mouseExited(java.awt.event.MouseEvent) -> mouseExited
org.greencubes.launcher.LauncherMain$Config$2$1$7$2$1$1 -> org.greencubes.*.ah:
    org.greencubes.launcher.LauncherMain$Config$2$1$7$2$1 this$5 -> DIh
org.greencubes.launcher.LauncherMain$Config$2$1$7$2$1$1$1 -> org.greencubes.*.ai:
    org.greencubes.launcher.LauncherMain$Config$2$1$7$2$1$1 this$6 -> DIh
org.greencubes.launcher.LauncherMain$Config$2$2 -> org.greencubes.*.aj:
    org.greencubes.launcher.LauncherMain$Config$2 this$1 -> DIh
org.greencubes.launcher.LauncherMain$Config$3 -> org.greencubes.*.ak:
    org.greencubes.launcher.LauncherMain$Config this$0 -> DIh
org.greencubes.launcher.LauncherMain$Config$4 -> org.greencubes.*.al:
    org.greencubes.launcher.LauncherMain$Config this$0 -> DIh
    int compare(org.greencubes.launcher.LauncherMain$Config$ScreenSize,org.greencubes.launcher.LauncherMain$Config$ScreenSize) -> DIh
    int compare(java.lang.Object,java.lang.Object) -> compare
org.greencubes.launcher.LauncherMain$Config$5 -> org.greencubes.*.am:
    org.greencubes.launcher.LauncherMain$Config this$0 -> DIh
    org.greencubes.launcher.LauncherMain$Config access$0(org.greencubes.launcher.LauncherMain$Config$5) -> DIh
org.greencubes.launcher.LauncherMain$Config$5$1 -> org.greencubes.*.an:
    org.greencubes.launcher.LauncherMain$Config$5 this$1 -> DIh
    org.greencubes.launcher.LauncherMain$Config$5 access$0(org.greencubes.launcher.LauncherMain$Config$5$1) -> DIh
org.greencubes.launcher.LauncherMain$Config$5$1$1 -> org.greencubes.*.ao:
    org.greencubes.launcher.LauncherMain$Config$5$1 this$2 -> DIh
org.greencubes.launcher.LauncherMain$Config$5$1$1$1 -> org.greencubes.*.ap:
    org.greencubes.launcher.LauncherMain$Config$5$1$1 this$3 -> DIh
org.greencubes.launcher.LauncherMain$Config$5$1$10 -> org.greencubes.*.aq:
    org.greencubes.launcher.LauncherMain$Config$5$1 this$2 -> DIh
    org.greencubes.launcher.LauncherMain$Config$5$1 access$0(org.greencubes.launcher.LauncherMain$Config$5$1$10) -> DIh
org.greencubes.launcher.LauncherMain$Config$5$1$10$1 -> org.greencubes.*.ar:
    org.greencubes.launcher.LauncherMain$Config$5$1$10 this$3 -> DIh
    org.greencubes.launcher.LauncherMain$Config$5$1$10 access$0(org.greencubes.launcher.LauncherMain$Config$5$1$10$1) -> DIh
org.greencubes.launcher.LauncherMain$Config$5$1$10$1$1 -> org.greencubes.*.as:
    org.greencubes.launcher.LauncherMain$Config$5$1$10$1 this$4 -> DIh
    javax.swing.ImageIcon val$iconChecked -> jqA
    javax.swing.ImageIcon val$iconUnchecked -> AmB
    void itemStateChanged(java.awt.event.ItemEvent) -> itemStateChanged
org.greencubes.launcher.LauncherMain$Config$5$1$10$1$2 -> org.greencubes.*.at:
    org.greencubes.launcher.LauncherMain$Config$5$1$10$1 this$4 -> DIh
    void mouseEntered(java.awt.event.MouseEvent) -> mouseEntered
    void mouseExited(java.awt.event.MouseEvent) -> mouseExited
org.greencubes.launcher.LauncherMain$Config$5$1$11 -> org.greencubes.*.au:
    org.greencubes.launcher.LauncherMain$Config$5$1 this$2 -> DIh
    org.greencubes.launcher.LauncherMain$Config$5$1 access$0(org.greencubes.launcher.LauncherMain$Config$5$1$11) -> DIh
org.greencubes.launcher.LauncherMain$Config$5$1$11$1 -> org.greencubes.*.av:
    org.greencubes.launcher.LauncherMain$Config$5$1$11 this$3 -> DIh
    org.greencubes.launcher.LauncherMain$Config$5$1$11 access$0(org.greencubes.launcher.LauncherMain$Config$5$1$11$1) -> DIh
org.greencubes.launcher.LauncherMain$Config$5$1$11$1$1 -> org.greencubes.*.aw:
    org.greencubes.launcher.LauncherMain$Config$5$1$11$1 this$4 -> DIh
    javax.swing.ImageIcon val$iconChecked -> jqA
    javax.swing.ImageIcon val$iconUnchecked -> AmB
    void itemStateChanged(java.awt.event.ItemEvent) -> itemStateChanged
org.greencubes.launcher.LauncherMain$Config$5$1$11$1$2 -> org.greencubes.*.ax:
    org.greencubes.launcher.LauncherMain$Config$5$1$11$1 this$4 -> DIh
    void mouseEntered(java.awt.event.MouseEvent) -> mouseEntered
    void mouseExited(java.awt.event.MouseEvent) -> mouseExited
org.greencubes.launcher.LauncherMain$Config$5$1$12 -> org.greencubes.*.ay:
    org.greencubes.launcher.LauncherMain$Config$5$1 this$2 -> DIh
    org.greencubes.launcher.LauncherMain$Config$5$1 access$0(org.greencubes.launcher.LauncherMain$Config$5$1$12) -> DIh
org.greencubes.launcher.LauncherMain$Config$5$1$12$1 -> org.greencubes.*.az:
    org.greencubes.launcher.LauncherMain$Config$5$1$12 this$3 -> DIh
    org.greencubes.launcher.LauncherMain$Config$5$1$12 access$0(org.greencubes.launcher.LauncherMain$Config$5$1$12$1) -> DIh
org.greencubes.launcher.LauncherMain$Config$5$1$12$1$1 -> org.greencubes.*.aA:
    org.greencubes.launcher.LauncherMain$Config$5$1$12$1 this$4 -> DIh
    javax.swing.ImageIcon val$iconChecked -> jqA
    javax.swing.ImageIcon val$iconUnchecked -> AmB
    void itemStateChanged(java.awt.event.ItemEvent) -> itemStateChanged
org.greencubes.launcher.LauncherMain$Config$5$1$12$1$2 -> org.greencubes.*.aB:
    org.greencubes.launcher.LauncherMain$Config$5$1$12$1 this$4 -> DIh
    void mouseEntered(java.awt.event.MouseEvent) -> mouseEntered
    void mouseExited(java.awt.event.MouseEvent) -> mouseExited
org.greencubes.launcher.LauncherMain$Config$5$1$2 -> org.greencubes.*.aC:
    org.greencubes.launcher.LauncherMain$Config$5$1 this$2 -> DIh
org.greencubes.launcher.LauncherMain$Config$5$1$2$1 -> org.greencubes.*.aD:
    org.greencubes.launcher.LauncherMain$Config$5$1$2 this$3 -> DIh
org.greencubes.launcher.LauncherMain$Config$5$1$3 -> org.greencubes.*.aE:
    org.greencubes.launcher.LauncherMain$Config$5$1 this$2 -> DIh
    org.greencubes.launcher.LauncherMain$Config$5$1 access$0(org.greencubes.launcher.LauncherMain$Config$5$1$3) -> DIh
org.greencubes.launcher.LauncherMain$Config$5$1$3$1 -> org.greencubes.*.aF:
    org.greencubes.launcher.LauncherMain$Config$5$1$3 this$3 -> DIh
    org.greencubes.launcher.LauncherMain$Config$5$1$3 access$0(org.greencubes.launcher.LauncherMain$Config$5$1$3$1) -> DIh
org.greencubes.launcher.LauncherMain$Config$5$1$3$1$1 -> org.greencubes.*.aG:
    org.greencubes.launcher.LauncherMain$Config$5$1$3$1 this$4 -> DIh
    org.greencubes.swing.GPopupMenu val$langSelect -> jqA
    void mousePressed(java.awt.event.MouseEvent) -> mousePressed
org.greencubes.launcher.LauncherMain$Config$5$1$3$1$2 -> org.greencubes.*.aH:
    org.greencubes.launcher.LauncherMain$Config$5$1$3$1 this$4 -> DIh
org.greencubes.launcher.LauncherMain$Config$5$1$3$1$3 -> org.greencubes.*.aI:
    org.greencubes.launcher.LauncherMain$Config$5$1$3$1 this$4 -> DIh
org.greencubes.launcher.LauncherMain$Config$5$1$3$1$4 -> org.greencubes.*.aJ:
    org.greencubes.launcher.LauncherMain$Config$5$1$3$1 this$4 -> DIh
org.greencubes.launcher.LauncherMain$Config$5$1$3$1$5 -> org.greencubes.*.aK:
    org.greencubes.launcher.LauncherMain$Config$5$1$3$1 this$4 -> DIh
    javax.swing.JLabel val$selectedLang -> jqA
    java.lang.String val$lang -> AmB
    org.greencubes.swing.GPopupMenu val$langSelect -> JZD
    javax.swing.JMenuItem val$item -> AMb
    javax.swing.ImageIcon val$empty -> jLa
    javax.swing.ImageIcon val$checked -> diH
    void actionPerformed(java.awt.event.ActionEvent) -> actionPerformed
org.greencubes.launcher.LauncherMain$Config$5$1$4 -> org.greencubes.*.aL:
    org.greencubes.launcher.LauncherMain$Config$5$1 this$2 -> DIh
org.greencubes.launcher.LauncherMain$Config$5$1$4$1 -> org.greencubes.*.aM:
    org.greencubes.launcher.LauncherMain$Config$5$1$4 this$3 -> DIh
org.greencubes.launcher.LauncherMain$Config$5$1$5 -> org.greencubes.*.aN:
    org.greencubes.launcher.LauncherMain$Config$5$1 this$2 -> DIh
org.greencubes.launcher.LauncherMain$Config$5$1$5$1 -> org.greencubes.*.aO:
    org.greencubes.launcher.LauncherMain$Config$5$1$5 this$3 -> DIh
org.greencubes.launcher.LauncherMain$Config$5$1$6 -> org.greencubes.*.aP:
    org.greencubes.launcher.LauncherMain$Config$5$1 this$2 -> DIh
    org.greencubes.launcher.LauncherMain$Config$5$1 access$0(org.greencubes.launcher.LauncherMain$Config$5$1$6) -> DIh
org.greencubes.launcher.LauncherMain$Config$5$1$6$1 -> org.greencubes.*.aQ:
    org.greencubes.launcher.LauncherMain$Config$5$1$6 this$3 -> DIh
    org.greencubes.launcher.LauncherMain$Config$5$1$6 access$0(org.greencubes.launcher.LauncherMain$Config$5$1$6$1) -> DIh
org.greencubes.launcher.LauncherMain$Config$5$1$6$1$1 -> org.greencubes.*.aR:
    org.greencubes.launcher.LauncherMain$Config$5$1$6$1 this$4 -> DIh
    org.greencubes.swing.GPopupMenu val$screenSizeSelect -> jqA
    void mousePressed(java.awt.event.MouseEvent) -> mousePressed
org.greencubes.launcher.LauncherMain$Config$5$1$6$1$2 -> org.greencubes.*.aS:
    org.greencubes.launcher.LauncherMain$Config$5$1$6$1 this$4 -> DIh
org.greencubes.launcher.LauncherMain$Config$5$1$6$1$3 -> org.greencubes.*.aT:
    org.greencubes.launcher.LauncherMain$Config$5$1$6$1 this$4 -> DIh
org.greencubes.launcher.LauncherMain$Config$5$1$6$1$4 -> org.greencubes.*.aU:
    org.greencubes.launcher.LauncherMain$Config$5$1$6$1 this$4 -> DIh
org.greencubes.launcher.LauncherMain$Config$5$1$6$1$5 -> org.greencubes.*.aV:
    org.greencubes.launcher.LauncherMain$Config$5$1$6$1 this$4 -> DIh
    javax.swing.JLabel val$selectedScreenSize -> jqA
    org.greencubes.launcher.LauncherMain$Config$ScreenSize val$ss -> AmB
    org.greencubes.swing.GPopupMenu val$screenSizeSelect -> JZD
    javax.swing.JMenuItem val$item -> AMb
    javax.swing.ImageIcon val$empty -> jLa
    javax.swing.ImageIcon val$checked -> diH
    void actionPerformed(java.awt.event.ActionEvent) -> actionPerformed
    org.greencubes.launcher.LauncherMain$Config$5$1$6$1 access$0(org.greencubes.launcher.LauncherMain$Config$5$1$6$1$5) -> DIh
org.greencubes.launcher.LauncherMain$Config$5$1$6$1$5$1 -> org.greencubes.*.aW:
    org.greencubes.launcher.LauncherMain$Config$5$1$6$1$5 this$5 -> DIh
org.greencubes.launcher.LauncherMain$Config$5$1$7 -> org.greencubes.*.aX:
    org.greencubes.launcher.LauncherMain$Config$5$1 this$2 -> DIh
    org.greencubes.launcher.LauncherMain$Config$5$1 access$0(org.greencubes.launcher.LauncherMain$Config$5$1$7) -> DIh
org.greencubes.launcher.LauncherMain$Config$5$1$7$1 -> org.greencubes.*.aY:
    org.greencubes.launcher.LauncherMain$Config$5$1$7 this$3 -> DIh
    org.greencubes.launcher.LauncherMain$Config$5$1$7 access$0(org.greencubes.launcher.LauncherMain$Config$5$1$7$1) -> DIh
org.greencubes.launcher.LauncherMain$Config$5$1$7$1$1 -> org.greencubes.*.aZ:
    org.greencubes.launcher.LauncherMain$Config$5$1$7$1 this$4 -> DIh
    javax.swing.ImageIcon val$iconChecked -> jqA
    javax.swing.ImageIcon val$iconUnchecked -> AmB
    void itemStateChanged(java.awt.event.ItemEvent) -> itemStateChanged
org.greencubes.launcher.LauncherMain$Config$5$1$7$1$2 -> org.greencubes.*.ba:
    org.greencubes.launcher.LauncherMain$Config$5$1$7$1 this$4 -> DIh
    void mouseEntered(java.awt.event.MouseEvent) -> mouseEntered
    void mouseExited(java.awt.event.MouseEvent) -> mouseExited
org.greencubes.launcher.LauncherMain$Config$5$1$8 -> org.greencubes.*.bb:
    org.greencubes.launcher.LauncherMain$Config$5$1 this$2 -> DIh
org.greencubes.launcher.LauncherMain$Config$5$1$8$1 -> org.greencubes.*.bc:
    org.greencubes.launcher.LauncherMain$Config$5$1$8 this$3 -> DIh
org.greencubes.launcher.LauncherMain$Config$5$1$9 -> org.greencubes.*.bd:
    org.greencubes.launcher.LauncherMain$Config$5$1 this$2 -> DIh
    org.greencubes.launcher.LauncherMain$Config$5$1 access$0(org.greencubes.launcher.LauncherMain$Config$5$1$9) -> DIh
org.greencubes.launcher.LauncherMain$Config$5$1$9$1 -> org.greencubes.*.be:
    org.greencubes.launcher.LauncherMain$Config$5$1$9 this$3 -> DIh
    org.greencubes.launcher.LauncherMain$Config$5$1$9 access$0(org.greencubes.launcher.LauncherMain$Config$5$1$9$1) -> DIh
org.greencubes.launcher.LauncherMain$Config$5$1$9$1$1 -> org.greencubes.*.bf:
    org.greencubes.launcher.LauncherMain$Config$5$1$9$1 this$4 -> DIh
    org.greencubes.swing.GPopupMenu val$qualitySelect -> jqA
    void mousePressed(java.awt.event.MouseEvent) -> mousePressed
org.greencubes.launcher.LauncherMain$Config$5$1$9$1$2 -> org.greencubes.*.bg:
    org.greencubes.launcher.LauncherMain$Config$5$1$9$1 this$4 -> DIh
org.greencubes.launcher.LauncherMain$Config$5$1$9$1$3 -> org.greencubes.*.bh:
    org.greencubes.launcher.LauncherMain$Config$5$1$9$1 this$4 -> DIh
org.greencubes.launcher.LauncherMain$Config$5$1$9$1$4 -> org.greencubes.*.bi:
    org.greencubes.launcher.LauncherMain$Config$5$1$9$1 this$4 -> DIh
org.greencubes.launcher.LauncherMain$Config$5$1$9$1$5 -> org.greencubes.*.bj:
    org.greencubes.launcher.LauncherMain$Config$5$1$9$1 this$4 -> DIh
    javax.swing.JLabel val$selectedQuality -> jqA
    java.lang.String val$q -> AmB
    org.greencubes.swing.GPopupMenu val$qualitySelect -> JZD
    javax.swing.JMenuItem val$item -> AMb
    javax.swing.ImageIcon val$empty -> jLa
    javax.swing.ImageIcon val$checked -> diH
    void actionPerformed(java.awt.event.ActionEvent) -> actionPerformed
org.greencubes.launcher.LauncherMain$Config$5$2 -> org.greencubes.*.bk:
    org.greencubes.launcher.LauncherMain$Config$5 this$1 -> DIh
org.greencubes.launcher.LauncherMain$Config$5$3 -> org.greencubes.*.bl:
    org.greencubes.launcher.LauncherMain$Config$5 this$1 -> DIh
org.greencubes.launcher.LauncherMain$Config$5$4 -> org.greencubes.*.bm:
    org.greencubes.launcher.LauncherMain$Config$5 this$1 -> DIh
    javax.swing.JScrollPane val$scrollPane -> jqA
    void run() -> run
org.greencubes.launcher.LauncherMain$Config$6 -> org.greencubes.*.bn:
    org.greencubes.launcher.LauncherMain$Config this$0 -> DIh
org.greencubes.launcher.LauncherMain$Config$6$1 -> org.greencubes.*.bo:
    org.greencubes.launcher.LauncherMain$Config$6 this$1 -> DIh
org.greencubes.launcher.LauncherMain$Config$7 -> org.greencubes.*.bp:
    org.greencubes.launcher.LauncherMain$Config this$0 -> DIh
org.greencubes.launcher.LauncherMain$Config$8 -> org.greencubes.*.bq:
    org.greencubes.launcher.LauncherMain$Config this$0 -> DIh
    javax.swing.JScrollPane val$scrollPane -> jqA
    void run() -> run
org.greencubes.launcher.LauncherMain$Config$ScreenSize -> org.greencubes.*.br:
    int width -> DIh
    int height -> jqA
    java.lang.String name -> AmB
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
org.greencubes.launcher.LauncherMain$Play -> org.greencubes.*.bs:
    org.greencubes.launcher.LauncherMain superClass -> DIh
    javafx.scene.web.WebView browser -> jqA
    javax.swing.JLabel clientButtonText -> AmB
    javax.swing.JLabel clientStatusLine -> JZD
    javax.swing.JComponent clientStatusPanel -> AMb
    javax.swing.JComponent progressBarContainer -> jLa
    javax.swing.JComponent progressBar -> diH
    javax.swing.JComponent serverSelect -> dAZ
    javax.swing.JPanel serverSelectPanel -> jZd
    javax.swing.JLabel selectedServerName -> vag
    org.greencubes.swing.GPopupMenu serverListMenu -> vai
    java.util.List currentServerList -> lGC
    org.greencubes.client.Server lastSelectedServer -> dih
    org.greencubes.client.Client currentClient -> jvp
    void displayPlayPanel() -> DIh
    void displayClient(org.greencubes.client.Client) -> jqA
    void pressTheBigButton() -> AmB
    void openClientBrowser(org.greencubes.client.Client,javafx.embed.swing.JFXPanel) -> DIh
    void clientStatusUpdate(org.greencubes.client.Client) -> DIh
    void updateServerList() -> jqA
    void s(java.awt.Component,int,int) -> DIh
    org.greencubes.launcher.LauncherMain access$0(org.greencubes.launcher.LauncherMain$Play) -> DIh
    void access$1(org.greencubes.launcher.LauncherMain$Play,org.greencubes.client.Client) -> DIh
    void access$2(org.greencubes.launcher.LauncherMain$Play,org.greencubes.client.Client,javafx.embed.swing.JFXPanel) -> DIh
    void access$3(org.greencubes.launcher.LauncherMain$Play,javax.swing.JComponent) -> DIh
    void access$4(org.greencubes.launcher.LauncherMain$Play,javax.swing.JPanel) -> DIh
    void access$5(org.greencubes.launcher.LauncherMain$Play,javax.swing.JLabel) -> DIh
    void access$6(org.greencubes.launcher.LauncherMain$Play,javax.swing.JLabel) -> jqA
    javax.swing.JLabel access$7(org.greencubes.launcher.LauncherMain$Play) -> jqA
    void access$8(org.greencubes.launcher.LauncherMain$Play) -> AmB
    javafx.scene.web.WebView access$9(org.greencubes.launcher.LauncherMain$Play) -> JZD
    void access$10(org.greencubes.launcher.LauncherMain$Play,javafx.scene.web.WebView) -> DIh
    javax.swing.JComponent access$11(org.greencubes.launcher.LauncherMain$Play) -> AMb
    void access$12(org.greencubes.launcher.LauncherMain$Play,javax.swing.JComponent) -> jqA
    void access$13(org.greencubes.launcher.LauncherMain$Play,org.greencubes.swing.GPopupMenu) -> DIh
    org.greencubes.swing.GPopupMenu access$14(org.greencubes.launcher.LauncherMain$Play) -> jLa
    javax.swing.JComponent access$15(org.greencubes.launcher.LauncherMain$Play) -> diH
    void access$16(org.greencubes.launcher.LauncherMain$Play,javax.swing.JLabel) -> AmB
    void access$17(org.greencubes.launcher.LauncherMain$Play) -> dAZ
org.greencubes.launcher.LauncherMain$Play$1 -> org.greencubes.*.bt:
    org.greencubes.launcher.LauncherMain$Play this$0 -> DIh
    void run() -> run
org.greencubes.launcher.LauncherMain$Play$10 -> org.greencubes.*.bu:
    org.greencubes.launcher.LauncherMain$Play this$0 -> DIh
    java.util.List val$servers -> jqA
    int val$i1 -> AmB
    void actionPerformed(java.awt.event.ActionEvent) -> actionPerformed
org.greencubes.launcher.LauncherMain$Play$2 -> org.greencubes.*.bv:
    org.greencubes.launcher.LauncherMain$Play this$0 -> DIh
org.greencubes.launcher.LauncherMain$Play$3 -> org.greencubes.*.bw:
    org.greencubes.launcher.LauncherMain$Play this$0 -> DIh
    void run() -> run
org.greencubes.launcher.LauncherMain$Play$4 -> org.greencubes.*.bx:
    org.greencubes.launcher.LauncherMain$Play this$0 -> DIh
org.greencubes.launcher.LauncherMain$Play$4$1 -> org.greencubes.*.by:
    org.greencubes.launcher.LauncherMain$Play$4 this$1 -> DIh
org.greencubes.launcher.LauncherMain$Play$4$2 -> org.greencubes.*.bz:
    org.greencubes.launcher.LauncherMain$Play$4 this$1 -> DIh
org.greencubes.launcher.LauncherMain$Play$4$3 -> org.greencubes.*.bA:
    org.greencubes.launcher.LauncherMain$Play$4 this$1 -> DIh
org.greencubes.launcher.LauncherMain$Play$5 -> org.greencubes.*.bB:
    org.greencubes.launcher.LauncherMain$Play this$0 -> DIh
    org.greencubes.launcher.LauncherMain$Play access$0(org.greencubes.launcher.LauncherMain$Play$5) -> DIh
org.greencubes.launcher.LauncherMain$Play$5$1 -> org.greencubes.*.bC:
    org.greencubes.launcher.LauncherMain$Play$5 this$1 -> DIh
org.greencubes.launcher.LauncherMain$Play$5$1$1 -> org.greencubes.*.bD:
    org.greencubes.launcher.LauncherMain$Play$5$1 this$2 -> DIh
org.greencubes.launcher.LauncherMain$Play$5$1$2 -> org.greencubes.*.bE:
    org.greencubes.launcher.LauncherMain$Play$5$1 this$2 -> DIh
org.greencubes.launcher.LauncherMain$Play$5$2 -> org.greencubes.*.bF:
    org.greencubes.launcher.LauncherMain$Play$5 this$1 -> DIh
    org.greencubes.launcher.LauncherMain$Play$5 access$0(org.greencubes.launcher.LauncherMain$Play$5$2) -> DIh
org.greencubes.launcher.LauncherMain$Play$5$2$1 -> org.greencubes.*.bG:
    org.greencubes.launcher.LauncherMain$Play$5$2 this$2 -> DIh
org.greencubes.launcher.LauncherMain$Play$5$2$2 -> org.greencubes.*.bH:
    org.greencubes.launcher.LauncherMain$Play$5$2 this$2 -> DIh
    org.greencubes.launcher.LauncherMain$Play$5$2 access$0(org.greencubes.launcher.LauncherMain$Play$5$2$2) -> DIh
org.greencubes.launcher.LauncherMain$Play$5$2$2$1 -> org.greencubes.*.bI:
    org.greencubes.launcher.LauncherMain$Play$5$2$2 this$3 -> DIh
org.greencubes.launcher.LauncherMain$Play$5$2$2$2 -> org.greencubes.*.bJ:
    org.greencubes.launcher.LauncherMain$Play$5$2$2 this$3 -> DIh
org.greencubes.launcher.LauncherMain$Play$5$2$2$3 -> org.greencubes.*.bK:
    org.greencubes.launcher.LauncherMain$Play$5$2$2 this$3 -> DIh
    void mouseClicked(java.awt.event.MouseEvent) -> mouseClicked
    void mouseEntered(java.awt.event.MouseEvent) -> mouseEntered
    void mouseExited(java.awt.event.MouseEvent) -> mouseExited
org.greencubes.launcher.LauncherMain$Play$6 -> org.greencubes.*.bL:
    org.greencubes.launcher.LauncherMain$Play this$0 -> DIh
    void run() -> run
org.greencubes.launcher.LauncherMain$Play$7 -> org.greencubes.*.bM:
    org.greencubes.launcher.LauncherMain$Play this$0 -> DIh
    javafx.embed.swing.JFXPanel val$panel -> jqA
    org.greencubes.client.Client val$client -> AmB
    void run() -> run
org.greencubes.launcher.LauncherMain$Play$8 -> org.greencubes.*.bN:
    org.greencubes.launcher.LauncherMain$Play this$0 -> DIh
org.greencubes.launcher.LauncherMain$Play$8$1 -> org.greencubes.*.bO:
    org.greencubes.launcher.LauncherMain$Play$8 this$1 -> DIh
    java.awt.Insets getBorderInsets(java.awt.Component) -> getBorderInsets
org.greencubes.launcher.LauncherMain$Play$8$2 -> org.greencubes.*.bP:
    org.greencubes.launcher.LauncherMain$Play$8 this$1 -> DIh
org.greencubes.launcher.LauncherMain$Play$9 -> org.greencubes.*.bQ:
    org.greencubes.launcher.LauncherMain$Play this$0 -> DIh
    org.greencubes.launcher.LauncherMain$Play access$0(org.greencubes.launcher.LauncherMain$Play$9) -> DIh
org.greencubes.launcher.LauncherMain$Play$9$1 -> org.greencubes.*.bR:
    org.greencubes.launcher.LauncherMain$Play$9 this$1 -> DIh
    void mousePressed(java.awt.event.MouseEvent) -> mousePressed
org.greencubes.launcher.LauncherMain$Play$9$2 -> org.greencubes.*.bS:
    org.greencubes.launcher.LauncherMain$Play$9 this$1 -> DIh
org.greencubes.launcher.LauncherMain$Play$9$3 -> org.greencubes.*.bT:
    org.greencubes.launcher.LauncherMain$Play$9 this$1 -> DIh
org.greencubes.launcher.LauncherMain$Play$9$4 -> org.greencubes.*.bU:
    org.greencubes.launcher.LauncherMain$Play$9 this$1 -> DIh
org.greencubes.launcher.LauncherOptions -> org.greencubes.*.bV:
    java.util.List icons -> dih
    java.lang.ThreadLocal threadLocalDownloader -> jQA
    java.util.Map clientDownloaders -> AMB
    boolean debug -> DIh
    boolean noUpdateLauncher -> jqA
    org.greencubes.launcher.LauncherOptions$OnStartAction onClientStart -> AmB
    boolean autoLogin -> JZD
    boolean showLocalServer -> AMb
    boolean autoUpdate -> jLa
    org.greencubes.launcher.LauncherOptions$OnStartAction onLauncherClose -> diH
    org.greencubes.launcher.LauncherOptions$OnStartAction onLauncherMinimize -> dAZ
    boolean keepTrayIcon -> jZd
    long sessionKeyAddress -> ThL
    java.lang.String sessionId -> vag
    java.lang.String sessionUser -> vai
    int sessionUserId -> jvp
    org.json.JSONObject userInfo -> lGC
    org.greencubes.download.Downloader getClientDownloader(org.greencubes.client.Client) -> DIh
    org.greencubes.download.Downloader getDownloader() -> DIh
    org.greencubes.download.Downloader newClientDownloader() -> jZd
    java.util.List getIcons() -> jqA
    void setSession(int,java.lang.String,byte[]) -> DIh
    void auth(java.lang.String,char[]) -> DIh
    void logOff() -> AmB
    void authSession() -> JZD
    void saveSession() -> vag
    void loadSession() -> AMb
    void init() -> jLa
    void systemTrayInit() -> diH
    void systemTrayRemove() -> dAZ
org.greencubes.launcher.LauncherOptions$1 -> org.greencubes.*.bW:
    org.greencubes.download.Downloader initialValue() -> DIh
    java.lang.Object initialValue() -> initialValue
org.greencubes.launcher.LauncherOptions$2 -> org.greencubes.*.bX:
    void checkPermission(java.security.Permission) -> checkPermission
    void checkMemberAccess(java.lang.Class,int) -> checkMemberAccess
org.greencubes.launcher.LauncherOptions$3 -> org.greencubes.*.bY:
    void actionPerformed(java.awt.event.ActionEvent) -> actionPerformed
org.greencubes.launcher.LauncherOptions$4 -> org.greencubes.*.bZ:
    void actionPerformed(java.awt.event.ActionEvent) -> actionPerformed
org.greencubes.launcher.LauncherOptions$OnStartAction -> org.greencubes.*.ca:
    org.greencubes.launcher.LauncherOptions$OnStartAction CLOSE -> DIh
    org.greencubes.launcher.LauncherOptions$OnStartAction MINIMIZE -> jqA
    org.greencubes.launcher.LauncherOptions$OnStartAction HIDE -> AmB
    org.greencubes.launcher.LauncherOptions$OnStartAction NO -> JZD
    java.lang.String langKey -> AMb
    org.greencubes.launcher.LauncherOptions$OnStartAction[] ENUM$VALUES -> jLa
    org.greencubes.launcher.LauncherOptions$OnStartAction[] getSupportedOnCloseActions() -> DIh
    org.greencubes.launcher.LauncherOptions$OnStartAction[] getSupportedOnStartActions() -> jqA
    org.greencubes.launcher.LauncherOptions$OnStartAction[] values() -> values
    org.greencubes.launcher.LauncherOptions$OnStartAction valueOf(java.lang.String) -> valueOf
org.greencubes.launcher.LauncherUpdate -> org.greencubes.*.cb:
    long RENAME_DELAY -> AmB
    javax.swing.JFrame frame -> DIh
    javax.swing.JLabel statusPane -> jqA
    boolean doUpdate() -> DIh
    void processUpdate(java.util.List) -> DIh
    void runPatcher() -> jqA
    void restart() -> AmB
    boolean isRunning(java.lang.Process) -> DIh
    boolean downloadUpdate(java.util.List,java.util.List) -> DIh
    void setDownloadStatus(long,long) -> DIh
    void setStatus(java.lang.String) -> DIh
    void createWindow() -> JZD
    void updateError(int,java.lang.String) -> DIh
    void saveUpdateErrorMessage(int,java.lang.String) -> jqA
    java.util.List getLaunchParameters() -> AMb
    void launcherLoad() -> jLa
    javax.swing.JLabel access$0(org.greencubes.launcher.LauncherUpdate) -> DIh
    void access$1(org.greencubes.launcher.LauncherUpdate,javax.swing.JLabel) -> DIh
    javax.swing.JFrame access$2(org.greencubes.launcher.LauncherUpdate) -> jqA
org.greencubes.launcher.LauncherUpdate$1 -> org.greencubes.*.cc:
    org.greencubes.launcher.LauncherUpdate this$0 -> DIh
    java.lang.String val$s -> jqA
    void run() -> run
org.greencubes.launcher.LauncherUpdate$2 -> org.greencubes.*.cd:
    org.greencubes.launcher.LauncherUpdate this$0 -> DIh
    org.greencubes.launcher.LauncherUpdate access$0(org.greencubes.launcher.LauncherUpdate$2) -> DIh
org.greencubes.launcher.LauncherUpdate$2$1 -> org.greencubes.*.ce:
    org.greencubes.launcher.LauncherUpdate$2 this$1 -> DIh
org.greencubes.launcher.LauncherUpdate$2$1$1 -> org.greencubes.*.cf:
    org.greencubes.launcher.LauncherUpdate$2$1 this$2 -> DIh
org.greencubes.launcher.LauncherUpdate$2$1$2 -> org.greencubes.*.cg:
    org.greencubes.launcher.LauncherUpdate$2$1 this$2 -> DIh
org.greencubes.launcher.LauncherUpdate$3 -> org.greencubes.*.ch:
    org.greencubes.launcher.LauncherUpdate this$0 -> DIh
    void run() -> run
org.greencubes.launcher.LauncherUpdate$4 -> org.greencubes.*.ci:
    org.greencubes.launcher.LauncherUpdate this$0 -> DIh
    void windowClosing(java.awt.event.WindowEvent) -> windowClosing
org.greencubes.launcher.LauncherUpdate$5 -> org.greencubes.*.cj:
    org.greencubes.launcher.LauncherUpdate this$0 -> DIh
    void run() -> run
org.greencubes.launcher.LauncherUtil -> org.greencubes.*.ck:
    boolean canOpenBrowser() -> DIh
    void onenURLInBrowser(java.lang.String) -> DIh
    org.json.JSONObject sessionRequest(java.lang.String) -> jqA
    boolean checkAnswer(org.json.JSONObject) -> DIh
org.greencubes.main.CrashReport -> org.greencubes.*.cl:
    long serialVersionUID -> DIh
    void processCrashReport(java.lang.String,java.lang.Throwable) -> DIh
org.greencubes.main.CrashReport$1 -> org.greencubes.*.cm:
    void windowClosing(java.awt.event.WindowEvent) -> windowClosing
org.greencubes.main.Main -> org.greencubes.main.Main:
    java.lang.String PASSWORD_RECOVER_URL -> jLa
    java.lang.String REGISTRATION_URL -> diH
    java.lang.String SUPPORT_SYSTEM_URL -> dAZ
    java.lang.String USER_CONTROL_PANEL_URL -> jZd
    java.lang.String IPV4STACK -> vag
    java.lang.String BUILD_INFO -> vai
    boolean IS_64_BIT_JAVA -> DIh
    boolean TEST -> jvp
    org.json.JSONObject config -> lGC
    java.io.RandomAccessFile userFile -> dih
    java.nio.channels.FileChannel userFileChannel -> jqA
    java.io.File launcherFile -> AmB
    java.awt.Frame currentFrame -> JZD
    java.awt.TrayIcon trayIcon -> AMb
    org.greencubes.main.SingleInstanceWorker siw -> jQA
    int[] $SWITCH_TABLE$org$greencubes$launcher$LauncherOptions$OnStartAction -> AMB
    void main(java.lang.String[]) -> main
    void newInstanceCreated(java.lang.String[]) -> DIh
    void performWindowAction(org.greencubes.launcher.LauncherOptions$OnStartAction) -> DIh
    void undoWindowAction(org.greencubes.launcher.LauncherOptions$OnStartAction) -> jqA
    org.json.JSONObject getConfig() -> DIh
    void close() -> jqA
    javax.crypto.Cipher getCipher(int,java.lang.String) -> DIh
    int[] $SWITCH_TABLE$org$greencubes$launcher$LauncherOptions$OnStartAction() -> AmB
org.greencubes.main.Main$1 -> org.greencubes.*.cn:
    void run() -> run
org.greencubes.main.SingleInstanceWorker -> org.greencubes.*.co:
    int PORT -> jqA
    int HEAD -> AmB
    java.net.ServerSocket serverSocket -> JZD
    boolean isAlreadyRunning -> DIh
    void run() -> run
    void close() -> close
    boolean isAlreadyRunning() -> DIh
    void process(java.net.Socket) -> DIh
org.greencubes.swing.AbstractComponentListener -> org.greencubes.*.cp:
    void componentResized(java.awt.event.ComponentEvent) -> componentResized
    void componentMoved(java.awt.event.ComponentEvent) -> componentMoved
    void componentShown(java.awt.event.ComponentEvent) -> componentShown
    void componentHidden(java.awt.event.ComponentEvent) -> componentHidden
org.greencubes.swing.AbstractWindowListener -> org.greencubes.*.cq:
    void windowOpened(java.awt.event.WindowEvent) -> windowOpened
    void windowClosing(java.awt.event.WindowEvent) -> windowClosing
    void windowClosed(java.awt.event.WindowEvent) -> windowClosed
    void windowIconified(java.awt.event.WindowEvent) -> windowIconified
    void windowDeiconified(java.awt.event.WindowEvent) -> windowDeiconified
    void windowActivated(java.awt.event.WindowEvent) -> windowActivated
    void windowDeactivated(java.awt.event.WindowEvent) -> windowDeactivated
org.greencubes.swing.ComponentResizer -> org.greencubes.*.cr:
    java.awt.Dimension MINIMUM_SIZE -> AmB
    java.awt.Dimension MAXIMUM_SIZE -> JZD
    java.util.Map cursors -> AMb
    java.awt.Insets dragInsets -> jLa
    java.awt.Dimension snapSize -> DIh
    int direction -> diH
    int NORTH -> dAZ
    int WEST -> jZd
    int SOUTH -> vag
    int EAST -> vai
    java.awt.Cursor sourceCursor -> jvp
    boolean resizing -> lGC
    java.awt.Rectangle bounds -> dih
    java.awt.Point pressed -> jQA
    boolean autoscrolls -> AMB
    boolean enabled -> jqA
    java.awt.Dimension minimumSize -> ThL
    java.awt.Dimension maximumSize -> Vag
    java.awt.Insets getDragInsets() -> jqA
    void setDragInsets(java.awt.Insets) -> DIh
    java.awt.Dimension getMaximumSize() -> AmB
    void setMaximumSize(java.awt.Dimension) -> jqA
    java.awt.Dimension getMinimumSize() -> JZD
    void setMinimumSize(java.awt.Dimension) -> AmB
    void deregisterComponent(java.awt.Component[]) -> jqA
    void registerComponent(java.awt.Component[]) -> DIh
    java.awt.Dimension getSnapSize() -> AMb
    void setSnapSize(java.awt.Dimension) -> DIh
    void validateMinimumAndInsets(java.awt.Dimension,java.awt.Insets) -> DIh
    void mouseMoved(java.awt.event.MouseEvent) -> mouseMoved
    void mouseEntered(java.awt.event.MouseEvent) -> mouseEntered
    void mouseExited(java.awt.event.MouseEvent) -> mouseExited
    void mousePressed(java.awt.event.MouseEvent) -> mousePressed
    void mouseReleased(java.awt.event.MouseEvent) -> mouseReleased
    void mouseDragged(java.awt.event.MouseEvent) -> mouseDragged
    void changeBounds(java.awt.Component,int,java.awt.Rectangle,java.awt.Point,java.awt.Point) -> DIh
    int getDragDistance(int,int,int) -> DIh
    int getDragBounded(int,int,int,int,int) -> DIh
    java.awt.Dimension getBoundingSize(java.awt.Component) -> DIh
    boolean isEnabled() -> DIh
    void setEnabled(boolean) -> DIh
org.greencubes.swing.DropdownListener -> org.greencubes.*.cs:
    javax.swing.JPopupMenu popup -> jqA
    int offsetX -> AmB
    int offsetY -> JZD
    boolean useCustomOffset -> AMb
    long animation -> jLa
    int startX -> diH
    int startY -> dAZ
    java.util.List listeners -> DIh
    void addActionListener(java.awt.event.ActionListener) -> DIh
    void show(java.awt.Component,int,int) -> DIh
    void mousePressed(java.awt.event.MouseEvent) -> mousePressed
    javax.swing.JPopupMenu access$0(org.greencubes.swing.DropdownListener) -> DIh
    java.util.List access$1(org.greencubes.swing.DropdownListener) -> jqA
org.greencubes.swing.DropdownListener$1 -> org.greencubes.*.ct:
    int i -> DIh
    float mvX -> jqA
    float mvY -> AmB
    org.greencubes.swing.DropdownListener this$0 -> JZD
    float val$stepX -> AMb
    float val$stepY -> jLa
    long val$steps -> diH
    javax.swing.Timer val$t -> dAZ
    void actionPerformed(java.awt.event.ActionEvent) -> actionPerformed
    org.greencubes.swing.DropdownListener access$0(org.greencubes.swing.DropdownListener$1) -> DIh
org.greencubes.swing.DropdownListener$1$1 -> org.greencubes.*.cu:
    org.greencubes.swing.DropdownListener$1 this$1 -> DIh
    void run() -> run
org.greencubes.swing.GAWTUtil -> org.greencubes.*.cv:
    java.awt.GraphicsConfiguration bestConfig -> DIh
    javax.swing.JTextPane getNiceTextPane(java.lang.String,int) -> DIh
    void fixtTextPaneWidth(javax.swing.JTextPane,int) -> DIh
    int showDialog(java.lang.String,java.lang.String,java.lang.Object[],int,int) -> DIh
    int styleFromMessageType(int) -> DIh
    javax.swing.plaf.ScrollBarUI customScrollBarUI(java.awt.Color,java.awt.Color) -> DIh
    void removeMouseListeners(javax.swing.JComponent) -> DIh
    java.lang.String toURL(java.lang.String) -> DIh
    java.awt.event.MouseListener createMinimizeListener(java.awt.Frame) -> DIh
    java.awt.event.MouseListener createCloseListener(java.awt.Frame) -> jqA
    java.awt.event.MouseListener createMaximizeListener(org.greencubes.swing.UndecoratedJFrame) -> DIh
    boolean safeTransparentBackground(java.awt.Component,java.awt.Color) -> DIh
    javax.swing.border.Border safePopupBorder() -> DIh
    javax.swing.border.Border mimicPopupBorder() -> AmB
    javax.swing.border.Border popupBorder() -> JZD
    boolean isTranslucencySupported() -> AMb
    java.awt.GraphicsConfiguration getBestConfiguration() -> jqA
org.greencubes.swing.GAWTUtil$1 -> org.greencubes.swing.GAWTUtil$1:
    java.awt.Color val$customThumbColor -> DIh
    java.awt.Color val$customBackgroundColor -> jqA
    void installComponents() -> installComponents
    void paintThumb(java.awt.Graphics,javax.swing.JComponent,java.awt.Rectangle) -> paintThumb
    void paintTrack(java.awt.Graphics,javax.swing.JComponent,java.awt.Rectangle) -> paintTrack
org.greencubes.swing.GAWTUtil$2 -> org.greencubes.*.cw:
    java.awt.Frame val$frame -> DIh
    void mousePressed(java.awt.event.MouseEvent) -> mousePressed
org.greencubes.swing.GAWTUtil$3 -> org.greencubes.*.cx:
    java.awt.Frame val$lastFrame -> DIh
    void mousePressed(java.awt.event.MouseEvent) -> mousePressed
org.greencubes.swing.GAWTUtil$4 -> org.greencubes.*.cy:
    org.greencubes.swing.UndecoratedJFrame val$frame -> DIh
    void mousePressed(java.awt.event.MouseEvent) -> mousePressed
org.greencubes.swing.GAWTUtil$5 -> org.greencubes.*.cz:
    java.awt.Image icon -> DIh
    void paintBorder(java.awt.Component,java.awt.Graphics,int,int,int,int) -> paintBorder
    boolean isBorderOpaque() -> isBorderOpaque
org.greencubes.swing.GJBoxPanel -> org.greencubes.*.cA:
org.greencubes.swing.GPopupMenu -> org.greencubes.*.cB:
    boolean up -> jLa
    java.awt.Color background -> diH
    java.awt.Color foreground -> dAZ
    java.awt.Color selectedBackground -> jZd
    java.awt.Color selectedForeground -> vag
    java.awt.Font font -> DIh
    java.awt.Dimension size -> jqA
    int menuPadding -> vai
    javax.swing.border.Border menuBorder -> AmB
    java.util.List items -> JZD
    int iconTextGap -> AMb
    javax.swing.JMenuItem addItem(java.lang.String,java.lang.String) -> DIh
    void setIconTextGap(int) -> DIh
    java.util.List getItems() -> DIh
    void setMenuBorder(javax.swing.border.Border) -> DIh
    void setMenuFont(java.awt.Font) -> DIh
    void setMenuSize(java.awt.Dimension) -> DIh
    void setMenuColors(java.awt.Color,java.awt.Color,java.awt.Color,java.awt.Color) -> DIh
    void show(java.awt.Component,boolean) -> DIh
    void realShow(java.awt.Component,boolean) -> jqA
    int access$0(org.greencubes.swing.GPopupMenu) -> DIh
    java.awt.Color access$1(org.greencubes.swing.GPopupMenu) -> jqA
    java.awt.Color access$2(org.greencubes.swing.GPopupMenu) -> AmB
    java.awt.Font access$3(org.greencubes.swing.GPopupMenu) -> JZD
    java.awt.Color access$4(org.greencubes.swing.GPopupMenu) -> AMb
    java.awt.Color access$5(org.greencubes.swing.GPopupMenu) -> jLa
    java.awt.Dimension access$6(org.greencubes.swing.GPopupMenu) -> diH
    javax.swing.border.Border access$7(org.greencubes.swing.GPopupMenu) -> dAZ
org.greencubes.swing.GPopupMenu$1 -> org.greencubes.*.cC:
    org.greencubes.swing.GPopupMenu this$0 -> DIh
    org.greencubes.swing.GPopupMenu access$0(org.greencubes.swing.GPopupMenu$1) -> DIh
org.greencubes.swing.GPopupMenu$1$1 -> org.greencubes.swing.GPopupMenu$1$1:
    org.greencubes.swing.GPopupMenu$1 this$1 -> DIh
org.greencubes.swing.JPanelBG -> org.greencubes.*.cD:
    long serialVersionUID -> DIh
    int paddingTop -> jqA
    int paddingLeft -> AmB
    boolean fill -> JZD
    java.awt.Image bg -> jLa
    java.awt.Image activeBg -> diH
    java.awt.Image inactiveBg -> dAZ
    java.awt.event.MouseListener getActiveMouseListener() -> DIh
    void paintComponent(java.awt.Graphics) -> paintComponent
    void drawBg(java.awt.Graphics) -> DIh
org.greencubes.swing.JPanelBG$1 -> org.greencubes.*.cE:
    org.greencubes.swing.JPanelBG this$0 -> DIh
    void mouseEntered(java.awt.event.MouseEvent) -> mouseEntered
    void mouseExited(java.awt.event.MouseEvent) -> mouseExited
org.greencubes.swing.MotionPanel -> org.greencubes.*.cF:
    java.awt.Point initialClick -> DIh
    void access$0(org.greencubes.swing.MotionPanel,java.awt.Point) -> DIh
    java.awt.Point access$1(org.greencubes.swing.MotionPanel) -> DIh
org.greencubes.swing.MotionPanel$1 -> org.greencubes.*.cG:
    org.greencubes.swing.MotionPanel this$0 -> DIh
    void mousePressed(java.awt.event.MouseEvent) -> mousePressed
org.greencubes.swing.MotionPanel$2 -> org.greencubes.*.cH:
    org.greencubes.swing.MotionPanel this$0 -> DIh
    javax.swing.JFrame val$parent -> jqA
    void mouseDragged(java.awt.event.MouseEvent) -> mouseDragged
org.greencubes.swing.PlaceholderPasswordField -> org.greencubes.*.cI:
    java.lang.String placeholder -> DIh
    java.lang.String getPlaceholder() -> DIh
    void paintComponent(java.awt.Graphics) -> paintComponent
    void setPlaceholder(java.lang.String) -> DIh
org.greencubes.swing.PlaceholderTextField -> org.greencubes.*.cJ:
    java.lang.String placeholder -> DIh
    java.lang.String getPlaceholder() -> DIh
    void paintComponent(java.awt.Graphics) -> paintComponent
    void setPlaceholder(java.lang.String) -> DIh
org.greencubes.swing.RoundedCornerBorder -> org.greencubes.*.cK:
    java.awt.Color bgColor -> DIh
    java.awt.Color borderColor -> jqA
    int inset -> AmB
    void paintBorder(java.awt.Component,java.awt.Graphics,int,int,int,int) -> paintBorder
    java.awt.Insets getBorderInsets(java.awt.Component) -> getBorderInsets
    java.awt.Insets getBorderInsets(java.awt.Component,java.awt.Insets) -> getBorderInsets
org.greencubes.swing.TransparencyFixer -> org.greencubes.*.cL:
    java.awt.Component component -> DIh
    void propertyChange(java.beans.PropertyChangeEvent) -> propertyChange
    java.awt.Window getWindowAncestor(java.awt.Component) -> jqA
    void add(java.awt.Component) -> DIh
org.greencubes.swing.UIScheme -> org.greencubes.*.cM:
    java.awt.Color BACKGROUND -> DIh
    java.awt.Color BIG_BUTTON -> jqA
    java.awt.Color BIG_BUTTON_ACTIVE -> AmB
    java.awt.Color EMPTY -> JZD
    java.awt.Color TEXT_COLOR -> AMb
    java.lang.String TEXT_FONT -> JzD
    java.lang.String TITLE_FONT -> jqa
    java.lang.String LONG_TEXT_FONG -> Lgc
    java.awt.Color MAIN_MENU_BG -> jLa
    java.awt.Color TITLE_COLOR -> diH
    java.awt.Color MAIN_MENU_BG_SEL -> dAZ
    java.awt.Color TITLE_COLOR_SEL -> jZd
    java.awt.Color PROGRESSBAR_BG -> vag
    java.awt.Color PROGRESSBAR_BAR -> vai
    java.awt.Color PROGRESSBAR_BORDER -> jvp
    java.awt.Color TOP_PANEL_BG -> lGC
    java.awt.Color TOP_PANEL_BG_LOGO -> dih
    java.awt.Color MENU_BG -> jQA
    java.awt.Color MENU_DD_BG -> AMB
    java.awt.Color MENU_BORDER -> ThL
    java.awt.Color MENU_DD_BG_SEL -> Vag
    java.awt.Color INPUT_BG -> RuE
    java.awt.Color INPUT_BORDER -> tHL
    java.awt.Color getColor(int,int) -> DIh
    java.awt.Color getColor(int) -> DIh
org.greencubes.swing.UndecoratedJFrame -> org.greencubes.*.cN:
    java.awt.Point initialClick -> DIh
    org.greencubes.swing.ComponentResizer resizer -> jqA
    void maximize() -> DIh
    void setResizable(boolean) -> setResizable
    boolean isResizable() -> isResizable
org.greencubes.swing.UndecoratedJFrame$1 -> org.greencubes.*.cO:
    org.greencubes.swing.UndecoratedJFrame this$0 -> DIh
    void mousePressed(java.awt.event.MouseEvent) -> mousePressed
org.greencubes.swing.UndecoratedJFrame$2 -> org.greencubes.*.cP:
    org.greencubes.swing.UndecoratedJFrame this$0 -> DIh
    void mouseDragged(java.awt.event.MouseEvent) -> mouseDragged
org.greencubes.util.Encryption -> org.greencubes.*.cQ:
    java.lang.Object sm -> DIh
    void setSecurityManager(java.lang.SecurityManager) -> DIh
    java.lang.SecurityManager getSecurityManager() -> DIh
    byte[] decrypt(byte[],byte[]) -> DIh
    byte[] encrypt(byte[],byte[]) -> jqA
    void throwMajicError() -> jqA
    byte[] secureMultiSha384(byte[],int) -> DIh
    byte[] secureSha384(byte[]) -> DIh
    void init() -> AmB
org.greencubes.util.I18n -> org.greencubes.*.cR:
    java.lang.String DEFAULT_LANG -> AmB
    java.lang.String[] supportedLanguages -> DIh
    java.util.Map langMap -> JZD
    java.util.Locale currentLocale -> AMb
    java.lang.String currentLanguage -> jqA
    java.text.SimpleDateFormat localizedDateFormat -> jLa
    java.util.Locale getCurrentLocale() -> DIh
    java.lang.String getLang() -> jqA
    java.lang.String getLocalizedDate(long) -> DIh
    java.lang.String getLocalizedDate(java.util.Date) -> DIh
    boolean hasLang(java.lang.String) -> DIh
    java.lang.String get(java.lang.String) -> jqA
    java.lang.String get(java.lang.String,java.lang.Object[]) -> DIh
    boolean isSupportedLang(java.lang.String) -> AmB
    void loadLanguage(java.lang.String) -> JZD
org.greencubes.util.MacOSX -> org.greencubes.*.cS:
    void setIcons(java.util.List) -> DIh
    void setTitle(java.lang.String) -> DIh
    boolean hasRetinaDisplay() -> DIh
org.greencubes.util.OperatingSystem -> org.greencubes.*.cT:
    org.greencubes.util.OperatingSystem LINUX -> DIh
    org.greencubes.util.OperatingSystem WINDOWS -> jqA
    org.greencubes.util.OperatingSystem OSX -> AmB
    org.greencubes.util.OperatingSystem UNKNOWN -> JZD
    java.lang.String[] aliases -> AMb
    java.lang.String name -> jLa
    org.greencubes.util.OperatingSystem[] ENUM$VALUES -> diH
    java.lang.String getJavaExecutable(boolean) -> DIh
    org.greencubes.util.OperatingSystem getCurrentPlatform() -> DIh
    org.greencubes.util.OperatingSystem[] values() -> values
    org.greencubes.util.OperatingSystem valueOf(java.lang.String) -> valueOf
org.greencubes.util.SynchronizedDateFormat -> org.greencubes.*.cU:
    long serialVersionUID -> DIh
    java.text.DateFormat parent -> jqA
    java.lang.StringBuffer format(java.util.Date,java.lang.StringBuffer,java.text.FieldPosition) -> format
    java.util.Date parse(java.lang.String,java.text.ParsePosition) -> parse
org.greencubes.util.Util -> org.greencubes.*.cV:
    sun.misc.Unsafe unsafe -> DIh
    java.util.Random globalRandom -> jqA
    char[] chars -> AmB
    java.text.DateFormat dateFormat -> JZD
    java.text.DateFormat fileDateFormat -> AMb
    java.lang.String[] emptyStringArray -> jLa
    java.util.Random debugColorRandom -> diH
    int[] $SWITCH_TABLE$org$greencubes$util$OperatingSystem -> dAZ
    sun.misc.Unsafe getUnsafe() -> DIh
    void copyFile(java.io.File,java.io.File) -> jqA
    java.lang.String getRelativePath(java.io.File,java.io.File) -> DIh
    java.lang.String join(java.lang.String[]) -> DIh
    java.lang.String join(java.lang.String[],java.lang.String) -> DIh
    java.lang.String join(java.lang.Object[],java.lang.String) -> DIh
    java.lang.String join(java.lang.String[],java.lang.String,int) -> DIh
    java.lang.String join(java.lang.String[],java.lang.String,int,int) -> DIh
    java.lang.String md5(java.lang.String) -> JZD
    java.lang.String sha1(java.lang.String) -> AMb
    java.lang.String byteArrayToHex(byte[]) -> DIh
    byte[] hexStringToByteArray(java.lang.String) -> DIh
    java.util.List toList(java.lang.Object[]) -> DIh
    boolean arrayExactlyContains(java.lang.Object[],java.lang.Object) -> DIh
    boolean arrayExactlyContains(int[],int) -> DIh
    java.lang.String stringToSize(java.lang.String,int) -> DIh
    java.lang.String randomString(int) -> DIh
    int getMunutesDiff(long,long) -> DIh
    java.lang.String getTime(int) -> jqA
    long daysToMillis(int) -> AmB
    long hoursToMillis(int) -> JZD
    int millisToHours(long) -> jqA
    boolean areIntArraysEquals(int[],int[]) -> DIh
    java.lang.Object[] reverse(java.lang.Object[]) -> jqA
    java.util.List reverse(java.util.List) -> DIh
    java.util.Map toMap(java.lang.Object[],java.lang.Object[]) -> DIh
    boolean checkFileInDirrectory(java.io.File,java.io.File) -> AmB
    void close(java.io.Closeable[]) -> DIh
    java.lang.String concat(java.lang.String[]) -> jqA
    java.lang.String concat(java.lang.Object[]) -> AmB
    long combine(long,long) -> jqA
    byte[] createChecksum(java.io.File) -> DIh
    boolean equals(java.lang.Object,java.lang.Object) -> DIh
    java.lang.String mask(java.lang.String) -> jLa
    java.lang.String repeat(java.lang.String,int) -> jqA
    java.lang.String urlEncode(java.lang.String) -> jqA
    java.lang.String getBytesAsString(long) -> DIh
    java.lang.String toString(java.lang.Object) -> DIh
    void deepToString(java.util.Collection,java.lang.StringBuilder,java.util.Set) -> DIh
    void deepToString(java.lang.Object[],java.lang.StringBuilder,java.util.Set) -> DIh
    java.io.File getAppDir(java.lang.String) -> AmB
    java.io.File getAppDir() -> AmB
    java.awt.Color debugColor() -> jqA
    int[] $SWITCH_TABLE$org$greencubes$util$OperatingSystem() -> JZD
org.greencubes.util.io.GByteArrayOutputStream -> org.greencubes.*.cW:
    byte[] getArray() -> DIh
org.greencubes.util.logging.GLogSimple -> org.greencubes.*.cX:
    java.util.logging.Logger logger -> jqA
    void info(java.lang.String) -> DIh
    void severe(java.lang.String) -> jqA
    void warning(java.lang.String) -> AmB
    void debug(java.lang.String) -> JZD
    void log(java.util.logging.Level,java.lang.String) -> DIh
    void log(java.util.logging.Level,java.lang.String,java.lang.Throwable) -> DIh
    void add(org.greencubes.util.logging.GLogSimple$LogEntry) -> jqA
org.greencubes.util.logging.GLogSimple$LogEntry -> org.greencubes.*.cY:
    java.util.logging.Level level -> DIh
    java.lang.String message -> jqA
    java.lang.Throwable t -> AmB
    java.util.logging.Level getLevel() -> DIh
    java.lang.String getMessage() -> jqA
    java.lang.Throwable getException() -> AmB
    java.lang.Throwable access$0(org.greencubes.util.logging.GLogSimple$LogEntry) -> DIh
    java.util.logging.Level access$1(org.greencubes.util.logging.GLogSimple$LogEntry) -> jqA
    java.lang.String access$2(org.greencubes.util.logging.GLogSimple$LogEntry) -> AmB
org.greencubes.util.logging.IGLog -> org.greencubes.*.cZ:
    java.util.logging.Logger logger -> DIh
    void info(java.lang.String) -> DIh
    void severe(java.lang.String) -> jqA
    void warning(java.lang.String) -> AmB
    void debug(java.lang.String) -> JZD
    void log(java.util.logging.Level,java.lang.String) -> DIh
    void log(java.util.logging.Level,java.lang.String,java.lang.Throwable) -> DIh
    void add(org.greencubes.util.logging.GLogSimple$LogEntry) -> DIh
org.greencubes.util.logging.IGLog$GLevel -> org.greencubes.*.da:
    long serialVersionUID -> DIh
org.greencubes.util.logging.LogManager -> org.greencubes.*.db:
    java.util.concurrent.atomic.AtomicBoolean initialized -> DIh
    java.util.logging.Logger global -> jqA
    org.greencubes.util.logging.IGLog log -> AmB
    java.util.logging.ConsoleHandler handler -> JZD
    void initialize(java.io.File) -> DIh
    void addHandler(java.util.logging.Handler) -> DIh
    void removeHandler(java.util.logging.Handler) -> jqA
org.greencubes.util.logging.LogManager$1 -> org.greencubes.*.dc:
    void publish(java.util.logging.LogRecord) -> publish
org.greencubes.util.logging.LoggerOutputStream -> org.greencubes.*.dd:
    java.lang.String separator -> DIh
    org.greencubes.util.logging.IGLog logger -> jqA
    java.util.logging.Level level -> AmB
    java.lang.String prefix -> JZD
    java.lang.StringBuilder buffer -> AMb
    void flush() -> flush
    void close() -> close
org.greencubes.util.logging.OnlyTextFormatter -> org.greencubes.*.de:
    java.lang.String format(java.util.logging.LogRecord) -> format
org.greencubes.util.logging.ShortConsoleLogFormatter -> org.greencubes.*.df:
    java.text.SimpleDateFormat date -> DIh
    java.lang.String format(java.util.logging.LogRecord) -> format
org.greencubes.yaml.YamlException -> org.greencubes.*.dg:
    long serialVersionUID -> DIh
org.greencubes.yaml.YamlFile -> org.greencubes.*.dh:
    void load(java.io.InputStream) -> DIh
    void save(java.io.OutputStream) -> DIh
    void read(java.lang.Object) -> DIh
    org.greencubes.yaml.YamlNode getEmptyNode() -> DIh
org.greencubes.yaml.YamlNode -> org.greencubes.*.di:
    java.util.Map root -> DIh
    java.lang.Object getProperty(java.lang.String) -> AmB
    void setProperty(java.lang.String,java.lang.Object) -> DIh
    void merge(org.greencubes.yaml.YamlNode) -> DIh
    void merge(java.util.Map) -> DIh
    java.lang.String getString(java.lang.String) -> DIh
    java.lang.String getString(java.lang.String,java.lang.String) -> DIh
    int getInt(java.lang.String,int) -> DIh
    double getDouble(java.lang.String,double) -> DIh
    boolean getBoolean(java.lang.String,boolean) -> DIh
    java.util.List getKeys(java.lang.String) -> jqA
    java.util.List getList(java.lang.String) -> JZD
    java.util.List getStringList(java.lang.String,java.util.List) -> jqA
    java.util.List getIntList(java.lang.String,java.util.List) -> DIh
    java.util.Set getIntSet(java.lang.String) -> AMb
    java.util.List getDoubleList(java.lang.String,java.util.List) -> AmB
    java.util.List getBooleanList(java.lang.String,java.util.List) -> JZD
    java.util.List getNodeList(java.lang.String,java.util.List) -> AMb
    org.greencubes.yaml.YamlNode getNode(java.lang.String) -> jLa
    java.util.Map getNodes(java.lang.String) -> diH
    java.lang.Integer castInt(java.lang.Object) -> DIh
    java.lang.Double castDouble(java.lang.Object) -> jqA
    java.lang.Boolean castBoolean(java.lang.Object) -> AmB
    void removeProperty(java.lang.String) -> dAZ
    void fullDump(java.util.Map,java.lang.String) -> DIh
    java.util.Map fullDump() -> DIh
org.json.JSONArray -> org.json.DIh:
    java.util.ArrayList myArrayList -> DIh
    java.lang.Object get(int) -> DIh
    boolean getBoolean(int) -> AMb
    double getDouble(int) -> jLa
    int getInt(int) -> diH
    org.json.JSONArray getJSONArray(int) -> dAZ
    org.json.JSONObject getJSONObject(int) -> jqA
    long getLong(int) -> jZd
    java.lang.String getString(int) -> AmB
    boolean isNull(int) -> vag
    java.lang.String join(java.lang.String) -> DIh
    int length() -> DIh
    java.lang.Object opt(int) -> vai
    boolean optBoolean(int) -> jvp
    boolean optBoolean(int,boolean) -> DIh
    double optDouble(int) -> lGC
    double optDouble(int,double) -> DIh
    int optInt(int) -> dih
    int optInt(int,int) -> DIh
    org.json.JSONArray optJSONArray(int) -> jQA
    org.json.JSONObject optJSONObject(int) -> JZD
    long optLong(int) -> AMB
    long optLong(int,long) -> DIh
    java.lang.String optString(int) -> ThL
    java.lang.String optString(int,java.lang.String) -> DIh
    org.json.JSONArray put(boolean) -> DIh
    org.json.JSONArray put(java.util.Collection) -> DIh
    org.json.JSONArray put(double) -> DIh
    org.json.JSONArray put(int) -> Vag
    org.json.JSONArray put(long) -> DIh
    org.json.JSONArray put(java.util.Map) -> DIh
    org.json.JSONArray put(java.lang.Object) -> DIh
    org.json.JSONArray put(int,boolean) -> jqA
    org.json.JSONArray put(int,java.util.Collection) -> DIh
    org.json.JSONArray put(int,double) -> jqA
    org.json.JSONArray put(int,int) -> jqA
    org.json.JSONArray put(int,long) -> jqA
    org.json.JSONArray put(int,java.util.Map) -> DIh
    org.json.JSONArray put(int,java.lang.Object) -> DIh
    java.lang.Object remove(int) -> RuE
    org.json.JSONObject toJSONObject(org.json.JSONArray) -> DIh
    java.lang.String toString() -> toString
    java.lang.String toString(int) -> tHL
    java.io.Writer write(java.io.Writer) -> DIh
    java.io.Writer write(java.io.Writer,int,int) -> DIh
org.json.JSONException -> org.json.jqA:
    long serialVersionUID -> DIh
org.json.JSONObject -> org.json.AmB:
    java.util.Map map -> DIh
    java.lang.Object NULL -> jqA
    org.json.JSONObject accumulate(java.lang.String,java.lang.Object) -> jqA
    org.json.JSONObject append(java.lang.String,java.lang.Object) -> AmB
    java.util.Map getMap() -> DIh
    java.lang.String doubleToString(double) -> DIh
    java.lang.Object get(java.lang.String) -> dAZ
    boolean getBoolean(java.lang.String) -> jZd
    double getDouble(java.lang.String) -> vag
    int getInt(java.lang.String) -> vai
    org.json.JSONArray getJSONArray(java.lang.String) -> jvp
    org.json.JSONObject getJSONObject(java.lang.String) -> lGC
    long getLong(java.lang.String) -> dih
    java.lang.String[] getNames(org.json.JSONObject) -> DIh
    java.lang.String[] getNames(java.lang.Object) -> JZD
    java.lang.String getString(java.lang.String) -> jQA
    boolean has(java.lang.String) -> DIh
    org.json.JSONObject increment(java.lang.String) -> AMB
    boolean isNull(java.lang.String) -> ThL
    java.util.Iterator keys() -> jqA
    int length() -> AmB
    org.json.JSONArray names() -> JZD
    java.lang.String numberToString(java.lang.Number) -> DIh
    java.lang.Object opt(java.lang.String) -> Vag
    boolean optBoolean(java.lang.String) -> jqA
    boolean optBoolean(java.lang.String,boolean) -> DIh
    double optDouble(java.lang.String) -> RuE
    double optDouble(java.lang.String,double) -> DIh
    int optInt(java.lang.String) -> AmB
    int optInt(java.lang.String,int) -> DIh
    org.json.JSONArray optJSONArray(java.lang.String) -> JZD
    org.json.JSONObject optJSONObject(java.lang.String) -> AMb
    long optLong(java.lang.String) -> tHL
    long optLong(java.lang.String,long) -> jqA
    java.lang.String optString(java.lang.String) -> jLa
    java.lang.String optString(java.lang.String,java.lang.String) -> DIh
    void populateMap(java.lang.Object) -> AMb
    org.json.JSONObject put(java.lang.String,boolean) -> jqA
    org.json.JSONObject put(java.lang.String,java.util.Collection) -> DIh
    org.json.JSONObject put(java.lang.String,double) -> jqA
    org.json.JSONObject put(java.lang.String,int) -> jqA
    org.json.JSONObject put(java.lang.String,long) -> DIh
    org.json.JSONObject put(java.lang.String,java.util.Map) -> DIh
    org.json.JSONObject put(java.lang.String,java.lang.Object) -> DIh
    org.json.JSONObject putOnce(java.lang.String,java.lang.Object) -> JZD
    org.json.JSONObject putOpt(java.lang.String,java.lang.Object) -> AMb
    java.lang.String quote(java.lang.String) -> JzD
    java.io.Writer quote(java.lang.String,java.io.Writer) -> DIh
    java.lang.Object remove(java.lang.String) -> jqa
    java.lang.Object stringToValue(java.lang.String) -> diH
    void testValidity(java.lang.Object) -> DIh
    org.json.JSONArray toJSONArray(org.json.JSONArray) -> DIh
    java.lang.String toString() -> toString
    java.lang.String toString(int) -> DIh
    java.lang.String valueToString(java.lang.Object) -> jqA
    java.lang.Object wrap(java.lang.Object) -> AmB
    java.io.Writer write(java.io.Writer) -> DIh
    java.io.Writer writeWithIdent(java.io.Writer) -> jqA
    java.io.Writer writeValue(java.io.Writer,java.lang.Object,int,int) -> DIh
    void indent(java.io.Writer,int) -> DIh
    java.io.Writer write(java.io.Writer,int,int) -> DIh
org.json.JSONObject$Null -> org.json.JZD:
    java.lang.Object clone() -> clone
    boolean equals(java.lang.Object) -> equals
    java.lang.String toString() -> toString
    int hashCode() -> hashCode
org.json.JSONString -> org.json.AMb:
    java.lang.String toJSONString() -> DIh
org.json.JSONTokener -> org.json.jLa:
    long character -> DIh
    boolean eof -> jqA
    long index -> AmB
    long line -> JZD
    char previous -> AMb
    java.io.Reader reader -> jLa
    boolean usePrevious -> diH
    void back() -> DIh
    int dehexchar(char) -> DIh
    boolean end() -> AMb
    boolean more() -> jLa
    char next() -> jqA
    char next(char) -> jqA
    java.lang.String next(int) -> DIh
    char nextClean() -> AmB
    java.lang.String nextString(char) -> AmB
    java.lang.String nextTo(char) -> JZD
    java.lang.String nextTo(java.lang.String) -> jqA
    java.lang.Object nextValue() -> JZD
    char skipTo(char) -> AMb
    org.json.JSONException syntaxError(java.lang.String) -> DIh
    java.lang.String toString() -> toString
org.yaml.snakeyaml.Dumper -> org.yaml.snakeyaml.Dumper:
    org.yaml.snakeyaml.representer.Representer representer -> representer
    org.yaml.snakeyaml.DumperOptions options -> options
    boolean attached -> attached
    void dump(java.util.Iterator,java.io.Writer,org.yaml.snakeyaml.resolver.Resolver) -> dump
    void setAttached() -> setAttached
org.yaml.snakeyaml.DumperOptions -> org.yaml.snakeyaml.DumperOptions:
    org.yaml.snakeyaml.DumperOptions$ScalarStyle defaultStyle -> defaultStyle
    org.yaml.snakeyaml.DumperOptions$FlowStyle defaultFlowStyle -> defaultFlowStyle
    boolean canonical -> canonical
    boolean allowUnicode -> allowUnicode
    boolean allowReadOnlyProperties -> allowReadOnlyProperties
    int indent -> indent
    int bestWidth -> bestWidth
    org.yaml.snakeyaml.DumperOptions$LineBreak lineBreak -> lineBreak
    boolean explicitStart -> explicitStart
    boolean explicitEnd -> explicitEnd
    org.yaml.snakeyaml.nodes.Tag explicitRoot -> explicitRoot
    org.yaml.snakeyaml.DumperOptions$Version version -> version
    java.util.Map tags -> tags
    java.lang.Boolean prettyFlow -> prettyFlow
    boolean isAllowUnicode() -> isAllowUnicode
    void setAllowUnicode(boolean) -> setAllowUnicode
    org.yaml.snakeyaml.DumperOptions$ScalarStyle getDefaultScalarStyle() -> getDefaultScalarStyle
    void setDefaultScalarStyle(org.yaml.snakeyaml.DumperOptions$ScalarStyle) -> setDefaultScalarStyle
    void setIndent(int) -> setIndent
    int getIndent() -> getIndent
    void setVersion(org.yaml.snakeyaml.DumperOptions$Version) -> setVersion
    org.yaml.snakeyaml.DumperOptions$Version getVersion() -> getVersion
    void setCanonical(boolean) -> setCanonical
    boolean isCanonical() -> isCanonical
    void setPrettyFlow(boolean) -> setPrettyFlow
    boolean isPrettyFlow() -> isPrettyFlow
    void setWidth(int) -> setWidth
    int getWidth() -> getWidth
    org.yaml.snakeyaml.DumperOptions$LineBreak getLineBreak() -> getLineBreak
    void setDefaultFlowStyle(org.yaml.snakeyaml.DumperOptions$FlowStyle) -> setDefaultFlowStyle
    org.yaml.snakeyaml.DumperOptions$FlowStyle getDefaultFlowStyle() -> getDefaultFlowStyle
    org.yaml.snakeyaml.nodes.Tag getExplicitRoot() -> getExplicitRoot
    void setExplicitRoot(java.lang.String) -> setExplicitRoot
    void setExplicitRoot(org.yaml.snakeyaml.nodes.Tag) -> setExplicitRoot
    void setLineBreak(org.yaml.snakeyaml.DumperOptions$LineBreak) -> setLineBreak
    boolean isExplicitStart() -> isExplicitStart
    void setExplicitStart(boolean) -> setExplicitStart
    boolean isExplicitEnd() -> isExplicitEnd
    void setExplicitEnd(boolean) -> setExplicitEnd
    java.util.Map getTags() -> getTags
    void setTags(java.util.Map) -> setTags
    org.yaml.snakeyaml.DumperOptions$ScalarStyle calculateScalarStyle(org.yaml.snakeyaml.emitter.ScalarAnalysis,org.yaml.snakeyaml.DumperOptions$ScalarStyle) -> calculateScalarStyle
    boolean isAllowReadOnlyProperties() -> isAllowReadOnlyProperties
    void setAllowReadOnlyProperties(boolean) -> setAllowReadOnlyProperties
org.yaml.snakeyaml.DumperOptions$FlowStyle -> org.yaml.snakeyaml.DumperOptions$FlowStyle:
    org.yaml.snakeyaml.DumperOptions$FlowStyle FLOW -> FLOW
    org.yaml.snakeyaml.DumperOptions$FlowStyle BLOCK -> BLOCK
    org.yaml.snakeyaml.DumperOptions$FlowStyle AUTO -> AUTO
    java.lang.Boolean styleBoolean -> styleBoolean
    org.yaml.snakeyaml.DumperOptions$FlowStyle[] $VALUES -> $VALUES
    org.yaml.snakeyaml.DumperOptions$FlowStyle[] values() -> values
    org.yaml.snakeyaml.DumperOptions$FlowStyle valueOf(java.lang.String) -> valueOf
    java.lang.Boolean getStyleBoolean() -> getStyleBoolean
    java.lang.String toString() -> toString
org.yaml.snakeyaml.DumperOptions$LineBreak -> org.yaml.snakeyaml.DumperOptions$LineBreak:
    org.yaml.snakeyaml.DumperOptions$LineBreak WIN -> WIN
    org.yaml.snakeyaml.DumperOptions$LineBreak MAC -> MAC
    org.yaml.snakeyaml.DumperOptions$LineBreak UNIX -> UNIX
    java.lang.String lineBreak -> lineBreak
    org.yaml.snakeyaml.DumperOptions$LineBreak[] $VALUES -> $VALUES
    org.yaml.snakeyaml.DumperOptions$LineBreak[] values() -> values
    org.yaml.snakeyaml.DumperOptions$LineBreak valueOf(java.lang.String) -> valueOf
    java.lang.String getString() -> getString
    java.lang.String toString() -> toString
    org.yaml.snakeyaml.DumperOptions$LineBreak getPlatformLineBreak() -> getPlatformLineBreak
org.yaml.snakeyaml.DumperOptions$ScalarStyle -> org.yaml.snakeyaml.DumperOptions$ScalarStyle:
    org.yaml.snakeyaml.DumperOptions$ScalarStyle DOUBLE_QUOTED -> DOUBLE_QUOTED
    org.yaml.snakeyaml.DumperOptions$ScalarStyle SINGLE_QUOTED -> SINGLE_QUOTED
    org.yaml.snakeyaml.DumperOptions$ScalarStyle LITERAL -> LITERAL
    org.yaml.snakeyaml.DumperOptions$ScalarStyle FOLDED -> FOLDED
    org.yaml.snakeyaml.DumperOptions$ScalarStyle PLAIN -> PLAIN
    java.lang.Character styleChar -> styleChar
    org.yaml.snakeyaml.DumperOptions$ScalarStyle[] $VALUES -> $VALUES
    org.yaml.snakeyaml.DumperOptions$ScalarStyle[] values() -> values
    org.yaml.snakeyaml.DumperOptions$ScalarStyle valueOf(java.lang.String) -> valueOf
    java.lang.Character getChar() -> getChar
    java.lang.String toString() -> toString
    org.yaml.snakeyaml.DumperOptions$ScalarStyle createStyle(java.lang.Character) -> createStyle
org.yaml.snakeyaml.DumperOptions$Version -> org.yaml.snakeyaml.DumperOptions$Version:
    org.yaml.snakeyaml.DumperOptions$Version V1_0 -> V1_0
    org.yaml.snakeyaml.DumperOptions$Version V1_1 -> V1_1
    java.lang.Integer[] version -> version
    org.yaml.snakeyaml.DumperOptions$Version[] $VALUES -> $VALUES
    org.yaml.snakeyaml.DumperOptions$Version[] values() -> values
    org.yaml.snakeyaml.DumperOptions$Version valueOf(java.lang.String) -> valueOf
    java.lang.Integer[] getArray() -> getArray
    java.lang.String toString() -> toString
org.yaml.snakeyaml.JavaBeanDumper -> org.yaml.snakeyaml.JavaBeanDumper:
    boolean useGlobalTag -> useGlobalTag
    org.yaml.snakeyaml.DumperOptions$FlowStyle flowStyle -> flowStyle
    org.yaml.snakeyaml.DumperOptions options -> options
    org.yaml.snakeyaml.representer.Representer representer -> representer
    java.util.Set classTags -> classTags
    org.yaml.snakeyaml.introspector.BeanAccess beanAccess -> beanAccess
    void dump(java.lang.Object,java.io.Writer) -> dump
    java.lang.String dump(java.lang.Object) -> dump
    boolean isUseGlobalTag() -> isUseGlobalTag
    void setUseGlobalTag(boolean) -> setUseGlobalTag
    org.yaml.snakeyaml.DumperOptions$FlowStyle getFlowStyle() -> getFlowStyle
    void setFlowStyle(org.yaml.snakeyaml.DumperOptions$FlowStyle) -> setFlowStyle
    void setMapTagForBean(java.lang.Class) -> setMapTagForBean
org.yaml.snakeyaml.JavaBeanLoader -> org.yaml.snakeyaml.JavaBeanLoader:
    org.yaml.snakeyaml.Yaml loader -> loader
    java.lang.Object load(java.lang.String) -> load
    java.lang.Object load(java.io.InputStream) -> load
    java.lang.Object load(java.io.Reader) -> load
org.yaml.snakeyaml.JavaBeanParser -> org.yaml.snakeyaml.JavaBeanParser:
    java.lang.Object load(java.lang.String,java.lang.Class) -> load
    java.lang.Object load(java.io.InputStream,java.lang.Class) -> load
    java.lang.Object load(java.io.Reader,java.lang.Class) -> load
org.yaml.snakeyaml.Loader -> org.yaml.snakeyaml.Loader:
    org.yaml.snakeyaml.constructor.BaseConstructor constructor -> constructor
    org.yaml.snakeyaml.resolver.Resolver resolver -> resolver
    boolean attached -> attached
    void setBeanAccess(org.yaml.snakeyaml.introspector.BeanAccess) -> setBeanAccess
    java.lang.Object load(java.io.Reader) -> load
    java.lang.Iterable loadAll(java.io.Reader) -> loadAll
    org.yaml.snakeyaml.nodes.Node compose(java.io.Reader) -> compose
    java.lang.Iterable composeAll(java.io.Reader) -> composeAll
    void setResolver(org.yaml.snakeyaml.resolver.Resolver) -> setResolver
    void setAttached() -> setAttached
    java.lang.Iterable parse(java.io.Reader) -> parse
org.yaml.snakeyaml.Loader$1 -> org.yaml.snakeyaml.Loader$1:
    org.yaml.snakeyaml.Loader this$0 -> this$0
    boolean hasNext() -> hasNext
    java.lang.Object next() -> next
    void remove() -> remove
org.yaml.snakeyaml.Loader$2 -> org.yaml.snakeyaml.Loader$2:
    org.yaml.snakeyaml.composer.Composer val$composer -> val$composer
    org.yaml.snakeyaml.Loader this$0 -> this$0
    boolean hasNext() -> hasNext
    org.yaml.snakeyaml.nodes.Node next() -> next
    void remove() -> remove
    java.lang.Object next() -> next
org.yaml.snakeyaml.Loader$3 -> org.yaml.snakeyaml.Loader$3:
    org.yaml.snakeyaml.parser.Parser val$parser -> val$parser
    org.yaml.snakeyaml.Loader this$0 -> this$0
    boolean hasNext() -> hasNext
    org.yaml.snakeyaml.events.Event next() -> next
    void remove() -> remove
    java.lang.Object next() -> next
org.yaml.snakeyaml.Loader$EventIterable -> org.yaml.snakeyaml.Loader$EventIterable:
    java.util.Iterator iterator -> iterator
    org.yaml.snakeyaml.Loader this$0 -> this$0
    java.util.Iterator iterator() -> iterator
org.yaml.snakeyaml.Loader$NodeIterable -> org.yaml.snakeyaml.Loader$NodeIterable:
    java.util.Iterator iterator -> iterator
    org.yaml.snakeyaml.Loader this$0 -> this$0
    java.util.Iterator iterator() -> iterator
org.yaml.snakeyaml.Loader$YamlIterable -> org.yaml.snakeyaml.Loader$YamlIterable:
    java.util.Iterator iterator -> iterator
    org.yaml.snakeyaml.Loader this$0 -> this$0
    java.util.Iterator iterator() -> iterator
org.yaml.snakeyaml.TypeDescription -> org.yaml.snakeyaml.TypeDescription:
    java.lang.Class type -> type
    org.yaml.snakeyaml.nodes.Tag tag -> tag
    boolean root -> root
    java.util.Map listProperties -> listProperties
    java.util.Map keyProperties -> keyProperties
    java.util.Map valueProperties -> valueProperties
    org.yaml.snakeyaml.nodes.Tag getTag() -> getTag
    void setTag(org.yaml.snakeyaml.nodes.Tag) -> setTag
    void setTag(java.lang.String) -> setTag
    java.lang.Class getType() -> getType
    boolean isRoot() -> isRoot
    void setRoot(boolean) -> setRoot
    void putListPropertyType(java.lang.String,java.lang.Class) -> putListPropertyType
    java.lang.Class getListPropertyType(java.lang.String) -> getListPropertyType
    void putMapPropertyType(java.lang.String,java.lang.Class,java.lang.Class) -> putMapPropertyType
    java.lang.Class getMapKeyType(java.lang.String) -> getMapKeyType
    java.lang.Class getMapValueType(java.lang.String) -> getMapValueType
    java.lang.String toString() -> toString
org.yaml.snakeyaml.Yaml -> org.yaml.snakeyaml.Yaml:
    org.yaml.snakeyaml.resolver.Resolver resolver -> resolver
    java.lang.String name -> name
    org.yaml.snakeyaml.constructor.BaseConstructor constructor -> constructor
    org.yaml.snakeyaml.representer.Representer representer -> representer
    org.yaml.snakeyaml.DumperOptions options -> options
    java.lang.String dump(java.lang.Object) -> dump
    java.lang.String dumpAll(java.util.Iterator) -> dumpAll
    void dump(java.lang.Object,java.io.Writer) -> dump
    void dumpAll(java.util.Iterator,java.io.Writer) -> dumpAll
    java.lang.Object load(java.lang.String) -> load
    java.lang.Object load(java.io.InputStream) -> load
    java.lang.Object load(java.io.Reader) -> load
    java.lang.Iterable loadAll(java.io.Reader) -> loadAll
    java.lang.Iterable loadAll(java.lang.String) -> loadAll
    java.lang.Iterable loadAll(java.io.InputStream) -> loadAll
    org.yaml.snakeyaml.nodes.Node compose(java.io.Reader) -> compose
    java.lang.Iterable composeAll(java.io.Reader) -> composeAll
    void addImplicitResolver(java.lang.String,java.util.regex.Pattern,java.lang.String) -> addImplicitResolver
    void addImplicitResolver(org.yaml.snakeyaml.nodes.Tag,java.util.regex.Pattern,java.lang.String) -> addImplicitResolver
    java.lang.String toString() -> toString
    java.lang.String getName() -> getName
    void setName(java.lang.String) -> setName
    java.lang.Iterable parse(java.io.Reader) -> parse
    void setBeanAccess(org.yaml.snakeyaml.introspector.BeanAccess) -> setBeanAccess
org.yaml.snakeyaml.Yaml$1 -> org.yaml.snakeyaml.Yaml$1:
    org.yaml.snakeyaml.Yaml this$0 -> this$0
    boolean hasNext() -> hasNext
    java.lang.Object next() -> next
    void remove() -> remove
org.yaml.snakeyaml.Yaml$2 -> org.yaml.snakeyaml.Yaml$2:
    org.yaml.snakeyaml.composer.Composer val$composer -> val$composer
    org.yaml.snakeyaml.Yaml this$0 -> this$0
    boolean hasNext() -> hasNext
    org.yaml.snakeyaml.nodes.Node next() -> next
    void remove() -> remove
    java.lang.Object next() -> next
org.yaml.snakeyaml.Yaml$3 -> org.yaml.snakeyaml.Yaml$3:
    org.yaml.snakeyaml.parser.Parser val$parser -> val$parser
    org.yaml.snakeyaml.Yaml this$0 -> this$0
    boolean hasNext() -> hasNext
    org.yaml.snakeyaml.events.Event next() -> next
    void remove() -> remove
    java.lang.Object next() -> next
org.yaml.snakeyaml.Yaml$EventIterable -> org.yaml.snakeyaml.Yaml$EventIterable:
    java.util.Iterator iterator -> iterator
    org.yaml.snakeyaml.Yaml this$0 -> this$0
    java.util.Iterator iterator() -> iterator
org.yaml.snakeyaml.Yaml$NodeIterable -> org.yaml.snakeyaml.Yaml$NodeIterable:
    java.util.Iterator iterator -> iterator
    org.yaml.snakeyaml.Yaml this$0 -> this$0
    java.util.Iterator iterator() -> iterator
org.yaml.snakeyaml.Yaml$YamlIterable -> org.yaml.snakeyaml.Yaml$YamlIterable:
    java.util.Iterator iterator -> iterator
    org.yaml.snakeyaml.Yaml this$0 -> this$0
    java.util.Iterator iterator() -> iterator
org.yaml.snakeyaml.composer.Composer -> org.yaml.snakeyaml.composer.Composer:
    org.yaml.snakeyaml.parser.Parser parser -> parser
    org.yaml.snakeyaml.resolver.Resolver resolver -> resolver
    java.util.Map anchors -> anchors
    java.util.Set recursiveNodes -> recursiveNodes
    boolean checkNode() -> checkNode
    org.yaml.snakeyaml.nodes.Node getNode() -> getNode
    org.yaml.snakeyaml.nodes.Node getSingleNode() -> getSingleNode
    org.yaml.snakeyaml.nodes.Node composeDocument() -> composeDocument
    org.yaml.snakeyaml.nodes.Node composeNode(org.yaml.snakeyaml.nodes.Node,java.lang.Object) -> composeNode
    org.yaml.snakeyaml.nodes.Node composeScalarNode(java.lang.String) -> composeScalarNode
    org.yaml.snakeyaml.nodes.Node composeSequenceNode(java.lang.String) -> composeSequenceNode
    org.yaml.snakeyaml.nodes.Node composeMappingNode(java.lang.String) -> composeMappingNode
org.yaml.snakeyaml.composer.ComposerException -> org.yaml.snakeyaml.composer.ComposerException:
    long serialVersionUID -> serialVersionUID
org.yaml.snakeyaml.constructor.AbstractConstruct -> org.yaml.snakeyaml.constructor.AbstractConstruct:
    void construct2ndStep(org.yaml.snakeyaml.nodes.Node,java.lang.Object) -> construct2ndStep
org.yaml.snakeyaml.constructor.BaseConstructor -> org.yaml.snakeyaml.constructor.BaseConstructor:
    java.util.Map yamlClassConstructors -> yamlClassConstructors
    java.util.Map yamlConstructors -> yamlConstructors
    java.util.Map yamlMultiConstructors -> yamlMultiConstructors
    org.yaml.snakeyaml.composer.Composer composer -> composer
    java.util.Map constructedObjects -> constructedObjects
    java.util.Set recursiveObjects -> recursiveObjects
    java.util.ArrayList maps2fill -> maps2fill
    java.util.ArrayList sets2fill -> sets2fill
    org.yaml.snakeyaml.nodes.Tag rootTag -> rootTag
    org.yaml.snakeyaml.introspector.PropertyUtils propertyUtils -> propertyUtils
    boolean explicitPropertyUtils -> explicitPropertyUtils
    void setComposer(org.yaml.snakeyaml.composer.Composer) -> setComposer
    boolean checkData() -> checkData
    java.lang.Object getData() -> getData
    java.lang.Object getSingleData() -> getSingleData
    java.lang.Object constructDocument(org.yaml.snakeyaml.nodes.Node) -> constructDocument
    void fillRecursive() -> fillRecursive
    java.lang.Object constructObject(org.yaml.snakeyaml.nodes.Node) -> constructObject
    org.yaml.snakeyaml.constructor.Construct getConstructor(org.yaml.snakeyaml.nodes.Node) -> getConstructor
    java.lang.Object constructScalar(org.yaml.snakeyaml.nodes.ScalarNode) -> constructScalar
    java.util.List createDefaultList(int) -> createDefaultList
    java.util.Set createDefaultSet(int) -> createDefaultSet
    java.lang.Object[] createArray(java.lang.Class,int) -> createArray
    java.util.List constructSequence(org.yaml.snakeyaml.nodes.SequenceNode) -> constructSequence
    java.util.Set constructSet(org.yaml.snakeyaml.nodes.SequenceNode) -> constructSet
    java.lang.Object constructArray(org.yaml.snakeyaml.nodes.SequenceNode) -> constructArray
    void constructSequenceStep2(org.yaml.snakeyaml.nodes.SequenceNode,java.util.Collection) -> constructSequenceStep2
    java.lang.Object constructArrayStep2(org.yaml.snakeyaml.nodes.SequenceNode,java.lang.Object) -> constructArrayStep2
    java.util.Map createDefaultMap() -> createDefaultMap
    java.util.Set createDefaultSet() -> createDefaultSet
    java.util.Set constructSet(org.yaml.snakeyaml.nodes.MappingNode) -> constructSet
    java.util.Map constructMapping(org.yaml.snakeyaml.nodes.MappingNode) -> constructMapping
    void constructMapping2ndStep(org.yaml.snakeyaml.nodes.MappingNode,java.util.Map) -> constructMapping2ndStep
    void constructSet2ndStep(org.yaml.snakeyaml.nodes.MappingNode,java.util.Set) -> constructSet2ndStep
    void setPropertyUtils(org.yaml.snakeyaml.introspector.PropertyUtils) -> setPropertyUtils
    org.yaml.snakeyaml.introspector.PropertyUtils getPropertyUtils() -> getPropertyUtils
    boolean isExplicitPropertyUtils() -> isExplicitPropertyUtils
org.yaml.snakeyaml.constructor.BaseConstructor$RecursiveTuple -> org.yaml.snakeyaml.constructor.BaseConstructor$RecursiveTuple:
    java.lang.Object _1 -> _1
    java.lang.Object _2 -> _2
    java.lang.Object _2() -> _2
    java.lang.Object _1() -> _1
org.yaml.snakeyaml.constructor.Construct -> org.yaml.snakeyaml.constructor.Construct:
    java.lang.Object construct(org.yaml.snakeyaml.nodes.Node) -> construct
    void construct2ndStep(org.yaml.snakeyaml.nodes.Node,java.lang.Object) -> construct2ndStep
org.yaml.snakeyaml.constructor.Constructor -> org.yaml.snakeyaml.constructor.Constructor:
    java.util.Map typeTags -> typeTags
    java.util.Map typeDefinitions -> typeDefinitions
    java.lang.String check(java.lang.String) -> check
    org.yaml.snakeyaml.TypeDescription addTypeDescription(org.yaml.snakeyaml.TypeDescription) -> addTypeDescription
    java.lang.Class getClassForNode(org.yaml.snakeyaml.nodes.Node) -> getClassForNode
    java.lang.Class getClassForName(java.lang.String) -> getClassForName
    java.util.Map access$300(org.yaml.snakeyaml.constructor.Constructor) -> access$300
org.yaml.snakeyaml.constructor.Constructor$1 -> org.yaml.snakeyaml.constructor.Constructor$1:
    int[] $SwitchMap$org$yaml$snakeyaml$nodes$NodeId -> $SwitchMap$org$yaml$snakeyaml$nodes$NodeId
org.yaml.snakeyaml.constructor.Constructor$ConstructMapping -> org.yaml.snakeyaml.constructor.Constructor$ConstructMapping:
    org.yaml.snakeyaml.constructor.Constructor this$0 -> this$0
    java.lang.Object construct(org.yaml.snakeyaml.nodes.Node) -> construct
    void construct2ndStep(org.yaml.snakeyaml.nodes.Node,java.lang.Object) -> construct2ndStep
    java.lang.Object createEmptyJavaBean(org.yaml.snakeyaml.nodes.MappingNode) -> createEmptyJavaBean
    java.lang.Object constructJavaBean2ndStep(org.yaml.snakeyaml.nodes.MappingNode,java.lang.Object) -> constructJavaBean2ndStep
    org.yaml.snakeyaml.introspector.Property getProperty(java.lang.Class,java.lang.String) -> getProperty
org.yaml.snakeyaml.constructor.Constructor$ConstructScalar -> org.yaml.snakeyaml.constructor.Constructor$ConstructScalar:
    org.yaml.snakeyaml.constructor.Constructor this$0 -> this$0
    java.lang.Object construct(org.yaml.snakeyaml.nodes.Node) -> construct
    java.lang.Object constructStandardJavaInstance(java.lang.Class,org.yaml.snakeyaml.nodes.ScalarNode) -> constructStandardJavaInstance
org.yaml.snakeyaml.constructor.Constructor$ConstructSequence -> org.yaml.snakeyaml.constructor.Constructor$ConstructSequence:
    org.yaml.snakeyaml.constructor.Constructor this$0 -> this$0
    java.lang.Object construct(org.yaml.snakeyaml.nodes.Node) -> construct
    java.lang.Class wrapIfPrimitive(java.lang.Class) -> wrapIfPrimitive
    void construct2ndStep(org.yaml.snakeyaml.nodes.Node,java.lang.Object) -> construct2ndStep
org.yaml.snakeyaml.constructor.Constructor$ConstructYamlObject -> org.yaml.snakeyaml.constructor.Constructor$ConstructYamlObject:
    org.yaml.snakeyaml.constructor.Constructor this$0 -> this$0
    org.yaml.snakeyaml.constructor.Construct getConstructor(org.yaml.snakeyaml.nodes.Node) -> getConstructor
    java.lang.Object construct(org.yaml.snakeyaml.nodes.Node) -> construct
    void construct2ndStep(org.yaml.snakeyaml.nodes.Node,java.lang.Object) -> construct2ndStep
org.yaml.snakeyaml.constructor.ConstructorException -> org.yaml.snakeyaml.constructor.ConstructorException:
    long serialVersionUID -> serialVersionUID
org.yaml.snakeyaml.constructor.CustomClassLoaderConstructor -> org.yaml.snakeyaml.constructor.CustomClassLoaderConstructor:
    java.lang.ClassLoader loader -> loader
    java.lang.Class getClassForName(java.lang.String) -> getClassForName
org.yaml.snakeyaml.constructor.SafeConstructor -> org.yaml.snakeyaml.constructor.SafeConstructor:
    org.yaml.snakeyaml.constructor.SafeConstructor$ConstructUndefined undefinedConstructor -> undefinedConstructor
    java.util.Map BOOL_VALUES -> BOOL_VALUES
    java.util.regex.Pattern TIMESTAMP_REGEXP -> TIMESTAMP_REGEXP
    java.util.regex.Pattern YMD_REGEXP -> YMD_REGEXP
    void flattenMapping(org.yaml.snakeyaml.nodes.MappingNode) -> flattenMapping
    void constructMapping2ndStep(org.yaml.snakeyaml.nodes.MappingNode,java.util.Map) -> constructMapping2ndStep
    void constructSet2ndStep(org.yaml.snakeyaml.nodes.MappingNode,java.util.Set) -> constructSet2ndStep
    java.lang.Number createNumber(int,java.lang.String,int) -> createNumber
    java.util.Map access$000() -> access$000
    java.lang.Number access$100(org.yaml.snakeyaml.constructor.SafeConstructor,int,java.lang.String,int) -> access$100
    java.util.regex.Pattern access$200() -> access$200
    java.util.regex.Pattern access$300() -> access$300
org.yaml.snakeyaml.constructor.SafeConstructor$1 -> org.yaml.snakeyaml.constructor.SafeConstructor$1:
    int[] $SwitchMap$org$yaml$snakeyaml$nodes$NodeId -> $SwitchMap$org$yaml$snakeyaml$nodes$NodeId
org.yaml.snakeyaml.constructor.SafeConstructor$ConstructUndefined -> org.yaml.snakeyaml.constructor.SafeConstructor$ConstructUndefined:
    java.lang.Object construct(org.yaml.snakeyaml.nodes.Node) -> construct
org.yaml.snakeyaml.constructor.SafeConstructor$ConstructYamlBinary -> org.yaml.snakeyaml.constructor.SafeConstructor$ConstructYamlBinary:
    org.yaml.snakeyaml.constructor.SafeConstructor this$0 -> this$0
    java.lang.Object construct(org.yaml.snakeyaml.nodes.Node) -> construct
org.yaml.snakeyaml.constructor.SafeConstructor$ConstructYamlBool -> org.yaml.snakeyaml.constructor.SafeConstructor$ConstructYamlBool:
    org.yaml.snakeyaml.constructor.SafeConstructor this$0 -> this$0
    java.lang.Object construct(org.yaml.snakeyaml.nodes.Node) -> construct
org.yaml.snakeyaml.constructor.SafeConstructor$ConstructYamlFloat -> org.yaml.snakeyaml.constructor.SafeConstructor$ConstructYamlFloat:
    org.yaml.snakeyaml.constructor.SafeConstructor this$0 -> this$0
    java.lang.Object construct(org.yaml.snakeyaml.nodes.Node) -> construct
org.yaml.snakeyaml.constructor.SafeConstructor$ConstructYamlInt -> org.yaml.snakeyaml.constructor.SafeConstructor$ConstructYamlInt:
    org.yaml.snakeyaml.constructor.SafeConstructor this$0 -> this$0
    java.lang.Object construct(org.yaml.snakeyaml.nodes.Node) -> construct
org.yaml.snakeyaml.constructor.SafeConstructor$ConstructYamlMap -> org.yaml.snakeyaml.constructor.SafeConstructor$ConstructYamlMap:
    org.yaml.snakeyaml.constructor.SafeConstructor this$0 -> this$0
    java.lang.Object construct(org.yaml.snakeyaml.nodes.Node) -> construct
    void construct2ndStep(org.yaml.snakeyaml.nodes.Node,java.lang.Object) -> construct2ndStep
org.yaml.snakeyaml.constructor.SafeConstructor$ConstructYamlNull -> org.yaml.snakeyaml.constructor.SafeConstructor$ConstructYamlNull:
    org.yaml.snakeyaml.constructor.SafeConstructor this$0 -> this$0
    java.lang.Object construct(org.yaml.snakeyaml.nodes.Node) -> construct
org.yaml.snakeyaml.constructor.SafeConstructor$ConstructYamlOmap -> org.yaml.snakeyaml.constructor.SafeConstructor$ConstructYamlOmap:
    org.yaml.snakeyaml.constructor.SafeConstructor this$0 -> this$0
    java.lang.Object construct(org.yaml.snakeyaml.nodes.Node) -> construct
org.yaml.snakeyaml.constructor.SafeConstructor$ConstructYamlPairs -> org.yaml.snakeyaml.constructor.SafeConstructor$ConstructYamlPairs:
    org.yaml.snakeyaml.constructor.SafeConstructor this$0 -> this$0
    java.lang.Object construct(org.yaml.snakeyaml.nodes.Node) -> construct
org.yaml.snakeyaml.constructor.SafeConstructor$ConstructYamlSeq -> org.yaml.snakeyaml.constructor.SafeConstructor$ConstructYamlSeq:
    org.yaml.snakeyaml.constructor.SafeConstructor this$0 -> this$0
    java.lang.Object construct(org.yaml.snakeyaml.nodes.Node) -> construct
    void construct2ndStep(org.yaml.snakeyaml.nodes.Node,java.lang.Object) -> construct2ndStep
org.yaml.snakeyaml.constructor.SafeConstructor$ConstructYamlSet -> org.yaml.snakeyaml.constructor.SafeConstructor$ConstructYamlSet:
    org.yaml.snakeyaml.constructor.SafeConstructor this$0 -> this$0
    java.lang.Object construct(org.yaml.snakeyaml.nodes.Node) -> construct
    void construct2ndStep(org.yaml.snakeyaml.nodes.Node,java.lang.Object) -> construct2ndStep
org.yaml.snakeyaml.constructor.SafeConstructor$ConstructYamlStr -> org.yaml.snakeyaml.constructor.SafeConstructor$ConstructYamlStr:
    org.yaml.snakeyaml.constructor.SafeConstructor this$0 -> this$0
    java.lang.Object construct(org.yaml.snakeyaml.nodes.Node) -> construct
org.yaml.snakeyaml.constructor.SafeConstructor$ConstructYamlTimestamp -> org.yaml.snakeyaml.constructor.SafeConstructor$ConstructYamlTimestamp:
    java.util.Calendar calendar -> calendar
    org.yaml.snakeyaml.constructor.SafeConstructor this$0 -> this$0
    java.util.Calendar getCalendar() -> getCalendar
    java.lang.Object construct(org.yaml.snakeyaml.nodes.Node) -> construct
org.yaml.snakeyaml.emitter.Emitter -> org.yaml.snakeyaml.emitter.Emitter:
    java.util.Map ESCAPE_REPLACEMENTS -> ESCAPE_REPLACEMENTS
    int MIN_INDENT -> MIN_INDENT
    int MAX_INDENT -> MAX_INDENT
    java.util.Map DEFAULT_TAG_PREFIXES -> DEFAULT_TAG_PREFIXES
    java.io.Writer stream -> stream
    org.yaml.snakeyaml.util.ArrayStack states -> states
    org.yaml.snakeyaml.emitter.EmitterState state -> state
    java.util.Queue events -> events
    org.yaml.snakeyaml.events.Event event -> event
    org.yaml.snakeyaml.util.ArrayStack indents -> indents
    java.lang.Integer indent -> indent
    int flowLevel -> flowLevel
    boolean rootContext -> rootContext
    boolean mappingContext -> mappingContext
    boolean simpleKeyContext -> simpleKeyContext
    int column -> column
    boolean whitespace -> whitespace
    boolean indention -> indention
    boolean openEnded -> openEnded
    java.lang.Boolean canonical -> canonical
    java.lang.Boolean prettyFlow -> prettyFlow
    boolean allowUnicode -> allowUnicode
    int bestIndent -> bestIndent
    int bestWidth -> bestWidth
    java.lang.String bestLineBreak -> bestLineBreak
    java.util.Map tagPrefixes -> tagPrefixes
    java.lang.String preparedAnchor -> preparedAnchor
    java.lang.String preparedTag -> preparedTag
    org.yaml.snakeyaml.emitter.ScalarAnalysis analysis -> analysis
    java.lang.Character style -> style
    org.yaml.snakeyaml.DumperOptions options -> options
    java.util.regex.Pattern HANDLE_FORMAT -> HANDLE_FORMAT
    java.util.regex.Pattern ANCHOR_FORMAT -> ANCHOR_FORMAT
    void emit(org.yaml.snakeyaml.events.Event) -> emit
    boolean needMoreEvents() -> needMoreEvents
    boolean needEvents(int) -> needEvents
    void increaseIndent(boolean,boolean) -> increaseIndent
    void expectNode(boolean,boolean,boolean,boolean) -> expectNode
    void expectAlias() -> expectAlias
    void expectScalar() -> expectScalar
    void expectFlowSequence() -> expectFlowSequence
    void expectFlowMapping() -> expectFlowMapping
    void expectBlockSequence() -> expectBlockSequence
    void expectBlockMapping() -> expectBlockMapping
    boolean checkEmptySequence() -> checkEmptySequence
    boolean checkEmptyMapping() -> checkEmptyMapping
    boolean checkEmptyDocument() -> checkEmptyDocument
    boolean checkSimpleKey() -> checkSimpleKey
    void processAnchor(java.lang.String) -> processAnchor
    void processTag() -> processTag
    java.lang.Character chooseScalarStyle() -> chooseScalarStyle
    void processScalar() -> processScalar
    java.lang.String prepareVersion(java.lang.Integer[]) -> prepareVersion
    java.lang.String prepareTagHandle(java.lang.String) -> prepareTagHandle
    java.lang.String prepareTagPrefix(java.lang.String) -> prepareTagPrefix
    java.lang.String prepareTag(java.lang.String) -> prepareTag
    java.lang.String prepareAnchor(java.lang.String) -> prepareAnchor
    org.yaml.snakeyaml.emitter.ScalarAnalysis analyzeScalar(java.lang.String) -> analyzeScalar
    void flushStream() -> flushStream
    void writeStreamStart() -> writeStreamStart
    void writeStreamEnd() -> writeStreamEnd
    void writeIndicator(java.lang.String,boolean,boolean,boolean) -> writeIndicator
    void writeIndent() -> writeIndent
    void writeLineBreak(java.lang.String) -> writeLineBreak
    void writeVersionDirective(java.lang.String) -> writeVersionDirective
    void writeTagDirective(java.lang.String,java.lang.String) -> writeTagDirective
    void writeSingleQuoted(java.lang.String,boolean) -> writeSingleQuoted
    void writeDoubleQuoted(java.lang.String,boolean) -> writeDoubleQuoted
    java.lang.String determineBlockHints(java.lang.String) -> determineBlockHints
    void writeFolded(java.lang.String) -> writeFolded
    void writeLiteral(java.lang.String) -> writeLiteral
    void writePlain(java.lang.String,boolean) -> writePlain
    org.yaml.snakeyaml.events.Event access$100(org.yaml.snakeyaml.emitter.Emitter) -> access$100
    org.yaml.snakeyaml.emitter.EmitterState access$202(org.yaml.snakeyaml.emitter.Emitter,org.yaml.snakeyaml.emitter.EmitterState) -> access$202
    boolean access$400(org.yaml.snakeyaml.emitter.Emitter) -> access$400
    java.lang.String access$500(org.yaml.snakeyaml.emitter.Emitter,java.lang.Integer[]) -> access$500
    java.util.Map access$602(org.yaml.snakeyaml.emitter.Emitter,java.util.Map) -> access$602
    java.util.Map access$700() -> access$700
    java.util.Map access$600(org.yaml.snakeyaml.emitter.Emitter) -> access$600
    java.lang.String access$800(org.yaml.snakeyaml.emitter.Emitter,java.lang.String) -> access$800
    java.lang.String access$900(org.yaml.snakeyaml.emitter.Emitter,java.lang.String) -> access$900
    java.lang.Boolean access$1000(org.yaml.snakeyaml.emitter.Emitter) -> access$1000
    boolean access$1100(org.yaml.snakeyaml.emitter.Emitter) -> access$1100
    org.yaml.snakeyaml.util.ArrayStack access$1500(org.yaml.snakeyaml.emitter.Emitter) -> access$1500
    void access$1600(org.yaml.snakeyaml.emitter.Emitter,boolean,boolean,boolean,boolean) -> access$1600
    java.lang.Integer access$1802(org.yaml.snakeyaml.emitter.Emitter,java.lang.Integer) -> access$1802
    org.yaml.snakeyaml.util.ArrayStack access$1900(org.yaml.snakeyaml.emitter.Emitter) -> access$1900
    int access$2010(org.yaml.snakeyaml.emitter.Emitter) -> access$2010
    int access$2100(org.yaml.snakeyaml.emitter.Emitter) -> access$2100
    int access$2200(org.yaml.snakeyaml.emitter.Emitter) -> access$2200
    java.lang.Boolean access$2300(org.yaml.snakeyaml.emitter.Emitter) -> access$2300
    boolean access$2600(org.yaml.snakeyaml.emitter.Emitter) -> access$2600
org.yaml.snakeyaml.emitter.Emitter$1 -> org.yaml.snakeyaml.emitter.Emitter$1:
org.yaml.snakeyaml.emitter.Emitter$ExpectBlockMappingKey -> org.yaml.snakeyaml.emitter.Emitter$ExpectBlockMappingKey:
    boolean first -> first
    org.yaml.snakeyaml.emitter.Emitter this$0 -> this$0
    void expect() -> expect
org.yaml.snakeyaml.emitter.Emitter$ExpectBlockMappingSimpleValue -> org.yaml.snakeyaml.emitter.Emitter$ExpectBlockMappingSimpleValue:
    org.yaml.snakeyaml.emitter.Emitter this$0 -> this$0
    void expect() -> expect
org.yaml.snakeyaml.emitter.Emitter$ExpectBlockMappingValue -> org.yaml.snakeyaml.emitter.Emitter$ExpectBlockMappingValue:
    org.yaml.snakeyaml.emitter.Emitter this$0 -> this$0
    void expect() -> expect
org.yaml.snakeyaml.emitter.Emitter$ExpectBlockSequenceItem -> org.yaml.snakeyaml.emitter.Emitter$ExpectBlockSequenceItem:
    boolean first -> first
    org.yaml.snakeyaml.emitter.Emitter this$0 -> this$0
    void expect() -> expect
org.yaml.snakeyaml.emitter.Emitter$ExpectDocumentEnd -> org.yaml.snakeyaml.emitter.Emitter$ExpectDocumentEnd:
    org.yaml.snakeyaml.emitter.Emitter this$0 -> this$0
    void expect() -> expect
org.yaml.snakeyaml.emitter.Emitter$ExpectDocumentRoot -> org.yaml.snakeyaml.emitter.Emitter$ExpectDocumentRoot:
    org.yaml.snakeyaml.emitter.Emitter this$0 -> this$0
    void expect() -> expect
org.yaml.snakeyaml.emitter.Emitter$ExpectDocumentStart -> org.yaml.snakeyaml.emitter.Emitter$ExpectDocumentStart:
    boolean first -> first
    org.yaml.snakeyaml.emitter.Emitter this$0 -> this$0
    void expect() -> expect
org.yaml.snakeyaml.emitter.Emitter$ExpectFirstBlockMappingKey -> org.yaml.snakeyaml.emitter.Emitter$ExpectFirstBlockMappingKey:
    org.yaml.snakeyaml.emitter.Emitter this$0 -> this$0
    void expect() -> expect
org.yaml.snakeyaml.emitter.Emitter$ExpectFirstBlockSequenceItem -> org.yaml.snakeyaml.emitter.Emitter$ExpectFirstBlockSequenceItem:
    org.yaml.snakeyaml.emitter.Emitter this$0 -> this$0
    void expect() -> expect
org.yaml.snakeyaml.emitter.Emitter$ExpectFirstDocumentStart -> org.yaml.snakeyaml.emitter.Emitter$ExpectFirstDocumentStart:
    org.yaml.snakeyaml.emitter.Emitter this$0 -> this$0
    void expect() -> expect
org.yaml.snakeyaml.emitter.Emitter$ExpectFirstFlowMappingKey -> org.yaml.snakeyaml.emitter.Emitter$ExpectFirstFlowMappingKey:
    org.yaml.snakeyaml.emitter.Emitter this$0 -> this$0
    void expect() -> expect
org.yaml.snakeyaml.emitter.Emitter$ExpectFirstFlowSequenceItem -> org.yaml.snakeyaml.emitter.Emitter$ExpectFirstFlowSequenceItem:
    org.yaml.snakeyaml.emitter.Emitter this$0 -> this$0
    void expect() -> expect
org.yaml.snakeyaml.emitter.Emitter$ExpectFlowMappingKey -> org.yaml.snakeyaml.emitter.Emitter$ExpectFlowMappingKey:
    org.yaml.snakeyaml.emitter.Emitter this$0 -> this$0
    void expect() -> expect
org.yaml.snakeyaml.emitter.Emitter$ExpectFlowMappingSimpleValue -> org.yaml.snakeyaml.emitter.Emitter$ExpectFlowMappingSimpleValue:
    org.yaml.snakeyaml.emitter.Emitter this$0 -> this$0
    void expect() -> expect
org.yaml.snakeyaml.emitter.Emitter$ExpectFlowMappingValue -> org.yaml.snakeyaml.emitter.Emitter$ExpectFlowMappingValue:
    org.yaml.snakeyaml.emitter.Emitter this$0 -> this$0
    void expect() -> expect
org.yaml.snakeyaml.emitter.Emitter$ExpectFlowSequenceItem -> org.yaml.snakeyaml.emitter.Emitter$ExpectFlowSequenceItem:
    org.yaml.snakeyaml.emitter.Emitter this$0 -> this$0
    void expect() -> expect
org.yaml.snakeyaml.emitter.Emitter$ExpectNothing -> org.yaml.snakeyaml.emitter.Emitter$ExpectNothing:
    org.yaml.snakeyaml.emitter.Emitter this$0 -> this$0
    void expect() -> expect
org.yaml.snakeyaml.emitter.Emitter$ExpectStreamStart -> org.yaml.snakeyaml.emitter.Emitter$ExpectStreamStart:
    org.yaml.snakeyaml.emitter.Emitter this$0 -> this$0
    void expect() -> expect
org.yaml.snakeyaml.emitter.EmitterException -> org.yaml.snakeyaml.emitter.EmitterException:
    long serialVersionUID -> serialVersionUID
org.yaml.snakeyaml.emitter.EmitterState -> org.yaml.snakeyaml.emitter.EmitterState:
    void expect() -> expect
org.yaml.snakeyaml.emitter.ScalarAnalysis -> org.yaml.snakeyaml.emitter.ScalarAnalysis:
    java.lang.String scalar -> scalar
    boolean empty -> empty
    boolean multiline -> multiline
    boolean allowFlowPlain -> allowFlowPlain
    boolean allowBlockPlain -> allowBlockPlain
    boolean allowSingleQuoted -> allowSingleQuoted
    boolean allowDoubleQuoted -> allowDoubleQuoted
    boolean allowBlock -> allowBlock
org.yaml.snakeyaml.error.Mark -> org.yaml.snakeyaml.error.Mark:
    java.lang.String name -> name
    int line -> line
    int column -> column
    java.lang.String buffer -> buffer
    int pointer -> pointer
    boolean isLineBreak(char) -> isLineBreak
    java.lang.String get_snippet(int,int) -> get_snippet
    java.lang.String get_snippet() -> get_snippet
    java.lang.String toString() -> toString
    java.lang.String getName() -> getName
    int getLine() -> getLine
    int getColumn() -> getColumn
org.yaml.snakeyaml.error.MarkedYAMLException -> org.yaml.snakeyaml.error.MarkedYAMLException:
    long serialVersionUID -> serialVersionUID
    java.lang.String context -> context
    org.yaml.snakeyaml.error.Mark contextMark -> contextMark
    java.lang.String problem -> problem
    org.yaml.snakeyaml.error.Mark problemMark -> problemMark
    java.lang.String note -> note
    java.lang.String toString() -> toString
    java.lang.String getContext() -> getContext
    org.yaml.snakeyaml.error.Mark getContextMark() -> getContextMark
    java.lang.String getProblem() -> getProblem
    org.yaml.snakeyaml.error.Mark getProblemMark() -> getProblemMark
org.yaml.snakeyaml.error.YAMLException -> org.yaml.snakeyaml.error.YAMLException:
    long serialVersionUID -> serialVersionUID
org.yaml.snakeyaml.events.AliasEvent -> org.yaml.snakeyaml.events.AliasEvent:
    boolean is(org.yaml.snakeyaml.events.Event$ID) -> is
org.yaml.snakeyaml.events.CollectionEndEvent -> org.yaml.snakeyaml.events.CollectionEndEvent:
org.yaml.snakeyaml.events.CollectionStartEvent -> org.yaml.snakeyaml.events.CollectionStartEvent:
    java.lang.String tag -> tag
    boolean implicit -> implicit
    java.lang.Boolean flowStyle -> flowStyle
    java.lang.String getTag() -> getTag
    boolean getImplicit() -> getImplicit
    java.lang.Boolean getFlowStyle() -> getFlowStyle
    java.lang.String getArguments() -> getArguments
org.yaml.snakeyaml.events.DocumentEndEvent -> org.yaml.snakeyaml.events.DocumentEndEvent:
    boolean explicit -> explicit
    boolean getExplicit() -> getExplicit
    boolean is(org.yaml.snakeyaml.events.Event$ID) -> is
org.yaml.snakeyaml.events.DocumentStartEvent -> org.yaml.snakeyaml.events.DocumentStartEvent:
    boolean explicit -> explicit
    java.lang.Integer[] version -> version
    java.util.Map tags -> tags
    boolean getExplicit() -> getExplicit
    java.lang.Integer[] getVersion() -> getVersion
    java.util.Map getTags() -> getTags
    boolean is(org.yaml.snakeyaml.events.Event$ID) -> is
org.yaml.snakeyaml.events.Event -> org.yaml.snakeyaml.events.Event:
    org.yaml.snakeyaml.error.Mark startMark -> startMark
    org.yaml.snakeyaml.error.Mark endMark -> endMark
    java.lang.String toString() -> toString
    org.yaml.snakeyaml.error.Mark getStartMark() -> getStartMark
    org.yaml.snakeyaml.error.Mark getEndMark() -> getEndMark
    java.lang.String getArguments() -> getArguments
    boolean is(org.yaml.snakeyaml.events.Event$ID) -> is
    boolean equals(java.lang.Object) -> equals
org.yaml.snakeyaml.events.Event$ID -> org.yaml.snakeyaml.events.Event$ID:
    org.yaml.snakeyaml.events.Event$ID Alias -> Alias
    org.yaml.snakeyaml.events.Event$ID DocumentEnd -> DocumentEnd
    org.yaml.snakeyaml.events.Event$ID DocumentStart -> DocumentStart
    org.yaml.snakeyaml.events.Event$ID MappingEnd -> MappingEnd
    org.yaml.snakeyaml.events.Event$ID MappingStart -> MappingStart
    org.yaml.snakeyaml.events.Event$ID Scalar -> Scalar
    org.yaml.snakeyaml.events.Event$ID SequenceEnd -> SequenceEnd
    org.yaml.snakeyaml.events.Event$ID SequenceStart -> SequenceStart
    org.yaml.snakeyaml.events.Event$ID StreamEnd -> StreamEnd
    org.yaml.snakeyaml.events.Event$ID StreamStart -> StreamStart
    org.yaml.snakeyaml.events.Event$ID[] $VALUES -> $VALUES
    org.yaml.snakeyaml.events.Event$ID[] values() -> values
    org.yaml.snakeyaml.events.Event$ID valueOf(java.lang.String) -> valueOf
org.yaml.snakeyaml.events.ImplicitTuple -> org.yaml.snakeyaml.events.ImplicitTuple:
    boolean plain -> plain
    boolean nonPlain -> nonPlain
    boolean isFirst() -> isFirst
    boolean isSecond() -> isSecond
    boolean bothFalse() -> bothFalse
    java.lang.String toString() -> toString
org.yaml.snakeyaml.events.MappingEndEvent -> org.yaml.snakeyaml.events.MappingEndEvent:
    boolean is(org.yaml.snakeyaml.events.Event$ID) -> is
org.yaml.snakeyaml.events.MappingStartEvent -> org.yaml.snakeyaml.events.MappingStartEvent:
    boolean is(org.yaml.snakeyaml.events.Event$ID) -> is
org.yaml.snakeyaml.events.NodeEvent -> org.yaml.snakeyaml.events.NodeEvent:
    java.lang.String anchor -> anchor
    java.lang.String getAnchor() -> getAnchor
    java.lang.String getArguments() -> getArguments
org.yaml.snakeyaml.events.ScalarEvent -> org.yaml.snakeyaml.events.ScalarEvent:
    java.lang.String tag -> tag
    java.lang.Character style -> style
    java.lang.String value -> value
    org.yaml.snakeyaml.events.ImplicitTuple implicit -> implicit
    java.lang.String getTag() -> getTag
    java.lang.Character getStyle() -> getStyle
    java.lang.String getValue() -> getValue
    org.yaml.snakeyaml.events.ImplicitTuple getImplicit() -> getImplicit
    java.lang.String getArguments() -> getArguments
    boolean is(org.yaml.snakeyaml.events.Event$ID) -> is
org.yaml.snakeyaml.events.SequenceEndEvent -> org.yaml.snakeyaml.events.SequenceEndEvent:
    boolean is(org.yaml.snakeyaml.events.Event$ID) -> is
org.yaml.snakeyaml.events.SequenceStartEvent -> org.yaml.snakeyaml.events.SequenceStartEvent:
    boolean is(org.yaml.snakeyaml.events.Event$ID) -> is
org.yaml.snakeyaml.events.StreamEndEvent -> org.yaml.snakeyaml.events.StreamEndEvent:
    boolean is(org.yaml.snakeyaml.events.Event$ID) -> is
org.yaml.snakeyaml.events.StreamStartEvent -> org.yaml.snakeyaml.events.StreamStartEvent:
    boolean is(org.yaml.snakeyaml.events.Event$ID) -> is
org.yaml.snakeyaml.introspector.BeanAccess -> org.yaml.snakeyaml.introspector.BeanAccess:
    org.yaml.snakeyaml.introspector.BeanAccess DEFAULT -> DEFAULT
    org.yaml.snakeyaml.introspector.BeanAccess FIELD -> FIELD
    org.yaml.snakeyaml.introspector.BeanAccess PROPERTY -> PROPERTY
    org.yaml.snakeyaml.introspector.BeanAccess[] $VALUES -> $VALUES
    org.yaml.snakeyaml.introspector.BeanAccess[] values() -> values
    org.yaml.snakeyaml.introspector.BeanAccess valueOf(java.lang.String) -> valueOf
org.yaml.snakeyaml.introspector.FieldProperty -> org.yaml.snakeyaml.introspector.FieldProperty:
    java.lang.reflect.Field field -> field
    void set(java.lang.Object,java.lang.Object) -> set
    java.lang.Object get(java.lang.Object) -> get
org.yaml.snakeyaml.introspector.GenericProperty -> org.yaml.snakeyaml.introspector.GenericProperty:
    java.lang.reflect.Type genType -> genType
    boolean actualClassesChecked -> actualClassesChecked
    java.lang.Class[] actualClasses -> actualClasses
    java.lang.Class[] getActualTypeArguments() -> getActualTypeArguments
org.yaml.snakeyaml.introspector.MethodProperty -> org.yaml.snakeyaml.introspector.MethodProperty:
    java.beans.PropertyDescriptor property -> property
    boolean readable -> readable
    boolean writable -> writable
    void set(java.lang.Object,java.lang.Object) -> set
    java.lang.Object get(java.lang.Object) -> get
    boolean isWritable() -> isWritable
    boolean isReadable() -> isReadable
org.yaml.snakeyaml.introspector.Property -> org.yaml.snakeyaml.introspector.Property:
    java.lang.String name -> name
    java.lang.Class type -> type
    java.lang.Class getType() -> getType
    java.lang.Class[] getActualTypeArguments() -> getActualTypeArguments
    java.lang.String getName() -> getName
    java.lang.String toString() -> toString
    int compareTo(org.yaml.snakeyaml.introspector.Property) -> compareTo
    boolean isWritable() -> isWritable
    boolean isReadable() -> isReadable
    void set(java.lang.Object,java.lang.Object) -> set
    java.lang.Object get(java.lang.Object) -> get
    int compareTo(java.lang.Object) -> compareTo
org.yaml.snakeyaml.introspector.PropertyUtils -> org.yaml.snakeyaml.introspector.PropertyUtils:
    java.util.Map propertiesCache -> propertiesCache
    java.util.Map readableProperties -> readableProperties
    org.yaml.snakeyaml.introspector.BeanAccess beanAccess -> beanAccess
    boolean allowReadOnlyProperties -> allowReadOnlyProperties
    java.util.Map getPropertiesMap(java.lang.Class,org.yaml.snakeyaml.introspector.BeanAccess) -> getPropertiesMap
    java.util.Set getProperties(java.lang.Class) -> getProperties
    java.util.Set getProperties(java.lang.Class,org.yaml.snakeyaml.introspector.BeanAccess) -> getProperties
    org.yaml.snakeyaml.introspector.Property getProperty(java.lang.Class,java.lang.String) -> getProperty
    org.yaml.snakeyaml.introspector.Property getProperty(java.lang.Class,java.lang.String,org.yaml.snakeyaml.introspector.BeanAccess) -> getProperty
    void setBeanAccess(org.yaml.snakeyaml.introspector.BeanAccess) -> setBeanAccess
    void setAllowReadOnlyProperties(boolean) -> setAllowReadOnlyProperties
org.yaml.snakeyaml.introspector.PropertyUtils$1 -> org.yaml.snakeyaml.introspector.PropertyUtils$1:
    int[] $SwitchMap$org$yaml$snakeyaml$introspector$BeanAccess -> $SwitchMap$org$yaml$snakeyaml$introspector$BeanAccess
org.yaml.snakeyaml.nodes.CollectionNode -> org.yaml.snakeyaml.nodes.CollectionNode:
    java.lang.Boolean flowStyle -> flowStyle
    java.lang.Boolean getFlowStyle() -> getFlowStyle
    void setFlowStyle(java.lang.Boolean) -> setFlowStyle
    void setEndMark(org.yaml.snakeyaml.error.Mark) -> setEndMark
org.yaml.snakeyaml.nodes.MappingNode -> org.yaml.snakeyaml.nodes.MappingNode:
    java.lang.Class keyType -> keyType
    java.lang.Class valueType -> valueType
    java.util.List value -> value
    boolean need2setTypes -> need2setTypes
    org.yaml.snakeyaml.nodes.NodeId getNodeId() -> getNodeId
    java.util.List getValue() -> getValue
    void setValue(java.util.List) -> setValue
    void setKeyType(java.lang.Class) -> setKeyType
    void setValueType(java.lang.Class) -> setValueType
    java.lang.String toString() -> toString
org.yaml.snakeyaml.nodes.Node -> org.yaml.snakeyaml.nodes.Node:
    org.yaml.snakeyaml.nodes.Tag tag -> tag
    org.yaml.snakeyaml.error.Mark startMark -> startMark
    org.yaml.snakeyaml.error.Mark endMark -> endMark
    java.lang.Class type -> type
    boolean twoStepsConstruction -> twoStepsConstruction
    boolean resolved -> resolved
    java.lang.Boolean useClassConstructor -> useClassConstructor
    org.yaml.snakeyaml.nodes.Tag getTag() -> getTag
    org.yaml.snakeyaml.error.Mark getEndMark() -> getEndMark
    org.yaml.snakeyaml.nodes.NodeId getNodeId() -> getNodeId
    org.yaml.snakeyaml.error.Mark getStartMark() -> getStartMark
    void setTag(org.yaml.snakeyaml.nodes.Tag) -> setTag
    boolean equals(java.lang.Object) -> equals
    java.lang.Class getType() -> getType
    void setType(java.lang.Class) -> setType
    void setTwoStepsConstruction(boolean) -> setTwoStepsConstruction
    boolean isTwoStepsConstruction() -> isTwoStepsConstruction
    int hashCode() -> hashCode
    boolean useClassConstructor() -> useClassConstructor
    void setUseClassConstructor(java.lang.Boolean) -> setUseClassConstructor
    boolean isResolved() -> isResolved
org.yaml.snakeyaml.nodes.NodeId -> org.yaml.snakeyaml.nodes.NodeId:
    org.yaml.snakeyaml.nodes.NodeId scalar -> scalar
    org.yaml.snakeyaml.nodes.NodeId sequence -> sequence
    org.yaml.snakeyaml.nodes.NodeId mapping -> mapping
    org.yaml.snakeyaml.nodes.NodeId[] $VALUES -> $VALUES
    org.yaml.snakeyaml.nodes.NodeId[] values() -> values
    org.yaml.snakeyaml.nodes.NodeId valueOf(java.lang.String) -> valueOf
org.yaml.snakeyaml.nodes.NodeTuple -> org.yaml.snakeyaml.nodes.NodeTuple:
    org.yaml.snakeyaml.nodes.Node keyNode -> keyNode
    org.yaml.snakeyaml.nodes.Node valueNode -> valueNode
    org.yaml.snakeyaml.nodes.Node getKeyNode() -> getKeyNode
    org.yaml.snakeyaml.nodes.Node getValueNode() -> getValueNode
    java.lang.String toString() -> toString
org.yaml.snakeyaml.nodes.ScalarNode -> org.yaml.snakeyaml.nodes.ScalarNode:
    java.lang.Character style -> style
    java.lang.String value -> value
    java.lang.Character getStyle() -> getStyle
    org.yaml.snakeyaml.nodes.NodeId getNodeId() -> getNodeId
    java.lang.String getValue() -> getValue
    java.lang.String toString() -> toString
org.yaml.snakeyaml.nodes.SequenceNode -> org.yaml.snakeyaml.nodes.SequenceNode:
    java.lang.Class listType -> listType
    java.util.List value -> value
    org.yaml.snakeyaml.nodes.NodeId getNodeId() -> getNodeId
    java.util.List getValue() -> getValue
    void setListType(java.lang.Class) -> setListType
    java.lang.String toString() -> toString
org.yaml.snakeyaml.nodes.Tag -> org.yaml.snakeyaml.nodes.Tag:
    java.lang.String PREFIX -> PREFIX
    org.yaml.snakeyaml.nodes.Tag YAML -> YAML
    org.yaml.snakeyaml.nodes.Tag VALUE -> VALUE
    org.yaml.snakeyaml.nodes.Tag MERGE -> MERGE
    org.yaml.snakeyaml.nodes.Tag SET -> SET
    org.yaml.snakeyaml.nodes.Tag PAIRS -> PAIRS
    org.yaml.snakeyaml.nodes.Tag OMAP -> OMAP
    org.yaml.snakeyaml.nodes.Tag BINARY -> BINARY
    org.yaml.snakeyaml.nodes.Tag INT -> INT
    org.yaml.snakeyaml.nodes.Tag FLOAT -> FLOAT
    org.yaml.snakeyaml.nodes.Tag TIMESTAMP -> TIMESTAMP
    org.yaml.snakeyaml.nodes.Tag BOOL -> BOOL
    org.yaml.snakeyaml.nodes.Tag NULL -> NULL
    org.yaml.snakeyaml.nodes.Tag STR -> STR
    org.yaml.snakeyaml.nodes.Tag SEQ -> SEQ
    org.yaml.snakeyaml.nodes.Tag MAP -> MAP
    java.util.Map COMPATIBILITY_MAP -> COMPATIBILITY_MAP
    java.lang.String value -> value
    java.lang.String getValue() -> getValue
    boolean startsWith(java.lang.String) -> startsWith
    java.lang.String getClassName() -> getClassName
    int getLength() -> getLength
    java.lang.String toString() -> toString
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    boolean isCompatible(java.lang.Class) -> isCompatible
    boolean matches(java.lang.Class) -> matches
    int compareTo(org.yaml.snakeyaml.nodes.Tag) -> compareTo
    int compareTo(java.lang.Object) -> compareTo
org.yaml.snakeyaml.parser.Parser -> org.yaml.snakeyaml.parser.Parser:
    boolean checkEvent(org.yaml.snakeyaml.events.Event$ID) -> checkEvent
    org.yaml.snakeyaml.events.Event peekEvent() -> peekEvent
    org.yaml.snakeyaml.events.Event getEvent() -> getEvent
org.yaml.snakeyaml.parser.ParserException -> org.yaml.snakeyaml.parser.ParserException:
    long serialVersionUID -> serialVersionUID
org.yaml.snakeyaml.parser.ParserImpl -> org.yaml.snakeyaml.parser.ParserImpl:
    java.util.Map DEFAULT_TAGS -> DEFAULT_TAGS
    org.yaml.snakeyaml.scanner.Scanner scanner -> scanner
    org.yaml.snakeyaml.events.Event currentEvent -> currentEvent
    java.util.List yamlVersion -> yamlVersion
    java.util.Map tagHandles -> tagHandles
    org.yaml.snakeyaml.util.ArrayStack states -> states
    org.yaml.snakeyaml.util.ArrayStack marks -> marks
    org.yaml.snakeyaml.parser.Production state -> state
    boolean checkEvent(org.yaml.snakeyaml.events.Event$ID) -> checkEvent
    org.yaml.snakeyaml.events.Event peekEvent() -> peekEvent
    org.yaml.snakeyaml.events.Event getEvent() -> getEvent
    java.util.List processDirectives() -> processDirectives
    org.yaml.snakeyaml.events.Event parseFlowNode() -> parseFlowNode
    org.yaml.snakeyaml.events.Event parseBlockNodeOrIndentlessSequence() -> parseBlockNodeOrIndentlessSequence
    org.yaml.snakeyaml.events.Event parseNode(boolean,boolean) -> parseNode
    org.yaml.snakeyaml.events.Event processEmptyScalar(org.yaml.snakeyaml.error.Mark) -> processEmptyScalar
    org.yaml.snakeyaml.scanner.Scanner access$100(org.yaml.snakeyaml.parser.ParserImpl) -> access$100
    org.yaml.snakeyaml.parser.Production access$202(org.yaml.snakeyaml.parser.ParserImpl,org.yaml.snakeyaml.parser.Production) -> access$202
    java.util.Map access$402(org.yaml.snakeyaml.parser.ParserImpl,java.util.Map) -> access$402
    java.util.Map access$500() -> access$500
    org.yaml.snakeyaml.util.ArrayStack access$700(org.yaml.snakeyaml.parser.ParserImpl) -> access$700
    java.util.List access$1000(org.yaml.snakeyaml.parser.ParserImpl) -> access$1000
    org.yaml.snakeyaml.util.ArrayStack access$1200(org.yaml.snakeyaml.parser.ParserImpl) -> access$1200
    org.yaml.snakeyaml.events.Event access$1300(org.yaml.snakeyaml.parser.ParserImpl,org.yaml.snakeyaml.error.Mark) -> access$1300
    org.yaml.snakeyaml.events.Event access$1400(org.yaml.snakeyaml.parser.ParserImpl,boolean,boolean) -> access$1400
    org.yaml.snakeyaml.events.Event access$2300(org.yaml.snakeyaml.parser.ParserImpl) -> access$2300
    org.yaml.snakeyaml.events.Event access$2500(org.yaml.snakeyaml.parser.ParserImpl) -> access$2500
org.yaml.snakeyaml.parser.ParserImpl$1 -> org.yaml.snakeyaml.parser.ParserImpl$1:
org.yaml.snakeyaml.parser.ParserImpl$ParseBlockMappingFirstKey -> org.yaml.snakeyaml.parser.ParserImpl$ParseBlockMappingFirstKey:
    org.yaml.snakeyaml.parser.ParserImpl this$0 -> this$0
    org.yaml.snakeyaml.events.Event produce() -> produce
org.yaml.snakeyaml.parser.ParserImpl$ParseBlockMappingKey -> org.yaml.snakeyaml.parser.ParserImpl$ParseBlockMappingKey:
    org.yaml.snakeyaml.parser.ParserImpl this$0 -> this$0
    org.yaml.snakeyaml.events.Event produce() -> produce
org.yaml.snakeyaml.parser.ParserImpl$ParseBlockMappingValue -> org.yaml.snakeyaml.parser.ParserImpl$ParseBlockMappingValue:
    org.yaml.snakeyaml.parser.ParserImpl this$0 -> this$0
    org.yaml.snakeyaml.events.Event produce() -> produce
org.yaml.snakeyaml.parser.ParserImpl$ParseBlockNode -> org.yaml.snakeyaml.parser.ParserImpl$ParseBlockNode:
    org.yaml.snakeyaml.parser.ParserImpl this$0 -> this$0
    org.yaml.snakeyaml.events.Event produce() -> produce
org.yaml.snakeyaml.parser.ParserImpl$ParseBlockSequenceEntry -> org.yaml.snakeyaml.parser.ParserImpl$ParseBlockSequenceEntry:
    org.yaml.snakeyaml.parser.ParserImpl this$0 -> this$0
    org.yaml.snakeyaml.events.Event produce() -> produce
org.yaml.snakeyaml.parser.ParserImpl$ParseBlockSequenceFirstEntry -> org.yaml.snakeyaml.parser.ParserImpl$ParseBlockSequenceFirstEntry:
    org.yaml.snakeyaml.parser.ParserImpl this$0 -> this$0
    org.yaml.snakeyaml.events.Event produce() -> produce
org.yaml.snakeyaml.parser.ParserImpl$ParseDocumentContent -> org.yaml.snakeyaml.parser.ParserImpl$ParseDocumentContent:
    org.yaml.snakeyaml.parser.ParserImpl this$0 -> this$0
    org.yaml.snakeyaml.events.Event produce() -> produce
org.yaml.snakeyaml.parser.ParserImpl$ParseDocumentEnd -> org.yaml.snakeyaml.parser.ParserImpl$ParseDocumentEnd:
    org.yaml.snakeyaml.parser.ParserImpl this$0 -> this$0
    org.yaml.snakeyaml.events.Event produce() -> produce
org.yaml.snakeyaml.parser.ParserImpl$ParseDocumentStart -> org.yaml.snakeyaml.parser.ParserImpl$ParseDocumentStart:
    org.yaml.snakeyaml.parser.ParserImpl this$0 -> this$0
    org.yaml.snakeyaml.events.Event produce() -> produce
org.yaml.snakeyaml.parser.ParserImpl$ParseFlowMappingEmptyValue -> org.yaml.snakeyaml.parser.ParserImpl$ParseFlowMappingEmptyValue:
    org.yaml.snakeyaml.parser.ParserImpl this$0 -> this$0
    org.yaml.snakeyaml.events.Event produce() -> produce
org.yaml.snakeyaml.parser.ParserImpl$ParseFlowMappingFirstKey -> org.yaml.snakeyaml.parser.ParserImpl$ParseFlowMappingFirstKey:
    org.yaml.snakeyaml.parser.ParserImpl this$0 -> this$0
    org.yaml.snakeyaml.events.Event produce() -> produce
org.yaml.snakeyaml.parser.ParserImpl$ParseFlowMappingKey -> org.yaml.snakeyaml.parser.ParserImpl$ParseFlowMappingKey:
    boolean first -> first
    org.yaml.snakeyaml.parser.ParserImpl this$0 -> this$0
    org.yaml.snakeyaml.events.Event produce() -> produce
org.yaml.snakeyaml.parser.ParserImpl$ParseFlowMappingValue -> org.yaml.snakeyaml.parser.ParserImpl$ParseFlowMappingValue:
    org.yaml.snakeyaml.parser.ParserImpl this$0 -> this$0
    org.yaml.snakeyaml.events.Event produce() -> produce
org.yaml.snakeyaml.parser.ParserImpl$ParseFlowSequenceEntry -> org.yaml.snakeyaml.parser.ParserImpl$ParseFlowSequenceEntry:
    boolean first -> first
    org.yaml.snakeyaml.parser.ParserImpl this$0 -> this$0
    org.yaml.snakeyaml.events.Event produce() -> produce
org.yaml.snakeyaml.parser.ParserImpl$ParseFlowSequenceEntryMappingEnd -> org.yaml.snakeyaml.parser.ParserImpl$ParseFlowSequenceEntryMappingEnd:
    org.yaml.snakeyaml.parser.ParserImpl this$0 -> this$0
    org.yaml.snakeyaml.events.Event produce() -> produce
org.yaml.snakeyaml.parser.ParserImpl$ParseFlowSequenceEntryMappingKey -> org.yaml.snakeyaml.parser.ParserImpl$ParseFlowSequenceEntryMappingKey:
    org.yaml.snakeyaml.parser.ParserImpl this$0 -> this$0
    org.yaml.snakeyaml.events.Event produce() -> produce
org.yaml.snakeyaml.parser.ParserImpl$ParseFlowSequenceEntryMappingValue -> org.yaml.snakeyaml.parser.ParserImpl$ParseFlowSequenceEntryMappingValue:
    org.yaml.snakeyaml.parser.ParserImpl this$0 -> this$0
    org.yaml.snakeyaml.events.Event produce() -> produce
org.yaml.snakeyaml.parser.ParserImpl$ParseFlowSequenceFirstEntry -> org.yaml.snakeyaml.parser.ParserImpl$ParseFlowSequenceFirstEntry:
    org.yaml.snakeyaml.parser.ParserImpl this$0 -> this$0
    org.yaml.snakeyaml.events.Event produce() -> produce
org.yaml.snakeyaml.parser.ParserImpl$ParseImplicitDocumentStart -> org.yaml.snakeyaml.parser.ParserImpl$ParseImplicitDocumentStart:
    org.yaml.snakeyaml.parser.ParserImpl this$0 -> this$0
    org.yaml.snakeyaml.events.Event produce() -> produce
org.yaml.snakeyaml.parser.ParserImpl$ParseIndentlessSequenceEntry -> org.yaml.snakeyaml.parser.ParserImpl$ParseIndentlessSequenceEntry:
    org.yaml.snakeyaml.parser.ParserImpl this$0 -> this$0
    org.yaml.snakeyaml.events.Event produce() -> produce
org.yaml.snakeyaml.parser.ParserImpl$ParseStreamStart -> org.yaml.snakeyaml.parser.ParserImpl$ParseStreamStart:
    org.yaml.snakeyaml.parser.ParserImpl this$0 -> this$0
    org.yaml.snakeyaml.events.Event produce() -> produce
org.yaml.snakeyaml.parser.Production -> org.yaml.snakeyaml.parser.Production:
    org.yaml.snakeyaml.events.Event produce() -> produce
org.yaml.snakeyaml.reader.ReaderException -> org.yaml.snakeyaml.reader.ReaderException:
    long serialVersionUID -> serialVersionUID
    java.lang.String name -> name
    char character -> character
    int position -> position
    java.lang.String toString() -> toString
org.yaml.snakeyaml.reader.StreamReader -> org.yaml.snakeyaml.reader.StreamReader:
    java.util.regex.Pattern NON_PRINTABLE -> NON_PRINTABLE
    java.lang.String name -> name
    java.io.Reader stream -> stream
    int pointer -> pointer
    boolean eof -> eof
    java.lang.StringBuilder buffer -> buffer
    int index -> index
    int line -> line
    int column -> column
    void checkPrintable(java.lang.CharSequence) -> checkPrintable
    org.yaml.snakeyaml.error.Mark getMark() -> getMark
    void forward() -> forward
    void forward(int) -> forward
    char peek() -> peek
    char peek(int) -> peek
    java.lang.String prefix(int) -> prefix
    void update(int) -> update
    int getColumn() -> getColumn
    java.nio.charset.Charset getEncoding() -> getEncoding
    int getIndex() -> getIndex
    int getLine() -> getLine
org.yaml.snakeyaml.reader.UnicodeReader -> org.yaml.snakeyaml.reader.UnicodeReader:
    java.io.PushbackInputStream internalIn -> internalIn
    java.io.InputStreamReader internalIn2 -> internalIn2
    int BOM_SIZE -> BOM_SIZE
    java.lang.String getEncoding() -> getEncoding
    void init() -> init
    void close() -> close
    int read(char[],int,int) -> read
org.yaml.snakeyaml.representer.BaseRepresenter -> org.yaml.snakeyaml.representer.BaseRepresenter:
    java.util.Map representers -> representers
    org.yaml.snakeyaml.representer.Represent nullRepresenter -> nullRepresenter
    java.util.Map multiRepresenters -> multiRepresenters
    java.lang.Character defaultStyle -> defaultStyle
    java.lang.Boolean defaultFlowStyle -> defaultFlowStyle
    java.util.Map representedObjects -> representedObjects
    java.util.Set objectKeeper -> objectKeeper
    java.lang.Object objectToRepresent -> objectToRepresent
    org.yaml.snakeyaml.introspector.PropertyUtils propertyUtils -> propertyUtils
    boolean explicitPropertyUtils -> explicitPropertyUtils
    void represent(org.yaml.snakeyaml.serializer.Serializer,java.lang.Object) -> represent
    org.yaml.snakeyaml.nodes.Node representData(java.lang.Object) -> representData
    org.yaml.snakeyaml.nodes.Node representScalar(org.yaml.snakeyaml.nodes.Tag,java.lang.String,java.lang.Character) -> representScalar
    org.yaml.snakeyaml.nodes.Node representScalar(org.yaml.snakeyaml.nodes.Tag,java.lang.String) -> representScalar
    org.yaml.snakeyaml.nodes.Node representSequence(org.yaml.snakeyaml.nodes.Tag,java.lang.Iterable,java.lang.Boolean) -> representSequence
    org.yaml.snakeyaml.nodes.Node representMapping(org.yaml.snakeyaml.nodes.Tag,java.util.Map,java.lang.Boolean) -> representMapping
    boolean ignoreAliases(java.lang.Object) -> ignoreAliases
    void setDefaultScalarStyle(org.yaml.snakeyaml.DumperOptions$ScalarStyle) -> setDefaultScalarStyle
    void setDefaultFlowStyle(org.yaml.snakeyaml.DumperOptions$FlowStyle) -> setDefaultFlowStyle
    void setPropertyUtils(org.yaml.snakeyaml.introspector.PropertyUtils) -> setPropertyUtils
    org.yaml.snakeyaml.introspector.PropertyUtils getPropertyUtils() -> getPropertyUtils
    boolean isExplicitPropertyUtils() -> isExplicitPropertyUtils
org.yaml.snakeyaml.representer.Represent -> org.yaml.snakeyaml.representer.Represent:
    org.yaml.snakeyaml.nodes.Node representData(java.lang.Object) -> representData
org.yaml.snakeyaml.representer.Representer -> org.yaml.snakeyaml.representer.Representer:
    org.yaml.snakeyaml.nodes.MappingNode representJavaBean(java.util.Set,java.lang.Object) -> representJavaBean
    org.yaml.snakeyaml.nodes.NodeTuple representJavaBeanProperty(java.lang.Object,org.yaml.snakeyaml.introspector.Property,java.lang.Object,org.yaml.snakeyaml.nodes.Tag) -> representJavaBeanProperty
    void checkGlobalTag(org.yaml.snakeyaml.introspector.Property,org.yaml.snakeyaml.nodes.Node,java.lang.Object) -> checkGlobalTag
    void resetTag(java.lang.Class,org.yaml.snakeyaml.nodes.Node) -> resetTag
    java.util.Set getProperties(java.lang.Class) -> getProperties
org.yaml.snakeyaml.representer.Representer$RepresentJavaBean -> org.yaml.snakeyaml.representer.Representer$RepresentJavaBean:
    org.yaml.snakeyaml.representer.Representer this$0 -> this$0
    org.yaml.snakeyaml.nodes.Node representData(java.lang.Object) -> representData
org.yaml.snakeyaml.representer.SafeRepresenter -> org.yaml.snakeyaml.representer.SafeRepresenter:
    java.util.Map classTags -> classTags
    java.util.regex.Pattern BINARY_PATTERN -> BINARY_PATTERN
    org.yaml.snakeyaml.nodes.Tag getTag(java.lang.Class,org.yaml.snakeyaml.nodes.Tag) -> getTag
    boolean ignoreAliases(java.lang.Object) -> ignoreAliases
    org.yaml.snakeyaml.nodes.Tag addClassTag(java.lang.Class,java.lang.String) -> addClassTag
    org.yaml.snakeyaml.nodes.Tag addClassTag(java.lang.Class,org.yaml.snakeyaml.nodes.Tag) -> addClassTag
org.yaml.snakeyaml.representer.SafeRepresenter$IteratorWrapper -> org.yaml.snakeyaml.representer.SafeRepresenter$IteratorWrapper:
    java.util.Iterator iter -> iter
    org.yaml.snakeyaml.representer.SafeRepresenter this$0 -> this$0
    java.util.Iterator iterator() -> iterator
org.yaml.snakeyaml.representer.SafeRepresenter$RepresentArray -> org.yaml.snakeyaml.representer.SafeRepresenter$RepresentArray:
    org.yaml.snakeyaml.representer.SafeRepresenter this$0 -> this$0
    org.yaml.snakeyaml.nodes.Node representData(java.lang.Object) -> representData
org.yaml.snakeyaml.representer.SafeRepresenter$RepresentBoolean -> org.yaml.snakeyaml.representer.SafeRepresenter$RepresentBoolean:
    org.yaml.snakeyaml.representer.SafeRepresenter this$0 -> this$0
    org.yaml.snakeyaml.nodes.Node representData(java.lang.Object) -> representData
org.yaml.snakeyaml.representer.SafeRepresenter$RepresentByteArray -> org.yaml.snakeyaml.representer.SafeRepresenter$RepresentByteArray:
    org.yaml.snakeyaml.representer.SafeRepresenter this$0 -> this$0
    org.yaml.snakeyaml.nodes.Node representData(java.lang.Object) -> representData
org.yaml.snakeyaml.representer.SafeRepresenter$RepresentDate -> org.yaml.snakeyaml.representer.SafeRepresenter$RepresentDate:
    org.yaml.snakeyaml.representer.SafeRepresenter this$0 -> this$0
    org.yaml.snakeyaml.nodes.Node representData(java.lang.Object) -> representData
org.yaml.snakeyaml.representer.SafeRepresenter$RepresentEnum -> org.yaml.snakeyaml.representer.SafeRepresenter$RepresentEnum:
    org.yaml.snakeyaml.representer.SafeRepresenter this$0 -> this$0
    org.yaml.snakeyaml.nodes.Node representData(java.lang.Object) -> representData
org.yaml.snakeyaml.representer.SafeRepresenter$RepresentIterable -> org.yaml.snakeyaml.representer.SafeRepresenter$RepresentIterable:
    org.yaml.snakeyaml.representer.SafeRepresenter this$0 -> this$0
    org.yaml.snakeyaml.nodes.Node representData(java.lang.Object) -> representData
org.yaml.snakeyaml.representer.SafeRepresenter$RepresentIterator -> org.yaml.snakeyaml.representer.SafeRepresenter$RepresentIterator:
    org.yaml.snakeyaml.representer.SafeRepresenter this$0 -> this$0
    org.yaml.snakeyaml.nodes.Node representData(java.lang.Object) -> representData
org.yaml.snakeyaml.representer.SafeRepresenter$RepresentMap -> org.yaml.snakeyaml.representer.SafeRepresenter$RepresentMap:
    org.yaml.snakeyaml.representer.SafeRepresenter this$0 -> this$0
    org.yaml.snakeyaml.nodes.Node representData(java.lang.Object) -> representData
org.yaml.snakeyaml.representer.SafeRepresenter$RepresentNull -> org.yaml.snakeyaml.representer.SafeRepresenter$RepresentNull:
    org.yaml.snakeyaml.representer.SafeRepresenter this$0 -> this$0
    org.yaml.snakeyaml.nodes.Node representData(java.lang.Object) -> representData
org.yaml.snakeyaml.representer.SafeRepresenter$RepresentNumber -> org.yaml.snakeyaml.representer.SafeRepresenter$RepresentNumber:
    org.yaml.snakeyaml.representer.SafeRepresenter this$0 -> this$0
    org.yaml.snakeyaml.nodes.Node representData(java.lang.Object) -> representData
org.yaml.snakeyaml.representer.SafeRepresenter$RepresentSet -> org.yaml.snakeyaml.representer.SafeRepresenter$RepresentSet:
    org.yaml.snakeyaml.representer.SafeRepresenter this$0 -> this$0
    org.yaml.snakeyaml.nodes.Node representData(java.lang.Object) -> representData
org.yaml.snakeyaml.representer.SafeRepresenter$RepresentString -> org.yaml.snakeyaml.representer.SafeRepresenter$RepresentString:
    org.yaml.snakeyaml.representer.SafeRepresenter this$0 -> this$0
    org.yaml.snakeyaml.nodes.Node representData(java.lang.Object) -> representData
org.yaml.snakeyaml.resolver.Resolver -> org.yaml.snakeyaml.resolver.Resolver:
    java.util.regex.Pattern BOOL -> BOOL
    java.util.regex.Pattern FLOAT -> FLOAT
    java.util.regex.Pattern INT -> INT
    java.util.regex.Pattern MERGE -> MERGE
    java.util.regex.Pattern NULL -> NULL
    java.util.regex.Pattern EMPTY -> EMPTY
    java.util.regex.Pattern TIMESTAMP -> TIMESTAMP
    java.util.regex.Pattern VALUE -> VALUE
    java.util.regex.Pattern YAML -> YAML
    java.util.Map yamlImplicitResolvers -> yamlImplicitResolvers
    void addImplicitResolvers() -> addImplicitResolvers
    void addImplicitResolver(org.yaml.snakeyaml.nodes.Tag,java.util.regex.Pattern,java.lang.String) -> addImplicitResolver
    org.yaml.snakeyaml.nodes.Tag resolve(org.yaml.snakeyaml.nodes.NodeId,java.lang.String,boolean) -> resolve
org.yaml.snakeyaml.resolver.Resolver$1 -> org.yaml.snakeyaml.resolver.Resolver$1:
    int[] $SwitchMap$org$yaml$snakeyaml$nodes$NodeId -> $SwitchMap$org$yaml$snakeyaml$nodes$NodeId
org.yaml.snakeyaml.resolver.ResolverTuple -> org.yaml.snakeyaml.resolver.ResolverTuple:
    org.yaml.snakeyaml.nodes.Tag tag -> tag
    java.util.regex.Pattern regexp -> regexp
    org.yaml.snakeyaml.nodes.Tag getTag() -> getTag
    java.util.regex.Pattern getRegexp() -> getRegexp
    java.lang.String toString() -> toString
org.yaml.snakeyaml.scanner.Constant -> org.yaml.snakeyaml.scanner.Constant:
    java.lang.String ALPHA -> ALPHA
    java.lang.String LINEBR_S -> LINEBR_S
    java.lang.String FULL_LINEBR_S -> FULL_LINEBR_S
    java.lang.String NULL_OR_LINEBR_S -> NULL_OR_LINEBR_S
    java.lang.String NULL_BL_LINEBR_S -> NULL_BL_LINEBR_S
    java.lang.String NULL_BL_T_LINEBR_S -> NULL_BL_T_LINEBR_S
    java.lang.String URI_CHARS_S -> URI_CHARS_S
    org.yaml.snakeyaml.scanner.Constant LINEBR -> LINEBR
    org.yaml.snakeyaml.scanner.Constant FULL_LINEBR -> FULL_LINEBR
    org.yaml.snakeyaml.scanner.Constant NULL_OR_LINEBR -> NULL_OR_LINEBR
    org.yaml.snakeyaml.scanner.Constant NULL_BL_LINEBR -> NULL_BL_LINEBR
    org.yaml.snakeyaml.scanner.Constant NULL_BL_T_LINEBR -> NULL_BL_T_LINEBR
    org.yaml.snakeyaml.scanner.Constant URI_CHARS -> URI_CHARS
    java.lang.String content -> content
    boolean has(char) -> has
    boolean hasNo(char) -> hasNo
    boolean has(char,java.lang.String) -> has
    boolean hasNo(char,java.lang.String) -> hasNo
org.yaml.snakeyaml.scanner.Scanner -> org.yaml.snakeyaml.scanner.Scanner:
    boolean checkToken(org.yaml.snakeyaml.tokens.Token$ID[]) -> checkToken
    org.yaml.snakeyaml.tokens.Token peekToken() -> peekToken
    org.yaml.snakeyaml.tokens.Token getToken() -> getToken
org.yaml.snakeyaml.scanner.ScannerException -> org.yaml.snakeyaml.scanner.ScannerException:
    long serialVersionUID -> serialVersionUID
org.yaml.snakeyaml.scanner.ScannerImpl -> org.yaml.snakeyaml.scanner.ScannerImpl:
    java.util.regex.Pattern NOT_HEXA -> NOT_HEXA
    java.util.Map ESCAPE_REPLACEMENTS -> ESCAPE_REPLACEMENTS
    java.util.Map ESCAPE_CODES -> ESCAPE_CODES
    org.yaml.snakeyaml.reader.StreamReader reader -> reader
    boolean done -> done
    int flowLevel -> flowLevel
    java.util.List tokens -> tokens
    int tokensTaken -> tokensTaken
    int indent -> indent
    org.yaml.snakeyaml.util.ArrayStack indents -> indents
    boolean allowSimpleKey -> allowSimpleKey
    java.util.Map possibleSimpleKeys -> possibleSimpleKeys
    boolean checkToken(org.yaml.snakeyaml.tokens.Token$ID[]) -> checkToken
    org.yaml.snakeyaml.tokens.Token peekToken() -> peekToken
    org.yaml.snakeyaml.tokens.Token getToken() -> getToken
    boolean needMoreTokens() -> needMoreTokens
    void fetchMoreTokens() -> fetchMoreTokens
    int nextPossibleSimpleKey() -> nextPossibleSimpleKey
    void stalePossibleSimpleKeys() -> stalePossibleSimpleKeys
    void savePossibleSimpleKey() -> savePossibleSimpleKey
    void removePossibleSimpleKey() -> removePossibleSimpleKey
    void unwindIndent(int) -> unwindIndent
    boolean addIndent(int) -> addIndent
    void fetchStreamStart() -> fetchStreamStart
    void fetchStreamEnd() -> fetchStreamEnd
    void fetchDirective() -> fetchDirective
    void fetchDocumentStart() -> fetchDocumentStart
    void fetchDocumentEnd() -> fetchDocumentEnd
    void fetchDocumentIndicator(boolean) -> fetchDocumentIndicator
    void fetchFlowSequenceStart() -> fetchFlowSequenceStart
    void fetchFlowMappingStart() -> fetchFlowMappingStart
    void fetchFlowCollectionStart(boolean) -> fetchFlowCollectionStart
    void fetchFlowSequenceEnd() -> fetchFlowSequenceEnd
    void fetchFlowMappingEnd() -> fetchFlowMappingEnd
    void fetchFlowCollectionEnd(boolean) -> fetchFlowCollectionEnd
    void fetchFlowEntry() -> fetchFlowEntry
    void fetchBlockEntry() -> fetchBlockEntry
    void fetchKey() -> fetchKey
    void fetchValue() -> fetchValue
    void fetchAlias() -> fetchAlias
    void fetchAnchor() -> fetchAnchor
    void fetchTag() -> fetchTag
    void fetchLiteral() -> fetchLiteral
    void fetchFolded() -> fetchFolded
    void fetchBlockScalar(char) -> fetchBlockScalar
    void fetchSingle() -> fetchSingle
    void fetchDouble() -> fetchDouble
    void fetchFlowScalar(char) -> fetchFlowScalar
    void fetchPlain() -> fetchPlain
    boolean checkDirective() -> checkDirective
    boolean checkDocumentStart() -> checkDocumentStart
    boolean checkDocumentEnd() -> checkDocumentEnd
    boolean checkBlockEntry() -> checkBlockEntry
    boolean checkKey() -> checkKey
    boolean checkValue() -> checkValue
    boolean checkPlain() -> checkPlain
    void scanToNextToken() -> scanToNextToken
    org.yaml.snakeyaml.tokens.Token scanDirective() -> scanDirective
    java.lang.String scanDirectiveName(org.yaml.snakeyaml.error.Mark) -> scanDirectiveName
    java.util.List scanYamlDirectiveValue(org.yaml.snakeyaml.error.Mark) -> scanYamlDirectiveValue
    java.lang.Integer scanYamlDirectiveNumber(org.yaml.snakeyaml.error.Mark) -> scanYamlDirectiveNumber
    java.util.List scanTagDirectiveValue(org.yaml.snakeyaml.error.Mark) -> scanTagDirectiveValue
    java.lang.String scanTagDirectiveHandle(org.yaml.snakeyaml.error.Mark) -> scanTagDirectiveHandle
    java.lang.String scanTagDirectivePrefix(org.yaml.snakeyaml.error.Mark) -> scanTagDirectivePrefix
    java.lang.String scanDirectiveIgnoredLine(org.yaml.snakeyaml.error.Mark) -> scanDirectiveIgnoredLine
    org.yaml.snakeyaml.tokens.Token scanAnchor(boolean) -> scanAnchor
    org.yaml.snakeyaml.tokens.Token scanTag() -> scanTag
    org.yaml.snakeyaml.tokens.Token scanBlockScalar(char) -> scanBlockScalar
    org.yaml.snakeyaml.scanner.ScannerImpl$Chomping scanBlockScalarIndicators(org.yaml.snakeyaml.error.Mark) -> scanBlockScalarIndicators
    java.lang.String scanBlockScalarIgnoredLine(org.yaml.snakeyaml.error.Mark) -> scanBlockScalarIgnoredLine
    java.lang.Object[] scanBlockScalarIndentation() -> scanBlockScalarIndentation
    java.lang.Object[] scanBlockScalarBreaks(int) -> scanBlockScalarBreaks
    org.yaml.snakeyaml.tokens.Token scanFlowScalar(char) -> scanFlowScalar
    java.lang.String scanFlowScalarNonSpaces(boolean,org.yaml.snakeyaml.error.Mark) -> scanFlowScalarNonSpaces
    java.lang.String scanFlowScalarSpaces(org.yaml.snakeyaml.error.Mark) -> scanFlowScalarSpaces
    java.lang.String scanFlowScalarBreaks(org.yaml.snakeyaml.error.Mark) -> scanFlowScalarBreaks
    org.yaml.snakeyaml.tokens.Token scanPlain() -> scanPlain
    java.lang.String scanPlainSpaces() -> scanPlainSpaces
    java.lang.String scanTagHandle(java.lang.String,org.yaml.snakeyaml.error.Mark) -> scanTagHandle
    java.lang.String scanTagUri(java.lang.String,org.yaml.snakeyaml.error.Mark) -> scanTagUri
    java.lang.String scanUriEscapes(java.lang.String,org.yaml.snakeyaml.error.Mark) -> scanUriEscapes
    java.lang.String scanLineBreak() -> scanLineBreak
org.yaml.snakeyaml.scanner.ScannerImpl$Chomping -> org.yaml.snakeyaml.scanner.ScannerImpl$Chomping:
    java.lang.Boolean value -> value
    int increment -> increment
    org.yaml.snakeyaml.scanner.ScannerImpl this$0 -> this$0
    boolean chompTailIsNotFalse() -> chompTailIsNotFalse
    boolean chompTailIsTrue() -> chompTailIsTrue
    int getIncrement() -> getIncrement
org.yaml.snakeyaml.scanner.SimpleKey -> org.yaml.snakeyaml.scanner.SimpleKey:
    int tokenNumber -> tokenNumber
    boolean required -> required
    int index -> index
    int line -> line
    int column -> column
    org.yaml.snakeyaml.error.Mark mark -> mark
    int getTokenNumber() -> getTokenNumber
    int getColumn() -> getColumn
    org.yaml.snakeyaml.error.Mark getMark() -> getMark
    int getIndex() -> getIndex
    int getLine() -> getLine
    boolean isRequired() -> isRequired
    java.lang.String toString() -> toString
org.yaml.snakeyaml.serializer.Serializer -> org.yaml.snakeyaml.serializer.Serializer:
    org.yaml.snakeyaml.emitter.Emitter emitter -> emitter
    org.yaml.snakeyaml.resolver.Resolver resolver -> resolver
    boolean explicitStart -> explicitStart
    boolean explicitEnd -> explicitEnd
    java.lang.Integer[] useVersion -> useVersion
    java.util.Map useTags -> useTags
    java.util.Set serializedNodes -> serializedNodes
    java.util.Map anchors -> anchors
    int lastAnchorId -> lastAnchorId
    java.lang.Boolean closed -> closed
    org.yaml.snakeyaml.nodes.Tag explicitRoot -> explicitRoot
    void open() -> open
    void close() -> close
    void serialize(org.yaml.snakeyaml.nodes.Node) -> serialize
    void anchorNode(org.yaml.snakeyaml.nodes.Node) -> anchorNode
    java.lang.String generateAnchor() -> generateAnchor
    void serializeNode(org.yaml.snakeyaml.nodes.Node,org.yaml.snakeyaml.nodes.Node,java.lang.Object) -> serializeNode
org.yaml.snakeyaml.serializer.Serializer$1 -> org.yaml.snakeyaml.serializer.Serializer$1:
    int[] $SwitchMap$org$yaml$snakeyaml$nodes$NodeId -> $SwitchMap$org$yaml$snakeyaml$nodes$NodeId
org.yaml.snakeyaml.serializer.SerializerException -> org.yaml.snakeyaml.serializer.SerializerException:
    long serialVersionUID -> serialVersionUID
org.yaml.snakeyaml.tokens.AliasToken -> org.yaml.snakeyaml.tokens.AliasToken:
    java.lang.String value -> value
    java.lang.String getValue() -> getValue
    java.lang.String getArguments() -> getArguments
    org.yaml.snakeyaml.tokens.Token$ID getTokenId() -> getTokenId
org.yaml.snakeyaml.tokens.AnchorToken -> org.yaml.snakeyaml.tokens.AnchorToken:
    java.lang.String value -> value
    java.lang.String getValue() -> getValue
    java.lang.String getArguments() -> getArguments
    org.yaml.snakeyaml.tokens.Token$ID getTokenId() -> getTokenId
org.yaml.snakeyaml.tokens.BlockEndToken -> org.yaml.snakeyaml.tokens.BlockEndToken:
    org.yaml.snakeyaml.tokens.Token$ID getTokenId() -> getTokenId
org.yaml.snakeyaml.tokens.BlockEntryToken -> org.yaml.snakeyaml.tokens.BlockEntryToken:
    org.yaml.snakeyaml.tokens.Token$ID getTokenId() -> getTokenId
org.yaml.snakeyaml.tokens.BlockMappingStartToken -> org.yaml.snakeyaml.tokens.BlockMappingStartToken:
    org.yaml.snakeyaml.tokens.Token$ID getTokenId() -> getTokenId
org.yaml.snakeyaml.tokens.BlockSequenceStartToken -> org.yaml.snakeyaml.tokens.BlockSequenceStartToken:
    org.yaml.snakeyaml.tokens.Token$ID getTokenId() -> getTokenId
org.yaml.snakeyaml.tokens.DirectiveToken -> org.yaml.snakeyaml.tokens.DirectiveToken:
    java.lang.String name -> name
    java.util.List value -> value
    java.lang.String getName() -> getName
    java.util.List getValue() -> getValue
    java.lang.String getArguments() -> getArguments
    org.yaml.snakeyaml.tokens.Token$ID getTokenId() -> getTokenId
org.yaml.snakeyaml.tokens.DocumentEndToken -> org.yaml.snakeyaml.tokens.DocumentEndToken:
    org.yaml.snakeyaml.tokens.Token$ID getTokenId() -> getTokenId
org.yaml.snakeyaml.tokens.DocumentStartToken -> org.yaml.snakeyaml.tokens.DocumentStartToken:
    org.yaml.snakeyaml.tokens.Token$ID getTokenId() -> getTokenId
org.yaml.snakeyaml.tokens.FlowEntryToken -> org.yaml.snakeyaml.tokens.FlowEntryToken:
    org.yaml.snakeyaml.tokens.Token$ID getTokenId() -> getTokenId
org.yaml.snakeyaml.tokens.FlowMappingEndToken -> org.yaml.snakeyaml.tokens.FlowMappingEndToken:
    org.yaml.snakeyaml.tokens.Token$ID getTokenId() -> getTokenId
org.yaml.snakeyaml.tokens.FlowMappingStartToken -> org.yaml.snakeyaml.tokens.FlowMappingStartToken:
    org.yaml.snakeyaml.tokens.Token$ID getTokenId() -> getTokenId
org.yaml.snakeyaml.tokens.FlowSequenceEndToken -> org.yaml.snakeyaml.tokens.FlowSequenceEndToken:
    org.yaml.snakeyaml.tokens.Token$ID getTokenId() -> getTokenId
org.yaml.snakeyaml.tokens.FlowSequenceStartToken -> org.yaml.snakeyaml.tokens.FlowSequenceStartToken:
    org.yaml.snakeyaml.tokens.Token$ID getTokenId() -> getTokenId
org.yaml.snakeyaml.tokens.KeyToken -> org.yaml.snakeyaml.tokens.KeyToken:
    org.yaml.snakeyaml.tokens.Token$ID getTokenId() -> getTokenId
org.yaml.snakeyaml.tokens.ScalarToken -> org.yaml.snakeyaml.tokens.ScalarToken:
    java.lang.String value -> value
    boolean plain -> plain
    char style -> style
    boolean getPlain() -> getPlain
    java.lang.String getValue() -> getValue
    char getStyle() -> getStyle
    java.lang.String getArguments() -> getArguments
    org.yaml.snakeyaml.tokens.Token$ID getTokenId() -> getTokenId
org.yaml.snakeyaml.tokens.StreamEndToken -> org.yaml.snakeyaml.tokens.StreamEndToken:
    org.yaml.snakeyaml.tokens.Token$ID getTokenId() -> getTokenId
org.yaml.snakeyaml.tokens.StreamStartToken -> org.yaml.snakeyaml.tokens.StreamStartToken:
    org.yaml.snakeyaml.tokens.Token$ID getTokenId() -> getTokenId
org.yaml.snakeyaml.tokens.TagToken -> org.yaml.snakeyaml.tokens.TagToken:
    org.yaml.snakeyaml.tokens.TagTuple value -> value
    org.yaml.snakeyaml.tokens.TagTuple getValue() -> getValue
    java.lang.String getArguments() -> getArguments
    org.yaml.snakeyaml.tokens.Token$ID getTokenId() -> getTokenId
org.yaml.snakeyaml.tokens.TagTuple -> org.yaml.snakeyaml.tokens.TagTuple:
    java.lang.String handle -> handle
    java.lang.String suffix -> suffix
    java.lang.String getHandle() -> getHandle
    java.lang.String getSuffix() -> getSuffix
org.yaml.snakeyaml.tokens.Token -> org.yaml.snakeyaml.tokens.Token:
    org.yaml.snakeyaml.error.Mark startMark -> startMark
    org.yaml.snakeyaml.error.Mark endMark -> endMark
    java.lang.String toString() -> toString
    org.yaml.snakeyaml.error.Mark getStartMark() -> getStartMark
    org.yaml.snakeyaml.error.Mark getEndMark() -> getEndMark
    java.lang.String getArguments() -> getArguments
    org.yaml.snakeyaml.tokens.Token$ID getTokenId() -> getTokenId
    boolean equals(java.lang.Object) -> equals
org.yaml.snakeyaml.tokens.Token$ID -> org.yaml.snakeyaml.tokens.Token$ID:
    org.yaml.snakeyaml.tokens.Token$ID Alias -> Alias
    org.yaml.snakeyaml.tokens.Token$ID Anchor -> Anchor
    org.yaml.snakeyaml.tokens.Token$ID BlockEnd -> BlockEnd
    org.yaml.snakeyaml.tokens.Token$ID BlockEntry -> BlockEntry
    org.yaml.snakeyaml.tokens.Token$ID BlockMappingStart -> BlockMappingStart
    org.yaml.snakeyaml.tokens.Token$ID BlockSequenceStart -> BlockSequenceStart
    org.yaml.snakeyaml.tokens.Token$ID Directive -> Directive
    org.yaml.snakeyaml.tokens.Token$ID DocumentEnd -> DocumentEnd
    org.yaml.snakeyaml.tokens.Token$ID DocumentStart -> DocumentStart
    org.yaml.snakeyaml.tokens.Token$ID FlowEntry -> FlowEntry
    org.yaml.snakeyaml.tokens.Token$ID FlowMappingEnd -> FlowMappingEnd
    org.yaml.snakeyaml.tokens.Token$ID FlowMappingStart -> FlowMappingStart
    org.yaml.snakeyaml.tokens.Token$ID FlowSequenceEnd -> FlowSequenceEnd
    org.yaml.snakeyaml.tokens.Token$ID FlowSequenceStart -> FlowSequenceStart
    org.yaml.snakeyaml.tokens.Token$ID Key -> Key
    org.yaml.snakeyaml.tokens.Token$ID Scalar -> Scalar
    org.yaml.snakeyaml.tokens.Token$ID StreamEnd -> StreamEnd
    org.yaml.snakeyaml.tokens.Token$ID StreamStart -> StreamStart
    org.yaml.snakeyaml.tokens.Token$ID Tag -> Tag
    org.yaml.snakeyaml.tokens.Token$ID Value -> Value
    org.yaml.snakeyaml.tokens.Token$ID[] $VALUES -> $VALUES
    org.yaml.snakeyaml.tokens.Token$ID[] values() -> values
    org.yaml.snakeyaml.tokens.Token$ID valueOf(java.lang.String) -> valueOf
org.yaml.snakeyaml.tokens.ValueToken -> org.yaml.snakeyaml.tokens.ValueToken:
    org.yaml.snakeyaml.tokens.Token$ID getTokenId() -> getTokenId
org.yaml.snakeyaml.util.ArrayStack -> org.yaml.snakeyaml.util.ArrayStack:
    java.util.ArrayList stack -> stack
    void push(java.lang.Object) -> push
    java.lang.Object pop() -> pop
    boolean isEmpty() -> isEmpty
    void clear() -> clear
org.yaml.snakeyaml.util.Base64Coder -> org.yaml.snakeyaml.util.Base64Coder:
    char[] map1 -> map1
    byte[] map2 -> map2
    char[] encode(byte[]) -> encode
    byte[] decode(char[]) -> decode
org.yaml.snakeyaml.util.UriEncoder -> org.yaml.snakeyaml.util.UriEncoder:
    java.nio.charset.CharsetDecoder UTF8Decoder -> UTF8Decoder
    java.lang.String SAFE_CHARS -> SAFE_CHARS
    com.google.gdata.util.common.base.Escaper escaper -> escaper
    java.lang.String encode(java.lang.String) -> encode
    java.lang.String decode(java.nio.ByteBuffer) -> decode
    java.lang.String decode(java.lang.String) -> decode
